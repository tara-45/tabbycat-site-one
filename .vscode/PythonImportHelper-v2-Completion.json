[
    {
        "label": "runpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "runpy",
        "description": "runpy",
        "detail": "runpy",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "environ",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "ArgumentParser",
        "importPath": "argparse",
        "description": "argparse",
        "isExtraImport": true,
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "ArgumentParser",
        "importPath": "argparse",
        "description": "argparse",
        "isExtraImport": true,
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "ArgumentParser",
        "importPath": "argparse",
        "description": "argparse",
        "isExtraImport": true,
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "platform",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "platform",
        "description": "platform",
        "detail": "platform",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "os.path",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os.path",
        "description": "os.path",
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "abspath",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "dirname",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "join",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "relpath",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "BaseHTTPServer,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "BaseHTTPServer.",
        "description": "BaseHTTPServer.",
        "detail": "BaseHTTPServer.",
        "documentation": {}
    },
    {
        "label": "ssl",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ssl",
        "description": "ssl",
        "detail": "ssl",
        "documentation": {}
    },
    {
        "label": "sys,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys.",
        "description": "sys.",
        "detail": "sys.",
        "documentation": {}
    },
    {
        "label": "csv",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "csv",
        "description": "csv",
        "detail": "csv",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "formats",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "formats",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "formats",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "translation",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "ActionLogEntry",
        "importPath": "actionlog.models",
        "description": "actionlog.models",
        "isExtraImport": true,
        "detail": "actionlog.models",
        "documentation": {}
    },
    {
        "label": "ActionLogEntry",
        "importPath": "actionlog.models",
        "description": "actionlog.models",
        "isExtraImport": true,
        "detail": "actionlog.models",
        "documentation": {}
    },
    {
        "label": "ActionLogEntry",
        "importPath": "actionlog.models",
        "description": "actionlog.models",
        "isExtraImport": true,
        "detail": "actionlog.models",
        "documentation": {}
    },
    {
        "label": "ActionLogEntry",
        "importPath": "actionlog.models",
        "description": "actionlog.models",
        "isExtraImport": true,
        "detail": "actionlog.models",
        "documentation": {}
    },
    {
        "label": "ActionLogEntry",
        "importPath": "actionlog.models",
        "description": "actionlog.models",
        "isExtraImport": true,
        "detail": "actionlog.models",
        "documentation": {}
    },
    {
        "label": "ActionLogEntry",
        "importPath": "actionlog.models",
        "description": "actionlog.models",
        "isExtraImport": true,
        "detail": "actionlog.models",
        "documentation": {}
    },
    {
        "label": "ActionLogEntry",
        "importPath": "actionlog.models",
        "description": "actionlog.models",
        "isExtraImport": true,
        "detail": "actionlog.models",
        "documentation": {}
    },
    {
        "label": "ActionLogEntry",
        "importPath": "actionlog.models",
        "description": "actionlog.models",
        "isExtraImport": true,
        "detail": "actionlog.models",
        "documentation": {}
    },
    {
        "label": "ActionLogEntry",
        "importPath": "actionlog.models",
        "description": "actionlog.models",
        "isExtraImport": true,
        "detail": "actionlog.models",
        "documentation": {}
    },
    {
        "label": "ActionLogEntry",
        "importPath": "actionlog.models",
        "description": "actionlog.models",
        "isExtraImport": true,
        "detail": "actionlog.models",
        "documentation": {}
    },
    {
        "label": "ActionLogEntry",
        "importPath": "actionlog.models",
        "description": "actionlog.models",
        "isExtraImport": true,
        "detail": "actionlog.models",
        "documentation": {}
    },
    {
        "label": "ActionLogEntry",
        "importPath": "actionlog.models",
        "description": "actionlog.models",
        "isExtraImport": true,
        "detail": "actionlog.models",
        "documentation": {}
    },
    {
        "label": "ActionLogEntry",
        "importPath": "actionlog.models",
        "description": "actionlog.models",
        "isExtraImport": true,
        "detail": "actionlog.models",
        "documentation": {}
    },
    {
        "label": "ActionLogEntry",
        "importPath": "actionlog.models",
        "description": "actionlog.models",
        "isExtraImport": true,
        "detail": "actionlog.models",
        "documentation": {}
    },
    {
        "label": "ActionLogEntry",
        "importPath": "actionlog.models",
        "description": "actionlog.models",
        "isExtraImport": true,
        "detail": "actionlog.models",
        "documentation": {}
    },
    {
        "label": "ActionLogEntry",
        "importPath": "actionlog.models",
        "description": "actionlog.models",
        "isExtraImport": true,
        "detail": "actionlog.models",
        "documentation": {}
    },
    {
        "label": "ActionLogEntry",
        "importPath": "actionlog.models",
        "description": "actionlog.models",
        "isExtraImport": true,
        "detail": "actionlog.models",
        "documentation": {}
    },
    {
        "label": "ActionLogEntry",
        "importPath": "actionlog.models",
        "description": "actionlog.models",
        "isExtraImport": true,
        "detail": "actionlog.models",
        "documentation": {}
    },
    {
        "label": "ActionLogEntry",
        "importPath": "actionlog.models",
        "description": "actionlog.models",
        "isExtraImport": true,
        "detail": "actionlog.models",
        "documentation": {}
    },
    {
        "label": "ActionLogEntry",
        "importPath": "actionlog.models",
        "description": "actionlog.models",
        "isExtraImport": true,
        "detail": "actionlog.models",
        "documentation": {}
    },
    {
        "label": "TournamentCommand",
        "importPath": "utils.management.base",
        "description": "utils.management.base",
        "isExtraImport": true,
        "detail": "utils.management.base",
        "documentation": {}
    },
    {
        "label": "TournamentCommand",
        "importPath": "utils.management.base",
        "description": "utils.management.base",
        "isExtraImport": true,
        "detail": "utils.management.base",
        "documentation": {}
    },
    {
        "label": "RoundCommand",
        "importPath": "utils.management.base",
        "description": "utils.management.base",
        "isExtraImport": true,
        "detail": "utils.management.base",
        "documentation": {}
    },
    {
        "label": "RoundCommand",
        "importPath": "utils.management.base",
        "description": "utils.management.base",
        "isExtraImport": true,
        "detail": "utils.management.base",
        "documentation": {}
    },
    {
        "label": "TournamentCommand",
        "importPath": "utils.management.base",
        "description": "utils.management.base",
        "isExtraImport": true,
        "detail": "utils.management.base",
        "documentation": {}
    },
    {
        "label": "RoundCommand",
        "importPath": "utils.management.base",
        "description": "utils.management.base",
        "isExtraImport": true,
        "detail": "utils.management.base",
        "documentation": {}
    },
    {
        "label": "TournamentCommand",
        "importPath": "utils.management.base",
        "description": "utils.management.base",
        "isExtraImport": true,
        "detail": "utils.management.base",
        "documentation": {}
    },
    {
        "label": "TournamentCommand",
        "importPath": "utils.management.base",
        "description": "utils.management.base",
        "isExtraImport": true,
        "detail": "utils.management.base",
        "documentation": {}
    },
    {
        "label": "TournamentCommand",
        "importPath": "utils.management.base",
        "description": "utils.management.base",
        "isExtraImport": true,
        "detail": "utils.management.base",
        "documentation": {}
    },
    {
        "label": "TournamentCommand",
        "importPath": "utils.management.base",
        "description": "utils.management.base",
        "isExtraImport": true,
        "detail": "utils.management.base",
        "documentation": {}
    },
    {
        "label": "TournamentCommand",
        "importPath": "utils.management.base",
        "description": "utils.management.base",
        "isExtraImport": true,
        "detail": "utils.management.base",
        "documentation": {}
    },
    {
        "label": "RoundCommand",
        "importPath": "utils.management.base",
        "description": "utils.management.base",
        "isExtraImport": true,
        "detail": "utils.management.base",
        "documentation": {}
    },
    {
        "label": "CommandError",
        "importPath": "utils.management.base",
        "description": "utils.management.base",
        "isExtraImport": true,
        "detail": "utils.management.base",
        "documentation": {}
    },
    {
        "label": "RoundCommand",
        "importPath": "utils.management.base",
        "description": "utils.management.base",
        "isExtraImport": true,
        "detail": "utils.management.base",
        "documentation": {}
    },
    {
        "label": "TournamentCommand",
        "importPath": "utils.management.base",
        "description": "utils.management.base",
        "isExtraImport": true,
        "detail": "utils.management.base",
        "documentation": {}
    },
    {
        "label": "TournamentCommand",
        "importPath": "utils.management.base",
        "description": "utils.management.base",
        "isExtraImport": true,
        "detail": "utils.management.base",
        "documentation": {}
    },
    {
        "label": "TournamentCommand",
        "importPath": "utils.management.base",
        "description": "utils.management.base",
        "isExtraImport": true,
        "detail": "utils.management.base",
        "documentation": {}
    },
    {
        "label": "TournamentCommand",
        "importPath": "utils.management.base",
        "description": "utils.management.base",
        "isExtraImport": true,
        "detail": "utils.management.base",
        "documentation": {}
    },
    {
        "label": "TournamentCommand",
        "importPath": "utils.management.base",
        "description": "utils.management.base",
        "isExtraImport": true,
        "detail": "utils.management.base",
        "documentation": {}
    },
    {
        "label": "TournamentCommand",
        "importPath": "utils.management.base",
        "description": "utils.management.base",
        "isExtraImport": true,
        "detail": "utils.management.base",
        "documentation": {}
    },
    {
        "label": "TournamentCommand",
        "importPath": "utils.management.base",
        "description": "utils.management.base",
        "isExtraImport": true,
        "detail": "utils.management.base",
        "documentation": {}
    },
    {
        "label": "TournamentCommand",
        "importPath": "utils.management.base",
        "description": "utils.management.base",
        "isExtraImport": true,
        "detail": "utils.management.base",
        "documentation": {}
    },
    {
        "label": "TournamentCommand",
        "importPath": "utils.management.base",
        "description": "utils.management.base",
        "isExtraImport": true,
        "detail": "utils.management.base",
        "documentation": {}
    },
    {
        "label": "TournamentCommand",
        "importPath": "utils.management.base",
        "description": "utils.management.base",
        "isExtraImport": true,
        "detail": "utils.management.base",
        "documentation": {}
    },
    {
        "label": "TournamentCommand",
        "importPath": "utils.management.base",
        "description": "utils.management.base",
        "isExtraImport": true,
        "detail": "utils.management.base",
        "documentation": {}
    },
    {
        "label": "RoundCommand",
        "importPath": "utils.management.base",
        "description": "utils.management.base",
        "isExtraImport": true,
        "detail": "utils.management.base",
        "documentation": {}
    },
    {
        "label": "TournamentCommand",
        "importPath": "utils.management.base",
        "description": "utils.management.base",
        "isExtraImport": true,
        "detail": "utils.management.base",
        "documentation": {}
    },
    {
        "label": "TournamentCommand",
        "importPath": "utils.management.base",
        "description": "utils.management.base",
        "isExtraImport": true,
        "detail": "utils.management.base",
        "documentation": {}
    },
    {
        "label": "RoundCommand",
        "importPath": "utils.management.base",
        "description": "utils.management.base",
        "isExtraImport": true,
        "detail": "utils.management.base",
        "documentation": {}
    },
    {
        "label": "RoundCommand",
        "importPath": "utils.management.base",
        "description": "utils.management.base",
        "isExtraImport": true,
        "detail": "utils.management.base",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "CommandError",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "CommandError",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "CommandError",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "CommandError",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "CommandError",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "CommandError",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "CommandError",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "CommandError",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "CommandError",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "IntegrityError",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "IntegrityError",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "ProgrammingError",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "connection",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "ModelAdmin",
        "importPath": "utils.admin",
        "description": "utils.admin",
        "isExtraImport": true,
        "detail": "utils.admin",
        "documentation": {}
    },
    {
        "label": "ModelAdmin",
        "importPath": "utils.admin",
        "description": "utils.admin",
        "isExtraImport": true,
        "detail": "utils.admin",
        "documentation": {}
    },
    {
        "label": "custom_titled_filter",
        "importPath": "utils.admin",
        "description": "utils.admin",
        "isExtraImport": true,
        "detail": "utils.admin",
        "documentation": {}
    },
    {
        "label": "ModelAdmin",
        "importPath": "utils.admin",
        "description": "utils.admin",
        "isExtraImport": true,
        "detail": "utils.admin",
        "documentation": {}
    },
    {
        "label": "ModelAdmin",
        "importPath": "utils.admin",
        "description": "utils.admin",
        "isExtraImport": true,
        "detail": "utils.admin",
        "documentation": {}
    },
    {
        "label": "ModelAdmin",
        "importPath": "utils.admin",
        "description": "utils.admin",
        "isExtraImport": true,
        "detail": "utils.admin",
        "documentation": {}
    },
    {
        "label": "ModelAdmin",
        "importPath": "utils.admin",
        "description": "utils.admin",
        "isExtraImport": true,
        "detail": "utils.admin",
        "documentation": {}
    },
    {
        "label": "ModelAdmin",
        "importPath": "utils.admin",
        "description": "utils.admin",
        "isExtraImport": true,
        "detail": "utils.admin",
        "documentation": {}
    },
    {
        "label": "TabbycatModelAdminFieldsMixin",
        "importPath": "utils.admin",
        "description": "utils.admin",
        "isExtraImport": true,
        "detail": "utils.admin",
        "documentation": {}
    },
    {
        "label": "ModelAdmin",
        "importPath": "utils.admin",
        "description": "utils.admin",
        "isExtraImport": true,
        "detail": "utils.admin",
        "documentation": {}
    },
    {
        "label": "TabbycatModelAdminFieldsMixin",
        "importPath": "utils.admin",
        "description": "utils.admin",
        "isExtraImport": true,
        "detail": "utils.admin",
        "documentation": {}
    },
    {
        "label": "ModelAdmin",
        "importPath": "utils.admin",
        "description": "utils.admin",
        "isExtraImport": true,
        "detail": "utils.admin",
        "documentation": {}
    },
    {
        "label": "TabbycatModelAdminFieldsMixin",
        "importPath": "utils.admin",
        "description": "utils.admin",
        "isExtraImport": true,
        "detail": "utils.admin",
        "documentation": {}
    },
    {
        "label": "ModelAdmin",
        "importPath": "utils.admin",
        "description": "utils.admin",
        "isExtraImport": true,
        "detail": "utils.admin",
        "documentation": {}
    },
    {
        "label": "ModelAdmin",
        "importPath": "utils.admin",
        "description": "utils.admin",
        "isExtraImport": true,
        "detail": "utils.admin",
        "documentation": {}
    },
    {
        "label": "TabbycatModelAdminFieldsMixin",
        "importPath": "utils.admin",
        "description": "utils.admin",
        "isExtraImport": true,
        "detail": "utils.admin",
        "documentation": {}
    },
    {
        "label": "ModelAdmin",
        "importPath": "utils.admin",
        "description": "utils.admin",
        "isExtraImport": true,
        "detail": "utils.admin",
        "documentation": {}
    },
    {
        "label": "ModelAdmin",
        "importPath": "utils.admin",
        "description": "utils.admin",
        "isExtraImport": true,
        "detail": "utils.admin",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "ngettext",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "ngettext",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "ngettext",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "ngettext",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "ngettext",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "ngettext",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "ngettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "ngettext",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "ngettext",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "ngettext",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "ngettext",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "ngettext",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "ngettext",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "ngettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "ngettext",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "ngettext",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "ngettext",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "ngettext",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "ngettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "ngettext",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "ngettext",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "ngettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "ngettext",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "pgettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "ngettext",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "ngettext",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "JsonWebsocketConsumer",
        "importPath": "channels.generic.websocket",
        "description": "channels.generic.websocket",
        "isExtraImport": true,
        "detail": "channels.generic.websocket",
        "documentation": {}
    },
    {
        "label": "JsonWebsocketConsumer",
        "importPath": "channels.generic.websocket",
        "description": "channels.generic.websocket",
        "isExtraImport": true,
        "detail": "channels.generic.websocket",
        "documentation": {}
    },
    {
        "label": "JsonWebsocketConsumer",
        "importPath": "channels.generic.websocket",
        "description": "channels.generic.websocket",
        "isExtraImport": true,
        "detail": "channels.generic.websocket",
        "documentation": {}
    },
    {
        "label": "JsonWebsocketConsumer",
        "importPath": "channels.generic.websocket",
        "description": "channels.generic.websocket",
        "isExtraImport": true,
        "detail": "channels.generic.websocket",
        "documentation": {}
    },
    {
        "label": "TournamentWebsocketMixin",
        "importPath": "tournaments.mixins",
        "description": "tournaments.mixins",
        "isExtraImport": true,
        "detail": "tournaments.mixins",
        "documentation": {}
    },
    {
        "label": "DebateDragAndDropMixin",
        "importPath": "tournaments.mixins",
        "description": "tournaments.mixins",
        "isExtraImport": true,
        "detail": "tournaments.mixins",
        "documentation": {}
    },
    {
        "label": "TournamentMixin",
        "importPath": "tournaments.mixins",
        "description": "tournaments.mixins",
        "isExtraImport": true,
        "detail": "tournaments.mixins",
        "documentation": {}
    },
    {
        "label": "PersonalizablePublicTournamentPageMixin",
        "importPath": "tournaments.mixins",
        "description": "tournaments.mixins",
        "isExtraImport": true,
        "detail": "tournaments.mixins",
        "documentation": {}
    },
    {
        "label": "PublicTournamentPageMixin",
        "importPath": "tournaments.mixins",
        "description": "tournaments.mixins",
        "isExtraImport": true,
        "detail": "tournaments.mixins",
        "documentation": {}
    },
    {
        "label": "SingleObjectByRandomisedUrlMixin",
        "importPath": "tournaments.mixins",
        "description": "tournaments.mixins",
        "isExtraImport": true,
        "detail": "tournaments.mixins",
        "documentation": {}
    },
    {
        "label": "SingleObjectFromTournamentMixin",
        "importPath": "tournaments.mixins",
        "description": "tournaments.mixins",
        "isExtraImport": true,
        "detail": "tournaments.mixins",
        "documentation": {}
    },
    {
        "label": "TournamentMixin",
        "importPath": "tournaments.mixins",
        "description": "tournaments.mixins",
        "isExtraImport": true,
        "detail": "tournaments.mixins",
        "documentation": {}
    },
    {
        "label": "TournamentFromUrlMixin",
        "importPath": "tournaments.mixins",
        "description": "tournaments.mixins",
        "isExtraImport": true,
        "detail": "tournaments.mixins",
        "documentation": {}
    },
    {
        "label": "RoundMixin",
        "importPath": "tournaments.mixins",
        "description": "tournaments.mixins",
        "isExtraImport": true,
        "detail": "tournaments.mixins",
        "documentation": {}
    },
    {
        "label": "PublicTournamentPageMixin",
        "importPath": "tournaments.mixins",
        "description": "tournaments.mixins",
        "isExtraImport": true,
        "detail": "tournaments.mixins",
        "documentation": {}
    },
    {
        "label": "SingleObjectFromTournamentMixin",
        "importPath": "tournaments.mixins",
        "description": "tournaments.mixins",
        "isExtraImport": true,
        "detail": "tournaments.mixins",
        "documentation": {}
    },
    {
        "label": "TournamentMixin",
        "importPath": "tournaments.mixins",
        "description": "tournaments.mixins",
        "isExtraImport": true,
        "detail": "tournaments.mixins",
        "documentation": {}
    },
    {
        "label": "TournamentWebsocketMixin",
        "importPath": "tournaments.mixins",
        "description": "tournaments.mixins",
        "isExtraImport": true,
        "detail": "tournaments.mixins",
        "documentation": {}
    },
    {
        "label": "PublicTournamentPageMixin",
        "importPath": "tournaments.mixins",
        "description": "tournaments.mixins",
        "isExtraImport": true,
        "detail": "tournaments.mixins",
        "documentation": {}
    },
    {
        "label": "TournamentMixin",
        "importPath": "tournaments.mixins",
        "description": "tournaments.mixins",
        "isExtraImport": true,
        "detail": "tournaments.mixins",
        "documentation": {}
    },
    {
        "label": "RoundWebsocketMixin",
        "importPath": "tournaments.mixins",
        "description": "tournaments.mixins",
        "isExtraImport": true,
        "detail": "tournaments.mixins",
        "documentation": {}
    },
    {
        "label": "CurrentRoundMixin",
        "importPath": "tournaments.mixins",
        "description": "tournaments.mixins",
        "isExtraImport": true,
        "detail": "tournaments.mixins",
        "documentation": {}
    },
    {
        "label": "DebateDragAndDropMixin",
        "importPath": "tournaments.mixins",
        "description": "tournaments.mixins",
        "isExtraImport": true,
        "detail": "tournaments.mixins",
        "documentation": {}
    },
    {
        "label": "OptionalAssistantTournamentPageMixin",
        "importPath": "tournaments.mixins",
        "description": "tournaments.mixins",
        "isExtraImport": true,
        "detail": "tournaments.mixins",
        "documentation": {}
    },
    {
        "label": "PublicTournamentPageMixin",
        "importPath": "tournaments.mixins",
        "description": "tournaments.mixins",
        "isExtraImport": true,
        "detail": "tournaments.mixins",
        "documentation": {}
    },
    {
        "label": "RoundMixin",
        "importPath": "tournaments.mixins",
        "description": "tournaments.mixins",
        "isExtraImport": true,
        "detail": "tournaments.mixins",
        "documentation": {}
    },
    {
        "label": "TournamentMixin",
        "importPath": "tournaments.mixins",
        "description": "tournaments.mixins",
        "isExtraImport": true,
        "detail": "tournaments.mixins",
        "documentation": {}
    },
    {
        "label": "TournamentMixin",
        "importPath": "tournaments.mixins",
        "description": "tournaments.mixins",
        "isExtraImport": true,
        "detail": "tournaments.mixins",
        "documentation": {}
    },
    {
        "label": "CurrentRoundMixin",
        "importPath": "tournaments.mixins",
        "description": "tournaments.mixins",
        "isExtraImport": true,
        "detail": "tournaments.mixins",
        "documentation": {}
    },
    {
        "label": "OptionalAssistantTournamentPageMixin",
        "importPath": "tournaments.mixins",
        "description": "tournaments.mixins",
        "isExtraImport": true,
        "detail": "tournaments.mixins",
        "documentation": {}
    },
    {
        "label": "PublicTournamentPageMixin",
        "importPath": "tournaments.mixins",
        "description": "tournaments.mixins",
        "isExtraImport": true,
        "detail": "tournaments.mixins",
        "documentation": {}
    },
    {
        "label": "RoundMixin",
        "importPath": "tournaments.mixins",
        "description": "tournaments.mixins",
        "isExtraImport": true,
        "detail": "tournaments.mixins",
        "documentation": {}
    },
    {
        "label": "TournamentMixin",
        "importPath": "tournaments.mixins",
        "description": "tournaments.mixins",
        "isExtraImport": true,
        "detail": "tournaments.mixins",
        "documentation": {}
    },
    {
        "label": "RoundMixin",
        "importPath": "tournaments.mixins",
        "description": "tournaments.mixins",
        "isExtraImport": true,
        "detail": "tournaments.mixins",
        "documentation": {}
    },
    {
        "label": "TournamentMixin",
        "importPath": "tournaments.mixins",
        "description": "tournaments.mixins",
        "isExtraImport": true,
        "detail": "tournaments.mixins",
        "documentation": {}
    },
    {
        "label": "TournamentMixin",
        "importPath": "tournaments.mixins",
        "description": "tournaments.mixins",
        "isExtraImport": true,
        "detail": "tournaments.mixins",
        "documentation": {}
    },
    {
        "label": "PublicTournamentPageMixin",
        "importPath": "tournaments.mixins",
        "description": "tournaments.mixins",
        "isExtraImport": true,
        "detail": "tournaments.mixins",
        "documentation": {}
    },
    {
        "label": "SingleObjectFromTournamentMixin",
        "importPath": "tournaments.mixins",
        "description": "tournaments.mixins",
        "isExtraImport": true,
        "detail": "tournaments.mixins",
        "documentation": {}
    },
    {
        "label": "TournamentMixin",
        "importPath": "tournaments.mixins",
        "description": "tournaments.mixins",
        "isExtraImport": true,
        "detail": "tournaments.mixins",
        "documentation": {}
    },
    {
        "label": "CurrentRoundMixin",
        "importPath": "tournaments.mixins",
        "description": "tournaments.mixins",
        "isExtraImport": true,
        "detail": "tournaments.mixins",
        "documentation": {}
    },
    {
        "label": "OptionalAssistantTournamentPageMixin",
        "importPath": "tournaments.mixins",
        "description": "tournaments.mixins",
        "isExtraImport": true,
        "detail": "tournaments.mixins",
        "documentation": {}
    },
    {
        "label": "RoundMixin",
        "importPath": "tournaments.mixins",
        "description": "tournaments.mixins",
        "isExtraImport": true,
        "detail": "tournaments.mixins",
        "documentation": {}
    },
    {
        "label": "TournamentMixin",
        "importPath": "tournaments.mixins",
        "description": "tournaments.mixins",
        "isExtraImport": true,
        "detail": "tournaments.mixins",
        "documentation": {}
    },
    {
        "label": "PersonalizablePublicTournamentPageMixin",
        "importPath": "tournaments.mixins",
        "description": "tournaments.mixins",
        "isExtraImport": true,
        "detail": "tournaments.mixins",
        "documentation": {}
    },
    {
        "label": "SingleObjectByRandomisedUrlMixin",
        "importPath": "tournaments.mixins",
        "description": "tournaments.mixins",
        "isExtraImport": true,
        "detail": "tournaments.mixins",
        "documentation": {}
    },
    {
        "label": "TournamentMixin",
        "importPath": "tournaments.mixins",
        "description": "tournaments.mixins",
        "isExtraImport": true,
        "detail": "tournaments.mixins",
        "documentation": {}
    },
    {
        "label": "TournamentWebsocketMixin",
        "importPath": "tournaments.mixins",
        "description": "tournaments.mixins",
        "isExtraImport": true,
        "detail": "tournaments.mixins",
        "documentation": {}
    },
    {
        "label": "CurrentRoundMixin",
        "importPath": "tournaments.mixins",
        "description": "tournaments.mixins",
        "isExtraImport": true,
        "detail": "tournaments.mixins",
        "documentation": {}
    },
    {
        "label": "PersonalizablePublicTournamentPageMixin",
        "importPath": "tournaments.mixins",
        "description": "tournaments.mixins",
        "isExtraImport": true,
        "detail": "tournaments.mixins",
        "documentation": {}
    },
    {
        "label": "PublicTournamentPageMixin",
        "importPath": "tournaments.mixins",
        "description": "tournaments.mixins",
        "isExtraImport": true,
        "detail": "tournaments.mixins",
        "documentation": {}
    },
    {
        "label": "RoundMixin",
        "importPath": "tournaments.mixins",
        "description": "tournaments.mixins",
        "isExtraImport": true,
        "detail": "tournaments.mixins",
        "documentation": {}
    },
    {
        "label": "SingleObjectByRandomisedUrlMixin",
        "importPath": "tournaments.mixins",
        "description": "tournaments.mixins",
        "isExtraImport": true,
        "detail": "tournaments.mixins",
        "documentation": {}
    },
    {
        "label": "SingleObjectFromTournamentMixin",
        "importPath": "tournaments.mixins",
        "description": "tournaments.mixins",
        "isExtraImport": true,
        "detail": "tournaments.mixins",
        "documentation": {}
    },
    {
        "label": "TournamentMixin",
        "importPath": "tournaments.mixins",
        "description": "tournaments.mixins",
        "isExtraImport": true,
        "detail": "tournaments.mixins",
        "documentation": {}
    },
    {
        "label": "PublicTournamentPageMixin",
        "importPath": "tournaments.mixins",
        "description": "tournaments.mixins",
        "isExtraImport": true,
        "detail": "tournaments.mixins",
        "documentation": {}
    },
    {
        "label": "RoundMixin",
        "importPath": "tournaments.mixins",
        "description": "tournaments.mixins",
        "isExtraImport": true,
        "detail": "tournaments.mixins",
        "documentation": {}
    },
    {
        "label": "SingleObjectFromTournamentMixin",
        "importPath": "tournaments.mixins",
        "description": "tournaments.mixins",
        "isExtraImport": true,
        "detail": "tournaments.mixins",
        "documentation": {}
    },
    {
        "label": "TournamentMixin",
        "importPath": "tournaments.mixins",
        "description": "tournaments.mixins",
        "isExtraImport": true,
        "detail": "tournaments.mixins",
        "documentation": {}
    },
    {
        "label": "TournamentMixin",
        "importPath": "tournaments.mixins",
        "description": "tournaments.mixins",
        "isExtraImport": true,
        "detail": "tournaments.mixins",
        "documentation": {}
    },
    {
        "label": "SingleObjectByRandomisedUrlMixin",
        "importPath": "tournaments.mixins",
        "description": "tournaments.mixins",
        "isExtraImport": true,
        "detail": "tournaments.mixins",
        "documentation": {}
    },
    {
        "label": "DebateDragAndDropMixin",
        "importPath": "tournaments.mixins",
        "description": "tournaments.mixins",
        "isExtraImport": true,
        "detail": "tournaments.mixins",
        "documentation": {}
    },
    {
        "label": "TournamentMixin",
        "importPath": "tournaments.mixins",
        "description": "tournaments.mixins",
        "isExtraImport": true,
        "detail": "tournaments.mixins",
        "documentation": {}
    },
    {
        "label": "LoginRequiredWebsocketMixin",
        "importPath": "utils.mixins",
        "description": "utils.mixins",
        "isExtraImport": true,
        "detail": "utils.mixins",
        "documentation": {}
    },
    {
        "label": "AdministratorMixin",
        "importPath": "utils.mixins",
        "description": "utils.mixins",
        "isExtraImport": true,
        "detail": "utils.mixins",
        "documentation": {}
    },
    {
        "label": "AdministratorMixin",
        "importPath": "utils.mixins",
        "description": "utils.mixins",
        "isExtraImport": true,
        "detail": "utils.mixins",
        "documentation": {}
    },
    {
        "label": "AssistantMixin",
        "importPath": "utils.mixins",
        "description": "utils.mixins",
        "isExtraImport": true,
        "detail": "utils.mixins",
        "documentation": {}
    },
    {
        "label": "AdministratorMixin",
        "importPath": "utils.mixins",
        "description": "utils.mixins",
        "isExtraImport": true,
        "detail": "utils.mixins",
        "documentation": {}
    },
    {
        "label": "AdministratorMixin",
        "importPath": "utils.mixins",
        "description": "utils.mixins",
        "isExtraImport": true,
        "detail": "utils.mixins",
        "documentation": {}
    },
    {
        "label": "AdministratorMixin",
        "importPath": "utils.mixins",
        "description": "utils.mixins",
        "isExtraImport": true,
        "detail": "utils.mixins",
        "documentation": {}
    },
    {
        "label": "AssistantMixin",
        "importPath": "utils.mixins",
        "description": "utils.mixins",
        "isExtraImport": true,
        "detail": "utils.mixins",
        "documentation": {}
    },
    {
        "label": "SuperuserRequiredWebsocketMixin",
        "importPath": "utils.mixins",
        "description": "utils.mixins",
        "isExtraImport": true,
        "detail": "utils.mixins",
        "documentation": {}
    },
    {
        "label": "AdministratorMixin",
        "importPath": "utils.mixins",
        "description": "utils.mixins",
        "isExtraImport": true,
        "detail": "utils.mixins",
        "documentation": {}
    },
    {
        "label": "AdministratorMixin",
        "importPath": "utils.mixins",
        "description": "utils.mixins",
        "isExtraImport": true,
        "detail": "utils.mixins",
        "documentation": {}
    },
    {
        "label": "AdministratorMixin",
        "importPath": "utils.mixins",
        "description": "utils.mixins",
        "isExtraImport": true,
        "detail": "utils.mixins",
        "documentation": {}
    },
    {
        "label": "AdministratorMixin",
        "importPath": "utils.mixins",
        "description": "utils.mixins",
        "isExtraImport": true,
        "detail": "utils.mixins",
        "documentation": {}
    },
    {
        "label": "WarnAboutLegacySendgridConfigVarsMixin",
        "importPath": "utils.mixins",
        "description": "utils.mixins",
        "isExtraImport": true,
        "detail": "utils.mixins",
        "documentation": {}
    },
    {
        "label": "AdministratorMixin",
        "importPath": "utils.mixins",
        "description": "utils.mixins",
        "isExtraImport": true,
        "detail": "utils.mixins",
        "documentation": {}
    },
    {
        "label": "AdministratorMixin",
        "importPath": "utils.mixins",
        "description": "utils.mixins",
        "isExtraImport": true,
        "detail": "utils.mixins",
        "documentation": {}
    },
    {
        "label": "AssistantMixin",
        "importPath": "utils.mixins",
        "description": "utils.mixins",
        "isExtraImport": true,
        "detail": "utils.mixins",
        "documentation": {}
    },
    {
        "label": "AdministratorMixin",
        "importPath": "utils.mixins",
        "description": "utils.mixins",
        "isExtraImport": true,
        "detail": "utils.mixins",
        "documentation": {}
    },
    {
        "label": "AdministratorMixin",
        "importPath": "utils.mixins",
        "description": "utils.mixins",
        "isExtraImport": true,
        "detail": "utils.mixins",
        "documentation": {}
    },
    {
        "label": "LoginRequiredWebsocketMixin",
        "importPath": "utils.mixins",
        "description": "utils.mixins",
        "isExtraImport": true,
        "detail": "utils.mixins",
        "documentation": {}
    },
    {
        "label": "AdministratorMixin",
        "importPath": "utils.mixins",
        "description": "utils.mixins",
        "isExtraImport": true,
        "detail": "utils.mixins",
        "documentation": {}
    },
    {
        "label": "AssistantMixin",
        "importPath": "utils.mixins",
        "description": "utils.mixins",
        "isExtraImport": true,
        "detail": "utils.mixins",
        "documentation": {}
    },
    {
        "label": "AdministratorMixin",
        "importPath": "utils.mixins",
        "description": "utils.mixins",
        "isExtraImport": true,
        "detail": "utils.mixins",
        "documentation": {}
    },
    {
        "label": "AssistantMixin",
        "importPath": "utils.mixins",
        "description": "utils.mixins",
        "isExtraImport": true,
        "detail": "utils.mixins",
        "documentation": {}
    },
    {
        "label": "CacheMixin",
        "importPath": "utils.mixins",
        "description": "utils.mixins",
        "isExtraImport": true,
        "detail": "utils.mixins",
        "documentation": {}
    },
    {
        "label": "TabbycatPageTitlesMixin",
        "importPath": "utils.mixins",
        "description": "utils.mixins",
        "isExtraImport": true,
        "detail": "utils.mixins",
        "documentation": {}
    },
    {
        "label": "AdministratorMixin",
        "importPath": "utils.mixins",
        "description": "utils.mixins",
        "isExtraImport": true,
        "detail": "utils.mixins",
        "documentation": {}
    },
    {
        "label": "AssistantMixin",
        "importPath": "utils.mixins",
        "description": "utils.mixins",
        "isExtraImport": true,
        "detail": "utils.mixins",
        "documentation": {}
    },
    {
        "label": "CacheMixin",
        "importPath": "utils.mixins",
        "description": "utils.mixins",
        "isExtraImport": true,
        "detail": "utils.mixins",
        "documentation": {}
    },
    {
        "label": "TabbycatPageTitlesMixin",
        "importPath": "utils.mixins",
        "description": "utils.mixins",
        "isExtraImport": true,
        "detail": "utils.mixins",
        "documentation": {}
    },
    {
        "label": "WarnAboutDatabaseUseMixin",
        "importPath": "utils.mixins",
        "description": "utils.mixins",
        "isExtraImport": true,
        "detail": "utils.mixins",
        "documentation": {}
    },
    {
        "label": "WarnAboutLegacySendgridConfigVarsMixin",
        "importPath": "utils.mixins",
        "description": "utils.mixins",
        "isExtraImport": true,
        "detail": "utils.mixins",
        "documentation": {}
    },
    {
        "label": "AdministratorMixin",
        "importPath": "utils.mixins",
        "description": "utils.mixins",
        "isExtraImport": true,
        "detail": "utils.mixins",
        "documentation": {}
    },
    {
        "label": "AdministratorMixin",
        "importPath": "utils.mixins",
        "description": "utils.mixins",
        "isExtraImport": true,
        "detail": "utils.mixins",
        "documentation": {}
    },
    {
        "label": "async_to_sync",
        "importPath": "asgiref.sync",
        "description": "asgiref.sync",
        "isExtraImport": true,
        "detail": "asgiref.sync",
        "documentation": {}
    },
    {
        "label": "async_to_sync",
        "importPath": "asgiref.sync",
        "description": "asgiref.sync",
        "isExtraImport": true,
        "detail": "asgiref.sync",
        "documentation": {}
    },
    {
        "label": "async_to_sync",
        "importPath": "asgiref.sync",
        "description": "asgiref.sync",
        "isExtraImport": true,
        "detail": "asgiref.sync",
        "documentation": {}
    },
    {
        "label": "async_to_sync",
        "importPath": "asgiref.sync",
        "description": "asgiref.sync",
        "isExtraImport": true,
        "detail": "asgiref.sync",
        "documentation": {}
    },
    {
        "label": "async_to_sync",
        "importPath": "asgiref.sync",
        "description": "asgiref.sync",
        "isExtraImport": true,
        "detail": "asgiref.sync",
        "documentation": {}
    },
    {
        "label": "async_to_sync",
        "importPath": "asgiref.sync",
        "description": "asgiref.sync",
        "isExtraImport": true,
        "detail": "asgiref.sync",
        "documentation": {}
    },
    {
        "label": "async_to_sync",
        "importPath": "asgiref.sync",
        "description": "asgiref.sync",
        "isExtraImport": true,
        "detail": "asgiref.sync",
        "documentation": {}
    },
    {
        "label": "async_to_sync",
        "importPath": "asgiref.sync",
        "description": "asgiref.sync",
        "isExtraImport": true,
        "detail": "asgiref.sync",
        "documentation": {}
    },
    {
        "label": "async_to_sync",
        "importPath": "asgiref.sync",
        "description": "asgiref.sync",
        "isExtraImport": true,
        "detail": "asgiref.sync",
        "documentation": {}
    },
    {
        "label": "get_channel_layer",
        "importPath": "channels.layers",
        "description": "channels.layers",
        "isExtraImport": true,
        "detail": "channels.layers",
        "documentation": {}
    },
    {
        "label": "get_channel_layer",
        "importPath": "channels.layers",
        "description": "channels.layers",
        "isExtraImport": true,
        "detail": "channels.layers",
        "documentation": {}
    },
    {
        "label": "get_channel_layer",
        "importPath": "channels.layers",
        "description": "channels.layers",
        "isExtraImport": true,
        "detail": "channels.layers",
        "documentation": {}
    },
    {
        "label": "get_channel_layer",
        "importPath": "channels.layers",
        "description": "channels.layers",
        "isExtraImport": true,
        "detail": "channels.layers",
        "documentation": {}
    },
    {
        "label": "get_channel_layer",
        "importPath": "channels.layers",
        "description": "channels.layers",
        "isExtraImport": true,
        "detail": "channels.layers",
        "documentation": {}
    },
    {
        "label": "get_channel_layer",
        "importPath": "channels.layers",
        "description": "channels.layers",
        "isExtraImport": true,
        "detail": "channels.layers",
        "documentation": {}
    },
    {
        "label": "get_channel_layer",
        "importPath": "channels.layers",
        "description": "channels.layers",
        "isExtraImport": true,
        "detail": "channels.layers",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "login",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "ActionLogEntryConsumer",
        "importPath": "actionlog.consumers",
        "description": "actionlog.consumers",
        "isExtraImport": true,
        "detail": "actionlog.consumers",
        "documentation": {}
    },
    {
        "label": "ActionLogEntryConsumer",
        "importPath": "actionlog.consumers",
        "description": "actionlog.consumers",
        "isExtraImport": true,
        "detail": "actionlog.consumers",
        "documentation": {}
    },
    {
        "label": "tournaments.models",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tournaments.models",
        "description": "tournaments.models",
        "detail": "tournaments.models",
        "documentation": {}
    },
    {
        "label": "Round",
        "importPath": "tournaments.models",
        "description": "tournaments.models",
        "isExtraImport": true,
        "detail": "tournaments.models",
        "documentation": {}
    },
    {
        "label": "Tournament",
        "importPath": "tournaments.models",
        "description": "tournaments.models",
        "isExtraImport": true,
        "detail": "tournaments.models",
        "documentation": {}
    },
    {
        "label": "Round",
        "importPath": "tournaments.models",
        "description": "tournaments.models",
        "isExtraImport": true,
        "detail": "tournaments.models",
        "documentation": {}
    },
    {
        "label": "Round",
        "importPath": "tournaments.models",
        "description": "tournaments.models",
        "isExtraImport": true,
        "detail": "tournaments.models",
        "documentation": {}
    },
    {
        "label": "Round",
        "importPath": "tournaments.models",
        "description": "tournaments.models",
        "isExtraImport": true,
        "detail": "tournaments.models",
        "documentation": {}
    },
    {
        "label": "Tournament",
        "importPath": "tournaments.models",
        "description": "tournaments.models",
        "isExtraImport": true,
        "detail": "tournaments.models",
        "documentation": {}
    },
    {
        "label": "Round",
        "importPath": "tournaments.models",
        "description": "tournaments.models",
        "isExtraImport": true,
        "detail": "tournaments.models",
        "documentation": {}
    },
    {
        "label": "Round",
        "importPath": "tournaments.models",
        "description": "tournaments.models",
        "isExtraImport": true,
        "detail": "tournaments.models",
        "documentation": {}
    },
    {
        "label": "Round",
        "importPath": "tournaments.models",
        "description": "tournaments.models",
        "isExtraImport": true,
        "detail": "tournaments.models",
        "documentation": {}
    },
    {
        "label": "Round",
        "importPath": "tournaments.models",
        "description": "tournaments.models",
        "isExtraImport": true,
        "detail": "tournaments.models",
        "documentation": {}
    },
    {
        "label": "Tournament",
        "importPath": "tournaments.models",
        "description": "tournaments.models",
        "isExtraImport": true,
        "detail": "tournaments.models",
        "documentation": {}
    },
    {
        "label": "Round",
        "importPath": "tournaments.models",
        "description": "tournaments.models",
        "isExtraImport": true,
        "detail": "tournaments.models",
        "documentation": {}
    },
    {
        "label": "Tournament",
        "importPath": "tournaments.models",
        "description": "tournaments.models",
        "isExtraImport": true,
        "detail": "tournaments.models",
        "documentation": {}
    },
    {
        "label": "Round",
        "importPath": "tournaments.models",
        "description": "tournaments.models",
        "isExtraImport": true,
        "detail": "tournaments.models",
        "documentation": {}
    },
    {
        "label": "Tournament",
        "importPath": "tournaments.models",
        "description": "tournaments.models",
        "isExtraImport": true,
        "detail": "tournaments.models",
        "documentation": {}
    },
    {
        "label": "Round",
        "importPath": "tournaments.models",
        "description": "tournaments.models",
        "isExtraImport": true,
        "detail": "tournaments.models",
        "documentation": {}
    },
    {
        "label": "Tournament",
        "importPath": "tournaments.models",
        "description": "tournaments.models",
        "isExtraImport": true,
        "detail": "tournaments.models",
        "documentation": {}
    },
    {
        "label": "Round",
        "importPath": "tournaments.models",
        "description": "tournaments.models",
        "isExtraImport": true,
        "detail": "tournaments.models",
        "documentation": {}
    },
    {
        "label": "Round",
        "importPath": "tournaments.models",
        "description": "tournaments.models",
        "isExtraImport": true,
        "detail": "tournaments.models",
        "documentation": {}
    },
    {
        "label": "Round",
        "importPath": "tournaments.models",
        "description": "tournaments.models",
        "isExtraImport": true,
        "detail": "tournaments.models",
        "documentation": {}
    },
    {
        "label": "Round",
        "importPath": "tournaments.models",
        "description": "tournaments.models",
        "isExtraImport": true,
        "detail": "tournaments.models",
        "documentation": {}
    },
    {
        "label": "Round",
        "importPath": "tournaments.models",
        "description": "tournaments.models",
        "isExtraImport": true,
        "detail": "tournaments.models",
        "documentation": {}
    },
    {
        "label": "Round",
        "importPath": "tournaments.models",
        "description": "tournaments.models",
        "isExtraImport": true,
        "detail": "tournaments.models",
        "documentation": {}
    },
    {
        "label": "Round",
        "importPath": "tournaments.models",
        "description": "tournaments.models",
        "isExtraImport": true,
        "detail": "tournaments.models",
        "documentation": {}
    },
    {
        "label": "Tournament",
        "importPath": "tournaments.models",
        "description": "tournaments.models",
        "isExtraImport": true,
        "detail": "tournaments.models",
        "documentation": {}
    },
    {
        "label": "Round",
        "importPath": "tournaments.models",
        "description": "tournaments.models",
        "isExtraImport": true,
        "detail": "tournaments.models",
        "documentation": {}
    },
    {
        "label": "Tournament",
        "importPath": "tournaments.models",
        "description": "tournaments.models",
        "isExtraImport": true,
        "detail": "tournaments.models",
        "documentation": {}
    },
    {
        "label": "Tournament",
        "importPath": "tournaments.models",
        "description": "tournaments.models",
        "isExtraImport": true,
        "detail": "tournaments.models",
        "documentation": {}
    },
    {
        "label": "Round",
        "importPath": "tournaments.models",
        "description": "tournaments.models",
        "isExtraImport": true,
        "detail": "tournaments.models",
        "documentation": {}
    },
    {
        "label": "Tournament",
        "importPath": "tournaments.models",
        "description": "tournaments.models",
        "isExtraImport": true,
        "detail": "tournaments.models",
        "documentation": {}
    },
    {
        "label": "Round",
        "importPath": "tournaments.models",
        "description": "tournaments.models",
        "isExtraImport": true,
        "detail": "tournaments.models",
        "documentation": {}
    },
    {
        "label": "Round",
        "importPath": "tournaments.models",
        "description": "tournaments.models",
        "isExtraImport": true,
        "detail": "tournaments.models",
        "documentation": {}
    },
    {
        "label": "Round",
        "importPath": "tournaments.models",
        "description": "tournaments.models",
        "isExtraImport": true,
        "detail": "tournaments.models",
        "documentation": {}
    },
    {
        "label": "Tournament",
        "importPath": "tournaments.models",
        "description": "tournaments.models",
        "isExtraImport": true,
        "detail": "tournaments.models",
        "documentation": {}
    },
    {
        "label": "Tournament",
        "importPath": "tournaments.models",
        "description": "tournaments.models",
        "isExtraImport": true,
        "detail": "tournaments.models",
        "documentation": {}
    },
    {
        "label": "Tournament",
        "importPath": "tournaments.models",
        "description": "tournaments.models",
        "isExtraImport": true,
        "detail": "tournaments.models",
        "documentation": {}
    },
    {
        "label": "Tournament",
        "importPath": "tournaments.models",
        "description": "tournaments.models",
        "isExtraImport": true,
        "detail": "tournaments.models",
        "documentation": {}
    },
    {
        "label": "Tournament",
        "importPath": "tournaments.models",
        "description": "tournaments.models",
        "isExtraImport": true,
        "detail": "tournaments.models",
        "documentation": {}
    },
    {
        "label": "Tournament",
        "importPath": "tournaments.models",
        "description": "tournaments.models",
        "isExtraImport": true,
        "detail": "tournaments.models",
        "documentation": {}
    },
    {
        "label": "Tournament",
        "importPath": "tournaments.models",
        "description": "tournaments.models",
        "isExtraImport": true,
        "detail": "tournaments.models",
        "documentation": {}
    },
    {
        "label": "Tournament",
        "importPath": "tournaments.models",
        "description": "tournaments.models",
        "isExtraImport": true,
        "detail": "tournaments.models",
        "documentation": {}
    },
    {
        "label": "Tournament",
        "importPath": "tournaments.models",
        "description": "tournaments.models",
        "isExtraImport": true,
        "detail": "tournaments.models",
        "documentation": {}
    },
    {
        "label": "Round",
        "importPath": "tournaments.models",
        "description": "tournaments.models",
        "isExtraImport": true,
        "detail": "tournaments.models",
        "documentation": {}
    },
    {
        "label": "Round",
        "importPath": "tournaments.models",
        "description": "tournaments.models",
        "isExtraImport": true,
        "detail": "tournaments.models",
        "documentation": {}
    },
    {
        "label": "Round",
        "importPath": "tournaments.models",
        "description": "tournaments.models",
        "isExtraImport": true,
        "detail": "tournaments.models",
        "documentation": {}
    },
    {
        "label": "Round",
        "importPath": "tournaments.models",
        "description": "tournaments.models",
        "isExtraImport": true,
        "detail": "tournaments.models",
        "documentation": {}
    },
    {
        "label": "Round",
        "importPath": "tournaments.models",
        "description": "tournaments.models",
        "isExtraImport": true,
        "detail": "tournaments.models",
        "documentation": {}
    },
    {
        "label": "Tournament",
        "importPath": "tournaments.models",
        "description": "tournaments.models",
        "isExtraImport": true,
        "detail": "tournaments.models",
        "documentation": {}
    },
    {
        "label": "Round",
        "importPath": "tournaments.models",
        "description": "tournaments.models",
        "isExtraImport": true,
        "detail": "tournaments.models",
        "documentation": {}
    },
    {
        "label": "Tournament",
        "importPath": "tournaments.models",
        "description": "tournaments.models",
        "isExtraImport": true,
        "detail": "tournaments.models",
        "documentation": {}
    },
    {
        "label": "Tournament",
        "importPath": "tournaments.models",
        "description": "tournaments.models",
        "isExtraImport": true,
        "detail": "tournaments.models",
        "documentation": {}
    },
    {
        "label": "Tournament",
        "importPath": "tournaments.models",
        "description": "tournaments.models",
        "isExtraImport": true,
        "detail": "tournaments.models",
        "documentation": {}
    },
    {
        "label": "Round",
        "importPath": "tournaments.models",
        "description": "tournaments.models",
        "isExtraImport": true,
        "detail": "tournaments.models",
        "documentation": {}
    },
    {
        "label": "Round",
        "importPath": "tournaments.models",
        "description": "tournaments.models",
        "isExtraImport": true,
        "detail": "tournaments.models",
        "documentation": {}
    },
    {
        "label": "Tournament",
        "importPath": "tournaments.models",
        "description": "tournaments.models",
        "isExtraImport": true,
        "detail": "tournaments.models",
        "documentation": {}
    },
    {
        "label": "Round",
        "importPath": "tournaments.models",
        "description": "tournaments.models",
        "isExtraImport": true,
        "detail": "tournaments.models",
        "documentation": {}
    },
    {
        "label": "Round",
        "importPath": "tournaments.models",
        "description": "tournaments.models",
        "isExtraImport": true,
        "detail": "tournaments.models",
        "documentation": {}
    },
    {
        "label": "Round",
        "importPath": "tournaments.models",
        "description": "tournaments.models",
        "isExtraImport": true,
        "detail": "tournaments.models",
        "documentation": {}
    },
    {
        "label": "Round",
        "importPath": "tournaments.models",
        "description": "tournaments.models",
        "isExtraImport": true,
        "detail": "tournaments.models",
        "documentation": {}
    },
    {
        "label": "Round",
        "importPath": "tournaments.models",
        "description": "tournaments.models",
        "isExtraImport": true,
        "detail": "tournaments.models",
        "documentation": {}
    },
    {
        "label": "Tournament",
        "importPath": "tournaments.models",
        "description": "tournaments.models",
        "isExtraImport": true,
        "detail": "tournaments.models",
        "documentation": {}
    },
    {
        "label": "Round",
        "importPath": "tournaments.models",
        "description": "tournaments.models",
        "isExtraImport": true,
        "detail": "tournaments.models",
        "documentation": {}
    },
    {
        "label": "Tournament",
        "importPath": "tournaments.models",
        "description": "tournaments.models",
        "isExtraImport": true,
        "detail": "tournaments.models",
        "documentation": {}
    },
    {
        "label": "Round",
        "importPath": "tournaments.models",
        "description": "tournaments.models",
        "isExtraImport": true,
        "detail": "tournaments.models",
        "documentation": {}
    },
    {
        "label": "Tournament",
        "importPath": "tournaments.models",
        "description": "tournaments.models",
        "isExtraImport": true,
        "detail": "tournaments.models",
        "documentation": {}
    },
    {
        "label": "Round",
        "importPath": "tournaments.models",
        "description": "tournaments.models",
        "isExtraImport": true,
        "detail": "tournaments.models",
        "documentation": {}
    },
    {
        "label": "Round",
        "importPath": "tournaments.models",
        "description": "tournaments.models",
        "isExtraImport": true,
        "detail": "tournaments.models",
        "documentation": {}
    },
    {
        "label": "Round",
        "importPath": "tournaments.models",
        "description": "tournaments.models",
        "isExtraImport": true,
        "detail": "tournaments.models",
        "documentation": {}
    },
    {
        "label": "Tournament",
        "importPath": "tournaments.models",
        "description": "tournaments.models",
        "isExtraImport": true,
        "detail": "tournaments.models",
        "documentation": {}
    },
    {
        "label": "Tournament",
        "importPath": "tournaments.models",
        "description": "tournaments.models",
        "isExtraImport": true,
        "detail": "tournaments.models",
        "documentation": {}
    },
    {
        "label": "Round",
        "importPath": "tournaments.models",
        "description": "tournaments.models",
        "isExtraImport": true,
        "detail": "tournaments.models",
        "documentation": {}
    },
    {
        "label": "Tournament",
        "importPath": "tournaments.models",
        "description": "tournaments.models",
        "isExtraImport": true,
        "detail": "tournaments.models",
        "documentation": {}
    },
    {
        "label": "Tournament",
        "importPath": "tournaments.models",
        "description": "tournaments.models",
        "isExtraImport": true,
        "detail": "tournaments.models",
        "documentation": {}
    },
    {
        "label": "Round",
        "importPath": "tournaments.models",
        "description": "tournaments.models",
        "isExtraImport": true,
        "detail": "tournaments.models",
        "documentation": {}
    },
    {
        "label": "get_ip_address",
        "importPath": "utils.misc",
        "description": "utils.misc",
        "isExtraImport": true,
        "detail": "utils.misc",
        "documentation": {}
    },
    {
        "label": "badge_datetime_format",
        "importPath": "utils.misc",
        "description": "utils.misc",
        "isExtraImport": true,
        "detail": "utils.misc",
        "documentation": {}
    },
    {
        "label": "ranks_dictionary",
        "importPath": "utils.misc",
        "description": "utils.misc",
        "isExtraImport": true,
        "detail": "utils.misc",
        "documentation": {}
    },
    {
        "label": "redirect_tournament",
        "importPath": "utils.misc",
        "description": "utils.misc",
        "isExtraImport": true,
        "detail": "utils.misc",
        "documentation": {}
    },
    {
        "label": "reverse_tournament",
        "importPath": "utils.misc",
        "description": "utils.misc",
        "isExtraImport": true,
        "detail": "utils.misc",
        "documentation": {}
    },
    {
        "label": "reverse_tournament",
        "importPath": "utils.misc",
        "description": "utils.misc",
        "isExtraImport": true,
        "detail": "utils.misc",
        "documentation": {}
    },
    {
        "label": "reverse_tournament",
        "importPath": "utils.misc",
        "description": "utils.misc",
        "isExtraImport": true,
        "detail": "utils.misc",
        "documentation": {}
    },
    {
        "label": "reverse_round",
        "importPath": "utils.misc",
        "description": "utils.misc",
        "isExtraImport": true,
        "detail": "utils.misc",
        "documentation": {}
    },
    {
        "label": "reverse_tournament",
        "importPath": "utils.misc",
        "description": "utils.misc",
        "isExtraImport": true,
        "detail": "utils.misc",
        "documentation": {}
    },
    {
        "label": "reverse_round",
        "importPath": "utils.misc",
        "description": "utils.misc",
        "isExtraImport": true,
        "detail": "utils.misc",
        "documentation": {}
    },
    {
        "label": "reverse_tournament",
        "importPath": "utils.misc",
        "description": "utils.misc",
        "isExtraImport": true,
        "detail": "utils.misc",
        "documentation": {}
    },
    {
        "label": "generate_identifier_string",
        "importPath": "utils.misc",
        "description": "utils.misc",
        "isExtraImport": true,
        "detail": "utils.misc",
        "documentation": {}
    },
    {
        "label": "reverse_tournament",
        "importPath": "utils.misc",
        "description": "utils.misc",
        "isExtraImport": true,
        "detail": "utils.misc",
        "documentation": {}
    },
    {
        "label": "reverse_round",
        "importPath": "utils.misc",
        "description": "utils.misc",
        "isExtraImport": true,
        "detail": "utils.misc",
        "documentation": {}
    },
    {
        "label": "reverse_round",
        "importPath": "utils.misc",
        "description": "utils.misc",
        "isExtraImport": true,
        "detail": "utils.misc",
        "documentation": {}
    },
    {
        "label": "reverse_tournament",
        "importPath": "utils.misc",
        "description": "utils.misc",
        "isExtraImport": true,
        "detail": "utils.misc",
        "documentation": {}
    },
    {
        "label": "redirect_tournament",
        "importPath": "utils.misc",
        "description": "utils.misc",
        "isExtraImport": true,
        "detail": "utils.misc",
        "documentation": {}
    },
    {
        "label": "reverse_tournament",
        "importPath": "utils.misc",
        "description": "utils.misc",
        "isExtraImport": true,
        "detail": "utils.misc",
        "documentation": {}
    },
    {
        "label": "redirect_round",
        "importPath": "utils.misc",
        "description": "utils.misc",
        "isExtraImport": true,
        "detail": "utils.misc",
        "documentation": {}
    },
    {
        "label": "reverse_tournament",
        "importPath": "utils.misc",
        "description": "utils.misc",
        "isExtraImport": true,
        "detail": "utils.misc",
        "documentation": {}
    },
    {
        "label": "reverse_tournament",
        "importPath": "utils.misc",
        "description": "utils.misc",
        "isExtraImport": true,
        "detail": "utils.misc",
        "documentation": {}
    },
    {
        "label": "reverse_tournament",
        "importPath": "utils.misc",
        "description": "utils.misc",
        "isExtraImport": true,
        "detail": "utils.misc",
        "documentation": {}
    },
    {
        "label": "generate_identifier_string",
        "importPath": "utils.misc",
        "description": "utils.misc",
        "isExtraImport": true,
        "detail": "utils.misc",
        "documentation": {}
    },
    {
        "label": "redirect_tournament",
        "importPath": "utils.misc",
        "description": "utils.misc",
        "isExtraImport": true,
        "detail": "utils.misc",
        "documentation": {}
    },
    {
        "label": "reverse_tournament",
        "importPath": "utils.misc",
        "description": "utils.misc",
        "isExtraImport": true,
        "detail": "utils.misc",
        "documentation": {}
    },
    {
        "label": "reverse_tournament",
        "importPath": "utils.misc",
        "description": "utils.misc",
        "isExtraImport": true,
        "detail": "utils.misc",
        "documentation": {}
    },
    {
        "label": "generate_identifier_string",
        "importPath": "utils.misc",
        "description": "utils.misc",
        "isExtraImport": true,
        "detail": "utils.misc",
        "documentation": {}
    },
    {
        "label": "reverse_tournament",
        "importPath": "utils.misc",
        "description": "utils.misc",
        "isExtraImport": true,
        "detail": "utils.misc",
        "documentation": {}
    },
    {
        "label": "get_ip_address",
        "importPath": "utils.misc",
        "description": "utils.misc",
        "isExtraImport": true,
        "detail": "utils.misc",
        "documentation": {}
    },
    {
        "label": "badge_datetime_format",
        "importPath": "utils.misc",
        "description": "utils.misc",
        "isExtraImport": true,
        "detail": "utils.misc",
        "documentation": {}
    },
    {
        "label": "reverse_tournament",
        "importPath": "utils.misc",
        "description": "utils.misc",
        "isExtraImport": true,
        "detail": "utils.misc",
        "documentation": {}
    },
    {
        "label": "reverse_tournament",
        "importPath": "utils.misc",
        "description": "utils.misc",
        "isExtraImport": true,
        "detail": "utils.misc",
        "documentation": {}
    },
    {
        "label": "get_ip_address",
        "importPath": "utils.misc",
        "description": "utils.misc",
        "isExtraImport": true,
        "detail": "utils.misc",
        "documentation": {}
    },
    {
        "label": "reverse_round",
        "importPath": "utils.misc",
        "description": "utils.misc",
        "isExtraImport": true,
        "detail": "utils.misc",
        "documentation": {}
    },
    {
        "label": "reverse_tournament",
        "importPath": "utils.misc",
        "description": "utils.misc",
        "isExtraImport": true,
        "detail": "utils.misc",
        "documentation": {}
    },
    {
        "label": "reverse_tournament",
        "importPath": "utils.misc",
        "description": "utils.misc",
        "isExtraImport": true,
        "detail": "utils.misc",
        "documentation": {}
    },
    {
        "label": "add_query_string_parameter",
        "importPath": "utils.misc",
        "description": "utils.misc",
        "isExtraImport": true,
        "detail": "utils.misc",
        "documentation": {}
    },
    {
        "label": "redirect_tournament",
        "importPath": "utils.misc",
        "description": "utils.misc",
        "isExtraImport": true,
        "detail": "utils.misc",
        "documentation": {}
    },
    {
        "label": "reverse_round",
        "importPath": "utils.misc",
        "description": "utils.misc",
        "isExtraImport": true,
        "detail": "utils.misc",
        "documentation": {}
    },
    {
        "label": "reverse_tournament",
        "importPath": "utils.misc",
        "description": "utils.misc",
        "isExtraImport": true,
        "detail": "utils.misc",
        "documentation": {}
    },
    {
        "label": "reverse_round",
        "importPath": "utils.misc",
        "description": "utils.misc",
        "isExtraImport": true,
        "detail": "utils.misc",
        "documentation": {}
    },
    {
        "label": "redirect_round",
        "importPath": "utils.misc",
        "description": "utils.misc",
        "isExtraImport": true,
        "detail": "utils.misc",
        "documentation": {}
    },
    {
        "label": "redirect_tournament",
        "importPath": "utils.misc",
        "description": "utils.misc",
        "isExtraImport": true,
        "detail": "utils.misc",
        "documentation": {}
    },
    {
        "label": "reverse_round",
        "importPath": "utils.misc",
        "description": "utils.misc",
        "isExtraImport": true,
        "detail": "utils.misc",
        "documentation": {}
    },
    {
        "label": "reverse_tournament",
        "importPath": "utils.misc",
        "description": "utils.misc",
        "isExtraImport": true,
        "detail": "utils.misc",
        "documentation": {}
    },
    {
        "label": "reverse_tournament",
        "importPath": "utils.misc",
        "description": "utils.misc",
        "isExtraImport": true,
        "detail": "utils.misc",
        "documentation": {}
    },
    {
        "label": "reverse_round",
        "importPath": "utils.misc",
        "description": "utils.misc",
        "isExtraImport": true,
        "detail": "utils.misc",
        "documentation": {}
    },
    {
        "label": "reverse_tournament",
        "importPath": "utils.misc",
        "description": "utils.misc",
        "isExtraImport": true,
        "detail": "utils.misc",
        "documentation": {}
    },
    {
        "label": "add_query_string_parameter",
        "importPath": "utils.misc",
        "description": "utils.misc",
        "isExtraImport": true,
        "detail": "utils.misc",
        "documentation": {}
    },
    {
        "label": "reverse_tournament",
        "importPath": "utils.misc",
        "description": "utils.misc",
        "isExtraImport": true,
        "detail": "utils.misc",
        "documentation": {}
    },
    {
        "label": "ranks_dictionary",
        "importPath": "utils.misc",
        "description": "utils.misc",
        "isExtraImport": true,
        "detail": "utils.misc",
        "documentation": {}
    },
    {
        "label": "redirect_tournament",
        "importPath": "utils.misc",
        "description": "utils.misc",
        "isExtraImport": true,
        "detail": "utils.misc",
        "documentation": {}
    },
    {
        "label": "reverse_tournament",
        "importPath": "utils.misc",
        "description": "utils.misc",
        "isExtraImport": true,
        "detail": "utils.misc",
        "documentation": {}
    },
    {
        "label": "GenericForeignKey",
        "importPath": "django.contrib.contenttypes.fields",
        "description": "django.contrib.contenttypes.fields",
        "isExtraImport": true,
        "detail": "django.contrib.contenttypes.fields",
        "documentation": {}
    },
    {
        "label": "GenericForeignKey",
        "importPath": "django.contrib.contenttypes.fields",
        "description": "django.contrib.contenttypes.fields",
        "isExtraImport": true,
        "detail": "django.contrib.contenttypes.fields",
        "documentation": {}
    },
    {
        "label": "GenericRelation",
        "importPath": "django.contrib.contenttypes.fields",
        "description": "django.contrib.contenttypes.fields",
        "isExtraImport": true,
        "detail": "django.contrib.contenttypes.fields",
        "documentation": {}
    },
    {
        "label": "GenericForeignKey",
        "importPath": "django.contrib.contenttypes.fields",
        "description": "django.contrib.contenttypes.fields",
        "isExtraImport": true,
        "detail": "django.contrib.contenttypes.fields",
        "documentation": {}
    },
    {
        "label": "GenericRelation",
        "importPath": "django.contrib.contenttypes.fields",
        "description": "django.contrib.contenttypes.fields",
        "isExtraImport": true,
        "detail": "django.contrib.contenttypes.fields",
        "documentation": {}
    },
    {
        "label": "ContentType",
        "importPath": "django.contrib.contenttypes.models",
        "description": "django.contrib.contenttypes.models",
        "isExtraImport": true,
        "detail": "django.contrib.contenttypes.models",
        "documentation": {}
    },
    {
        "label": "ContentType",
        "importPath": "django.contrib.contenttypes.models",
        "description": "django.contrib.contenttypes.models",
        "isExtraImport": true,
        "detail": "django.contrib.contenttypes.models",
        "documentation": {}
    },
    {
        "label": "ContentType",
        "importPath": "django.contrib.contenttypes.models",
        "description": "django.contrib.contenttypes.models",
        "isExtraImport": true,
        "detail": "django.contrib.contenttypes.models",
        "documentation": {}
    },
    {
        "label": "ContentType",
        "importPath": "django.contrib.contenttypes.models",
        "description": "django.contrib.contenttypes.models",
        "isExtraImport": true,
        "detail": "django.contrib.contenttypes.models",
        "documentation": {}
    },
    {
        "label": "ContentType",
        "importPath": "django.contrib.contenttypes.models",
        "description": "django.contrib.contenttypes.models",
        "isExtraImport": true,
        "detail": "django.contrib.contenttypes.models",
        "documentation": {}
    },
    {
        "label": "ContentType",
        "importPath": "django.contrib.contenttypes.models",
        "description": "django.contrib.contenttypes.models",
        "isExtraImport": true,
        "detail": "django.contrib.contenttypes.models",
        "documentation": {}
    },
    {
        "label": "ContentType",
        "importPath": "django.contrib.contenttypes.models",
        "description": "django.contrib.contenttypes.models",
        "isExtraImport": true,
        "detail": "django.contrib.contenttypes.models",
        "documentation": {}
    },
    {
        "label": "ContentType",
        "importPath": "django.contrib.contenttypes.models",
        "description": "django.contrib.contenttypes.models",
        "isExtraImport": true,
        "detail": "django.contrib.contenttypes.models",
        "documentation": {}
    },
    {
        "label": "ContentType",
        "importPath": "django.contrib.contenttypes.models",
        "description": "django.contrib.contenttypes.models",
        "isExtraImport": true,
        "detail": "django.contrib.contenttypes.models",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ObjectDoesNotExist",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ObjectDoesNotExist",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ObjectDoesNotExist",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ObjectDoesNotExist",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ObjectDoesNotExist",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ObjectDoesNotExist",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "MultipleObjectsReturned",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ObjectDoesNotExist",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "FieldError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "MultipleObjectsReturned",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ObjectDoesNotExist",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ObjectDoesNotExist",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ObjectDoesNotExist",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ObjectDoesNotExist",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ObjectDoesNotExist",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ObjectDoesNotExist",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ImproperlyConfigured",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ImproperlyConfigured",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ImproperlyConfigured",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "use_team_code_names",
        "importPath": "options.utils",
        "description": "options.utils",
        "isExtraImport": true,
        "detail": "options.utils",
        "documentation": {}
    },
    {
        "label": "use_team_code_names",
        "importPath": "options.utils",
        "description": "options.utils",
        "isExtraImport": true,
        "detail": "options.utils",
        "documentation": {}
    },
    {
        "label": "use_team_code_names_data_entry",
        "importPath": "options.utils",
        "description": "options.utils",
        "isExtraImport": true,
        "detail": "options.utils",
        "documentation": {}
    },
    {
        "label": "use_team_code_names_data_entry",
        "importPath": "options.utils",
        "description": "options.utils",
        "isExtraImport": true,
        "detail": "options.utils",
        "documentation": {}
    },
    {
        "label": "use_team_code_names",
        "importPath": "options.utils",
        "description": "options.utils",
        "isExtraImport": true,
        "detail": "options.utils",
        "documentation": {}
    },
    {
        "label": "use_team_code_names",
        "importPath": "options.utils",
        "description": "options.utils",
        "isExtraImport": true,
        "detail": "options.utils",
        "documentation": {}
    },
    {
        "label": "use_team_code_names",
        "importPath": "options.utils",
        "description": "options.utils",
        "isExtraImport": true,
        "detail": "options.utils",
        "documentation": {}
    },
    {
        "label": "use_team_code_names_data_entry",
        "importPath": "options.utils",
        "description": "options.utils",
        "isExtraImport": true,
        "detail": "options.utils",
        "documentation": {}
    },
    {
        "label": "validate_metric_duplicates",
        "importPath": "options.utils",
        "description": "options.utils",
        "isExtraImport": true,
        "detail": "options.utils",
        "documentation": {}
    },
    {
        "label": "use_team_code_names",
        "importPath": "options.utils",
        "description": "options.utils",
        "isExtraImport": true,
        "detail": "options.utils",
        "documentation": {}
    },
    {
        "label": "use_team_code_names",
        "importPath": "options.utils",
        "description": "options.utils",
        "isExtraImport": true,
        "detail": "options.utils",
        "documentation": {}
    },
    {
        "label": "use_team_code_names",
        "importPath": "options.utils",
        "description": "options.utils",
        "isExtraImport": true,
        "detail": "options.utils",
        "documentation": {}
    },
    {
        "label": "use_team_code_names_data_entry",
        "importPath": "options.utils",
        "description": "options.utils",
        "isExtraImport": true,
        "detail": "options.utils",
        "documentation": {}
    },
    {
        "label": "use_team_code_names",
        "importPath": "options.utils",
        "description": "options.utils",
        "isExtraImport": true,
        "detail": "options.utils",
        "documentation": {}
    },
    {
        "label": "use_team_code_names",
        "importPath": "options.utils",
        "description": "options.utils",
        "isExtraImport": true,
        "detail": "options.utils",
        "documentation": {}
    },
    {
        "label": "use_team_code_names_data_entry",
        "importPath": "options.utils",
        "description": "options.utils",
        "isExtraImport": true,
        "detail": "options.utils",
        "documentation": {}
    },
    {
        "label": "use_team_code_names",
        "importPath": "options.utils",
        "description": "options.utils",
        "isExtraImport": true,
        "detail": "options.utils",
        "documentation": {}
    },
    {
        "label": "use_team_code_names",
        "importPath": "options.utils",
        "description": "options.utils",
        "isExtraImport": true,
        "detail": "options.utils",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "QuerySet",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "F",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Prefetch",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Prefetch",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "F",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Prefetch",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Prefetch",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Exists",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "OuterRef",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Prefetch",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Prefetch",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "F",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "QuerySet",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Prefetch",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Prefetch",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Prefetch",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Min",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Exists",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "OuterRef",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Prefetch",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Max",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Sum",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Prefetch",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "OuterRef",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Subquery",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "OuterRef",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Subquery",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Prefetch",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Avg",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "CharField",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "F",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Value",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "OuterRef",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Prefetch",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Subquery",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Prefetch",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Value",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Avg",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Value",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Max",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Prefetch",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Max",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Prefetch",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Exists",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "OuterRef",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Exists",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "OuterRef",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Prefetch",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "OuterRef",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Prefetch",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Subquery",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Max",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Window",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Aggregate",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Avg",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Case",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "CharField",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "F",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Value",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "When",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Case",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "F",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "When",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "F",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Window",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Prefetch",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Avg",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Case",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "F",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "FloatField",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Max",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Min",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "StdDev",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Sum",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "When",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Avg",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "F",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "FloatField",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "PositiveIntegerField",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "StdDev",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Sum",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Avg",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Prefetch",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Prefetch",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "F",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Prefetch",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "TextChoices",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Exists",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "OuterRef",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Prefetch",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Max",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Min",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "draw.models",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "draw.models",
        "description": "draw.models",
        "detail": "draw.models",
        "documentation": {}
    },
    {
        "label": "Debate",
        "importPath": "draw.models",
        "description": "draw.models",
        "isExtraImport": true,
        "detail": "draw.models",
        "documentation": {}
    },
    {
        "label": "DebateTeam",
        "importPath": "draw.models",
        "description": "draw.models",
        "isExtraImport": true,
        "detail": "draw.models",
        "documentation": {}
    },
    {
        "label": "Debate",
        "importPath": "draw.models",
        "description": "draw.models",
        "isExtraImport": true,
        "detail": "draw.models",
        "documentation": {}
    },
    {
        "label": "Debate",
        "importPath": "draw.models",
        "description": "draw.models",
        "isExtraImport": true,
        "detail": "draw.models",
        "documentation": {}
    },
    {
        "label": "Debate",
        "importPath": "draw.models",
        "description": "draw.models",
        "isExtraImport": true,
        "detail": "draw.models",
        "documentation": {}
    },
    {
        "label": "DebateTeam",
        "importPath": "draw.models",
        "description": "draw.models",
        "isExtraImport": true,
        "detail": "draw.models",
        "documentation": {}
    },
    {
        "label": "DebateTeam",
        "importPath": "draw.models",
        "description": "draw.models",
        "isExtraImport": true,
        "detail": "draw.models",
        "documentation": {}
    },
    {
        "label": "DebateTeam",
        "importPath": "draw.models",
        "description": "draw.models",
        "isExtraImport": true,
        "detail": "draw.models",
        "documentation": {}
    },
    {
        "label": "Debate",
        "importPath": "draw.models",
        "description": "draw.models",
        "isExtraImport": true,
        "detail": "draw.models",
        "documentation": {}
    },
    {
        "label": "DebateTeam",
        "importPath": "draw.models",
        "description": "draw.models",
        "isExtraImport": true,
        "detail": "draw.models",
        "documentation": {}
    },
    {
        "label": "DebateTeam",
        "importPath": "draw.models",
        "description": "draw.models",
        "isExtraImport": true,
        "detail": "draw.models",
        "documentation": {}
    },
    {
        "label": "Debate",
        "importPath": "draw.models",
        "description": "draw.models",
        "isExtraImport": true,
        "detail": "draw.models",
        "documentation": {}
    },
    {
        "label": "DebateTeam",
        "importPath": "draw.models",
        "description": "draw.models",
        "isExtraImport": true,
        "detail": "draw.models",
        "documentation": {}
    },
    {
        "label": "Debate",
        "importPath": "draw.models",
        "description": "draw.models",
        "isExtraImport": true,
        "detail": "draw.models",
        "documentation": {}
    },
    {
        "label": "DebateTeam",
        "importPath": "draw.models",
        "description": "draw.models",
        "isExtraImport": true,
        "detail": "draw.models",
        "documentation": {}
    },
    {
        "label": "Debate",
        "importPath": "draw.models",
        "description": "draw.models",
        "isExtraImport": true,
        "detail": "draw.models",
        "documentation": {}
    },
    {
        "label": "DebateTeam",
        "importPath": "draw.models",
        "description": "draw.models",
        "isExtraImport": true,
        "detail": "draw.models",
        "documentation": {}
    },
    {
        "label": "Debate",
        "importPath": "draw.models",
        "description": "draw.models",
        "isExtraImport": true,
        "detail": "draw.models",
        "documentation": {}
    },
    {
        "label": "DebateTeam",
        "importPath": "draw.models",
        "description": "draw.models",
        "isExtraImport": true,
        "detail": "draw.models",
        "documentation": {}
    },
    {
        "label": "DebateTeam",
        "importPath": "draw.models",
        "description": "draw.models",
        "isExtraImport": true,
        "detail": "draw.models",
        "documentation": {}
    },
    {
        "label": "Debate",
        "importPath": "draw.models",
        "description": "draw.models",
        "isExtraImport": true,
        "detail": "draw.models",
        "documentation": {}
    },
    {
        "label": "DebateTeam",
        "importPath": "draw.models",
        "description": "draw.models",
        "isExtraImport": true,
        "detail": "draw.models",
        "documentation": {}
    },
    {
        "label": "Debate",
        "importPath": "draw.models",
        "description": "draw.models",
        "isExtraImport": true,
        "detail": "draw.models",
        "documentation": {}
    },
    {
        "label": "DebateTeam",
        "importPath": "draw.models",
        "description": "draw.models",
        "isExtraImport": true,
        "detail": "draw.models",
        "documentation": {}
    },
    {
        "label": "Debate",
        "importPath": "draw.models",
        "description": "draw.models",
        "isExtraImport": true,
        "detail": "draw.models",
        "documentation": {}
    },
    {
        "label": "TeamSideAllocation",
        "importPath": "draw.models",
        "description": "draw.models",
        "isExtraImport": true,
        "detail": "draw.models",
        "documentation": {}
    },
    {
        "label": "Debate",
        "importPath": "draw.models",
        "description": "draw.models",
        "isExtraImport": true,
        "detail": "draw.models",
        "documentation": {}
    },
    {
        "label": "DebateTeam",
        "importPath": "draw.models",
        "description": "draw.models",
        "isExtraImport": true,
        "detail": "draw.models",
        "documentation": {}
    },
    {
        "label": "Debate",
        "importPath": "draw.models",
        "description": "draw.models",
        "isExtraImport": true,
        "detail": "draw.models",
        "documentation": {}
    },
    {
        "label": "Debate",
        "importPath": "draw.models",
        "description": "draw.models",
        "isExtraImport": true,
        "detail": "draw.models",
        "documentation": {}
    },
    {
        "label": "Debate",
        "importPath": "draw.models",
        "description": "draw.models",
        "isExtraImport": true,
        "detail": "draw.models",
        "documentation": {}
    },
    {
        "label": "Debate",
        "importPath": "draw.models",
        "description": "draw.models",
        "isExtraImport": true,
        "detail": "draw.models",
        "documentation": {}
    },
    {
        "label": "DebateTeam",
        "importPath": "draw.models",
        "description": "draw.models",
        "isExtraImport": true,
        "detail": "draw.models",
        "documentation": {}
    },
    {
        "label": "DebateTeam",
        "importPath": "draw.models",
        "description": "draw.models",
        "isExtraImport": true,
        "detail": "draw.models",
        "documentation": {}
    },
    {
        "label": "Debate",
        "importPath": "draw.models",
        "description": "draw.models",
        "isExtraImport": true,
        "detail": "draw.models",
        "documentation": {}
    },
    {
        "label": "Debate",
        "importPath": "draw.models",
        "description": "draw.models",
        "isExtraImport": true,
        "detail": "draw.models",
        "documentation": {}
    },
    {
        "label": "DebateTeam",
        "importPath": "draw.models",
        "description": "draw.models",
        "isExtraImport": true,
        "detail": "draw.models",
        "documentation": {}
    },
    {
        "label": "DebateTeam",
        "importPath": "draw.models",
        "description": "draw.models",
        "isExtraImport": true,
        "detail": "draw.models",
        "documentation": {}
    },
    {
        "label": "Debate",
        "importPath": "draw.models",
        "description": "draw.models",
        "isExtraImport": true,
        "detail": "draw.models",
        "documentation": {}
    },
    {
        "label": "Debate",
        "importPath": "draw.models",
        "description": "draw.models",
        "isExtraImport": true,
        "detail": "draw.models",
        "documentation": {}
    },
    {
        "label": "Debate",
        "importPath": "draw.models",
        "description": "draw.models",
        "isExtraImport": true,
        "detail": "draw.models",
        "documentation": {}
    },
    {
        "label": "DebateTeam",
        "importPath": "draw.models",
        "description": "draw.models",
        "isExtraImport": true,
        "detail": "draw.models",
        "documentation": {}
    },
    {
        "label": "DebateTeam",
        "importPath": "draw.models",
        "description": "draw.models",
        "isExtraImport": true,
        "detail": "draw.models",
        "documentation": {}
    },
    {
        "label": "Debate",
        "importPath": "draw.models",
        "description": "draw.models",
        "isExtraImport": true,
        "detail": "draw.models",
        "documentation": {}
    },
    {
        "label": "DebateTeam",
        "importPath": "draw.models",
        "description": "draw.models",
        "isExtraImport": true,
        "detail": "draw.models",
        "documentation": {}
    },
    {
        "label": "DebateTeam",
        "importPath": "draw.models",
        "description": "draw.models",
        "isExtraImport": true,
        "detail": "draw.models",
        "documentation": {}
    },
    {
        "label": "MultipleDebateTeamsError",
        "importPath": "draw.models",
        "description": "draw.models",
        "isExtraImport": true,
        "detail": "draw.models",
        "documentation": {}
    },
    {
        "label": "NoDebateTeamFoundError",
        "importPath": "draw.models",
        "description": "draw.models",
        "isExtraImport": true,
        "detail": "draw.models",
        "documentation": {}
    },
    {
        "label": "Debate",
        "importPath": "draw.models",
        "description": "draw.models",
        "isExtraImport": true,
        "detail": "draw.models",
        "documentation": {}
    },
    {
        "label": "Debate",
        "importPath": "draw.models",
        "description": "draw.models",
        "isExtraImport": true,
        "detail": "draw.models",
        "documentation": {}
    },
    {
        "label": "Debate",
        "importPath": "draw.models",
        "description": "draw.models",
        "isExtraImport": true,
        "detail": "draw.models",
        "documentation": {}
    },
    {
        "label": "Debate",
        "importPath": "draw.models",
        "description": "draw.models",
        "isExtraImport": true,
        "detail": "draw.models",
        "documentation": {}
    },
    {
        "label": "DebateTeam",
        "importPath": "draw.models",
        "description": "draw.models",
        "isExtraImport": true,
        "detail": "draw.models",
        "documentation": {}
    },
    {
        "label": "Debate",
        "importPath": "draw.models",
        "description": "draw.models",
        "isExtraImport": true,
        "detail": "draw.models",
        "documentation": {}
    },
    {
        "label": "participants.models",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "participants.models",
        "description": "participants.models",
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Team",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Adjudicator",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Team",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Adjudicator",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Team",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Adjudicator",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Team",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Adjudicator",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Region",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Adjudicator",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Institution",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Speaker",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Team",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Adjudicator",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Team",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Adjudicator",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Speaker",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Team",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Adjudicator",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Team",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Adjudicator",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Team",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Adjudicator",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Team",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Adjudicator",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Speaker",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Team",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Adjudicator",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Speaker",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Team",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Adjudicator",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Speaker",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Team",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Adjudicator",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Institution",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Region",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Speaker",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "SpeakerCategory",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Team",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Adjudicator",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Institution",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Speaker",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "SpeakerCategory",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Team",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Adjudicator",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Institution",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Adjudicator",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Team",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Adjudicator",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Team",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Speaker",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Team",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Person",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Person",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Speaker",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Team",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Adjudicator",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Speaker",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Team",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Adjudicator",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Institution",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Region",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Speaker",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "SpeakerCategory",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Team",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Adjudicator",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Institution",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Speaker",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Team",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Adjudicator",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Institution",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Person",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Team",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Team",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Speaker",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Person",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Person",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Speaker",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Institution",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Region",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Team",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Adjudicator",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Institution",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Speaker",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Adjudicator",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Team",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Institution",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Adjudicator",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Speaker",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Person",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Person",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Adjudicator",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Person",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Speaker",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Adjudicator",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Institution",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Speaker",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Team",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Speaker",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Team",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Adjudicator",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Adjudicator",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Institution",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Speaker",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Team",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Adjudicator",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Person",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Speaker",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "SpeakerCategory",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Team",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Speaker",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "SpeakerCategory",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Team",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Adjudicator",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Team",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Institution",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Speaker",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Person",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Adjudicator",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Institution",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Speaker",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "Team",
        "importPath": "participants.models",
        "description": "participants.models",
        "isExtraImport": true,
        "detail": "participants.models",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "shuffle",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "randint",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "exp",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "comb",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "munkres",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "munkres",
        "description": "munkres",
        "detail": "munkres",
        "documentation": {}
    },
    {
        "label": "Munkres",
        "importPath": "munkres",
        "description": "munkres",
        "isExtraImport": true,
        "detail": "munkres",
        "documentation": {}
    },
    {
        "label": "Munkres",
        "importPath": "munkres",
        "description": "munkres",
        "isExtraImport": true,
        "detail": "munkres",
        "documentation": {}
    },
    {
        "label": "registry",
        "importPath": "adjallocation.allocators",
        "description": "adjallocation.allocators",
        "isExtraImport": true,
        "detail": "adjallocation.allocators",
        "documentation": {}
    },
    {
        "label": "itertools",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "itertools",
        "description": "itertools",
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "zip_longest",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "combinations",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "product",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "groupby",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "combinations",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "product",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "groupby",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "groupby",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "groupby",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "accumulate",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "islice",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "chain",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "islice",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "zip_longest",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "product",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "zip_longest",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "product",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "groupby",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "groupby",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "product",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "product",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "groupby",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "product",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "combinations",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "groupby",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "groupby",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "groupby",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "copy_panels_to_debates",
        "importPath": "adjallocation.preformed",
        "description": "adjallocation.preformed",
        "isExtraImport": true,
        "detail": "adjallocation.preformed",
        "documentation": {}
    },
    {
        "label": "registry",
        "importPath": "adjallocation.preformed",
        "description": "adjallocation.preformed",
        "isExtraImport": true,
        "detail": "adjallocation.preformed",
        "documentation": {}
    },
    {
        "label": "adjallocation.models",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "adjallocation.models",
        "description": "adjallocation.models",
        "detail": "adjallocation.models",
        "documentation": {}
    },
    {
        "label": "AdjudicatorAdjudicatorConflict",
        "importPath": "adjallocation.models",
        "description": "adjallocation.models",
        "isExtraImport": true,
        "detail": "adjallocation.models",
        "documentation": {}
    },
    {
        "label": "AdjudicatorInstitutionConflict",
        "importPath": "adjallocation.models",
        "description": "adjallocation.models",
        "isExtraImport": true,
        "detail": "adjallocation.models",
        "documentation": {}
    },
    {
        "label": "AdjudicatorTeamConflict",
        "importPath": "adjallocation.models",
        "description": "adjallocation.models",
        "isExtraImport": true,
        "detail": "adjallocation.models",
        "documentation": {}
    },
    {
        "label": "TeamInstitutionConflict",
        "importPath": "adjallocation.models",
        "description": "adjallocation.models",
        "isExtraImport": true,
        "detail": "adjallocation.models",
        "documentation": {}
    },
    {
        "label": "PreformedPanelAdjudicator",
        "importPath": "adjallocation.models",
        "description": "adjallocation.models",
        "isExtraImport": true,
        "detail": "adjallocation.models",
        "documentation": {}
    },
    {
        "label": "DebateAdjudicator",
        "importPath": "adjallocation.models",
        "description": "adjallocation.models",
        "isExtraImport": true,
        "detail": "adjallocation.models",
        "documentation": {}
    },
    {
        "label": "AdjudicatorAdjudicatorConflict",
        "importPath": "adjallocation.models",
        "description": "adjallocation.models",
        "isExtraImport": true,
        "detail": "adjallocation.models",
        "documentation": {}
    },
    {
        "label": "AdjudicatorInstitutionConflict",
        "importPath": "adjallocation.models",
        "description": "adjallocation.models",
        "isExtraImport": true,
        "detail": "adjallocation.models",
        "documentation": {}
    },
    {
        "label": "AdjudicatorTeamConflict",
        "importPath": "adjallocation.models",
        "description": "adjallocation.models",
        "isExtraImport": true,
        "detail": "adjallocation.models",
        "documentation": {}
    },
    {
        "label": "TeamInstitutionConflict",
        "importPath": "adjallocation.models",
        "description": "adjallocation.models",
        "isExtraImport": true,
        "detail": "adjallocation.models",
        "documentation": {}
    },
    {
        "label": "DebateAdjudicator",
        "importPath": "adjallocation.models",
        "description": "adjallocation.models",
        "isExtraImport": true,
        "detail": "adjallocation.models",
        "documentation": {}
    },
    {
        "label": "DebateAdjudicator",
        "importPath": "adjallocation.models",
        "description": "adjallocation.models",
        "isExtraImport": true,
        "detail": "adjallocation.models",
        "documentation": {}
    },
    {
        "label": "DebateAdjudicator",
        "importPath": "adjallocation.models",
        "description": "adjallocation.models",
        "isExtraImport": true,
        "detail": "adjallocation.models",
        "documentation": {}
    },
    {
        "label": "DebateAdjudicator",
        "importPath": "adjallocation.models",
        "description": "adjallocation.models",
        "isExtraImport": true,
        "detail": "adjallocation.models",
        "documentation": {}
    },
    {
        "label": "DebateAdjudicator",
        "importPath": "adjallocation.models",
        "description": "adjallocation.models",
        "isExtraImport": true,
        "detail": "adjallocation.models",
        "documentation": {}
    },
    {
        "label": "DebateAdjudicator",
        "importPath": "adjallocation.models",
        "description": "adjallocation.models",
        "isExtraImport": true,
        "detail": "adjallocation.models",
        "documentation": {}
    },
    {
        "label": "DebateAdjudicator",
        "importPath": "adjallocation.models",
        "description": "adjallocation.models",
        "isExtraImport": true,
        "detail": "adjallocation.models",
        "documentation": {}
    },
    {
        "label": "DebateAdjudicator",
        "importPath": "adjallocation.models",
        "description": "adjallocation.models",
        "isExtraImport": true,
        "detail": "adjallocation.models",
        "documentation": {}
    },
    {
        "label": "DebateAdjudicator",
        "importPath": "adjallocation.models",
        "description": "adjallocation.models",
        "isExtraImport": true,
        "detail": "adjallocation.models",
        "documentation": {}
    },
    {
        "label": "PreformedPanel",
        "importPath": "adjallocation.models",
        "description": "adjallocation.models",
        "isExtraImport": true,
        "detail": "adjallocation.models",
        "documentation": {}
    },
    {
        "label": "PreformedPanel",
        "importPath": "adjallocation.models",
        "description": "adjallocation.models",
        "isExtraImport": true,
        "detail": "adjallocation.models",
        "documentation": {}
    },
    {
        "label": "DebateAdjudicator",
        "importPath": "adjallocation.models",
        "description": "adjallocation.models",
        "isExtraImport": true,
        "detail": "adjallocation.models",
        "documentation": {}
    },
    {
        "label": "DebateAdjudicator",
        "importPath": "adjallocation.models",
        "description": "adjallocation.models",
        "isExtraImport": true,
        "detail": "adjallocation.models",
        "documentation": {}
    },
    {
        "label": "AdjudicatorAdjudicatorConflict",
        "importPath": "adjallocation.models",
        "description": "adjallocation.models",
        "isExtraImport": true,
        "detail": "adjallocation.models",
        "documentation": {}
    },
    {
        "label": "DebateAdjudicator",
        "importPath": "adjallocation.models",
        "description": "adjallocation.models",
        "isExtraImport": true,
        "detail": "adjallocation.models",
        "documentation": {}
    },
    {
        "label": "AdjudicatorAdjudicatorConflict",
        "importPath": "adjallocation.models",
        "description": "adjallocation.models",
        "isExtraImport": true,
        "detail": "adjallocation.models",
        "documentation": {}
    },
    {
        "label": "AdjudicatorInstitutionConflict",
        "importPath": "adjallocation.models",
        "description": "adjallocation.models",
        "isExtraImport": true,
        "detail": "adjallocation.models",
        "documentation": {}
    },
    {
        "label": "AdjudicatorTeamConflict",
        "importPath": "adjallocation.models",
        "description": "adjallocation.models",
        "isExtraImport": true,
        "detail": "adjallocation.models",
        "documentation": {}
    },
    {
        "label": "TeamInstitutionConflict",
        "importPath": "adjallocation.models",
        "description": "adjallocation.models",
        "isExtraImport": true,
        "detail": "adjallocation.models",
        "documentation": {}
    },
    {
        "label": "DebateAdjudicator",
        "importPath": "adjallocation.models",
        "description": "adjallocation.models",
        "isExtraImport": true,
        "detail": "adjallocation.models",
        "documentation": {}
    },
    {
        "label": "DebateAdjudicator",
        "importPath": "adjallocation.models",
        "description": "adjallocation.models",
        "isExtraImport": true,
        "detail": "adjallocation.models",
        "documentation": {}
    },
    {
        "label": "DebateAdjudicator",
        "importPath": "adjallocation.models",
        "description": "adjallocation.models",
        "isExtraImport": true,
        "detail": "adjallocation.models",
        "documentation": {}
    },
    {
        "label": "DebateAdjudicator",
        "importPath": "adjallocation.models",
        "description": "adjallocation.models",
        "isExtraImport": true,
        "detail": "adjallocation.models",
        "documentation": {}
    },
    {
        "label": "DebateAdjudicator",
        "importPath": "adjallocation.models",
        "description": "adjallocation.models",
        "isExtraImport": true,
        "detail": "adjallocation.models",
        "documentation": {}
    },
    {
        "label": "DebateAdjudicator",
        "importPath": "adjallocation.models",
        "description": "adjallocation.models",
        "isExtraImport": true,
        "detail": "adjallocation.models",
        "documentation": {}
    },
    {
        "label": "DebateAdjudicator",
        "importPath": "adjallocation.models",
        "description": "adjallocation.models",
        "isExtraImport": true,
        "detail": "adjallocation.models",
        "documentation": {}
    },
    {
        "label": "DebateAdjudicator",
        "importPath": "adjallocation.models",
        "description": "adjallocation.models",
        "isExtraImport": true,
        "detail": "adjallocation.models",
        "documentation": {}
    },
    {
        "label": "DebateAdjudicator",
        "importPath": "adjallocation.models",
        "description": "adjallocation.models",
        "isExtraImport": true,
        "detail": "adjallocation.models",
        "documentation": {}
    },
    {
        "label": "DebateAdjudicator",
        "importPath": "adjallocation.models",
        "description": "adjallocation.models",
        "isExtraImport": true,
        "detail": "adjallocation.models",
        "documentation": {}
    },
    {
        "label": "DebateAdjudicator",
        "importPath": "adjallocation.models",
        "description": "adjallocation.models",
        "isExtraImport": true,
        "detail": "adjallocation.models",
        "documentation": {}
    },
    {
        "label": "utils.models",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "utils.models",
        "description": "utils.models",
        "detail": "utils.models",
        "documentation": {}
    },
    {
        "label": "UniqueConstraint",
        "importPath": "utils.models",
        "description": "utils.models",
        "isExtraImport": true,
        "detail": "utils.models",
        "documentation": {}
    },
    {
        "label": "UniqueConstraint",
        "importPath": "utils.models",
        "description": "utils.models",
        "isExtraImport": true,
        "detail": "utils.models",
        "documentation": {}
    },
    {
        "label": "UniqueConstraint",
        "importPath": "utils.models",
        "description": "utils.models",
        "isExtraImport": true,
        "detail": "utils.models",
        "documentation": {}
    },
    {
        "label": "UniqueConstraint",
        "importPath": "utils.models",
        "description": "utils.models",
        "isExtraImport": true,
        "detail": "utils.models",
        "documentation": {}
    },
    {
        "label": "UniqueConstraint",
        "importPath": "utils.models",
        "description": "utils.models",
        "isExtraImport": true,
        "detail": "utils.models",
        "documentation": {}
    },
    {
        "label": "UniqueConstraint",
        "importPath": "utils.models",
        "description": "utils.models",
        "isExtraImport": true,
        "detail": "utils.models",
        "documentation": {}
    },
    {
        "label": "UniqueConstraint",
        "importPath": "utils.models",
        "description": "utils.models",
        "isExtraImport": true,
        "detail": "utils.models",
        "documentation": {}
    },
    {
        "label": "UniqueConstraint",
        "importPath": "utils.models",
        "description": "utils.models",
        "isExtraImport": true,
        "detail": "utils.models",
        "documentation": {}
    },
    {
        "label": "UniqueConstraint",
        "importPath": "utils.models",
        "description": "utils.models",
        "isExtraImport": true,
        "detail": "utils.models",
        "documentation": {}
    },
    {
        "label": "UniqueConstraint",
        "importPath": "utils.models",
        "description": "utils.models",
        "isExtraImport": true,
        "detail": "utils.models",
        "documentation": {}
    },
    {
        "label": "calculate_live_thresholds",
        "importPath": "breakqual.utils",
        "description": "breakqual.utils",
        "isExtraImport": true,
        "detail": "breakqual.utils",
        "documentation": {}
    },
    {
        "label": "determine_liveness",
        "importPath": "breakqual.utils",
        "description": "breakqual.utils",
        "isExtraImport": true,
        "detail": "breakqual.utils",
        "documentation": {}
    },
    {
        "label": "calculate_live_thresholds",
        "importPath": "breakqual.utils",
        "description": "breakqual.utils",
        "isExtraImport": true,
        "detail": "breakqual.utils",
        "documentation": {}
    },
    {
        "label": "auto_make_break_rounds",
        "importPath": "breakqual.utils",
        "description": "breakqual.utils",
        "isExtraImport": true,
        "detail": "breakqual.utils",
        "documentation": {}
    },
    {
        "label": "calculate_live_thresholds",
        "importPath": "breakqual.utils",
        "description": "breakqual.utils",
        "isExtraImport": true,
        "detail": "breakqual.utils",
        "documentation": {}
    },
    {
        "label": "ispow2",
        "importPath": "draw.generator.utils",
        "description": "draw.generator.utils",
        "isExtraImport": true,
        "detail": "draw.generator.utils",
        "documentation": {}
    },
    {
        "label": "partial_break_round_split",
        "importPath": "draw.generator.utils",
        "description": "draw.generator.utils",
        "isExtraImport": true,
        "detail": "draw.generator.utils",
        "documentation": {}
    },
    {
        "label": "partial_break_round_split",
        "importPath": "draw.generator.utils",
        "description": "draw.generator.utils",
        "isExtraImport": true,
        "detail": "draw.generator.utils",
        "documentation": {}
    },
    {
        "label": "ispow2",
        "importPath": "draw.generator.utils",
        "description": "draw.generator.utils",
        "isExtraImport": true,
        "detail": "draw.generator.utils",
        "documentation": {}
    },
    {
        "label": "populate_win_counts",
        "importPath": "participants.prefetch",
        "description": "participants.prefetch",
        "isExtraImport": true,
        "detail": "participants.prefetch",
        "documentation": {}
    },
    {
        "label": "populate_win_counts",
        "importPath": "participants.prefetch",
        "description": "participants.prefetch",
        "isExtraImport": true,
        "detail": "participants.prefetch",
        "documentation": {}
    },
    {
        "label": "populate_feedback_scores",
        "importPath": "participants.prefetch",
        "description": "participants.prefetch",
        "isExtraImport": true,
        "detail": "participants.prefetch",
        "documentation": {}
    },
    {
        "label": "populate_feedback_scores",
        "importPath": "participants.prefetch",
        "description": "participants.prefetch",
        "isExtraImport": true,
        "detail": "participants.prefetch",
        "documentation": {}
    },
    {
        "label": "populate_win_counts",
        "importPath": "participants.prefetch",
        "description": "participants.prefetch",
        "isExtraImport": true,
        "detail": "participants.prefetch",
        "documentation": {}
    },
    {
        "label": "populate_win_counts",
        "importPath": "participants.prefetch",
        "description": "participants.prefetch",
        "isExtraImport": true,
        "detail": "participants.prefetch",
        "documentation": {}
    },
    {
        "label": "populate_win_counts",
        "importPath": "participants.prefetch",
        "description": "participants.prefetch",
        "isExtraImport": true,
        "detail": "participants.prefetch",
        "documentation": {}
    },
    {
        "label": "populate_win_counts",
        "importPath": "participants.prefetch",
        "description": "participants.prefetch",
        "isExtraImport": true,
        "detail": "participants.prefetch",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "RequestFactory",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "Client",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "tag",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "AdminTournamentViewSimpleLoadTestMixin",
        "importPath": "utils.tests",
        "description": "utils.tests",
        "isExtraImport": true,
        "detail": "utils.tests",
        "documentation": {}
    },
    {
        "label": "suppress_logs",
        "importPath": "utils.tests",
        "description": "utils.tests",
        "isExtraImport": true,
        "detail": "utils.tests",
        "documentation": {}
    },
    {
        "label": "ConditionalTableViewTestsMixin",
        "importPath": "utils.tests",
        "description": "utils.tests",
        "isExtraImport": true,
        "detail": "utils.tests",
        "documentation": {}
    },
    {
        "label": "CompletedTournamentTestMixin",
        "importPath": "utils.tests",
        "description": "utils.tests",
        "isExtraImport": true,
        "detail": "utils.tests",
        "documentation": {}
    },
    {
        "label": "CompletedTournamentTestMixin",
        "importPath": "utils.tests",
        "description": "utils.tests",
        "isExtraImport": true,
        "detail": "utils.tests",
        "documentation": {}
    },
    {
        "label": "BaseMinimalTournamentTestCase",
        "importPath": "utils.tests",
        "description": "utils.tests",
        "isExtraImport": true,
        "detail": "utils.tests",
        "documentation": {}
    },
    {
        "label": "ConditionalTableViewTestsMixin",
        "importPath": "utils.tests",
        "description": "utils.tests",
        "isExtraImport": true,
        "detail": "utils.tests",
        "documentation": {}
    },
    {
        "label": "suppress_logs",
        "importPath": "utils.tests",
        "description": "utils.tests",
        "isExtraImport": true,
        "detail": "utils.tests",
        "documentation": {}
    },
    {
        "label": "AdminTournamentViewSimpleLoadTestMixin",
        "importPath": "utils.tests",
        "description": "utils.tests",
        "isExtraImport": true,
        "detail": "utils.tests",
        "documentation": {}
    },
    {
        "label": "AssistantTournamentViewSimpleLoadTestMixin",
        "importPath": "utils.tests",
        "description": "utils.tests",
        "isExtraImport": true,
        "detail": "utils.tests",
        "documentation": {}
    },
    {
        "label": "ConditionalTournamentViewSimpleLoadTestMixin",
        "importPath": "utils.tests",
        "description": "utils.tests",
        "isExtraImport": true,
        "detail": "utils.tests",
        "documentation": {}
    },
    {
        "label": "suppress_logs",
        "importPath": "utils.tests",
        "description": "utils.tests",
        "isExtraImport": true,
        "detail": "utils.tests",
        "documentation": {}
    },
    {
        "label": "TournamentTestCase",
        "importPath": "utils.tests",
        "description": "utils.tests",
        "isExtraImport": true,
        "detail": "utils.tests",
        "documentation": {}
    },
    {
        "label": "BaseMinimalTournamentTestCase",
        "importPath": "utils.tests",
        "description": "utils.tests",
        "isExtraImport": true,
        "detail": "utils.tests",
        "documentation": {}
    },
    {
        "label": "AdminTournamentViewSimpleLoadTestMixin",
        "importPath": "utils.tests",
        "description": "utils.tests",
        "isExtraImport": true,
        "detail": "utils.tests",
        "documentation": {}
    },
    {
        "label": "CompletedTournamentTestMixin",
        "importPath": "utils.tests",
        "description": "utils.tests",
        "isExtraImport": true,
        "detail": "utils.tests",
        "documentation": {}
    },
    {
        "label": "ConditionalTableViewTestsMixin",
        "importPath": "utils.tests",
        "description": "utils.tests",
        "isExtraImport": true,
        "detail": "utils.tests",
        "documentation": {}
    },
    {
        "label": "TableViewTestsMixin",
        "importPath": "utils.tests",
        "description": "utils.tests",
        "isExtraImport": true,
        "detail": "utils.tests",
        "documentation": {}
    },
    {
        "label": "ConditionalTournamentViewSimpleLoadTestMixin",
        "importPath": "utils.tests",
        "description": "utils.tests",
        "isExtraImport": true,
        "detail": "utils.tests",
        "documentation": {}
    },
    {
        "label": "BaseMinimalTournamentTestCase",
        "importPath": "utils.tests",
        "description": "utils.tests",
        "isExtraImport": true,
        "detail": "utils.tests",
        "documentation": {}
    },
    {
        "label": "ConditionalTableViewTestsMixin",
        "importPath": "utils.tests",
        "description": "utils.tests",
        "isExtraImport": true,
        "detail": "utils.tests",
        "documentation": {}
    },
    {
        "label": "suppress_logs",
        "importPath": "utils.tests",
        "description": "utils.tests",
        "isExtraImport": true,
        "detail": "utils.tests",
        "documentation": {}
    },
    {
        "label": "ConditionalTableViewTestsMixin",
        "importPath": "utils.tests",
        "description": "utils.tests",
        "isExtraImport": true,
        "detail": "utils.tests",
        "documentation": {}
    },
    {
        "label": "suppress_logs",
        "importPath": "utils.tests",
        "description": "utils.tests",
        "isExtraImport": true,
        "detail": "utils.tests",
        "documentation": {}
    },
    {
        "label": "SeleniumTournamentTestCase",
        "importPath": "utils.tests",
        "description": "utils.tests",
        "isExtraImport": true,
        "detail": "utils.tests",
        "documentation": {}
    },
    {
        "label": "ConditionalTournamentViewSimpleLoadTestMixin",
        "importPath": "utils.tests",
        "description": "utils.tests",
        "isExtraImport": true,
        "detail": "utils.tests",
        "documentation": {}
    },
    {
        "label": "suppress_logs",
        "importPath": "utils.tests",
        "description": "utils.tests",
        "isExtraImport": true,
        "detail": "utils.tests",
        "documentation": {}
    },
    {
        "label": "SeleniumTournamentTestCase",
        "importPath": "utils.tests",
        "description": "utils.tests",
        "isExtraImport": true,
        "detail": "utils.tests",
        "documentation": {}
    },
    {
        "label": "AdminTournamentViewSimpleLoadTestMixin",
        "importPath": "utils.tests",
        "description": "utils.tests",
        "isExtraImport": true,
        "detail": "utils.tests",
        "documentation": {}
    },
    {
        "label": "warnings",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "warnings",
        "description": "warnings",
        "detail": "warnings",
        "documentation": {}
    },
    {
        "label": "warn",
        "importPath": "warnings",
        "description": "warnings",
        "isExtraImport": true,
        "detail": "warnings",
        "documentation": {}
    },
    {
        "label": "warn",
        "importPath": "warnings",
        "description": "warnings",
        "isExtraImport": true,
        "detail": "warnings",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypedDict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Set",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "operator",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "operator",
        "description": "operator",
        "detail": "operator",
        "documentation": {}
    },
    {
        "label": "attrgetter",
        "importPath": "operator",
        "description": "operator",
        "isExtraImport": true,
        "detail": "operator",
        "documentation": {}
    },
    {
        "label": "attrgetter",
        "importPath": "operator",
        "description": "operator",
        "isExtraImport": true,
        "detail": "operator",
        "documentation": {}
    },
    {
        "label": "attrgetter",
        "importPath": "operator",
        "description": "operator",
        "isExtraImport": true,
        "detail": "operator",
        "documentation": {}
    },
    {
        "label": "attrgetter",
        "importPath": "operator",
        "description": "operator",
        "isExtraImport": true,
        "detail": "operator",
        "documentation": {}
    },
    {
        "label": "add",
        "importPath": "operator",
        "description": "operator",
        "isExtraImport": true,
        "detail": "operator",
        "documentation": {}
    },
    {
        "label": "itemgetter",
        "importPath": "operator",
        "description": "operator",
        "isExtraImport": true,
        "detail": "operator",
        "documentation": {}
    },
    {
        "label": "mark_safe",
        "importPath": "django.utils.safestring",
        "description": "django.utils.safestring",
        "isExtraImport": true,
        "detail": "django.utils.safestring",
        "documentation": {}
    },
    {
        "label": "mark_safe",
        "importPath": "django.utils.safestring",
        "description": "django.utils.safestring",
        "isExtraImport": true,
        "detail": "django.utils.safestring",
        "documentation": {}
    },
    {
        "label": "mark_safe",
        "importPath": "django.utils.safestring",
        "description": "django.utils.safestring",
        "isExtraImport": true,
        "detail": "django.utils.safestring",
        "documentation": {}
    },
    {
        "label": "mark_safe",
        "importPath": "django.utils.safestring",
        "description": "django.utils.safestring",
        "isExtraImport": true,
        "detail": "django.utils.safestring",
        "documentation": {}
    },
    {
        "label": "mark_safe",
        "importPath": "django.utils.safestring",
        "description": "django.utils.safestring",
        "isExtraImport": true,
        "detail": "django.utils.safestring",
        "documentation": {}
    },
    {
        "label": "mark_safe",
        "importPath": "django.utils.safestring",
        "description": "django.utils.safestring",
        "isExtraImport": true,
        "detail": "django.utils.safestring",
        "documentation": {}
    },
    {
        "label": "mark_safe",
        "importPath": "django.utils.safestring",
        "description": "django.utils.safestring",
        "isExtraImport": true,
        "detail": "django.utils.safestring",
        "documentation": {}
    },
    {
        "label": "mark_safe",
        "importPath": "django.utils.safestring",
        "description": "django.utils.safestring",
        "isExtraImport": true,
        "detail": "django.utils.safestring",
        "documentation": {}
    },
    {
        "label": "BaseAdjudicatorContainerConsumer",
        "importPath": "draw.consumers",
        "description": "draw.consumers",
        "isExtraImport": true,
        "detail": "draw.consumers",
        "documentation": {}
    },
    {
        "label": "EditDebateOrPanelWorkerMixin",
        "importPath": "draw.consumers",
        "description": "draw.consumers",
        "isExtraImport": true,
        "detail": "draw.consumers",
        "documentation": {}
    },
    {
        "label": "EditDebateOrPanelWorkerMixin",
        "importPath": "draw.consumers",
        "description": "draw.consumers",
        "isExtraImport": true,
        "detail": "draw.consumers",
        "documentation": {}
    },
    {
        "label": "DebateEditConsumer",
        "importPath": "draw.consumers",
        "description": "draw.consumers",
        "isExtraImport": true,
        "detail": "draw.consumers",
        "documentation": {}
    },
    {
        "label": "Permission",
        "importPath": "users.permissions",
        "description": "users.permissions",
        "isExtraImport": true,
        "detail": "users.permissions",
        "documentation": {}
    },
    {
        "label": "has_permission",
        "importPath": "users.permissions",
        "description": "users.permissions",
        "isExtraImport": true,
        "detail": "users.permissions",
        "documentation": {}
    },
    {
        "label": "Permission",
        "importPath": "users.permissions",
        "description": "users.permissions",
        "isExtraImport": true,
        "detail": "users.permissions",
        "documentation": {}
    },
    {
        "label": "Permission",
        "importPath": "users.permissions",
        "description": "users.permissions",
        "isExtraImport": true,
        "detail": "users.permissions",
        "documentation": {}
    },
    {
        "label": "has_permission",
        "importPath": "users.permissions",
        "description": "users.permissions",
        "isExtraImport": true,
        "detail": "users.permissions",
        "documentation": {}
    },
    {
        "label": "has_permission",
        "importPath": "users.permissions",
        "description": "users.permissions",
        "isExtraImport": true,
        "detail": "users.permissions",
        "documentation": {}
    },
    {
        "label": "Permission",
        "importPath": "users.permissions",
        "description": "users.permissions",
        "isExtraImport": true,
        "detail": "users.permissions",
        "documentation": {}
    },
    {
        "label": "get_permissions",
        "importPath": "users.permissions",
        "description": "users.permissions",
        "isExtraImport": true,
        "detail": "users.permissions",
        "documentation": {}
    },
    {
        "label": "Permission",
        "importPath": "users.permissions",
        "description": "users.permissions",
        "isExtraImport": true,
        "detail": "users.permissions",
        "documentation": {}
    },
    {
        "label": "Permission",
        "importPath": "users.permissions",
        "description": "users.permissions",
        "isExtraImport": true,
        "detail": "users.permissions",
        "documentation": {}
    },
    {
        "label": "Permission",
        "importPath": "users.permissions",
        "description": "users.permissions",
        "isExtraImport": true,
        "detail": "users.permissions",
        "documentation": {}
    },
    {
        "label": "has_permission",
        "importPath": "users.permissions",
        "description": "users.permissions",
        "isExtraImport": true,
        "detail": "users.permissions",
        "documentation": {}
    },
    {
        "label": "Permission",
        "importPath": "users.permissions",
        "description": "users.permissions",
        "isExtraImport": true,
        "detail": "users.permissions",
        "documentation": {}
    },
    {
        "label": "Permission",
        "importPath": "users.permissions",
        "description": "users.permissions",
        "isExtraImport": true,
        "detail": "users.permissions",
        "documentation": {}
    },
    {
        "label": "Permission",
        "importPath": "users.permissions",
        "description": "users.permissions",
        "isExtraImport": true,
        "detail": "users.permissions",
        "documentation": {}
    },
    {
        "label": "Permission",
        "importPath": "users.permissions",
        "description": "users.permissions",
        "isExtraImport": true,
        "detail": "users.permissions",
        "documentation": {}
    },
    {
        "label": "Permission",
        "importPath": "users.permissions",
        "description": "users.permissions",
        "isExtraImport": true,
        "detail": "users.permissions",
        "documentation": {}
    },
    {
        "label": "Permission",
        "importPath": "users.permissions",
        "description": "users.permissions",
        "isExtraImport": true,
        "detail": "users.permissions",
        "documentation": {}
    },
    {
        "label": "Permission",
        "importPath": "users.permissions",
        "description": "users.permissions",
        "isExtraImport": true,
        "detail": "users.permissions",
        "documentation": {}
    },
    {
        "label": "Permission",
        "importPath": "users.permissions",
        "description": "users.permissions",
        "isExtraImport": true,
        "detail": "users.permissions",
        "documentation": {}
    },
    {
        "label": "has_permission",
        "importPath": "users.permissions",
        "description": "users.permissions",
        "isExtraImport": true,
        "detail": "users.permissions",
        "documentation": {}
    },
    {
        "label": "Permission",
        "importPath": "users.permissions",
        "description": "users.permissions",
        "isExtraImport": true,
        "detail": "users.permissions",
        "documentation": {}
    },
    {
        "label": "Permission",
        "importPath": "users.permissions",
        "description": "users.permissions",
        "isExtraImport": true,
        "detail": "users.permissions",
        "documentation": {}
    },
    {
        "label": "Permission",
        "importPath": "users.permissions",
        "description": "users.permissions",
        "isExtraImport": true,
        "detail": "users.permissions",
        "documentation": {}
    },
    {
        "label": "Permission",
        "importPath": "users.permissions",
        "description": "users.permissions",
        "isExtraImport": true,
        "detail": "users.permissions",
        "documentation": {}
    },
    {
        "label": "Permission",
        "importPath": "users.permissions",
        "description": "users.permissions",
        "isExtraImport": true,
        "detail": "users.permissions",
        "documentation": {}
    },
    {
        "label": "Permission",
        "importPath": "users.permissions",
        "description": "users.permissions",
        "isExtraImport": true,
        "detail": "users.permissions",
        "documentation": {}
    },
    {
        "label": "Permission",
        "importPath": "users.permissions",
        "description": "users.permissions",
        "isExtraImport": true,
        "detail": "users.permissions",
        "documentation": {}
    },
    {
        "label": "has_permission",
        "importPath": "users.permissions",
        "description": "users.permissions",
        "isExtraImport": true,
        "detail": "users.permissions",
        "documentation": {}
    },
    {
        "label": "has_permission",
        "importPath": "users.permissions",
        "description": "users.permissions",
        "isExtraImport": true,
        "detail": "users.permissions",
        "documentation": {}
    },
    {
        "label": "has_permission",
        "importPath": "users.permissions",
        "description": "users.permissions",
        "isExtraImport": true,
        "detail": "users.permissions",
        "documentation": {}
    },
    {
        "label": "has_permission",
        "importPath": "users.permissions",
        "description": "users.permissions",
        "isExtraImport": true,
        "detail": "users.permissions",
        "documentation": {}
    },
    {
        "label": "Permission",
        "importPath": "users.permissions",
        "description": "users.permissions",
        "isExtraImport": true,
        "detail": "users.permissions",
        "documentation": {}
    },
    {
        "label": "Permission",
        "importPath": "users.permissions",
        "description": "users.permissions",
        "isExtraImport": true,
        "detail": "users.permissions",
        "documentation": {}
    },
    {
        "label": "escape",
        "importPath": "django.utils.html",
        "description": "django.utils.html",
        "isExtraImport": true,
        "detail": "django.utils.html",
        "documentation": {}
    },
    {
        "label": "escape",
        "importPath": "django.utils.html",
        "description": "django.utils.html",
        "isExtraImport": true,
        "detail": "django.utils.html",
        "documentation": {}
    },
    {
        "label": "escape",
        "importPath": "django.utils.html",
        "description": "django.utils.html",
        "isExtraImport": true,
        "detail": "django.utils.html",
        "documentation": {}
    },
    {
        "label": "conditional_escape",
        "importPath": "django.utils.html",
        "description": "django.utils.html",
        "isExtraImport": true,
        "detail": "django.utils.html",
        "documentation": {}
    },
    {
        "label": "escape",
        "importPath": "django.utils.html",
        "description": "django.utils.html",
        "isExtraImport": true,
        "detail": "django.utils.html",
        "documentation": {}
    },
    {
        "label": "escape",
        "importPath": "django.utils.html",
        "description": "django.utils.html",
        "isExtraImport": true,
        "detail": "django.utils.html",
        "documentation": {}
    },
    {
        "label": "escape",
        "importPath": "django.utils.html",
        "description": "django.utils.html",
        "isExtraImport": true,
        "detail": "django.utils.html",
        "documentation": {}
    },
    {
        "label": "format_html",
        "importPath": "django.utils.html",
        "description": "django.utils.html",
        "isExtraImport": true,
        "detail": "django.utils.html",
        "documentation": {}
    },
    {
        "label": "escape",
        "importPath": "django.utils.html",
        "description": "django.utils.html",
        "isExtraImport": true,
        "detail": "django.utils.html",
        "documentation": {}
    },
    {
        "label": "format_html",
        "importPath": "django.utils.html",
        "description": "django.utils.html",
        "isExtraImport": true,
        "detail": "django.utils.html",
        "documentation": {}
    },
    {
        "label": "escape",
        "importPath": "django.utils.html",
        "description": "django.utils.html",
        "isExtraImport": true,
        "detail": "django.utils.html",
        "documentation": {}
    },
    {
        "label": "escape",
        "importPath": "django.utils.html",
        "description": "django.utils.html",
        "isExtraImport": true,
        "detail": "django.utils.html",
        "documentation": {}
    },
    {
        "label": "escape",
        "importPath": "django.utils.html",
        "description": "django.utils.html",
        "isExtraImport": true,
        "detail": "django.utils.html",
        "documentation": {}
    },
    {
        "label": "escape",
        "importPath": "django.utils.html",
        "description": "django.utils.html",
        "isExtraImport": true,
        "detail": "django.utils.html",
        "documentation": {}
    },
    {
        "label": "escape",
        "importPath": "django.utils.html",
        "description": "django.utils.html",
        "isExtraImport": true,
        "detail": "django.utils.html",
        "documentation": {}
    },
    {
        "label": "escape",
        "importPath": "django.utils.html",
        "description": "django.utils.html",
        "isExtraImport": true,
        "detail": "django.utils.html",
        "documentation": {}
    },
    {
        "label": "escape",
        "importPath": "django.utils.html",
        "description": "django.utils.html",
        "isExtraImport": true,
        "detail": "django.utils.html",
        "documentation": {}
    },
    {
        "label": "escape",
        "importPath": "django.utils.html",
        "description": "django.utils.html",
        "isExtraImport": true,
        "detail": "django.utils.html",
        "documentation": {}
    },
    {
        "label": "mark_safe",
        "importPath": "django.utils.html",
        "description": "django.utils.html",
        "isExtraImport": true,
        "detail": "django.utils.html",
        "documentation": {}
    },
    {
        "label": "escape",
        "importPath": "django.utils.html",
        "description": "django.utils.html",
        "isExtraImport": true,
        "detail": "django.utils.html",
        "documentation": {}
    },
    {
        "label": "format_html_join",
        "importPath": "django.utils.html",
        "description": "django.utils.html",
        "isExtraImport": true,
        "detail": "django.utils.html",
        "documentation": {}
    },
    {
        "label": "escape",
        "importPath": "django.utils.html",
        "description": "django.utils.html",
        "isExtraImport": true,
        "detail": "django.utils.html",
        "documentation": {}
    },
    {
        "label": "escape",
        "importPath": "django.utils.html",
        "description": "django.utils.html",
        "isExtraImport": true,
        "detail": "django.utils.html",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "AdjudicatorSerializer",
        "importPath": "participants.serializers",
        "description": "participants.serializers",
        "isExtraImport": true,
        "detail": "participants.serializers",
        "documentation": {}
    },
    {
        "label": "InstitutionSerializer",
        "importPath": "participants.serializers",
        "description": "participants.serializers",
        "isExtraImport": true,
        "detail": "participants.serializers",
        "documentation": {}
    },
    {
        "label": "TeamSerializer",
        "importPath": "participants.serializers",
        "description": "participants.serializers",
        "isExtraImport": true,
        "detail": "participants.serializers",
        "documentation": {}
    },
    {
        "label": "InstitutionSerializer",
        "importPath": "participants.serializers",
        "description": "participants.serializers",
        "isExtraImport": true,
        "detail": "participants.serializers",
        "documentation": {}
    },
    {
        "label": "AdjudicatorSerializer",
        "importPath": "participants.serializers",
        "description": "participants.serializers",
        "isExtraImport": true,
        "detail": "participants.serializers",
        "documentation": {}
    },
    {
        "label": "TeamSerializer",
        "importPath": "participants.serializers",
        "description": "participants.serializers",
        "isExtraImport": true,
        "detail": "participants.serializers",
        "documentation": {}
    },
    {
        "label": "DebateSerializerMixin",
        "importPath": "utils.serializers",
        "description": "utils.serializers",
        "isExtraImport": true,
        "detail": "utils.serializers",
        "documentation": {}
    },
    {
        "label": "VueDraggableItemMixin",
        "importPath": "utils.serializers",
        "description": "utils.serializers",
        "isExtraImport": true,
        "detail": "utils.serializers",
        "documentation": {}
    },
    {
        "label": "DebateSerializerMixin",
        "importPath": "utils.serializers",
        "description": "utils.serializers",
        "isExtraImport": true,
        "detail": "utils.serializers",
        "documentation": {}
    },
    {
        "label": "VueDraggableItemMixin",
        "importPath": "utils.serializers",
        "description": "utils.serializers",
        "isExtraImport": true,
        "detail": "utils.serializers",
        "documentation": {}
    },
    {
        "label": "django_rest_json_render",
        "importPath": "utils.serializers",
        "description": "utils.serializers",
        "isExtraImport": true,
        "detail": "utils.serializers",
        "documentation": {}
    },
    {
        "label": "DebateSerializerMixin",
        "importPath": "utils.serializers",
        "description": "utils.serializers",
        "isExtraImport": true,
        "detail": "utils.serializers",
        "documentation": {}
    },
    {
        "label": "VenueSerializer",
        "importPath": "utils.serializers",
        "description": "utils.serializers",
        "isExtraImport": true,
        "detail": "utils.serializers",
        "documentation": {}
    },
    {
        "label": "VueDraggableItemMixin",
        "importPath": "utils.serializers",
        "description": "utils.serializers",
        "isExtraImport": true,
        "detail": "utils.serializers",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "get_script_prefix",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "resolve",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "Resolver404",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse_lazy",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse_lazy",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "NoReverseMatch",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse_lazy",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse_lazy",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "re_path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "ModelChoiceField",
        "importPath": "django.forms",
        "description": "django.forms",
        "isExtraImport": true,
        "detail": "django.forms",
        "documentation": {}
    },
    {
        "label": "HiddenInput",
        "importPath": "django.forms",
        "description": "django.forms",
        "isExtraImport": true,
        "detail": "django.forms",
        "documentation": {}
    },
    {
        "label": "ModelForm",
        "importPath": "django.forms",
        "description": "django.forms",
        "isExtraImport": true,
        "detail": "django.forms",
        "documentation": {}
    },
    {
        "label": "modelformset_factory",
        "importPath": "django.forms",
        "description": "django.forms",
        "isExtraImport": true,
        "detail": "django.forms",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.forms",
        "description": "django.forms",
        "isExtraImport": true,
        "detail": "django.forms",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.forms",
        "description": "django.forms",
        "isExtraImport": true,
        "detail": "django.forms",
        "documentation": {}
    },
    {
        "label": "ChoiceField",
        "importPath": "django.forms",
        "description": "django.forms",
        "isExtraImport": true,
        "detail": "django.forms",
        "documentation": {}
    },
    {
        "label": "MultiValueField",
        "importPath": "django.forms",
        "description": "django.forms",
        "isExtraImport": true,
        "detail": "django.forms",
        "documentation": {}
    },
    {
        "label": "MultiWidget",
        "importPath": "django.forms",
        "description": "django.forms",
        "isExtraImport": true,
        "detail": "django.forms",
        "documentation": {}
    },
    {
        "label": "Select",
        "importPath": "django.forms",
        "description": "django.forms",
        "isExtraImport": true,
        "detail": "django.forms",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.forms",
        "description": "django.forms",
        "isExtraImport": true,
        "detail": "django.forms",
        "documentation": {}
    },
    {
        "label": "HiddenInput",
        "importPath": "django.forms",
        "description": "django.forms",
        "isExtraImport": true,
        "detail": "django.forms",
        "documentation": {}
    },
    {
        "label": "CharField",
        "importPath": "django.forms",
        "description": "django.forms",
        "isExtraImport": true,
        "detail": "django.forms",
        "documentation": {}
    },
    {
        "label": "ChoiceField",
        "importPath": "django.forms",
        "description": "django.forms",
        "isExtraImport": true,
        "detail": "django.forms",
        "documentation": {}
    },
    {
        "label": "Form",
        "importPath": "django.forms",
        "description": "django.forms",
        "isExtraImport": true,
        "detail": "django.forms",
        "documentation": {}
    },
    {
        "label": "ModelChoiceField",
        "importPath": "django.forms",
        "description": "django.forms",
        "isExtraImport": true,
        "detail": "django.forms",
        "documentation": {}
    },
    {
        "label": "ModelForm",
        "importPath": "django.forms",
        "description": "django.forms",
        "isExtraImport": true,
        "detail": "django.forms",
        "documentation": {}
    },
    {
        "label": "ModelMultipleChoiceField",
        "importPath": "django.forms",
        "description": "django.forms",
        "isExtraImport": true,
        "detail": "django.forms",
        "documentation": {}
    },
    {
        "label": "ModelForm",
        "importPath": "django.forms",
        "description": "django.forms",
        "isExtraImport": true,
        "detail": "django.forms",
        "documentation": {}
    },
    {
        "label": "ModelMultipleChoiceField",
        "importPath": "django.forms",
        "description": "django.forms",
        "isExtraImport": true,
        "detail": "django.forms",
        "documentation": {}
    },
    {
        "label": "SelectMultiple",
        "importPath": "django.forms",
        "description": "django.forms",
        "isExtraImport": true,
        "detail": "django.forms",
        "documentation": {}
    },
    {
        "label": "Select",
        "importPath": "django.forms",
        "description": "django.forms",
        "isExtraImport": true,
        "detail": "django.forms",
        "documentation": {}
    },
    {
        "label": "TemplateView",
        "importPath": "django.views.generic.base",
        "description": "django.views.generic.base",
        "isExtraImport": true,
        "detail": "django.views.generic.base",
        "documentation": {}
    },
    {
        "label": "TemplateView",
        "importPath": "django.views.generic.base",
        "description": "django.views.generic.base",
        "isExtraImport": true,
        "detail": "django.views.generic.base",
        "documentation": {}
    },
    {
        "label": "View",
        "importPath": "django.views.generic.base",
        "description": "django.views.generic.base",
        "isExtraImport": true,
        "detail": "django.views.generic.base",
        "documentation": {}
    },
    {
        "label": "TemplateView",
        "importPath": "django.views.generic.base",
        "description": "django.views.generic.base",
        "isExtraImport": true,
        "detail": "django.views.generic.base",
        "documentation": {}
    },
    {
        "label": "View",
        "importPath": "django.views.generic.base",
        "description": "django.views.generic.base",
        "isExtraImport": true,
        "detail": "django.views.generic.base",
        "documentation": {}
    },
    {
        "label": "TemplateView",
        "importPath": "django.views.generic.base",
        "description": "django.views.generic.base",
        "isExtraImport": true,
        "detail": "django.views.generic.base",
        "documentation": {}
    },
    {
        "label": "TemplateView",
        "importPath": "django.views.generic.base",
        "description": "django.views.generic.base",
        "isExtraImport": true,
        "detail": "django.views.generic.base",
        "documentation": {}
    },
    {
        "label": "TemplateView",
        "importPath": "django.views.generic.base",
        "description": "django.views.generic.base",
        "isExtraImport": true,
        "detail": "django.views.generic.base",
        "documentation": {}
    },
    {
        "label": "View",
        "importPath": "django.views.generic.base",
        "description": "django.views.generic.base",
        "isExtraImport": true,
        "detail": "django.views.generic.base",
        "documentation": {}
    },
    {
        "label": "View",
        "importPath": "django.views.generic.base",
        "description": "django.views.generic.base",
        "isExtraImport": true,
        "detail": "django.views.generic.base",
        "documentation": {}
    },
    {
        "label": "TemplateView",
        "importPath": "django.views.generic.base",
        "description": "django.views.generic.base",
        "isExtraImport": true,
        "detail": "django.views.generic.base",
        "documentation": {}
    },
    {
        "label": "TemplateView",
        "importPath": "django.views.generic.base",
        "description": "django.views.generic.base",
        "isExtraImport": true,
        "detail": "django.views.generic.base",
        "documentation": {}
    },
    {
        "label": "ContextMixin",
        "importPath": "django.views.generic.base",
        "description": "django.views.generic.base",
        "isExtraImport": true,
        "detail": "django.views.generic.base",
        "documentation": {}
    },
    {
        "label": "TemplateView",
        "importPath": "django.views.generic.base",
        "description": "django.views.generic.base",
        "isExtraImport": true,
        "detail": "django.views.generic.base",
        "documentation": {}
    },
    {
        "label": "ContextMixin",
        "importPath": "django.views.generic.base",
        "description": "django.views.generic.base",
        "isExtraImport": true,
        "detail": "django.views.generic.base",
        "documentation": {}
    },
    {
        "label": "ContextMixin",
        "importPath": "django.views.generic.base",
        "description": "django.views.generic.base",
        "isExtraImport": true,
        "detail": "django.views.generic.base",
        "documentation": {}
    },
    {
        "label": "TemplateResponseMixin",
        "importPath": "django.views.generic.base",
        "description": "django.views.generic.base",
        "isExtraImport": true,
        "detail": "django.views.generic.base",
        "documentation": {}
    },
    {
        "label": "LogActionMixin",
        "importPath": "actionlog.mixins",
        "description": "actionlog.mixins",
        "isExtraImport": true,
        "detail": "actionlog.mixins",
        "documentation": {}
    },
    {
        "label": "LogActionMixin",
        "importPath": "actionlog.mixins",
        "description": "actionlog.mixins",
        "isExtraImport": true,
        "detail": "actionlog.mixins",
        "documentation": {}
    },
    {
        "label": "LogActionMixin",
        "importPath": "actionlog.mixins",
        "description": "actionlog.mixins",
        "isExtraImport": true,
        "detail": "actionlog.mixins",
        "documentation": {}
    },
    {
        "label": "LogActionMixin",
        "importPath": "actionlog.mixins",
        "description": "actionlog.mixins",
        "isExtraImport": true,
        "detail": "actionlog.mixins",
        "documentation": {}
    },
    {
        "label": "LogActionMixin",
        "importPath": "actionlog.mixins",
        "description": "actionlog.mixins",
        "isExtraImport": true,
        "detail": "actionlog.mixins",
        "documentation": {}
    },
    {
        "label": "LogActionMixin",
        "importPath": "actionlog.mixins",
        "description": "actionlog.mixins",
        "isExtraImport": true,
        "detail": "actionlog.mixins",
        "documentation": {}
    },
    {
        "label": "LogActionMixin",
        "importPath": "actionlog.mixins",
        "description": "actionlog.mixins",
        "isExtraImport": true,
        "detail": "actionlog.mixins",
        "documentation": {}
    },
    {
        "label": "LogActionMixin",
        "importPath": "actionlog.mixins",
        "description": "actionlog.mixins",
        "isExtraImport": true,
        "detail": "actionlog.mixins",
        "documentation": {}
    },
    {
        "label": "LogActionMixin",
        "importPath": "actionlog.mixins",
        "description": "actionlog.mixins",
        "isExtraImport": true,
        "detail": "actionlog.mixins",
        "documentation": {}
    },
    {
        "label": "LogActionMixin",
        "importPath": "actionlog.mixins",
        "description": "actionlog.mixins",
        "isExtraImport": true,
        "detail": "actionlog.mixins",
        "documentation": {}
    },
    {
        "label": "LogActionMixin",
        "importPath": "actionlog.mixins",
        "description": "actionlog.mixins",
        "isExtraImport": true,
        "detail": "actionlog.mixins",
        "documentation": {}
    },
    {
        "label": "LogActionMixin",
        "importPath": "actionlog.mixins",
        "description": "actionlog.mixins",
        "isExtraImport": true,
        "detail": "actionlog.mixins",
        "documentation": {}
    },
    {
        "label": "LogActionMixin",
        "importPath": "actionlog.mixins",
        "description": "actionlog.mixins",
        "isExtraImport": true,
        "detail": "actionlog.mixins",
        "documentation": {}
    },
    {
        "label": "LogActionMixin",
        "importPath": "actionlog.mixins",
        "description": "actionlog.mixins",
        "isExtraImport": true,
        "detail": "actionlog.mixins",
        "documentation": {}
    },
    {
        "label": "LogActionMixin",
        "importPath": "actionlog.mixins",
        "description": "actionlog.mixins",
        "isExtraImport": true,
        "detail": "actionlog.mixins",
        "documentation": {}
    },
    {
        "label": "annotate_availability",
        "importPath": "availability.utils",
        "description": "availability.utils",
        "isExtraImport": true,
        "detail": "availability.utils",
        "documentation": {}
    },
    {
        "label": "set_availability",
        "importPath": "availability.utils",
        "description": "availability.utils",
        "isExtraImport": true,
        "detail": "availability.utils",
        "documentation": {}
    },
    {
        "label": "activate_all",
        "importPath": "availability.utils",
        "description": "availability.utils",
        "isExtraImport": true,
        "detail": "availability.utils",
        "documentation": {}
    },
    {
        "label": "annotate_availability",
        "importPath": "availability.utils",
        "description": "availability.utils",
        "isExtraImport": true,
        "detail": "availability.utils",
        "documentation": {}
    },
    {
        "label": "set_availability",
        "importPath": "availability.utils",
        "description": "availability.utils",
        "isExtraImport": true,
        "detail": "availability.utils",
        "documentation": {}
    },
    {
        "label": "activate_all",
        "importPath": "availability.utils",
        "description": "availability.utils",
        "isExtraImport": true,
        "detail": "availability.utils",
        "documentation": {}
    },
    {
        "label": "set_availability",
        "importPath": "availability.utils",
        "description": "availability.utils",
        "isExtraImport": true,
        "detail": "availability.utils",
        "documentation": {}
    },
    {
        "label": "annotate_availability",
        "importPath": "availability.utils",
        "description": "availability.utils",
        "isExtraImport": true,
        "detail": "availability.utils",
        "documentation": {}
    },
    {
        "label": "ModelFormSetView",
        "importPath": "utils.views",
        "description": "utils.views",
        "isExtraImport": true,
        "detail": "utils.views",
        "documentation": {}
    },
    {
        "label": "PostOnlyRedirectView",
        "importPath": "utils.views",
        "description": "utils.views",
        "isExtraImport": true,
        "detail": "utils.views",
        "documentation": {}
    },
    {
        "label": "VueTableTemplateView",
        "importPath": "utils.views",
        "description": "utils.views",
        "isExtraImport": true,
        "detail": "utils.views",
        "documentation": {}
    },
    {
        "label": "PostOnlyRedirectView",
        "importPath": "utils.views",
        "description": "utils.views",
        "isExtraImport": true,
        "detail": "utils.views",
        "documentation": {}
    },
    {
        "label": "VueTableTemplateView",
        "importPath": "utils.views",
        "description": "utils.views",
        "isExtraImport": true,
        "detail": "utils.views",
        "documentation": {}
    },
    {
        "label": "PostOnlyRedirectView",
        "importPath": "utils.views",
        "description": "utils.views",
        "isExtraImport": true,
        "detail": "utils.views",
        "documentation": {}
    },
    {
        "label": "VueTableTemplateView",
        "importPath": "utils.views",
        "description": "utils.views",
        "isExtraImport": true,
        "detail": "utils.views",
        "documentation": {}
    },
    {
        "label": "PostOnlyRedirectView",
        "importPath": "utils.views",
        "description": "utils.views",
        "isExtraImport": true,
        "detail": "utils.views",
        "documentation": {}
    },
    {
        "label": "PostOnlyRedirectView",
        "importPath": "utils.views",
        "description": "utils.views",
        "isExtraImport": true,
        "detail": "utils.views",
        "documentation": {}
    },
    {
        "label": "VueTableTemplateView",
        "importPath": "utils.views",
        "description": "utils.views",
        "isExtraImport": true,
        "detail": "utils.views",
        "documentation": {}
    },
    {
        "label": "PostOnlyRedirectView",
        "importPath": "utils.views",
        "description": "utils.views",
        "isExtraImport": true,
        "detail": "utils.views",
        "documentation": {}
    },
    {
        "label": "ModelFormSetView",
        "importPath": "utils.views",
        "description": "utils.views",
        "isExtraImport": true,
        "detail": "utils.views",
        "documentation": {}
    },
    {
        "label": "PostOnlyRedirectView",
        "importPath": "utils.views",
        "description": "utils.views",
        "isExtraImport": true,
        "detail": "utils.views",
        "documentation": {}
    },
    {
        "label": "VueTableTemplateView",
        "importPath": "utils.views",
        "description": "utils.views",
        "isExtraImport": true,
        "detail": "utils.views",
        "documentation": {}
    },
    {
        "label": "ModelFormSetView",
        "importPath": "utils.views",
        "description": "utils.views",
        "isExtraImport": true,
        "detail": "utils.views",
        "documentation": {}
    },
    {
        "label": "VueTableTemplateView",
        "importPath": "utils.views",
        "description": "utils.views",
        "isExtraImport": true,
        "detail": "utils.views",
        "documentation": {}
    },
    {
        "label": "PostOnlyRedirectView",
        "importPath": "utils.views",
        "description": "utils.views",
        "isExtraImport": true,
        "detail": "utils.views",
        "documentation": {}
    },
    {
        "label": "VueTableTemplateView",
        "importPath": "utils.views",
        "description": "utils.views",
        "isExtraImport": true,
        "detail": "utils.views",
        "documentation": {}
    },
    {
        "label": "PostOnlyRedirectView",
        "importPath": "utils.views",
        "description": "utils.views",
        "isExtraImport": true,
        "detail": "utils.views",
        "documentation": {}
    },
    {
        "label": "VueTableTemplateView",
        "importPath": "utils.views",
        "description": "utils.views",
        "isExtraImport": true,
        "detail": "utils.views",
        "documentation": {}
    },
    {
        "label": "VueTableTemplateView",
        "importPath": "utils.views",
        "description": "utils.views",
        "isExtraImport": true,
        "detail": "utils.views",
        "documentation": {}
    },
    {
        "label": "PostOnlyRedirectView",
        "importPath": "utils.views",
        "description": "utils.views",
        "isExtraImport": true,
        "detail": "utils.views",
        "documentation": {}
    },
    {
        "label": "ModelFormSetView",
        "importPath": "utils.views",
        "description": "utils.views",
        "isExtraImport": true,
        "detail": "utils.views",
        "documentation": {}
    },
    {
        "label": "adjfeedback.models",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "adjfeedback.models",
        "description": "adjfeedback.models",
        "detail": "adjfeedback.models",
        "documentation": {}
    },
    {
        "label": "AdjudicatorFeedback",
        "importPath": "adjfeedback.models",
        "description": "adjfeedback.models",
        "isExtraImport": true,
        "detail": "adjfeedback.models",
        "documentation": {}
    },
    {
        "label": "AdjudicatorFeedback",
        "importPath": "adjfeedback.models",
        "description": "adjfeedback.models",
        "isExtraImport": true,
        "detail": "adjfeedback.models",
        "documentation": {}
    },
    {
        "label": "AdjudicatorFeedback",
        "importPath": "adjfeedback.models",
        "description": "adjfeedback.models",
        "isExtraImport": true,
        "detail": "adjfeedback.models",
        "documentation": {}
    },
    {
        "label": "AdjudicatorFeedback",
        "importPath": "adjfeedback.models",
        "description": "adjfeedback.models",
        "isExtraImport": true,
        "detail": "adjfeedback.models",
        "documentation": {}
    },
    {
        "label": "AdjudicatorBaseScoreHistory",
        "importPath": "adjfeedback.models",
        "description": "adjfeedback.models",
        "isExtraImport": true,
        "detail": "adjfeedback.models",
        "documentation": {}
    },
    {
        "label": "AdjudicatorFeedback",
        "importPath": "adjfeedback.models",
        "description": "adjfeedback.models",
        "isExtraImport": true,
        "detail": "adjfeedback.models",
        "documentation": {}
    },
    {
        "label": "AdjudicatorFeedbackQuestion",
        "importPath": "adjfeedback.models",
        "description": "adjfeedback.models",
        "isExtraImport": true,
        "detail": "adjfeedback.models",
        "documentation": {}
    },
    {
        "label": "AdjudicatorFeedbackQuestion",
        "importPath": "adjfeedback.models",
        "description": "adjfeedback.models",
        "isExtraImport": true,
        "detail": "adjfeedback.models",
        "documentation": {}
    },
    {
        "label": "AdjudicatorFeedback",
        "importPath": "adjfeedback.models",
        "description": "adjfeedback.models",
        "isExtraImport": true,
        "detail": "adjfeedback.models",
        "documentation": {}
    },
    {
        "label": "AdjudicatorFeedbackQuestion",
        "importPath": "adjfeedback.models",
        "description": "adjfeedback.models",
        "isExtraImport": true,
        "detail": "adjfeedback.models",
        "documentation": {}
    },
    {
        "label": "AdjudicatorBaseScoreHistory",
        "importPath": "adjfeedback.models",
        "description": "adjfeedback.models",
        "isExtraImport": true,
        "detail": "adjfeedback.models",
        "documentation": {}
    },
    {
        "label": "AdjudicatorFeedback",
        "importPath": "adjfeedback.models",
        "description": "adjfeedback.models",
        "isExtraImport": true,
        "detail": "adjfeedback.models",
        "documentation": {}
    },
    {
        "label": "AdjudicatorFeedbackQuestion",
        "importPath": "adjfeedback.models",
        "description": "adjfeedback.models",
        "isExtraImport": true,
        "detail": "adjfeedback.models",
        "documentation": {}
    },
    {
        "label": "AdjudicatorFeedback",
        "importPath": "adjfeedback.models",
        "description": "adjfeedback.models",
        "isExtraImport": true,
        "detail": "adjfeedback.models",
        "documentation": {}
    },
    {
        "label": "AdjudicatorFeedbackQuestion",
        "importPath": "adjfeedback.models",
        "description": "adjfeedback.models",
        "isExtraImport": true,
        "detail": "adjfeedback.models",
        "documentation": {}
    },
    {
        "label": "django.contrib.postgres.fields",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib.postgres.fields",
        "description": "django.contrib.postgres.fields",
        "detail": "django.contrib.postgres.fields",
        "documentation": {}
    },
    {
        "label": "ArrayField",
        "importPath": "django.contrib.postgres.fields",
        "description": "django.contrib.postgres.fields",
        "isExtraImport": true,
        "detail": "django.contrib.postgres.fields",
        "documentation": {}
    },
    {
        "label": "django_better_admin_arrayfield.models.fields",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django_better_admin_arrayfield.models.fields",
        "description": "django_better_admin_arrayfield.models.fields",
        "detail": "django_better_admin_arrayfield.models.fields",
        "documentation": {}
    },
    {
        "label": "ArrayField",
        "importPath": "django_better_admin_arrayfield.models.fields",
        "description": "django_better_admin_arrayfield.models.fields",
        "isExtraImport": true,
        "detail": "django_better_admin_arrayfield.models.fields",
        "documentation": {}
    },
    {
        "label": "DebateSide",
        "importPath": "draw.types",
        "description": "draw.types",
        "isExtraImport": true,
        "detail": "draw.types",
        "documentation": {}
    },
    {
        "label": "DebateSide",
        "importPath": "draw.types",
        "description": "draw.types",
        "isExtraImport": true,
        "detail": "draw.types",
        "documentation": {}
    },
    {
        "label": "DebateSide",
        "importPath": "draw.types",
        "description": "draw.types",
        "isExtraImport": true,
        "detail": "draw.types",
        "documentation": {}
    },
    {
        "label": "DebateSide",
        "importPath": "draw.types",
        "description": "draw.types",
        "isExtraImport": true,
        "detail": "draw.types",
        "documentation": {}
    },
    {
        "label": "DebateSide",
        "importPath": "draw.types",
        "description": "draw.types",
        "isExtraImport": true,
        "detail": "draw.types",
        "documentation": {}
    },
    {
        "label": "DebateSide",
        "importPath": "draw.types",
        "description": "draw.types",
        "isExtraImport": true,
        "detail": "draw.types",
        "documentation": {}
    },
    {
        "label": "DebateSide",
        "importPath": "draw.types",
        "description": "draw.types",
        "isExtraImport": true,
        "detail": "draw.types",
        "documentation": {}
    },
    {
        "label": "DebateSide",
        "importPath": "draw.types",
        "description": "draw.types",
        "isExtraImport": true,
        "detail": "draw.types",
        "documentation": {}
    },
    {
        "label": "DebateSide",
        "importPath": "draw.types",
        "description": "draw.types",
        "isExtraImport": true,
        "detail": "draw.types",
        "documentation": {}
    },
    {
        "label": "DebateSide",
        "importPath": "draw.types",
        "description": "draw.types",
        "isExtraImport": true,
        "detail": "draw.types",
        "documentation": {}
    },
    {
        "label": "DebateSide",
        "importPath": "draw.types",
        "description": "draw.types",
        "isExtraImport": true,
        "detail": "draw.types",
        "documentation": {}
    },
    {
        "label": "DebateSide",
        "importPath": "draw.types",
        "description": "draw.types",
        "isExtraImport": true,
        "detail": "draw.types",
        "documentation": {}
    },
    {
        "label": "DebateSide",
        "importPath": "draw.types",
        "description": "draw.types",
        "isExtraImport": true,
        "detail": "draw.types",
        "documentation": {}
    },
    {
        "label": "DebateSide",
        "importPath": "draw.types",
        "description": "draw.types",
        "isExtraImport": true,
        "detail": "draw.types",
        "documentation": {}
    },
    {
        "label": "DebateSide",
        "importPath": "draw.types",
        "description": "draw.types",
        "isExtraImport": true,
        "detail": "draw.types",
        "documentation": {}
    },
    {
        "label": "DebateSide",
        "importPath": "draw.types",
        "description": "draw.types",
        "isExtraImport": true,
        "detail": "draw.types",
        "documentation": {}
    },
    {
        "label": "DebateSide",
        "importPath": "draw.types",
        "description": "draw.types",
        "isExtraImport": true,
        "detail": "draw.types",
        "documentation": {}
    },
    {
        "label": "DebateSide",
        "importPath": "draw.types",
        "description": "draw.types",
        "isExtraImport": true,
        "detail": "draw.types",
        "documentation": {}
    },
    {
        "label": "DebateSide",
        "importPath": "draw.types",
        "description": "draw.types",
        "isExtraImport": true,
        "detail": "draw.types",
        "documentation": {}
    },
    {
        "label": "results.models",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "results.models",
        "description": "results.models",
        "detail": "results.models",
        "documentation": {}
    },
    {
        "label": "BallotSubmission",
        "importPath": "results.models",
        "description": "results.models",
        "isExtraImport": true,
        "detail": "results.models",
        "documentation": {}
    },
    {
        "label": "Submission",
        "importPath": "results.models",
        "description": "results.models",
        "isExtraImport": true,
        "detail": "results.models",
        "documentation": {}
    },
    {
        "label": "BallotSubmission",
        "importPath": "results.models",
        "description": "results.models",
        "isExtraImport": true,
        "detail": "results.models",
        "documentation": {}
    },
    {
        "label": "ScoreCriterion",
        "importPath": "results.models",
        "description": "results.models",
        "isExtraImport": true,
        "detail": "results.models",
        "documentation": {}
    },
    {
        "label": "SpeakerScore",
        "importPath": "results.models",
        "description": "results.models",
        "isExtraImport": true,
        "detail": "results.models",
        "documentation": {}
    },
    {
        "label": "TeamScore",
        "importPath": "results.models",
        "description": "results.models",
        "isExtraImport": true,
        "detail": "results.models",
        "documentation": {}
    },
    {
        "label": "SpeakerScore",
        "importPath": "results.models",
        "description": "results.models",
        "isExtraImport": true,
        "detail": "results.models",
        "documentation": {}
    },
    {
        "label": "TeamScore",
        "importPath": "results.models",
        "description": "results.models",
        "isExtraImport": true,
        "detail": "results.models",
        "documentation": {}
    },
    {
        "label": "BallotSubmission",
        "importPath": "results.models",
        "description": "results.models",
        "isExtraImport": true,
        "detail": "results.models",
        "documentation": {}
    },
    {
        "label": "TeamScore",
        "importPath": "results.models",
        "description": "results.models",
        "isExtraImport": true,
        "detail": "results.models",
        "documentation": {}
    },
    {
        "label": "BallotSubmission",
        "importPath": "results.models",
        "description": "results.models",
        "isExtraImport": true,
        "detail": "results.models",
        "documentation": {}
    },
    {
        "label": "Submission",
        "importPath": "results.models",
        "description": "results.models",
        "isExtraImport": true,
        "detail": "results.models",
        "documentation": {}
    },
    {
        "label": "BallotSubmission",
        "importPath": "results.models",
        "description": "results.models",
        "isExtraImport": true,
        "detail": "results.models",
        "documentation": {}
    },
    {
        "label": "TeamScore",
        "importPath": "results.models",
        "description": "results.models",
        "isExtraImport": true,
        "detail": "results.models",
        "documentation": {}
    },
    {
        "label": "SpeakerScore",
        "importPath": "results.models",
        "description": "results.models",
        "isExtraImport": true,
        "detail": "results.models",
        "documentation": {}
    },
    {
        "label": "TeamScore",
        "importPath": "results.models",
        "description": "results.models",
        "isExtraImport": true,
        "detail": "results.models",
        "documentation": {}
    },
    {
        "label": "BallotSubmission",
        "importPath": "results.models",
        "description": "results.models",
        "isExtraImport": true,
        "detail": "results.models",
        "documentation": {}
    },
    {
        "label": "BallotSubmission",
        "importPath": "results.models",
        "description": "results.models",
        "isExtraImport": true,
        "detail": "results.models",
        "documentation": {}
    },
    {
        "label": "BallotSubmission",
        "importPath": "results.models",
        "description": "results.models",
        "isExtraImport": true,
        "detail": "results.models",
        "documentation": {}
    },
    {
        "label": "SpeakerScore",
        "importPath": "results.models",
        "description": "results.models",
        "isExtraImport": true,
        "detail": "results.models",
        "documentation": {}
    },
    {
        "label": "SpeakerScoreByAdj",
        "importPath": "results.models",
        "description": "results.models",
        "isExtraImport": true,
        "detail": "results.models",
        "documentation": {}
    },
    {
        "label": "TeamScore",
        "importPath": "results.models",
        "description": "results.models",
        "isExtraImport": true,
        "detail": "results.models",
        "documentation": {}
    },
    {
        "label": "BallotSubmission",
        "importPath": "results.models",
        "description": "results.models",
        "isExtraImport": true,
        "detail": "results.models",
        "documentation": {}
    },
    {
        "label": "BallotSubmission",
        "importPath": "results.models",
        "description": "results.models",
        "isExtraImport": true,
        "detail": "results.models",
        "documentation": {}
    },
    {
        "label": "SpeakerScore",
        "importPath": "results.models",
        "description": "results.models",
        "isExtraImport": true,
        "detail": "results.models",
        "documentation": {}
    },
    {
        "label": "TeamScore",
        "importPath": "results.models",
        "description": "results.models",
        "isExtraImport": true,
        "detail": "results.models",
        "documentation": {}
    },
    {
        "label": "SpeakerScore",
        "importPath": "results.models",
        "description": "results.models",
        "isExtraImport": true,
        "detail": "results.models",
        "documentation": {}
    },
    {
        "label": "SpeakerScore",
        "importPath": "results.models",
        "description": "results.models",
        "isExtraImport": true,
        "detail": "results.models",
        "documentation": {}
    },
    {
        "label": "TeamScore",
        "importPath": "results.models",
        "description": "results.models",
        "isExtraImport": true,
        "detail": "results.models",
        "documentation": {}
    },
    {
        "label": "TeamScore",
        "importPath": "results.models",
        "description": "results.models",
        "isExtraImport": true,
        "detail": "results.models",
        "documentation": {}
    },
    {
        "label": "SpeakerScore",
        "importPath": "results.models",
        "description": "results.models",
        "isExtraImport": true,
        "detail": "results.models",
        "documentation": {}
    },
    {
        "label": "TeamScore",
        "importPath": "results.models",
        "description": "results.models",
        "isExtraImport": true,
        "detail": "results.models",
        "documentation": {}
    },
    {
        "label": "BallotSubmission",
        "importPath": "results.models",
        "description": "results.models",
        "isExtraImport": true,
        "detail": "results.models",
        "documentation": {}
    },
    {
        "label": "BallotSubmission",
        "importPath": "results.models",
        "description": "results.models",
        "isExtraImport": true,
        "detail": "results.models",
        "documentation": {}
    },
    {
        "label": "DebateResultByAdjudicatorWithScores",
        "importPath": "results.result",
        "description": "results.result",
        "isExtraImport": true,
        "detail": "results.result",
        "documentation": {}
    },
    {
        "label": "DebateResult",
        "importPath": "results.result",
        "description": "results.result",
        "isExtraImport": true,
        "detail": "results.result",
        "documentation": {}
    },
    {
        "label": "ResultError",
        "importPath": "results.result",
        "description": "results.result",
        "isExtraImport": true,
        "detail": "results.result",
        "documentation": {}
    },
    {
        "label": "DebateResult",
        "importPath": "results.result",
        "description": "results.result",
        "isExtraImport": true,
        "detail": "results.result",
        "documentation": {}
    },
    {
        "label": "ConsensusDebateResultWithScores",
        "importPath": "results.result",
        "description": "results.result",
        "isExtraImport": true,
        "detail": "results.result",
        "documentation": {}
    },
    {
        "label": "DebateResult",
        "importPath": "results.result",
        "description": "results.result",
        "isExtraImport": true,
        "detail": "results.result",
        "documentation": {}
    },
    {
        "label": "DebateResultByAdjudicatorWithScores",
        "importPath": "results.result",
        "description": "results.result",
        "isExtraImport": true,
        "detail": "results.result",
        "documentation": {}
    },
    {
        "label": "DebateResult",
        "importPath": "results.result",
        "description": "results.result",
        "isExtraImport": true,
        "detail": "results.result",
        "documentation": {}
    },
    {
        "label": "get_result_class",
        "importPath": "results.result",
        "description": "results.result",
        "isExtraImport": true,
        "detail": "results.result",
        "documentation": {}
    },
    {
        "label": "venues.models",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "venues.models",
        "description": "venues.models",
        "detail": "venues.models",
        "documentation": {}
    },
    {
        "label": "Venue",
        "importPath": "venues.models",
        "description": "venues.models",
        "isExtraImport": true,
        "detail": "venues.models",
        "documentation": {}
    },
    {
        "label": "Venue",
        "importPath": "venues.models",
        "description": "venues.models",
        "isExtraImport": true,
        "detail": "venues.models",
        "documentation": {}
    },
    {
        "label": "Venue",
        "importPath": "venues.models",
        "description": "venues.models",
        "isExtraImport": true,
        "detail": "venues.models",
        "documentation": {}
    },
    {
        "label": "VenueCategory",
        "importPath": "venues.models",
        "description": "venues.models",
        "isExtraImport": true,
        "detail": "venues.models",
        "documentation": {}
    },
    {
        "label": "VenueConstraint",
        "importPath": "venues.models",
        "description": "venues.models",
        "isExtraImport": true,
        "detail": "venues.models",
        "documentation": {}
    },
    {
        "label": "Venue",
        "importPath": "venues.models",
        "description": "venues.models",
        "isExtraImport": true,
        "detail": "venues.models",
        "documentation": {}
    },
    {
        "label": "VenueCategory",
        "importPath": "venues.models",
        "description": "venues.models",
        "isExtraImport": true,
        "detail": "venues.models",
        "documentation": {}
    },
    {
        "label": "Venue",
        "importPath": "venues.models",
        "description": "venues.models",
        "isExtraImport": true,
        "detail": "venues.models",
        "documentation": {}
    },
    {
        "label": "Venue",
        "importPath": "venues.models",
        "description": "venues.models",
        "isExtraImport": true,
        "detail": "venues.models",
        "documentation": {}
    },
    {
        "label": "VenueConstraint",
        "importPath": "venues.models",
        "description": "venues.models",
        "isExtraImport": true,
        "detail": "venues.models",
        "documentation": {}
    },
    {
        "label": "Venue",
        "importPath": "venues.models",
        "description": "venues.models",
        "isExtraImport": true,
        "detail": "venues.models",
        "documentation": {}
    },
    {
        "label": "Venue",
        "importPath": "venues.models",
        "description": "venues.models",
        "isExtraImport": true,
        "detail": "venues.models",
        "documentation": {}
    },
    {
        "label": "Venue",
        "importPath": "venues.models",
        "description": "venues.models",
        "isExtraImport": true,
        "detail": "venues.models",
        "documentation": {}
    },
    {
        "label": "Venue",
        "importPath": "venues.models",
        "description": "venues.models",
        "isExtraImport": true,
        "detail": "venues.models",
        "documentation": {}
    },
    {
        "label": "Venue",
        "importPath": "venues.models",
        "description": "venues.models",
        "isExtraImport": true,
        "detail": "venues.models",
        "documentation": {}
    },
    {
        "label": "Venue",
        "importPath": "venues.models",
        "description": "venues.models",
        "isExtraImport": true,
        "detail": "venues.models",
        "documentation": {}
    },
    {
        "label": "Venue",
        "importPath": "venues.models",
        "description": "venues.models",
        "isExtraImport": true,
        "detail": "venues.models",
        "documentation": {}
    },
    {
        "label": "VenueCategory",
        "importPath": "venues.models",
        "description": "venues.models",
        "isExtraImport": true,
        "detail": "venues.models",
        "documentation": {}
    },
    {
        "label": "Venue",
        "importPath": "venues.models",
        "description": "venues.models",
        "isExtraImport": true,
        "detail": "venues.models",
        "documentation": {}
    },
    {
        "label": "VenueConstraint",
        "importPath": "venues.models",
        "description": "venues.models",
        "isExtraImport": true,
        "detail": "venues.models",
        "documentation": {}
    },
    {
        "label": "django",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django",
        "description": "django",
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "template",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "template",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "template",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "template",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "template",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "DynamicArrayMixin",
        "importPath": "django_better_admin_arrayfield.admin.mixins",
        "description": "django_better_admin_arrayfield.admin.mixins",
        "isExtraImport": true,
        "detail": "django_better_admin_arrayfield.admin.mixins",
        "documentation": {}
    },
    {
        "label": "AdjudicatorAllocation",
        "importPath": "adjallocation.allocation",
        "description": "adjallocation.allocation",
        "isExtraImport": true,
        "detail": "adjallocation.allocation",
        "documentation": {}
    },
    {
        "label": "AdjudicatorAllocation",
        "importPath": "adjallocation.allocation",
        "description": "adjallocation.allocation",
        "isExtraImport": true,
        "detail": "adjallocation.allocation",
        "documentation": {}
    },
    {
        "label": "AdjudicatorAllocation",
        "importPath": "adjallocation.allocation",
        "description": "adjallocation.allocation",
        "isExtraImport": true,
        "detail": "adjallocation.allocation",
        "documentation": {}
    },
    {
        "label": "AdjudicatorAllocation",
        "importPath": "adjallocation.allocation",
        "description": "adjallocation.allocation",
        "isExtraImport": true,
        "detail": "adjallocation.allocation",
        "documentation": {}
    },
    {
        "label": "AdjudicatorAllocation",
        "importPath": "adjallocation.allocation",
        "description": "adjallocation.allocation",
        "isExtraImport": true,
        "detail": "adjallocation.allocation",
        "documentation": {}
    },
    {
        "label": "ImportValidationError",
        "importPath": "importer.forms",
        "description": "importer.forms",
        "isExtraImport": true,
        "detail": "importer.forms",
        "documentation": {}
    },
    {
        "label": "TournamentPasswordField",
        "importPath": "results.forms",
        "description": "results.forms",
        "isExtraImport": true,
        "detail": "results.forms",
        "documentation": {}
    },
    {
        "label": "OptionalChoiceField",
        "importPath": "utils.forms",
        "description": "utils.forms",
        "isExtraImport": true,
        "detail": "utils.forms",
        "documentation": {}
    },
    {
        "label": "OptionalChoiceField",
        "importPath": "utils.forms",
        "description": "utils.forms",
        "isExtraImport": true,
        "detail": "utils.forms",
        "documentation": {}
    },
    {
        "label": "SelectPrepopulated",
        "importPath": "utils.forms",
        "description": "utils.forms",
        "isExtraImport": true,
        "detail": "utils.forms",
        "documentation": {}
    },
    {
        "label": "cached_property",
        "importPath": "django.utils.functional",
        "description": "django.utils.functional",
        "isExtraImport": true,
        "detail": "django.utils.functional",
        "documentation": {}
    },
    {
        "label": "cached_property",
        "importPath": "django.utils.functional",
        "description": "django.utils.functional",
        "isExtraImport": true,
        "detail": "django.utils.functional",
        "documentation": {}
    },
    {
        "label": "cached_property",
        "importPath": "django.utils.functional",
        "description": "django.utils.functional",
        "isExtraImport": true,
        "detail": "django.utils.functional",
        "documentation": {}
    },
    {
        "label": "cached_property",
        "importPath": "django.utils.functional",
        "description": "django.utils.functional",
        "isExtraImport": true,
        "detail": "django.utils.functional",
        "documentation": {}
    },
    {
        "label": "populate_confirmed_ballots",
        "importPath": "results.prefetch",
        "description": "results.prefetch",
        "isExtraImport": true,
        "detail": "results.prefetch",
        "documentation": {}
    },
    {
        "label": "populate_wins_for_debateteams",
        "importPath": "results.prefetch",
        "description": "results.prefetch",
        "isExtraImport": true,
        "detail": "results.prefetch",
        "documentation": {}
    },
    {
        "label": "populate_confirmed_ballots",
        "importPath": "results.prefetch",
        "description": "results.prefetch",
        "isExtraImport": true,
        "detail": "results.prefetch",
        "documentation": {}
    },
    {
        "label": "populate_wins",
        "importPath": "results.prefetch",
        "description": "results.prefetch",
        "isExtraImport": true,
        "detail": "results.prefetch",
        "documentation": {}
    },
    {
        "label": "populate_confirmed_ballots",
        "importPath": "results.prefetch",
        "description": "results.prefetch",
        "isExtraImport": true,
        "detail": "results.prefetch",
        "documentation": {}
    },
    {
        "label": "populate_wins",
        "importPath": "results.prefetch",
        "description": "results.prefetch",
        "isExtraImport": true,
        "detail": "results.prefetch",
        "documentation": {}
    },
    {
        "label": "populate_confirmed_ballots",
        "importPath": "results.prefetch",
        "description": "results.prefetch",
        "isExtraImport": true,
        "detail": "results.prefetch",
        "documentation": {}
    },
    {
        "label": "TabbycatTableBuilder",
        "importPath": "utils.tables",
        "description": "utils.tables",
        "isExtraImport": true,
        "detail": "utils.tables",
        "documentation": {}
    },
    {
        "label": "TabbycatTableBuilder",
        "importPath": "utils.tables",
        "description": "utils.tables",
        "isExtraImport": true,
        "detail": "utils.tables",
        "documentation": {}
    },
    {
        "label": "TabbycatTableBuilder",
        "importPath": "utils.tables",
        "description": "utils.tables",
        "isExtraImport": true,
        "detail": "utils.tables",
        "documentation": {}
    },
    {
        "label": "TabbycatTableBuilder",
        "importPath": "utils.tables",
        "description": "utils.tables",
        "isExtraImport": true,
        "detail": "utils.tables",
        "documentation": {}
    },
    {
        "label": "TabbycatTableBuilder",
        "importPath": "utils.tables",
        "description": "utils.tables",
        "isExtraImport": true,
        "detail": "utils.tables",
        "documentation": {}
    },
    {
        "label": "TabbycatTableBuilder",
        "importPath": "utils.tables",
        "description": "utils.tables",
        "isExtraImport": true,
        "detail": "utils.tables",
        "documentation": {}
    },
    {
        "label": "TabbycatTableBuilder",
        "importPath": "utils.tables",
        "description": "utils.tables",
        "isExtraImport": true,
        "detail": "utils.tables",
        "documentation": {}
    },
    {
        "label": "TabbycatTableBuilder",
        "importPath": "utils.tables",
        "description": "utils.tables",
        "isExtraImport": true,
        "detail": "utils.tables",
        "documentation": {}
    },
    {
        "label": "TabbycatTableBuilder",
        "importPath": "utils.tables",
        "description": "utils.tables",
        "isExtraImport": true,
        "detail": "utils.tables",
        "documentation": {}
    },
    {
        "label": "TabbycatTableBuilder",
        "importPath": "utils.tables",
        "description": "utils.tables",
        "isExtraImport": true,
        "detail": "utils.tables",
        "documentation": {}
    },
    {
        "label": "TabbycatTableBuilder",
        "importPath": "utils.tables",
        "description": "utils.tables",
        "isExtraImport": true,
        "detail": "utils.tables",
        "documentation": {}
    },
    {
        "label": "TabbycatTableBuilder",
        "importPath": "utils.tables",
        "description": "utils.tables",
        "isExtraImport": true,
        "detail": "utils.tables",
        "documentation": {}
    },
    {
        "label": "TabbycatTableBuilder",
        "importPath": "utils.tables",
        "description": "utils.tables",
        "isExtraImport": true,
        "detail": "utils.tables",
        "documentation": {}
    },
    {
        "label": "mean",
        "importPath": "statistics",
        "description": "statistics",
        "isExtraImport": true,
        "detail": "statistics",
        "documentation": {}
    },
    {
        "label": "stdev",
        "importPath": "statistics",
        "description": "statistics",
        "isExtraImport": true,
        "detail": "statistics",
        "documentation": {}
    },
    {
        "label": "pvariance",
        "importPath": "statistics",
        "description": "statistics",
        "isExtraImport": true,
        "detail": "statistics",
        "documentation": {}
    },
    {
        "label": "mean",
        "importPath": "statistics",
        "description": "statistics",
        "isExtraImport": true,
        "detail": "statistics",
        "documentation": {}
    },
    {
        "label": "mean",
        "importPath": "statistics",
        "description": "statistics",
        "isExtraImport": true,
        "detail": "statistics",
        "documentation": {}
    },
    {
        "label": "FeedbackPaths",
        "importPath": "options.preferences",
        "description": "options.preferences",
        "isExtraImport": true,
        "detail": "options.preferences",
        "documentation": {}
    },
    {
        "label": "BPPositionCost",
        "importPath": "options.preferences",
        "description": "options.preferences",
        "isExtraImport": true,
        "detail": "options.preferences",
        "documentation": {}
    },
    {
        "label": "SpeakerStandingsPrecedence",
        "importPath": "options.preferences",
        "description": "options.preferences",
        "isExtraImport": true,
        "detail": "options.preferences",
        "documentation": {}
    },
    {
        "label": "TeamStandingsPrecedence",
        "importPath": "options.preferences",
        "description": "options.preferences",
        "isExtraImport": true,
        "detail": "options.preferences",
        "documentation": {}
    },
    {
        "label": "TeamCodeNames",
        "importPath": "options.preferences",
        "description": "options.preferences",
        "isExtraImport": true,
        "detail": "options.preferences",
        "documentation": {}
    },
    {
        "label": "scoring",
        "importPath": "options.preferences",
        "description": "options.preferences",
        "isExtraImport": true,
        "detail": "options.preferences",
        "documentation": {}
    },
    {
        "label": "TournamentStaff",
        "importPath": "options.preferences",
        "description": "options.preferences",
        "isExtraImport": true,
        "detail": "options.preferences",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseRedirect",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseBadRequest",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseRedirect",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "Http404",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseRedirect",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseRedirect",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseRedirect",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "FormView",
        "importPath": "django.views.generic.edit",
        "description": "django.views.generic.edit",
        "isExtraImport": true,
        "detail": "django.views.generic.edit",
        "documentation": {}
    },
    {
        "label": "FormView",
        "importPath": "django.views.generic.edit",
        "description": "django.views.generic.edit",
        "isExtraImport": true,
        "detail": "django.views.generic.edit",
        "documentation": {}
    },
    {
        "label": "FormView",
        "importPath": "django.views.generic.edit",
        "description": "django.views.generic.edit",
        "isExtraImport": true,
        "detail": "django.views.generic.edit",
        "documentation": {}
    },
    {
        "label": "FormView",
        "importPath": "django.views.generic.edit",
        "description": "django.views.generic.edit",
        "isExtraImport": true,
        "detail": "django.views.generic.edit",
        "documentation": {}
    },
    {
        "label": "CreateView",
        "importPath": "django.views.generic.edit",
        "description": "django.views.generic.edit",
        "isExtraImport": true,
        "detail": "django.views.generic.edit",
        "documentation": {}
    },
    {
        "label": "FormView",
        "importPath": "django.views.generic.edit",
        "description": "django.views.generic.edit",
        "isExtraImport": true,
        "detail": "django.views.generic.edit",
        "documentation": {}
    },
    {
        "label": "UpdateView",
        "importPath": "django.views.generic.edit",
        "description": "django.views.generic.edit",
        "isExtraImport": true,
        "detail": "django.views.generic.edit",
        "documentation": {}
    },
    {
        "label": "team_name_for_data_entry",
        "importPath": "participants.templatetags.team_name_for_data_entry",
        "description": "participants.templatetags.team_name_for_data_entry",
        "isExtraImport": true,
        "detail": "participants.templatetags.team_name_for_data_entry",
        "documentation": {}
    },
    {
        "label": "team_name_for_data_entry",
        "importPath": "participants.templatetags.team_name_for_data_entry",
        "description": "participants.templatetags.team_name_for_data_entry",
        "isExtraImport": true,
        "detail": "participants.templatetags.team_name_for_data_entry",
        "documentation": {}
    },
    {
        "label": "team_name_for_data_entry",
        "importPath": "participants.templatetags.team_name_for_data_entry",
        "description": "participants.templatetags.team_name_for_data_entry",
        "isExtraImport": true,
        "detail": "participants.templatetags.team_name_for_data_entry",
        "documentation": {}
    },
    {
        "label": "PublicSubmissionFieldsMixin",
        "importPath": "results.mixins",
        "description": "results.mixins",
        "isExtraImport": true,
        "detail": "results.mixins",
        "documentation": {}
    },
    {
        "label": "TabroomSubmissionFieldsMixin",
        "importPath": "results.mixins",
        "description": "results.mixins",
        "isExtraImport": true,
        "detail": "results.mixins",
        "documentation": {}
    },
    {
        "label": "TabroomSubmissionFieldsMixin",
        "importPath": "results.mixins",
        "description": "results.mixins",
        "isExtraImport": true,
        "detail": "results.mixins",
        "documentation": {}
    },
    {
        "label": "zoneinfo",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "zoneinfo",
        "description": "zoneinfo",
        "detail": "zoneinfo",
        "documentation": {}
    },
    {
        "label": "ZoneInfo",
        "importPath": "zoneinfo",
        "description": "zoneinfo",
        "isExtraImport": true,
        "detail": "zoneinfo",
        "documentation": {}
    },
    {
        "label": "APIClient",
        "importPath": "rest_framework.test",
        "description": "rest_framework.test",
        "isExtraImport": true,
        "detail": "rest_framework.test",
        "documentation": {}
    },
    {
        "label": "APITestCase",
        "importPath": "rest_framework.test",
        "description": "rest_framework.test",
        "isExtraImport": true,
        "detail": "rest_framework.test",
        "documentation": {}
    },
    {
        "label": "APITestCase",
        "importPath": "rest_framework.test",
        "description": "rest_framework.test",
        "isExtraImport": true,
        "detail": "rest_framework.test",
        "documentation": {}
    },
    {
        "label": "motions.models",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "motions.models",
        "description": "motions.models",
        "detail": "motions.models",
        "documentation": {}
    },
    {
        "label": "Motion",
        "importPath": "motions.models",
        "description": "motions.models",
        "isExtraImport": true,
        "detail": "motions.models",
        "documentation": {}
    },
    {
        "label": "RoundMotion",
        "importPath": "motions.models",
        "description": "motions.models",
        "isExtraImport": true,
        "detail": "motions.models",
        "documentation": {}
    },
    {
        "label": "DebateTeamMotionPreference",
        "importPath": "motions.models",
        "description": "motions.models",
        "isExtraImport": true,
        "detail": "motions.models",
        "documentation": {}
    },
    {
        "label": "Motion",
        "importPath": "motions.models",
        "description": "motions.models",
        "isExtraImport": true,
        "detail": "motions.models",
        "documentation": {}
    },
    {
        "label": "RoundMotion",
        "importPath": "motions.models",
        "description": "motions.models",
        "isExtraImport": true,
        "detail": "motions.models",
        "documentation": {}
    },
    {
        "label": "DebateTeamMotionPreference",
        "importPath": "motions.models",
        "description": "motions.models",
        "isExtraImport": true,
        "detail": "motions.models",
        "documentation": {}
    },
    {
        "label": "Motion",
        "importPath": "motions.models",
        "description": "motions.models",
        "isExtraImport": true,
        "detail": "motions.models",
        "documentation": {}
    },
    {
        "label": "RoundMotion",
        "importPath": "motions.models",
        "description": "motions.models",
        "isExtraImport": true,
        "detail": "motions.models",
        "documentation": {}
    },
    {
        "label": "DebateTeamMotionPreference",
        "importPath": "motions.models",
        "description": "motions.models",
        "isExtraImport": true,
        "detail": "motions.models",
        "documentation": {}
    },
    {
        "label": "Motion",
        "importPath": "motions.models",
        "description": "motions.models",
        "isExtraImport": true,
        "detail": "motions.models",
        "documentation": {}
    },
    {
        "label": "RoundMotion",
        "importPath": "motions.models",
        "description": "motions.models",
        "isExtraImport": true,
        "detail": "motions.models",
        "documentation": {}
    },
    {
        "label": "RoundMotion",
        "importPath": "motions.models",
        "description": "motions.models",
        "isExtraImport": true,
        "detail": "motions.models",
        "documentation": {}
    },
    {
        "label": "RoundMotion",
        "importPath": "motions.models",
        "description": "motions.models",
        "isExtraImport": true,
        "detail": "motions.models",
        "documentation": {}
    },
    {
        "label": "DebateTeamMotionPreference",
        "importPath": "motions.models",
        "description": "motions.models",
        "isExtraImport": true,
        "detail": "motions.models",
        "documentation": {}
    },
    {
        "label": "RoundMotion",
        "importPath": "motions.models",
        "description": "motions.models",
        "isExtraImport": true,
        "detail": "motions.models",
        "documentation": {}
    },
    {
        "label": "Motion",
        "importPath": "motions.models",
        "description": "motions.models",
        "isExtraImport": true,
        "detail": "motions.models",
        "documentation": {}
    },
    {
        "label": "CanadianParliamentaryPreferences",
        "importPath": "options.presets",
        "description": "options.presets",
        "isExtraImport": true,
        "detail": "options.presets",
        "documentation": {}
    },
    {
        "label": "AustralianEastersPreferences",
        "importPath": "options.presets",
        "description": "options.presets",
        "isExtraImport": true,
        "detail": "options.presets",
        "documentation": {}
    },
    {
        "label": "AustralsPreferences",
        "importPath": "options.presets",
        "description": "options.presets",
        "isExtraImport": true,
        "detail": "options.presets",
        "documentation": {}
    },
    {
        "label": "BritishParliamentaryPreferences",
        "importPath": "options.presets",
        "description": "options.presets",
        "isExtraImport": true,
        "detail": "options.presets",
        "documentation": {}
    },
    {
        "label": "CanadianParliamentaryPreferences",
        "importPath": "options.presets",
        "description": "options.presets",
        "isExtraImport": true,
        "detail": "options.presets",
        "documentation": {}
    },
    {
        "label": "JoyntPreferences",
        "importPath": "options.presets",
        "description": "options.presets",
        "isExtraImport": true,
        "detail": "options.presets",
        "documentation": {}
    },
    {
        "label": "NZEastersPreferences",
        "importPath": "options.presets",
        "description": "options.presets",
        "isExtraImport": true,
        "detail": "options.presets",
        "documentation": {}
    },
    {
        "label": "UADCPreferences",
        "importPath": "options.presets",
        "description": "options.presets",
        "isExtraImport": true,
        "detail": "options.presets",
        "documentation": {}
    },
    {
        "label": "WSDCPreferences",
        "importPath": "options.presets",
        "description": "options.presets",
        "isExtraImport": true,
        "detail": "options.presets",
        "documentation": {}
    },
    {
        "label": "PreferencesPreset",
        "importPath": "options.presets",
        "description": "options.presets",
        "isExtraImport": true,
        "detail": "options.presets",
        "documentation": {}
    },
    {
        "label": "get_preset_from_slug",
        "importPath": "options.presets",
        "description": "options.presets",
        "isExtraImport": true,
        "detail": "options.presets",
        "documentation": {}
    },
    {
        "label": "PreferencesPreset",
        "importPath": "options.presets",
        "description": "options.presets",
        "isExtraImport": true,
        "detail": "options.presets",
        "documentation": {}
    },
    {
        "label": "PreferencesPreset",
        "importPath": "options.presets",
        "description": "options.presets",
        "isExtraImport": true,
        "detail": "options.presets",
        "documentation": {}
    },
    {
        "label": "PublicInformation",
        "importPath": "options.presets",
        "description": "options.presets",
        "isExtraImport": true,
        "detail": "options.presets",
        "documentation": {}
    },
    {
        "label": "all_presets",
        "importPath": "options.presets",
        "description": "options.presets",
        "isExtraImport": true,
        "detail": "options.presets",
        "documentation": {}
    },
    {
        "label": "data_entry_presets_for_form",
        "importPath": "options.presets",
        "description": "options.presets",
        "isExtraImport": true,
        "detail": "options.presets",
        "documentation": {}
    },
    {
        "label": "presets_for_form",
        "importPath": "options.presets",
        "description": "options.presets",
        "isExtraImport": true,
        "detail": "options.presets",
        "documentation": {}
    },
    {
        "label": "PrivateURLs",
        "importPath": "options.presets",
        "description": "options.presets",
        "isExtraImport": true,
        "detail": "options.presets",
        "documentation": {}
    },
    {
        "label": "public_presets_for_form",
        "importPath": "options.presets",
        "description": "options.presets",
        "isExtraImport": true,
        "detail": "options.presets",
        "documentation": {}
    },
    {
        "label": "PublicForms",
        "importPath": "options.presets",
        "description": "options.presets",
        "isExtraImport": true,
        "detail": "options.presets",
        "documentation": {}
    },
    {
        "label": "PublicInformation",
        "importPath": "options.presets",
        "description": "options.presets",
        "isExtraImport": true,
        "detail": "options.presets",
        "documentation": {}
    },
    {
        "label": "_all_subclasses",
        "importPath": "options.presets",
        "description": "options.presets",
        "isExtraImport": true,
        "detail": "options.presets",
        "documentation": {}
    },
    {
        "label": "global_preferences_registry",
        "importPath": "dynamic_preferences.registries",
        "description": "dynamic_preferences.registries",
        "isExtraImport": true,
        "detail": "dynamic_preferences.registries",
        "documentation": {}
    },
    {
        "label": "global_preferences_registry",
        "importPath": "dynamic_preferences.registries",
        "description": "dynamic_preferences.registries",
        "isExtraImport": true,
        "detail": "dynamic_preferences.registries",
        "documentation": {}
    },
    {
        "label": "preference_models",
        "importPath": "dynamic_preferences.registries",
        "description": "dynamic_preferences.registries",
        "isExtraImport": true,
        "detail": "dynamic_preferences.registries",
        "documentation": {}
    },
    {
        "label": "global_preferences_registry",
        "importPath": "dynamic_preferences.registries",
        "description": "dynamic_preferences.registries",
        "isExtraImport": true,
        "detail": "dynamic_preferences.registries",
        "documentation": {}
    },
    {
        "label": "PerInstancePreferenceRegistry",
        "importPath": "dynamic_preferences.registries",
        "description": "dynamic_preferences.registries",
        "isExtraImport": true,
        "detail": "dynamic_preferences.registries",
        "documentation": {}
    },
    {
        "label": "global_preferences_registry",
        "importPath": "dynamic_preferences.registries",
        "description": "dynamic_preferences.registries",
        "isExtraImport": true,
        "detail": "dynamic_preferences.registries",
        "documentation": {}
    },
    {
        "label": "breakqual.models",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "breakqual.models",
        "description": "breakqual.models",
        "detail": "breakqual.models",
        "documentation": {}
    },
    {
        "label": "BreakingTeam",
        "importPath": "breakqual.models",
        "description": "breakqual.models",
        "isExtraImport": true,
        "detail": "breakqual.models",
        "documentation": {}
    },
    {
        "label": "BreakCategory",
        "importPath": "breakqual.models",
        "description": "breakqual.models",
        "isExtraImport": true,
        "detail": "breakqual.models",
        "documentation": {}
    },
    {
        "label": "BreakingTeam",
        "importPath": "breakqual.models",
        "description": "breakqual.models",
        "isExtraImport": true,
        "detail": "breakqual.models",
        "documentation": {}
    },
    {
        "label": "BreakCategory",
        "importPath": "breakqual.models",
        "description": "breakqual.models",
        "isExtraImport": true,
        "detail": "breakqual.models",
        "documentation": {}
    },
    {
        "label": "BreakingTeam",
        "importPath": "breakqual.models",
        "description": "breakqual.models",
        "isExtraImport": true,
        "detail": "breakqual.models",
        "documentation": {}
    },
    {
        "label": "BreakingTeam",
        "importPath": "breakqual.models",
        "description": "breakqual.models",
        "isExtraImport": true,
        "detail": "breakqual.models",
        "documentation": {}
    },
    {
        "label": "BreakCategory",
        "importPath": "breakqual.models",
        "description": "breakqual.models",
        "isExtraImport": true,
        "detail": "breakqual.models",
        "documentation": {}
    },
    {
        "label": "BreakCategory",
        "importPath": "breakqual.models",
        "description": "breakqual.models",
        "isExtraImport": true,
        "detail": "breakqual.models",
        "documentation": {}
    },
    {
        "label": "BreakCategory",
        "importPath": "breakqual.models",
        "description": "breakqual.models",
        "isExtraImport": true,
        "detail": "breakqual.models",
        "documentation": {}
    },
    {
        "label": "BreakCategory",
        "importPath": "breakqual.models",
        "description": "breakqual.models",
        "isExtraImport": true,
        "detail": "breakqual.models",
        "documentation": {}
    },
    {
        "label": "BreakCategory",
        "importPath": "breakqual.models",
        "description": "breakqual.models",
        "isExtraImport": true,
        "detail": "breakqual.models",
        "documentation": {}
    },
    {
        "label": "parse",
        "importPath": "urllib",
        "description": "urllib",
        "isExtraImport": true,
        "detail": "urllib",
        "documentation": {}
    },
    {
        "label": "uri_to_iri",
        "importPath": "django.utils.encoding",
        "description": "django.utils.encoding",
        "isExtraImport": true,
        "detail": "django.utils.encoding",
        "documentation": {}
    },
    {
        "label": "force_str",
        "importPath": "django.utils.encoding",
        "description": "django.utils.encoding",
        "isExtraImport": true,
        "detail": "django.utils.encoding",
        "documentation": {}
    },
    {
        "label": "force_str",
        "importPath": "django.utils.encoding",
        "description": "django.utils.encoding",
        "isExtraImport": true,
        "detail": "django.utils.encoding",
        "documentation": {}
    },
    {
        "label": "force_str",
        "importPath": "django.utils.encoding",
        "description": "django.utils.encoding",
        "isExtraImport": true,
        "detail": "django.utils.encoding",
        "documentation": {}
    },
    {
        "label": "force_str",
        "importPath": "django.utils.encoding",
        "description": "django.utils.encoding",
        "isExtraImport": true,
        "detail": "django.utils.encoding",
        "documentation": {}
    },
    {
        "label": "force_str",
        "importPath": "django.utils.encoding",
        "description": "django.utils.encoding",
        "isExtraImport": true,
        "detail": "django.utils.encoding",
        "documentation": {}
    },
    {
        "label": "force_str",
        "importPath": "django.utils.encoding",
        "description": "django.utils.encoding",
        "isExtraImport": true,
        "detail": "django.utils.encoding",
        "documentation": {}
    },
    {
        "label": "force_str",
        "importPath": "django.utils.encoding",
        "description": "django.utils.encoding",
        "isExtraImport": true,
        "detail": "django.utils.encoding",
        "documentation": {}
    },
    {
        "label": "extend_schema_field",
        "importPath": "drf_spectacular.utils",
        "description": "drf_spectacular.utils",
        "isExtraImport": true,
        "detail": "drf_spectacular.utils",
        "documentation": {}
    },
    {
        "label": "extend_schema_field",
        "importPath": "drf_spectacular.utils",
        "description": "drf_spectacular.utils",
        "isExtraImport": true,
        "detail": "drf_spectacular.utils",
        "documentation": {}
    },
    {
        "label": "extend_schema",
        "importPath": "drf_spectacular.utils",
        "description": "drf_spectacular.utils",
        "isExtraImport": true,
        "detail": "drf_spectacular.utils",
        "documentation": {}
    },
    {
        "label": "extend_schema_view",
        "importPath": "drf_spectacular.utils",
        "description": "drf_spectacular.utils",
        "isExtraImport": true,
        "detail": "drf_spectacular.utils",
        "documentation": {}
    },
    {
        "label": "OpenApiParameter",
        "importPath": "drf_spectacular.utils",
        "description": "drf_spectacular.utils",
        "isExtraImport": true,
        "detail": "drf_spectacular.utils",
        "documentation": {}
    },
    {
        "label": "Hyperlink",
        "importPath": "rest_framework.relations",
        "description": "rest_framework.relations",
        "isExtraImport": true,
        "detail": "rest_framework.relations",
        "documentation": {}
    },
    {
        "label": "HyperlinkedIdentityField",
        "importPath": "rest_framework.relations",
        "description": "rest_framework.relations",
        "isExtraImport": true,
        "detail": "rest_framework.relations",
        "documentation": {}
    },
    {
        "label": "HyperlinkedRelatedField",
        "importPath": "rest_framework.relations",
        "description": "rest_framework.relations",
        "isExtraImport": true,
        "detail": "rest_framework.relations",
        "documentation": {}
    },
    {
        "label": "SlugRelatedField",
        "importPath": "rest_framework.relations",
        "description": "rest_framework.relations",
        "isExtraImport": true,
        "detail": "rest_framework.relations",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "rest_framework.reverse",
        "description": "rest_framework.reverse",
        "isExtraImport": true,
        "detail": "rest_framework.reverse",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "rest_framework.reverse",
        "description": "rest_framework.reverse",
        "isExtraImport": true,
        "detail": "rest_framework.reverse",
        "documentation": {}
    },
    {
        "label": "CharField",
        "importPath": "rest_framework.serializers",
        "description": "rest_framework.serializers",
        "isExtraImport": true,
        "detail": "rest_framework.serializers",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "rest_framework.serializers",
        "description": "rest_framework.serializers",
        "isExtraImport": true,
        "detail": "rest_framework.serializers",
        "documentation": {}
    },
    {
        "label": "IntegerField",
        "importPath": "rest_framework.serializers",
        "description": "rest_framework.serializers",
        "isExtraImport": true,
        "detail": "rest_framework.serializers",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "rest_framework.generics",
        "description": "rest_framework.generics",
        "isExtraImport": true,
        "detail": "rest_framework.generics",
        "documentation": {}
    },
    {
        "label": "GenericAPIView",
        "importPath": "rest_framework.generics",
        "description": "rest_framework.generics",
        "isExtraImport": true,
        "detail": "rest_framework.generics",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "rest_framework.generics",
        "description": "rest_framework.generics",
        "isExtraImport": true,
        "detail": "rest_framework.generics",
        "documentation": {}
    },
    {
        "label": "RetrieveUpdateAPIView",
        "importPath": "rest_framework.generics",
        "description": "rest_framework.generics",
        "isExtraImport": true,
        "detail": "rest_framework.generics",
        "documentation": {}
    },
    {
        "label": "IsAdminUser",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "BasePermission",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "SAFE_METHODS",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "IsAdminUser",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "partial",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "partialmethod",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "wraps",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "get_error_detail",
        "importPath": "rest_framework.fields",
        "description": "rest_framework.fields",
        "isExtraImport": true,
        "detail": "rest_framework.fields",
        "documentation": {}
    },
    {
        "label": "SkipField",
        "importPath": "rest_framework.fields",
        "description": "rest_framework.fields",
        "isExtraImport": true,
        "detail": "rest_framework.fields",
        "documentation": {}
    },
    {
        "label": "DateTimeField",
        "importPath": "rest_framework.fields",
        "description": "rest_framework.fields",
        "isExtraImport": true,
        "detail": "rest_framework.fields",
        "documentation": {}
    },
    {
        "label": "api_settings",
        "importPath": "rest_framework.settings",
        "description": "rest_framework.settings",
        "isExtraImport": true,
        "detail": "rest_framework.settings",
        "documentation": {}
    },
    {
        "label": "pick_unused_emoji",
        "importPath": "participants.emoji",
        "description": "participants.emoji",
        "isExtraImport": true,
        "detail": "participants.emoji",
        "documentation": {}
    },
    {
        "label": "set_emoji",
        "importPath": "participants.emoji",
        "description": "participants.emoji",
        "isExtraImport": true,
        "detail": "participants.emoji",
        "documentation": {}
    },
    {
        "label": "set_emoji",
        "importPath": "participants.emoji",
        "description": "participants.emoji",
        "isExtraImport": true,
        "detail": "participants.emoji",
        "documentation": {}
    },
    {
        "label": "EMOJI_BY_NAME",
        "importPath": "participants.emoji",
        "description": "participants.emoji",
        "isExtraImport": true,
        "detail": "participants.emoji",
        "documentation": {}
    },
    {
        "label": "set_emoji",
        "importPath": "participants.emoji",
        "description": "participants.emoji",
        "isExtraImport": true,
        "detail": "participants.emoji",
        "documentation": {}
    },
    {
        "label": "populate_code_names",
        "importPath": "participants.utils",
        "description": "participants.utils",
        "isExtraImport": true,
        "detail": "participants.utils",
        "documentation": {}
    },
    {
        "label": "get_side_history",
        "importPath": "participants.utils",
        "description": "participants.utils",
        "isExtraImport": true,
        "detail": "participants.utils",
        "documentation": {}
    },
    {
        "label": "get_side_history",
        "importPath": "participants.utils",
        "description": "participants.utils",
        "isExtraImport": true,
        "detail": "participants.utils",
        "documentation": {}
    },
    {
        "label": "get_side_history",
        "importPath": "participants.utils",
        "description": "participants.utils",
        "isExtraImport": true,
        "detail": "participants.utils",
        "documentation": {}
    },
    {
        "label": "populate_code_names",
        "importPath": "participants.utils",
        "description": "participants.utils",
        "isExtraImport": true,
        "detail": "participants.utils",
        "documentation": {}
    },
    {
        "label": "regions_ordered",
        "importPath": "participants.utils",
        "description": "participants.utils",
        "isExtraImport": true,
        "detail": "participants.utils",
        "documentation": {}
    },
    {
        "label": "populate_url_keys",
        "importPath": "privateurls.utils",
        "description": "privateurls.utils",
        "isExtraImport": true,
        "detail": "privateurls.utils",
        "documentation": {}
    },
    {
        "label": "populate_url_keys",
        "importPath": "privateurls.utils",
        "description": "privateurls.utils",
        "isExtraImport": true,
        "detail": "privateurls.utils",
        "documentation": {}
    },
    {
        "label": "SpeakerStandingsGenerator",
        "importPath": "standings.speakers",
        "description": "standings.speakers",
        "isExtraImport": true,
        "detail": "standings.speakers",
        "documentation": {}
    },
    {
        "label": "SpeakerStandingsGenerator",
        "importPath": "standings.speakers",
        "description": "standings.speakers",
        "isExtraImport": true,
        "detail": "standings.speakers",
        "documentation": {}
    },
    {
        "label": "SpeakerStandingsGenerator",
        "importPath": "standings.speakers",
        "description": "standings.speakers",
        "isExtraImport": true,
        "detail": "standings.speakers",
        "documentation": {}
    },
    {
        "label": "TeamStandingsGenerator",
        "importPath": "standings.teams",
        "description": "standings.teams",
        "isExtraImport": true,
        "detail": "standings.teams",
        "documentation": {}
    },
    {
        "label": "TeamStandingsGenerator",
        "importPath": "standings.teams",
        "description": "standings.teams",
        "isExtraImport": true,
        "detail": "standings.teams",
        "documentation": {}
    },
    {
        "label": "TeamStandingsGenerator",
        "importPath": "standings.teams",
        "description": "standings.teams",
        "isExtraImport": true,
        "detail": "standings.teams",
        "documentation": {}
    },
    {
        "label": "TeamStandingsGenerator",
        "importPath": "standings.teams",
        "description": "standings.teams",
        "isExtraImport": true,
        "detail": "standings.teams",
        "documentation": {}
    },
    {
        "label": "TeamStandingsGenerator",
        "importPath": "standings.teams",
        "description": "standings.teams",
        "isExtraImport": true,
        "detail": "standings.teams",
        "documentation": {}
    },
    {
        "label": "TeamStandingsGenerator",
        "importPath": "standings.teams",
        "description": "standings.teams",
        "isExtraImport": true,
        "detail": "standings.teams",
        "documentation": {}
    },
    {
        "label": "TeamStandingsGenerator",
        "importPath": "standings.teams",
        "description": "standings.teams",
        "isExtraImport": true,
        "detail": "standings.teams",
        "documentation": {}
    },
    {
        "label": "TeamStandingsGenerator",
        "importPath": "standings.teams",
        "description": "standings.teams",
        "isExtraImport": true,
        "detail": "standings.teams",
        "documentation": {}
    },
    {
        "label": "PointsMetricAnnotator",
        "importPath": "standings.teams",
        "description": "standings.teams",
        "isExtraImport": true,
        "detail": "standings.teams",
        "documentation": {}
    },
    {
        "label": "WinsMetricAnnotator",
        "importPath": "standings.teams",
        "description": "standings.teams",
        "isExtraImport": true,
        "detail": "standings.teams",
        "documentation": {}
    },
    {
        "label": "Group",
        "importPath": "users.models",
        "description": "users.models",
        "isExtraImport": true,
        "detail": "users.models",
        "documentation": {}
    },
    {
        "label": "Group",
        "importPath": "users.models",
        "description": "users.models",
        "isExtraImport": true,
        "detail": "users.models",
        "documentation": {}
    },
    {
        "label": "post_save",
        "importPath": "django.db.models.signals",
        "description": "django.db.models.signals",
        "isExtraImport": true,
        "detail": "django.db.models.signals",
        "documentation": {}
    },
    {
        "label": "post_save",
        "importPath": "django.db.models.signals",
        "description": "django.db.models.signals",
        "isExtraImport": true,
        "detail": "django.db.models.signals",
        "documentation": {}
    },
    {
        "label": "post_delete",
        "importPath": "django.db.models.signals",
        "description": "django.db.models.signals",
        "isExtraImport": true,
        "detail": "django.db.models.signals",
        "documentation": {}
    },
    {
        "label": "post_save",
        "importPath": "django.db.models.signals",
        "description": "django.db.models.signals",
        "isExtraImport": true,
        "detail": "django.db.models.signals",
        "documentation": {}
    },
    {
        "label": "receiver",
        "importPath": "django.dispatch",
        "description": "django.dispatch",
        "isExtraImport": true,
        "detail": "django.dispatch",
        "documentation": {}
    },
    {
        "label": "receiver",
        "importPath": "django.dispatch",
        "description": "django.dispatch",
        "isExtraImport": true,
        "detail": "django.dispatch",
        "documentation": {}
    },
    {
        "label": "receiver",
        "importPath": "django.dispatch",
        "description": "django.dispatch",
        "isExtraImport": true,
        "detail": "django.dispatch",
        "documentation": {}
    },
    {
        "label": "receiver",
        "importPath": "django.dispatch",
        "description": "django.dispatch",
        "isExtraImport": true,
        "detail": "django.dispatch",
        "documentation": {}
    },
    {
        "label": "Token",
        "importPath": "rest_framework.authtoken.models",
        "description": "rest_framework.authtoken.models",
        "isExtraImport": true,
        "detail": "rest_framework.authtoken.models",
        "documentation": {}
    },
    {
        "label": "SpectacularAPIView",
        "importPath": "drf_spectacular.views",
        "description": "drf_spectacular.views",
        "isExtraImport": true,
        "detail": "drf_spectacular.views",
        "documentation": {}
    },
    {
        "label": "SpectacularRedocView",
        "importPath": "drf_spectacular.views",
        "description": "drf_spectacular.views",
        "isExtraImport": true,
        "detail": "drf_spectacular.views",
        "documentation": {}
    },
    {
        "label": "SimpleRouter",
        "importPath": "rest_framework.routers",
        "description": "rest_framework.routers",
        "isExtraImport": true,
        "detail": "rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "copy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "copy",
        "description": "copy",
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "deepcopy",
        "importPath": "copy",
        "description": "copy",
        "isExtraImport": true,
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "copy",
        "importPath": "copy",
        "description": "copy",
        "isExtraImport": true,
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "PreferenceSerializer",
        "importPath": "dynamic_preferences.api.serializers",
        "description": "dynamic_preferences.api.serializers",
        "isExtraImport": true,
        "detail": "dynamic_preferences.api.serializers",
        "documentation": {}
    },
    {
        "label": "PerInstancePreferenceViewSet",
        "importPath": "dynamic_preferences.api.viewsets",
        "description": "dynamic_preferences.api.viewsets",
        "isExtraImport": true,
        "detail": "dynamic_preferences.api.viewsets",
        "documentation": {}
    },
    {
        "label": "NotFound",
        "importPath": "rest_framework.exceptions",
        "description": "rest_framework.exceptions",
        "isExtraImport": true,
        "detail": "rest_framework.exceptions",
        "documentation": {}
    },
    {
        "label": "ListModelMixin",
        "importPath": "rest_framework.mixins",
        "description": "rest_framework.mixins",
        "isExtraImport": true,
        "detail": "rest_framework.mixins",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "GenericViewSet",
        "importPath": "rest_framework.viewsets",
        "description": "rest_framework.viewsets",
        "isExtraImport": true,
        "detail": "rest_framework.viewsets",
        "documentation": {}
    },
    {
        "label": "ModelViewSet",
        "importPath": "rest_framework.viewsets",
        "description": "rest_framework.viewsets",
        "isExtraImport": true,
        "detail": "rest_framework.viewsets",
        "documentation": {}
    },
    {
        "label": "calculate_anticipated_draw",
        "importPath": "adjallocation.preformed.anticipated",
        "description": "adjallocation.preformed.anticipated",
        "isExtraImport": true,
        "detail": "adjallocation.preformed.anticipated",
        "documentation": {}
    },
    {
        "label": "availability.models",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "availability.models",
        "description": "availability.models",
        "detail": "availability.models",
        "documentation": {}
    },
    {
        "label": "RoundAvailability",
        "importPath": "availability.models",
        "description": "availability.models",
        "isExtraImport": true,
        "detail": "availability.models",
        "documentation": {}
    },
    {
        "label": "RoundAvailability",
        "importPath": "availability.models",
        "description": "availability.models",
        "isExtraImport": true,
        "detail": "availability.models",
        "documentation": {}
    },
    {
        "label": "RoundAvailability",
        "importPath": "availability.models",
        "description": "availability.models",
        "isExtraImport": true,
        "detail": "availability.models",
        "documentation": {}
    },
    {
        "label": "RoundAvailability",
        "importPath": "availability.models",
        "description": "availability.models",
        "isExtraImport": true,
        "detail": "availability.models",
        "documentation": {}
    },
    {
        "label": "GenerateBreakMixin",
        "importPath": "breakqual.views",
        "description": "breakqual.views",
        "isExtraImport": true,
        "detail": "breakqual.views",
        "documentation": {}
    },
    {
        "label": "CheckInEventConsumer",
        "importPath": "checkins.consumers",
        "description": "checkins.consumers",
        "isExtraImport": true,
        "detail": "checkins.consumers",
        "documentation": {}
    },
    {
        "label": "CheckInEventConsumer",
        "importPath": "checkins.consumers",
        "description": "checkins.consumers",
        "isExtraImport": true,
        "detail": "checkins.consumers",
        "documentation": {}
    },
    {
        "label": "checkins.models",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "checkins.models",
        "description": "checkins.models",
        "detail": "checkins.models",
        "documentation": {}
    },
    {
        "label": "Event",
        "importPath": "checkins.models",
        "description": "checkins.models",
        "isExtraImport": true,
        "detail": "checkins.models",
        "documentation": {}
    },
    {
        "label": "PersonIdentifier",
        "importPath": "checkins.models",
        "description": "checkins.models",
        "isExtraImport": true,
        "detail": "checkins.models",
        "documentation": {}
    },
    {
        "label": "VenueIdentifier",
        "importPath": "checkins.models",
        "description": "checkins.models",
        "isExtraImport": true,
        "detail": "checkins.models",
        "documentation": {}
    },
    {
        "label": "PersonIdentifier",
        "importPath": "checkins.models",
        "description": "checkins.models",
        "isExtraImport": true,
        "detail": "checkins.models",
        "documentation": {}
    },
    {
        "label": "VenueIdentifier",
        "importPath": "checkins.models",
        "description": "checkins.models",
        "isExtraImport": true,
        "detail": "checkins.models",
        "documentation": {}
    },
    {
        "label": "DebateIdentifier",
        "importPath": "checkins.models",
        "description": "checkins.models",
        "isExtraImport": true,
        "detail": "checkins.models",
        "documentation": {}
    },
    {
        "label": "PersonIdentifier",
        "importPath": "checkins.models",
        "description": "checkins.models",
        "isExtraImport": true,
        "detail": "checkins.models",
        "documentation": {}
    },
    {
        "label": "create_identifiers",
        "importPath": "checkins.utils",
        "description": "checkins.utils",
        "isExtraImport": true,
        "detail": "checkins.utils",
        "documentation": {}
    },
    {
        "label": "get_unexpired_checkins",
        "importPath": "checkins.utils",
        "description": "checkins.utils",
        "isExtraImport": true,
        "detail": "checkins.utils",
        "documentation": {}
    },
    {
        "label": "get_checkins",
        "importPath": "checkins.utils",
        "description": "checkins.utils",
        "isExtraImport": true,
        "detail": "checkins.utils",
        "documentation": {}
    },
    {
        "label": "create_identifiers",
        "importPath": "checkins.utils",
        "description": "checkins.utils",
        "isExtraImport": true,
        "detail": "checkins.utils",
        "documentation": {}
    },
    {
        "label": "get_unexpired_checkins",
        "importPath": "checkins.utils",
        "description": "checkins.utils",
        "isExtraImport": true,
        "detail": "checkins.utils",
        "documentation": {}
    },
    {
        "label": "get_checkins",
        "importPath": "checkins.utils",
        "description": "checkins.utils",
        "isExtraImport": true,
        "detail": "checkins.utils",
        "documentation": {}
    },
    {
        "label": "TournamentPreferenceModel",
        "importPath": "options.models",
        "description": "options.models",
        "isExtraImport": true,
        "detail": "options.models",
        "documentation": {}
    },
    {
        "label": "TournamentPreferenceModel",
        "importPath": "options.models",
        "description": "options.models",
        "isExtraImport": true,
        "detail": "options.models",
        "documentation": {}
    },
    {
        "label": "django.db.models.query_utils",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.query_utils",
        "description": "django.db.models.query_utils",
        "detail": "django.db.models.query_utils",
        "documentation": {}
    },
    {
        "label": "GenericTabularInline",
        "importPath": "django.contrib.contenttypes.admin",
        "description": "django.contrib.contenttypes.admin",
        "isExtraImport": true,
        "detail": "django.contrib.contenttypes.admin",
        "documentation": {}
    },
    {
        "label": "GenericTabularInline",
        "importPath": "django.contrib.contenttypes.admin",
        "description": "django.contrib.contenttypes.admin",
        "isExtraImport": true,
        "detail": "django.contrib.contenttypes.admin",
        "documentation": {}
    },
    {
        "label": "Coalesce",
        "importPath": "django.db.models.functions",
        "description": "django.db.models.functions",
        "isExtraImport": true,
        "detail": "django.db.models.functions",
        "documentation": {}
    },
    {
        "label": "Coalesce",
        "importPath": "django.db.models.functions",
        "description": "django.db.models.functions",
        "isExtraImport": true,
        "detail": "django.db.models.functions",
        "documentation": {}
    },
    {
        "label": "Coalesce",
        "importPath": "django.db.models.functions",
        "description": "django.db.models.functions",
        "isExtraImport": true,
        "detail": "django.db.models.functions",
        "documentation": {}
    },
    {
        "label": "Coalesce",
        "importPath": "django.db.models.functions",
        "description": "django.db.models.functions",
        "isExtraImport": true,
        "detail": "django.db.models.functions",
        "documentation": {}
    },
    {
        "label": "Coalesce",
        "importPath": "django.db.models.functions",
        "description": "django.db.models.functions",
        "isExtraImport": true,
        "detail": "django.db.models.functions",
        "documentation": {}
    },
    {
        "label": "Coalesce",
        "importPath": "django.db.models.functions",
        "description": "django.db.models.functions",
        "isExtraImport": true,
        "detail": "django.db.models.functions",
        "documentation": {}
    },
    {
        "label": "Rank",
        "importPath": "django.db.models.functions",
        "description": "django.db.models.functions",
        "isExtraImport": true,
        "detail": "django.db.models.functions",
        "documentation": {}
    },
    {
        "label": "Rank",
        "importPath": "django.db.models.functions",
        "description": "django.db.models.functions",
        "isExtraImport": true,
        "detail": "django.db.models.functions",
        "documentation": {}
    },
    {
        "label": "Cast",
        "importPath": "django.db.models.functions",
        "description": "django.db.models.functions",
        "isExtraImport": true,
        "detail": "django.db.models.functions",
        "documentation": {}
    },
    {
        "label": "NullIf",
        "importPath": "django.db.models.functions",
        "description": "django.db.models.functions",
        "isExtraImport": true,
        "detail": "django.db.models.functions",
        "documentation": {}
    },
    {
        "label": "django.core.validators",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "MinValueValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "RegexValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "validate_email",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "MinValueValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "validate_slug",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "FormView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "TemplateView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "TemplateView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "TemplateView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "FormView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "TemplateView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "FormView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "TemplateView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "View",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "TemplateView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "EditSpeakerCategoriesView",
        "importPath": "participants.views",
        "description": "participants.views",
        "isExtraImport": true,
        "detail": "participants.views",
        "documentation": {}
    },
    {
        "label": "UpdateEligibilityEditView",
        "importPath": "participants.views",
        "description": "participants.views",
        "isExtraImport": true,
        "detail": "participants.views",
        "documentation": {}
    },
    {
        "label": "BaseRecordView",
        "importPath": "participants.views",
        "description": "participants.views",
        "isExtraImport": true,
        "detail": "participants.views",
        "documentation": {}
    },
    {
        "label": "django.utils.timezone",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "get_current_timezone_name",
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "isExtraImport": true,
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "string",
        "description": "string",
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "digits",
        "importPath": "string",
        "description": "string",
        "isExtraImport": true,
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "PolymorphicModel",
        "importPath": "polymorphic.models",
        "description": "polymorphic.models",
        "isExtraImport": true,
        "detail": "polymorphic.models",
        "documentation": {}
    },
    {
        "label": "Http404",
        "importPath": "django.http.response",
        "description": "django.http.response",
        "isExtraImport": true,
        "detail": "django.http.response",
        "documentation": {}
    },
    {
        "label": "Http404",
        "importPath": "django.http.response",
        "description": "django.http.response",
        "isExtraImport": true,
        "detail": "django.http.response",
        "documentation": {}
    },
    {
        "label": "Http404",
        "importPath": "django.http.response",
        "description": "django.http.response",
        "isExtraImport": true,
        "detail": "django.http.response",
        "documentation": {}
    },
    {
        "label": "TemplateResponse",
        "importPath": "django.template.response",
        "description": "django.template.response",
        "isExtraImport": true,
        "detail": "django.template.response",
        "documentation": {}
    },
    {
        "label": "TemplateResponse",
        "importPath": "django.template.response",
        "description": "django.template.response",
        "isExtraImport": true,
        "detail": "django.template.response",
        "documentation": {}
    },
    {
        "label": "VenueSerializer",
        "importPath": "venues.serializers",
        "description": "venues.serializers",
        "isExtraImport": true,
        "detail": "venues.serializers",
        "documentation": {}
    },
    {
        "label": "SimpleDebateVenueSerializer",
        "importPath": "venues.serializers",
        "description": "venues.serializers",
        "isExtraImport": true,
        "detail": "venues.serializers",
        "documentation": {}
    },
    {
        "label": "VenueSerializer",
        "importPath": "venues.serializers",
        "description": "venues.serializers",
        "isExtraImport": true,
        "detail": "venues.serializers",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "networkx",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "networkx",
        "description": "networkx",
        "detail": "networkx",
        "documentation": {}
    },
    {
        "label": "utils.fields",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "utils.fields",
        "description": "utils.fields",
        "detail": "utils.fields",
        "documentation": {}
    },
    {
        "label": "ChoiceArrayField",
        "importPath": "utils.fields",
        "description": "utils.fields",
        "isExtraImport": true,
        "detail": "utils.fields",
        "documentation": {}
    },
    {
        "label": "ChoiceArrayField",
        "importPath": "utils.fields",
        "description": "utils.fields",
        "isExtraImport": true,
        "detail": "utils.fields",
        "documentation": {}
    },
    {
        "label": "LabelByNameForeignKey",
        "importPath": "utils.fields",
        "description": "utils.fields",
        "isExtraImport": true,
        "detail": "utils.fields",
        "documentation": {}
    },
    {
        "label": "DrawGenerator",
        "importPath": "draw.generator",
        "description": "draw.generator",
        "isExtraImport": true,
        "detail": "draw.generator",
        "documentation": {}
    },
    {
        "label": "DrawUserError",
        "importPath": "draw.generator",
        "description": "draw.generator",
        "isExtraImport": true,
        "detail": "draw.generator",
        "documentation": {}
    },
    {
        "label": "DRAW_FLAG_DESCRIPTIONS",
        "importPath": "draw.generator",
        "description": "draw.generator",
        "isExtraImport": true,
        "detail": "draw.generator",
        "documentation": {}
    },
    {
        "label": "TestTeam",
        "importPath": "draw.tests.utils",
        "description": "draw.tests.utils",
        "isExtraImport": true,
        "detail": "draw.tests.utils",
        "documentation": {}
    },
    {
        "label": "unittest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "unittest",
        "description": "unittest",
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "expectedFailure",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "ERROR",
        "importPath": "django.contrib.messages",
        "description": "django.contrib.messages",
        "isExtraImport": true,
        "detail": "django.contrib.messages",
        "documentation": {}
    },
    {
        "label": "constants",
        "importPath": "django.contrib.messages",
        "description": "django.contrib.messages",
        "isExtraImport": true,
        "detail": "django.contrib.messages",
        "documentation": {}
    },
    {
        "label": "MultiValueSerializer",
        "importPath": "options.serializers",
        "description": "options.serializers",
        "isExtraImport": true,
        "detail": "options.serializers",
        "documentation": {}
    },
    {
        "label": "StandingsError",
        "importPath": "standings.base",
        "description": "standings.base",
        "isExtraImport": true,
        "detail": "standings.base",
        "documentation": {}
    },
    {
        "label": "StandingsError",
        "importPath": "standings.base",
        "description": "standings.base",
        "isExtraImport": true,
        "detail": "standings.base",
        "documentation": {}
    },
    {
        "label": "DrawManager",
        "importPath": "draw.manager",
        "description": "draw.manager",
        "isExtraImport": true,
        "detail": "draw.manager",
        "documentation": {}
    },
    {
        "label": "DrawManager",
        "importPath": "draw.manager",
        "description": "draw.manager",
        "isExtraImport": true,
        "detail": "draw.manager",
        "documentation": {}
    },
    {
        "label": "SyncConsumer",
        "importPath": "channels.consumer",
        "description": "channels.consumer",
        "isExtraImport": true,
        "detail": "channels.consumer",
        "documentation": {}
    },
    {
        "label": "SyncConsumer",
        "importPath": "channels.consumer",
        "description": "channels.consumer",
        "isExtraImport": true,
        "detail": "channels.consumer",
        "documentation": {}
    },
    {
        "label": "SimpleDebateAllocationSerializer",
        "importPath": "adjallocation.serializers",
        "description": "adjallocation.serializers",
        "isExtraImport": true,
        "detail": "adjallocation.serializers",
        "documentation": {}
    },
    {
        "label": "SimpleDebateImportanceSerializer",
        "importPath": "adjallocation.serializers",
        "description": "adjallocation.serializers",
        "isExtraImport": true,
        "detail": "adjallocation.serializers",
        "documentation": {}
    },
    {
        "label": "BasePowerPairedDrawGenerator",
        "importPath": "draw.generator.powerpair",
        "description": "draw.generator.powerpair",
        "isExtraImport": true,
        "detail": "draw.generator.powerpair",
        "documentation": {}
    },
    {
        "label": "BasePowerPairedDrawGenerator",
        "importPath": "draw.generator.powerpair",
        "description": "draw.generator.powerpair",
        "isExtraImport": true,
        "detail": "draw.generator.powerpair",
        "documentation": {}
    },
    {
        "label": "ordinal",
        "importPath": "django.contrib.humanize.templatetags.humanize",
        "description": "django.contrib.humanize.templatetags.humanize",
        "isExtraImport": true,
        "detail": "django.contrib.humanize.templatetags.humanize",
        "documentation": {}
    },
    {
        "label": "ordinal",
        "importPath": "django.contrib.humanize.templatetags.humanize",
        "description": "django.contrib.humanize.templatetags.humanize",
        "isExtraImport": true,
        "detail": "django.contrib.humanize.templatetags.humanize",
        "documentation": {}
    },
    {
        "label": "ordinal",
        "importPath": "django.contrib.humanize.templatetags.humanize",
        "description": "django.contrib.humanize.templatetags.humanize",
        "isExtraImport": true,
        "detail": "django.contrib.humanize.templatetags.humanize",
        "documentation": {}
    },
    {
        "label": "ordinal",
        "importPath": "django.contrib.humanize.templatetags.humanize",
        "description": "django.contrib.humanize.templatetags.humanize",
        "isExtraImport": true,
        "detail": "django.contrib.humanize.templatetags.humanize",
        "documentation": {}
    },
    {
        "label": "get_side_name",
        "importPath": "tournaments.utils",
        "description": "tournaments.utils",
        "isExtraImport": true,
        "detail": "tournaments.utils",
        "documentation": {}
    },
    {
        "label": "get_side_name",
        "importPath": "tournaments.utils",
        "description": "tournaments.utils",
        "isExtraImport": true,
        "detail": "tournaments.utils",
        "documentation": {}
    },
    {
        "label": "get_side_name",
        "importPath": "tournaments.utils",
        "description": "tournaments.utils",
        "isExtraImport": true,
        "detail": "tournaments.utils",
        "documentation": {}
    },
    {
        "label": "auto_make_rounds",
        "importPath": "tournaments.utils",
        "description": "tournaments.utils",
        "isExtraImport": true,
        "detail": "tournaments.utils",
        "documentation": {}
    },
    {
        "label": "get_side_name_choices",
        "importPath": "tournaments.utils",
        "description": "tournaments.utils",
        "isExtraImport": true,
        "detail": "tournaments.utils",
        "documentation": {}
    },
    {
        "label": "get_side_name",
        "importPath": "tournaments.utils",
        "description": "tournaments.utils",
        "isExtraImport": true,
        "detail": "tournaments.utils",
        "documentation": {}
    },
    {
        "label": "get_side_name",
        "importPath": "tournaments.utils",
        "description": "tournaments.utils",
        "isExtraImport": true,
        "detail": "tournaments.utils",
        "documentation": {}
    },
    {
        "label": "get_side_name",
        "importPath": "tournaments.utils",
        "description": "tournaments.utils",
        "isExtraImport": true,
        "detail": "tournaments.utils",
        "documentation": {}
    },
    {
        "label": "get_side_name",
        "importPath": "tournaments.utils",
        "description": "tournaments.utils",
        "isExtraImport": true,
        "detail": "tournaments.utils",
        "documentation": {}
    },
    {
        "label": "RawSQL",
        "importPath": "django.db.models.expressions",
        "description": "django.db.models.expressions",
        "isExtraImport": true,
        "detail": "django.db.models.expressions",
        "documentation": {}
    },
    {
        "label": "metricformat",
        "importPath": "standings.templatetags.standingsformat",
        "description": "standings.templatetags.standingsformat",
        "isExtraImport": true,
        "detail": "standings.templatetags.standingsformat",
        "documentation": {}
    },
    {
        "label": "rankingformat",
        "importPath": "standings.templatetags.standingsformat",
        "description": "standings.templatetags.standingsformat",
        "isExtraImport": true,
        "detail": "standings.templatetags.standingsformat",
        "documentation": {}
    },
    {
        "label": "metricformat",
        "importPath": "standings.templatetags.standingsformat",
        "description": "standings.templatetags.standingsformat",
        "isExtraImport": true,
        "detail": "standings.templatetags.standingsformat",
        "documentation": {}
    },
    {
        "label": "metricformat",
        "importPath": "standings.templatetags.standingsformat",
        "description": "standings.templatetags.standingsformat",
        "isExtraImport": true,
        "detail": "standings.templatetags.standingsformat",
        "documentation": {}
    },
    {
        "label": "rankingformat",
        "importPath": "standings.templatetags.standingsformat",
        "description": "standings.templatetags.standingsformat",
        "isExtraImport": true,
        "detail": "standings.templatetags.standingsformat",
        "documentation": {}
    },
    {
        "label": "IntEnum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "unicodedata",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "unicodedata",
        "description": "unicodedata",
        "detail": "unicodedata",
        "documentation": {}
    },
    {
        "label": "adjudicator_conflicts_display",
        "importPath": "adjallocation.utils",
        "description": "adjallocation.utils",
        "isExtraImport": true,
        "detail": "adjallocation.utils",
        "documentation": {}
    },
    {
        "label": "BulkNotification",
        "importPath": "notifications.models",
        "description": "notifications.models",
        "isExtraImport": true,
        "detail": "notifications.models",
        "documentation": {}
    },
    {
        "label": "BulkNotification",
        "importPath": "notifications.models",
        "description": "notifications.models",
        "isExtraImport": true,
        "detail": "notifications.models",
        "documentation": {}
    },
    {
        "label": "BulkNotification",
        "importPath": "notifications.models",
        "description": "notifications.models",
        "isExtraImport": true,
        "detail": "notifications.models",
        "documentation": {}
    },
    {
        "label": "BulkNotification",
        "importPath": "notifications.models",
        "description": "notifications.models",
        "isExtraImport": true,
        "detail": "notifications.models",
        "documentation": {}
    },
    {
        "label": "SentMessage",
        "importPath": "notifications.models",
        "description": "notifications.models",
        "isExtraImport": true,
        "detail": "notifications.models",
        "documentation": {}
    },
    {
        "label": "BulkNotification",
        "importPath": "notifications.models",
        "description": "notifications.models",
        "isExtraImport": true,
        "detail": "notifications.models",
        "documentation": {}
    },
    {
        "label": "BulkNotification",
        "importPath": "notifications.models",
        "description": "notifications.models",
        "isExtraImport": true,
        "detail": "notifications.models",
        "documentation": {}
    },
    {
        "label": "BulkNotification",
        "importPath": "notifications.models",
        "description": "notifications.models",
        "isExtraImport": true,
        "detail": "notifications.models",
        "documentation": {}
    },
    {
        "label": "RoundTemplateEmailCreateView",
        "importPath": "notifications.views",
        "description": "notifications.views",
        "isExtraImport": true,
        "detail": "notifications.views",
        "documentation": {}
    },
    {
        "label": "RoleColumnMixin",
        "importPath": "notifications.views",
        "description": "notifications.views",
        "isExtraImport": true,
        "detail": "notifications.views",
        "documentation": {}
    },
    {
        "label": "RoundTemplateEmailCreateView",
        "importPath": "notifications.views",
        "description": "notifications.views",
        "isExtraImport": true,
        "detail": "notifications.views",
        "documentation": {}
    },
    {
        "label": "TournamentTemplateEmailCreateView",
        "importPath": "notifications.views",
        "description": "notifications.views",
        "isExtraImport": true,
        "detail": "notifications.views",
        "documentation": {}
    },
    {
        "label": "RoleColumnMixin",
        "importPath": "notifications.views",
        "description": "notifications.views",
        "isExtraImport": true,
        "detail": "notifications.views",
        "documentation": {}
    },
    {
        "label": "TournamentTemplateEmailCreateView",
        "importPath": "notifications.views",
        "description": "notifications.views",
        "isExtraImport": true,
        "detail": "notifications.views",
        "documentation": {}
    },
    {
        "label": "RoundTemplateEmailCreateView",
        "importPath": "notifications.views",
        "description": "notifications.views",
        "isExtraImport": true,
        "detail": "notifications.views",
        "documentation": {}
    },
    {
        "label": "BaseStandingsView",
        "importPath": "standings.views",
        "description": "standings.views",
        "isExtraImport": true,
        "detail": "standings.views",
        "documentation": {}
    },
    {
        "label": "allocate_venues",
        "importPath": "venues.allocator",
        "description": "venues.allocator",
        "isExtraImport": true,
        "detail": "venues.allocator",
        "documentation": {}
    },
    {
        "label": "allocate_venues",
        "importPath": "venues.allocator",
        "description": "venues.allocator",
        "isExtraImport": true,
        "detail": "venues.allocator",
        "documentation": {}
    },
    {
        "label": "venue_conflicts_display",
        "importPath": "venues.utils",
        "description": "venues.utils",
        "isExtraImport": true,
        "detail": "venues.utils",
        "documentation": {}
    },
    {
        "label": "GeneratorType",
        "importPath": "types",
        "description": "types",
        "isExtraImport": true,
        "detail": "types",
        "documentation": {}
    },
    {
        "label": "ElementTree",
        "importPath": "xml.etree",
        "description": "xml.etree",
        "isExtraImport": true,
        "detail": "xml.etree",
        "documentation": {}
    },
    {
        "label": "ElementTree",
        "importPath": "xml.etree",
        "description": "xml.etree",
        "isExtraImport": true,
        "detail": "xml.etree",
        "documentation": {}
    },
    {
        "label": "Importer",
        "importPath": "importer.archive",
        "description": "importer.archive",
        "isExtraImport": true,
        "detail": "importer.archive",
        "documentation": {}
    },
    {
        "label": "slugify",
        "importPath": "django.template.defaultfilters",
        "description": "django.template.defaultfilters",
        "isExtraImport": true,
        "detail": "django.template.defaultfilters",
        "documentation": {}
    },
    {
        "label": "DUPLICATE_INFO",
        "importPath": "importer.importers",
        "description": "importer.importers",
        "isExtraImport": true,
        "detail": "importer.importers",
        "documentation": {}
    },
    {
        "label": "importer_registry",
        "importPath": "importer.importers",
        "description": "importer.importers",
        "isExtraImport": true,
        "detail": "importer.importers",
        "documentation": {}
    },
    {
        "label": "TournamentDataImporterFatalError",
        "importPath": "importer.importers",
        "description": "importer.importers",
        "isExtraImport": true,
        "detail": "importer.importers",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "importPath": "settings",
        "description": "settings",
        "isExtraImport": true,
        "detail": "settings",
        "documentation": {}
    },
    {
        "label": "TABBYCAT_APPS",
        "importPath": "settings",
        "description": "settings",
        "isExtraImport": true,
        "detail": "settings",
        "documentation": {}
    },
    {
        "label": "Element",
        "importPath": "xml.etree.ElementTree",
        "description": "xml.etree.ElementTree",
        "isExtraImport": true,
        "detail": "xml.etree.ElementTree",
        "documentation": {}
    },
    {
        "label": "SubElement",
        "importPath": "xml.etree.ElementTree",
        "description": "xml.etree.ElementTree",
        "isExtraImport": true,
        "detail": "xml.etree.ElementTree",
        "documentation": {}
    },
    {
        "label": "slugify",
        "importPath": "django.utils.text",
        "description": "django.utils.text",
        "isExtraImport": true,
        "detail": "django.utils.text",
        "documentation": {}
    },
    {
        "label": "slugify",
        "importPath": "django.utils.text",
        "description": "django.utils.text",
        "isExtraImport": true,
        "detail": "django.utils.text",
        "documentation": {}
    },
    {
        "label": "slugify",
        "importPath": "django.utils.text",
        "description": "django.utils.text",
        "isExtraImport": true,
        "detail": "django.utils.text",
        "documentation": {}
    },
    {
        "label": "slugify",
        "importPath": "django.utils.text",
        "description": "django.utils.text",
        "isExtraImport": true,
        "detail": "django.utils.text",
        "documentation": {}
    },
    {
        "label": "format_lazy",
        "importPath": "django.utils.text",
        "description": "django.utils.text",
        "isExtraImport": true,
        "detail": "django.utils.text",
        "documentation": {}
    },
    {
        "label": "fromstring",
        "importPath": "defusedxml.ElementTree",
        "description": "defusedxml.ElementTree",
        "isExtraImport": true,
        "detail": "defusedxml.ElementTree",
        "documentation": {}
    },
    {
        "label": "management",
        "importPath": "django.core",
        "description": "django.core",
        "isExtraImport": true,
        "detail": "django.core",
        "documentation": {}
    },
    {
        "label": "mail",
        "importPath": "django.core",
        "description": "django.core",
        "isExtraImport": true,
        "detail": "django.core",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "resolve_url",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "View",
        "importPath": "django.views",
        "description": "django.views",
        "isExtraImport": true,
        "detail": "django.views",
        "documentation": {}
    },
    {
        "label": "SessionWizardView",
        "importPath": "formtools.wizard.views",
        "description": "formtools.wizard.views",
        "isExtraImport": true,
        "detail": "formtools.wizard.views",
        "documentation": {}
    },
    {
        "label": "MotionBPStatsCalculator",
        "importPath": "motions.statistics",
        "description": "motions.statistics",
        "isExtraImport": true,
        "detail": "motions.statistics",
        "documentation": {}
    },
    {
        "label": "MotionTwoTeamStatsCalculator",
        "importPath": "motions.statistics",
        "description": "motions.statistics",
        "isExtraImport": true,
        "detail": "motions.statistics",
        "documentation": {}
    },
    {
        "label": "html2text",
        "importPath": "html2text",
        "description": "html2text",
        "isExtraImport": true,
        "detail": "html2text",
        "documentation": {}
    },
    {
        "label": "html2text",
        "importPath": "html2text",
        "description": "html2text",
        "isExtraImport": true,
        "detail": "html2text",
        "documentation": {}
    },
    {
        "label": "SummernoteWidget",
        "importPath": "django_summernote.widgets",
        "description": "django_summernote.widgets",
        "isExtraImport": true,
        "detail": "django_summernote.widgets",
        "documentation": {}
    },
    {
        "label": "SummernoteWidget",
        "importPath": "django_summernote.widgets",
        "description": "django_summernote.widgets",
        "isExtraImport": true,
        "detail": "django_summernote.widgets",
        "documentation": {}
    },
    {
        "label": "SummernoteWidget",
        "importPath": "django_summernote.widgets",
        "description": "django_summernote.widgets",
        "isExtraImport": true,
        "detail": "django_summernote.widgets",
        "documentation": {}
    },
    {
        "label": "SummernoteWidget",
        "importPath": "django_summernote.widgets",
        "description": "django_summernote.widgets",
        "isExtraImport": true,
        "detail": "django_summernote.widgets",
        "documentation": {}
    },
    {
        "label": "django.contrib.postgres.fields.jsonb",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib.postgres.fields.jsonb",
        "description": "django.contrib.postgres.fields.jsonb",
        "detail": "django.contrib.postgres.fields.jsonb",
        "documentation": {}
    },
    {
        "label": "email",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "email",
        "description": "email",
        "detail": "email",
        "documentation": {}
    },
    {
        "label": "asdict",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "formataddr",
        "importPath": "email.utils",
        "description": "email.utils",
        "isExtraImport": true,
        "detail": "email.utils",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "django.template",
        "description": "django.template",
        "isExtraImport": true,
        "detail": "django.template",
        "documentation": {}
    },
    {
        "label": "Template",
        "importPath": "django.template",
        "description": "django.template",
        "isExtraImport": true,
        "detail": "django.template",
        "documentation": {}
    },
    {
        "label": "Template",
        "importPath": "django.template",
        "description": "django.template",
        "isExtraImport": true,
        "detail": "django.template",
        "documentation": {}
    },
    {
        "label": "TemplateSyntaxError",
        "importPath": "django.template",
        "description": "django.template",
        "isExtraImport": true,
        "detail": "django.template",
        "documentation": {}
    },
    {
        "label": "send_mail",
        "importPath": "django.core.mail",
        "description": "django.core.mail",
        "isExtraImport": true,
        "detail": "django.core.mail",
        "documentation": {}
    },
    {
        "label": "side_and_position_names",
        "importPath": "results.utils",
        "description": "results.utils",
        "isExtraImport": true,
        "detail": "results.utils",
        "documentation": {}
    },
    {
        "label": "side_and_position_names",
        "importPath": "results.utils",
        "description": "results.utils",
        "isExtraImport": true,
        "detail": "results.utils",
        "documentation": {}
    },
    {
        "label": "SMTPException",
        "importPath": "smtplib",
        "description": "smtplib",
        "isExtraImport": true,
        "detail": "smtplib",
        "documentation": {}
    },
    {
        "label": "SMTPResponseException",
        "importPath": "smtplib",
        "description": "smtplib",
        "isExtraImport": true,
        "detail": "smtplib",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "call_command",
        "importPath": "django.core.management",
        "description": "django.core.management",
        "isExtraImport": true,
        "detail": "django.core.management",
        "documentation": {}
    },
    {
        "label": "Command",
        "importPath": "options.management.commands.applypreset",
        "description": "options.management.commands.applypreset",
        "isExtraImport": true,
        "detail": "options.management.commands.applypreset",
        "documentation": {}
    },
    {
        "label": "EMPTY_CHOICE",
        "importPath": "options.fields",
        "description": "options.fields",
        "isExtraImport": true,
        "detail": "options.fields",
        "documentation": {}
    },
    {
        "label": "MultiSelect",
        "importPath": "options.fields",
        "description": "options.fields",
        "isExtraImport": true,
        "detail": "options.fields",
        "documentation": {}
    },
    {
        "label": "MultiValueChoiceField",
        "importPath": "options.fields",
        "description": "options.fields",
        "isExtraImport": true,
        "detail": "options.fields",
        "documentation": {}
    },
    {
        "label": "GlobalPreferenceForm",
        "importPath": "dynamic_preferences.forms",
        "description": "dynamic_preferences.forms",
        "isExtraImport": true,
        "detail": "dynamic_preferences.forms",
        "documentation": {}
    },
    {
        "label": "GlobalPreferenceForm",
        "importPath": "dynamic_preferences.forms",
        "description": "dynamic_preferences.forms",
        "isExtraImport": true,
        "detail": "dynamic_preferences.forms",
        "documentation": {}
    },
    {
        "label": "preference_form_builder",
        "importPath": "dynamic_preferences.forms",
        "description": "dynamic_preferences.forms",
        "isExtraImport": true,
        "detail": "dynamic_preferences.forms",
        "documentation": {}
    },
    {
        "label": "PreferenceForm",
        "importPath": "dynamic_preferences.forms",
        "description": "dynamic_preferences.forms",
        "isExtraImport": true,
        "detail": "dynamic_preferences.forms",
        "documentation": {}
    },
    {
        "label": "tournament_preference_form_builder",
        "importPath": "options.forms",
        "description": "options.forms",
        "isExtraImport": true,
        "detail": "options.forms",
        "documentation": {}
    },
    {
        "label": "AnonymousUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "AnonymousUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "Group",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "AnonymousUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "SetPresetPreferencesView",
        "importPath": "options.views",
        "description": "options.views",
        "isExtraImport": true,
        "detail": "options.views",
        "documentation": {}
    },
    {
        "label": "TournamentConfigIndexView",
        "importPath": "options.views",
        "description": "options.views",
        "isExtraImport": true,
        "detail": "options.views",
        "documentation": {}
    },
    {
        "label": "TournamentPreferenceFormView",
        "importPath": "options.views",
        "description": "options.views",
        "isExtraImport": true,
        "detail": "options.views",
        "documentation": {}
    },
    {
        "label": "get_attachment_model",
        "importPath": "django_summernote.utils",
        "description": "django_summernote.utils",
        "isExtraImport": true,
        "detail": "django_summernote.utils",
        "documentation": {}
    },
    {
        "label": "PerInstancePreferenceAdmin",
        "importPath": "dynamic_preferences.admin",
        "description": "dynamic_preferences.admin",
        "isExtraImport": true,
        "detail": "dynamic_preferences.admin",
        "documentation": {}
    },
    {
        "label": "PerInstancePreferenceModel",
        "importPath": "dynamic_preferences.models",
        "description": "dynamic_preferences.models",
        "isExtraImport": true,
        "detail": "dynamic_preferences.models",
        "documentation": {}
    },
    {
        "label": "Section",
        "importPath": "dynamic_preferences.preferences",
        "description": "dynamic_preferences.preferences",
        "isExtraImport": true,
        "detail": "dynamic_preferences.preferences",
        "documentation": {}
    },
    {
        "label": "BooleanPreference",
        "importPath": "dynamic_preferences.types",
        "description": "dynamic_preferences.types",
        "isExtraImport": true,
        "detail": "dynamic_preferences.types",
        "documentation": {}
    },
    {
        "label": "ChoicePreference",
        "importPath": "dynamic_preferences.types",
        "description": "dynamic_preferences.types",
        "isExtraImport": true,
        "detail": "dynamic_preferences.types",
        "documentation": {}
    },
    {
        "label": "DecimalPreference",
        "importPath": "dynamic_preferences.types",
        "description": "dynamic_preferences.types",
        "isExtraImport": true,
        "detail": "dynamic_preferences.types",
        "documentation": {}
    },
    {
        "label": "FloatPreference",
        "importPath": "dynamic_preferences.types",
        "description": "dynamic_preferences.types",
        "isExtraImport": true,
        "detail": "dynamic_preferences.types",
        "documentation": {}
    },
    {
        "label": "IntegerPreference",
        "importPath": "dynamic_preferences.types",
        "description": "dynamic_preferences.types",
        "isExtraImport": true,
        "detail": "dynamic_preferences.types",
        "documentation": {}
    },
    {
        "label": "LongStringPreference",
        "importPath": "dynamic_preferences.types",
        "description": "dynamic_preferences.types",
        "isExtraImport": true,
        "detail": "dynamic_preferences.types",
        "documentation": {}
    },
    {
        "label": "StringPreference",
        "importPath": "dynamic_preferences.types",
        "description": "dynamic_preferences.types",
        "isExtraImport": true,
        "detail": "dynamic_preferences.types",
        "documentation": {}
    },
    {
        "label": "ChoicePreference",
        "importPath": "dynamic_preferences.types",
        "description": "dynamic_preferences.types",
        "isExtraImport": true,
        "detail": "dynamic_preferences.types",
        "documentation": {}
    },
    {
        "label": "MultipleSerializer",
        "importPath": "dynamic_preferences.serializers",
        "description": "dynamic_preferences.serializers",
        "isExtraImport": true,
        "detail": "dynamic_preferences.serializers",
        "documentation": {}
    },
    {
        "label": "PreferenceFormView",
        "importPath": "dynamic_preferences.views",
        "description": "dynamic_preferences.views",
        "isExtraImport": true,
        "detail": "dynamic_preferences.views",
        "documentation": {}
    },
    {
        "label": "RoundAvailabilityInline",
        "importPath": "availability.admin",
        "description": "availability.admin",
        "isExtraImport": true,
        "detail": "availability.admin",
        "documentation": {}
    },
    {
        "label": "RoundAvailabilityInline",
        "importPath": "availability.admin",
        "description": "availability.admin",
        "isExtraImport": true,
        "detail": "availability.admin",
        "documentation": {}
    },
    {
        "label": "VenueConstraintInline",
        "importPath": "venues.admin",
        "description": "venues.admin",
        "isExtraImport": true,
        "detail": "venues.admin",
        "documentation": {}
    },
    {
        "label": "LookupByNameFieldsMixin",
        "importPath": "utils.managers",
        "description": "utils.managers",
        "isExtraImport": true,
        "detail": "utils.managers",
        "documentation": {}
    },
    {
        "label": "LookupByNameFieldsMixin",
        "importPath": "utils.managers",
        "description": "utils.managers",
        "isExtraImport": true,
        "detail": "utils.managers",
        "documentation": {}
    },
    {
        "label": "populate_opponents",
        "importPath": "draw.prefetch",
        "description": "draw.prefetch",
        "isExtraImport": true,
        "detail": "draw.prefetch",
        "documentation": {}
    },
    {
        "label": "populate_opponents",
        "importPath": "draw.prefetch",
        "description": "draw.prefetch",
        "isExtraImport": true,
        "detail": "draw.prefetch",
        "documentation": {}
    },
    {
        "label": "populate_opponents",
        "importPath": "draw.prefetch",
        "description": "draw.prefetch",
        "isExtraImport": true,
        "detail": "draw.prefetch",
        "documentation": {}
    },
    {
        "label": "FeedbackProgressForAdjudicator",
        "importPath": "adjfeedback.progress",
        "description": "adjfeedback.progress",
        "isExtraImport": true,
        "detail": "adjfeedback.progress",
        "documentation": {}
    },
    {
        "label": "FeedbackProgressForTeam",
        "importPath": "adjfeedback.progress",
        "description": "adjfeedback.progress",
        "isExtraImport": true,
        "detail": "adjfeedback.progress",
        "documentation": {}
    },
    {
        "label": "qrcode",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "qrcode",
        "description": "qrcode",
        "detail": "qrcode",
        "documentation": {}
    },
    {
        "label": "svg",
        "importPath": "qrcode.image",
        "description": "qrcode.image",
        "isExtraImport": true,
        "detail": "qrcode.image",
        "documentation": {}
    },
    {
        "label": "expected_feedback_targets",
        "importPath": "adjfeedback.utils",
        "description": "adjfeedback.utils",
        "isExtraImport": true,
        "detail": "adjfeedback.utils",
        "documentation": {}
    },
    {
        "label": "AdjudicatorDebateTable",
        "importPath": "participants.tables",
        "description": "participants.tables",
        "isExtraImport": true,
        "detail": "participants.tables",
        "documentation": {}
    },
    {
        "label": "TeamDebateTable",
        "importPath": "participants.tables",
        "description": "participants.tables",
        "isExtraImport": true,
        "detail": "participants.tables",
        "documentation": {}
    },
    {
        "label": "add_result",
        "importPath": "results.dbutils",
        "description": "results.dbutils",
        "isExtraImport": true,
        "detail": "results.dbutils",
        "documentation": {}
    },
    {
        "label": "add_results_to_round",
        "importPath": "results.dbutils",
        "description": "results.dbutils",
        "isExtraImport": true,
        "detail": "results.dbutils",
        "documentation": {}
    },
    {
        "label": "add_results_to_round_partial",
        "importPath": "results.dbutils",
        "description": "results.dbutils",
        "isExtraImport": true,
        "detail": "results.dbutils",
        "documentation": {}
    },
    {
        "label": "delete_all_ballotsubs_for_round",
        "importPath": "results.dbutils",
        "description": "results.dbutils",
        "isExtraImport": true,
        "detail": "results.dbutils",
        "documentation": {}
    },
    {
        "label": "delete_ballotsub",
        "importPath": "results.dbutils",
        "description": "results.dbutils",
        "isExtraImport": true,
        "detail": "results.dbutils",
        "documentation": {}
    },
    {
        "label": "add_results_to_round",
        "importPath": "results.dbutils",
        "description": "results.dbutils",
        "isExtraImport": true,
        "detail": "results.dbutils",
        "documentation": {}
    },
    {
        "label": "pprint",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pprint",
        "description": "pprint",
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "to keep logger's name consistent",
        "importPath": "results.result import ConsensusDebateResultWithScores. DebateResultByAdjudicatorWithScores. ResultError    # absolute",
        "description": "results.result import ConsensusDebateResultWithScores. DebateResultByAdjudicatorWithScores. ResultError    # absolute",
        "isExtraImport": true,
        "detail": "results.result import ConsensusDebateResultWithScores. DebateResultByAdjudicatorWithScores. ResultError    # absolute",
        "documentation": {}
    },
    {
        "label": "Lock",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Lock",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "merge_motion_vetos",
        "importPath": "motions.utils",
        "description": "motions.utils",
        "isExtraImport": true,
        "detail": "motions.utils",
        "documentation": {}
    },
    {
        "label": "merge_motions",
        "importPath": "motions.utils",
        "description": "motions.utils",
        "isExtraImport": true,
        "detail": "motions.utils",
        "documentation": {}
    },
    {
        "label": "django.conf.locale",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.conf.locale",
        "description": "django.conf.locale",
        "detail": "django.conf.locale",
        "documentation": {}
    },
    {
        "label": "dj_database_url",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "dj_database_url",
        "description": "dj_database_url",
        "detail": "dj_database_url",
        "documentation": {}
    },
    {
        "label": "sentry_sdk",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sentry_sdk",
        "description": "sentry_sdk",
        "detail": "sentry_sdk",
        "documentation": {}
    },
    {
        "label": "LoggingIntegration",
        "importPath": "sentry_sdk.integrations.logging",
        "description": "sentry_sdk.integrations.logging",
        "isExtraImport": true,
        "detail": "sentry_sdk.integrations.logging",
        "documentation": {}
    },
    {
        "label": "LoggingIntegration",
        "importPath": "sentry_sdk.integrations.logging",
        "description": "sentry_sdk.integrations.logging",
        "isExtraImport": true,
        "detail": "sentry_sdk.integrations.logging",
        "documentation": {}
    },
    {
        "label": "DjangoIntegration",
        "importPath": "sentry_sdk.integrations.django",
        "description": "sentry_sdk.integrations.django",
        "isExtraImport": true,
        "detail": "sentry_sdk.integrations.django",
        "documentation": {}
    },
    {
        "label": "DjangoIntegration",
        "importPath": "sentry_sdk.integrations.django",
        "description": "sentry_sdk.integrations.django",
        "isExtraImport": true,
        "detail": "sentry_sdk.integrations.django",
        "documentation": {}
    },
    {
        "label": "RedisIntegration",
        "importPath": "sentry_sdk.integrations.redis",
        "description": "sentry_sdk.integrations.redis",
        "isExtraImport": true,
        "detail": "sentry_sdk.integrations.redis",
        "documentation": {}
    },
    {
        "label": "RedisIntegration",
        "importPath": "sentry_sdk.integrations.redis",
        "description": "sentry_sdk.integrations.redis",
        "isExtraImport": true,
        "detail": "sentry_sdk.integrations.redis",
        "documentation": {}
    },
    {
        "label": "WebDriverWait",
        "importPath": "selenium.webdriver.support.ui",
        "description": "selenium.webdriver.support.ui",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support.ui",
        "documentation": {}
    },
    {
        "label": "WebDriverWait",
        "importPath": "selenium.webdriver.support.ui",
        "description": "selenium.webdriver.support.ui",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support.ui",
        "documentation": {}
    },
    {
        "label": "ArrayAgg",
        "importPath": "django.contrib.postgres.aggregates",
        "description": "django.contrib.postgres.aggregates",
        "isExtraImport": true,
        "detail": "django.contrib.postgres.aggregates",
        "documentation": {}
    },
    {
        "label": "BaseFeedbackOverview",
        "importPath": "adjfeedback.views",
        "description": "adjfeedback.views",
        "isExtraImport": true,
        "detail": "adjfeedback.views",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "django.core.cache",
        "description": "django.core.cache",
        "isExtraImport": true,
        "detail": "django.core.cache",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "django.core.cache",
        "description": "django.core.cache",
        "isExtraImport": true,
        "detail": "django.core.cache",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "django.core.cache",
        "description": "django.core.cache",
        "isExtraImport": true,
        "detail": "django.core.cache",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "django.core.cache",
        "description": "django.core.cache",
        "isExtraImport": true,
        "detail": "django.core.cache",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "django.core.cache",
        "description": "django.core.cache",
        "isExtraImport": true,
        "detail": "django.core.cache",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "django.core.cache",
        "description": "django.core.cache",
        "isExtraImport": true,
        "detail": "django.core.cache",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "django.core.cache",
        "description": "django.core.cache",
        "isExtraImport": true,
        "detail": "django.core.cache",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "django.core.cache",
        "description": "django.core.cache",
        "isExtraImport": true,
        "detail": "django.core.cache",
        "documentation": {}
    },
    {
        "label": "IntegerField",
        "importPath": "django.forms.fields",
        "description": "django.forms.fields",
        "isExtraImport": true,
        "detail": "django.forms.fields",
        "documentation": {}
    },
    {
        "label": "NumberInput",
        "importPath": "django.forms.fields",
        "description": "django.forms.fields",
        "isExtraImport": true,
        "detail": "django.forms.fields",
        "documentation": {}
    },
    {
        "label": "ModelChoiceIterator",
        "importPath": "django.forms.models",
        "description": "django.forms.models",
        "isExtraImport": true,
        "detail": "django.forms.models",
        "documentation": {}
    },
    {
        "label": "modelformset_factory",
        "importPath": "django.forms.models",
        "description": "django.forms.models",
        "isExtraImport": true,
        "detail": "django.forms.models",
        "documentation": {}
    },
    {
        "label": "all_groups",
        "importPath": "users.groups",
        "description": "users.groups",
        "isExtraImport": true,
        "detail": "users.groups",
        "documentation": {}
    },
    {
        "label": "SingleObjectMixin",
        "importPath": "django.views.generic.detail",
        "description": "django.views.generic.detail",
        "isExtraImport": true,
        "detail": "django.views.generic.detail",
        "documentation": {}
    },
    {
        "label": "RoundSerializer",
        "importPath": "tournaments.serializers",
        "description": "tournaments.serializers",
        "isExtraImport": true,
        "detail": "tournaments.serializers",
        "documentation": {}
    },
    {
        "label": "TournamentSerializer",
        "importPath": "tournaments.serializers",
        "description": "tournaments.serializers",
        "isExtraImport": true,
        "detail": "tournaments.serializers",
        "documentation": {}
    },
    {
        "label": "UserAdmin",
        "importPath": "django.contrib.auth.admin",
        "description": "django.contrib.auth.admin",
        "isExtraImport": true,
        "detail": "django.contrib.auth.admin",
        "documentation": {}
    },
    {
        "label": "UserChangeForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "UserCreationForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "PasswordResetForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "SetPasswordForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "UserCreationForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "UsernameField",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "PasswordResetConfirmView",
        "importPath": "django.contrib.auth.views",
        "description": "django.contrib.auth.views",
        "isExtraImport": true,
        "detail": "django.contrib.auth.views",
        "documentation": {}
    },
    {
        "label": "PasswordResetView",
        "importPath": "django.contrib.auth.views",
        "description": "django.contrib.auth.views",
        "isExtraImport": true,
        "detail": "django.contrib.auth.views",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "django.conf.locale.en_GB.formats",
        "description": "django.conf.locale.en_GB.formats",
        "isExtraImport": true,
        "detail": "django.conf.locale.en_GB.formats",
        "documentation": {}
    },
    {
        "label": "ConsensusHungarianAllocator",
        "importPath": "adjallocation.allocators.hungarian",
        "description": "adjallocation.allocators.hungarian",
        "isExtraImport": true,
        "detail": "adjallocation.allocators.hungarian",
        "documentation": {}
    },
    {
        "label": "VotingHungarianAllocator",
        "importPath": "adjallocation.allocators.hungarian",
        "description": "adjallocation.allocators.hungarian",
        "isExtraImport": true,
        "detail": "adjallocation.allocators.hungarian",
        "documentation": {}
    },
    {
        "label": "GenerateResultsCommandMixin",
        "importPath": "results.management.commands.generateresults",
        "description": "results.management.commands.generateresults",
        "isExtraImport": true,
        "detail": "results.management.commands.generateresults",
        "documentation": {}
    },
    {
        "label": "kwarg_re",
        "importPath": "django.template.base",
        "description": "django.template.base",
        "isExtraImport": true,
        "detail": "django.template.base",
        "documentation": {}
    },
    {
        "label": "TemplateSyntaxError",
        "importPath": "django.template.base",
        "description": "django.template.base",
        "isExtraImport": true,
        "detail": "django.template.base",
        "documentation": {}
    },
    {
        "label": "Variable",
        "importPath": "django.template.base",
        "description": "django.template.base",
        "isExtraImport": true,
        "detail": "django.template.base",
        "documentation": {}
    },
    {
        "label": "URLNode",
        "importPath": "django.template.defaulttags",
        "description": "django.template.defaulttags",
        "isExtraImport": true,
        "detail": "django.template.defaulttags",
        "documentation": {}
    },
    {
        "label": "get_content_type_for_model",
        "importPath": "django.contrib.admin.options",
        "description": "django.contrib.admin.options",
        "isExtraImport": true,
        "detail": "django.contrib.admin.options",
        "documentation": {}
    },
    {
        "label": "SystemRandom",
        "importPath": "secrets",
        "description": "secrets",
        "isExtraImport": true,
        "detail": "secrets",
        "documentation": {}
    },
    {
        "label": "parse_qs",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlencode",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlparse",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlunparse",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlparse",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "get_client_ip",
        "importPath": "ipware",
        "description": "ipware",
        "isExtraImport": true,
        "detail": "ipware",
        "documentation": {}
    },
    {
        "label": "LoginRequiredMixin",
        "importPath": "django.contrib.auth.mixins",
        "description": "django.contrib.auth.mixins",
        "isExtraImport": true,
        "detail": "django.contrib.auth.mixins",
        "documentation": {}
    },
    {
        "label": "UserPassesTestMixin",
        "importPath": "django.contrib.auth.mixins",
        "description": "django.contrib.auth.mixins",
        "isExtraImport": true,
        "detail": "django.contrib.auth.mixins",
        "documentation": {}
    },
    {
        "label": "method_decorator",
        "importPath": "django.utils.decorators",
        "description": "django.utils.decorators",
        "isExtraImport": true,
        "detail": "django.utils.decorators",
        "documentation": {}
    },
    {
        "label": "cache_page",
        "importPath": "django.views.decorators.cache",
        "description": "django.views.decorators.cache",
        "isExtraImport": true,
        "detail": "django.views.decorators.cache",
        "documentation": {}
    },
    {
        "label": "JSONRenderer",
        "importPath": "rest_framework.renderers",
        "description": "rest_framework.renderers",
        "isExtraImport": true,
        "detail": "rest_framework.renderers",
        "documentation": {}
    },
    {
        "label": "render_to_string",
        "importPath": "django.template.loader",
        "description": "django.template.loader",
        "isExtraImport": true,
        "detail": "django.template.loader",
        "documentation": {}
    },
    {
        "label": "contextmanager",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "StaticLiveServerTestCase",
        "importPath": "django.contrib.staticfiles.testing",
        "description": "django.contrib.staticfiles.testing",
        "isExtraImport": true,
        "detail": "django.contrib.staticfiles.testing",
        "documentation": {}
    },
    {
        "label": "WebDriver",
        "importPath": "selenium.webdriver.chrome.webdriver",
        "description": "selenium.webdriver.chrome.webdriver",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.webdriver",
        "documentation": {}
    },
    {
        "label": "DesiredCapabilities",
        "importPath": "selenium.webdriver.common.desired_capabilities",
        "description": "selenium.webdriver.common.desired_capabilities",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.desired_capabilities",
        "documentation": {}
    },
    {
        "label": "GfkLookupWidget",
        "importPath": "gfklookupwidget.widgets",
        "description": "gfklookupwidget.widgets",
        "isExtraImport": true,
        "detail": "gfklookupwidget.widgets",
        "documentation": {}
    },
    {
        "label": "AuthMiddlewareStack",
        "importPath": "channels.auth",
        "description": "channels.auth",
        "isExtraImport": true,
        "detail": "channels.auth",
        "documentation": {}
    },
    {
        "label": "ChannelNameRouter",
        "importPath": "channels.routing",
        "description": "channels.routing",
        "isExtraImport": true,
        "detail": "channels.routing",
        "documentation": {}
    },
    {
        "label": "ProtocolTypeRouter",
        "importPath": "channels.routing",
        "description": "channels.routing",
        "isExtraImport": true,
        "detail": "channels.routing",
        "documentation": {}
    },
    {
        "label": "URLRouter",
        "importPath": "channels.routing",
        "description": "channels.routing",
        "isExtraImport": true,
        "detail": "channels.routing",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "AdjudicatorAllocationWorkerConsumer",
        "importPath": "adjallocation.consumers",
        "description": "adjallocation.consumers",
        "isExtraImport": true,
        "detail": "adjallocation.consumers",
        "documentation": {}
    },
    {
        "label": "PanelEditConsumer",
        "importPath": "adjallocation.consumers",
        "description": "adjallocation.consumers",
        "isExtraImport": true,
        "detail": "adjallocation.consumers",
        "documentation": {}
    },
    {
        "label": "NotificationQueueConsumer",
        "importPath": "notifications.consumers",
        "description": "notifications.consumers",
        "isExtraImport": true,
        "detail": "notifications.consumers",
        "documentation": {}
    },
    {
        "label": "BallotResultConsumer",
        "importPath": "results.consumers",
        "description": "results.consumers",
        "isExtraImport": true,
        "detail": "results.consumers",
        "documentation": {}
    },
    {
        "label": "BallotStatusConsumer",
        "importPath": "results.consumers",
        "description": "results.consumers",
        "isExtraImport": true,
        "detail": "results.consumers",
        "documentation": {}
    },
    {
        "label": "VenuesWorkerConsumer",
        "importPath": "venues.consumers",
        "description": "venues.consumers",
        "isExtraImport": true,
        "detail": "venues.consumers",
        "documentation": {}
    },
    {
        "label": "asgi",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asgi",
        "description": "asgi",
        "detail": "asgi",
        "documentation": {}
    },
    {
        "label": "build_endpoint_description_strings",
        "importPath": "daphne.endpoints",
        "description": "daphne.endpoints",
        "isExtraImport": true,
        "detail": "daphne.endpoints",
        "documentation": {}
    },
    {
        "label": "Server",
        "importPath": "daphne.server",
        "description": "daphne.server",
        "isExtraImport": true,
        "detail": "daphne.server",
        "documentation": {}
    },
    {
        "label": "user_logged_in",
        "importPath": "django.contrib.auth.signals",
        "description": "django.contrib.auth.signals",
        "isExtraImport": true,
        "detail": "django.contrib.auth.signals",
        "documentation": {}
    },
    {
        "label": "JavaScriptCatalog",
        "importPath": "django.views.i18n",
        "description": "django.views.i18n",
        "isExtraImport": true,
        "detail": "django.views.i18n",
        "documentation": {}
    },
    {
        "label": "tournaments.views",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tournaments.views",
        "description": "tournaments.views",
        "detail": "tournaments.views",
        "documentation": {}
    },
    {
        "label": "LoadDemoView",
        "importPath": "importer.views",
        "description": "importer.views",
        "isExtraImport": true,
        "detail": "importer.views",
        "documentation": {}
    },
    {
        "label": "BlankSiteStartView",
        "importPath": "users.views",
        "description": "users.views",
        "isExtraImport": true,
        "detail": "users.views",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len('bin') - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = 'tabbycat' or os.path.basename(base)\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in '../lib/python3.11/site-packages'.split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "base = bin_dir[: -len('bin') - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = 'tabbycat' or os.path.basename(base)\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in '../lib/python3.11/site-packages'.split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if '' else path)",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = 'tabbycat' or os.path.basename(base)\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in '../lib/python3.11/site-packages'.split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if '' else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = 'tabbycat' or os.path.basename(base)\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in '../lib/python3.11/site-packages'.split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if '' else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV_PROMPT\"]",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV_PROMPT\"] = 'tabbycat' or os.path.basename(base)\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in '../lib/python3.11/site-packages'.split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if '' else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in '../lib/python3.11/site-packages'.split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if '' else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "print_command",
        "kind": 2,
        "importPath": "data.migrate_fixtures",
        "description": "data.migrate_fixtures",
        "peekOfCode": "def print_command(command):\n    message = \"$ \" + \" \".join(command)\n    if use_color:\n        message = \"\\033[1;36m\" + message + \"\\033[0m\"\n    print(message)\ndef run_command(command):\n    print_command(command)\n    if not args.dry_run:\n        subprocess.check_call(command, **subprocess_kwargs)\ndef get_output_from_command(command):",
        "detail": "data.migrate_fixtures",
        "documentation": {}
    },
    {
        "label": "run_command",
        "kind": 2,
        "importPath": "data.migrate_fixtures",
        "description": "data.migrate_fixtures",
        "peekOfCode": "def run_command(command):\n    print_command(command)\n    if not args.dry_run:\n        subprocess.check_call(command, **subprocess_kwargs)\ndef get_output_from_command(command):\n    print_command(command)\n    if args.dry_run:\n        return \"\"\n    output = subprocess.check_output(command, **subprocess_kwargs)\n    output = output.decode()",
        "detail": "data.migrate_fixtures",
        "documentation": {}
    },
    {
        "label": "get_output_from_command",
        "kind": 2,
        "importPath": "data.migrate_fixtures",
        "description": "data.migrate_fixtures",
        "peekOfCode": "def get_output_from_command(command):\n    print_command(command)\n    if args.dry_run:\n        return \"\"\n    output = subprocess.check_output(command, **subprocess_kwargs)\n    output = output.decode()\n    sys.stdout.write(output)\n    sys.stdout.flush()\n    return output\ndef print_yellow(message):",
        "detail": "data.migrate_fixtures",
        "documentation": {}
    },
    {
        "label": "print_yellow",
        "kind": 2,
        "importPath": "data.migrate_fixtures",
        "description": "data.migrate_fixtures",
        "peekOfCode": "def print_yellow(message):\n    if use_color:\n        message = \"\\033[1;33m\" + message + \"\\033[0m\"\n    print(message)\nif args.unmigrate:\n    unmigrations = [tuple(spec.split(\"/\")) for spec in args.unmigrate]\n    run_command([\"git\", \"checkout\", args.new_commit])\nelse:\n    print_yellow(\"Figuring out what the migration difference is...\")\n    run_command([\"git\", \"checkout\", args.old_commit])",
        "detail": "data.migrate_fixtures",
        "documentation": {}
    },
    {
        "label": "DEFAULT_DIR",
        "kind": 5,
        "importPath": "data.migrate_fixtures",
        "description": "data.migrate_fixtures",
        "peekOfCode": "DEFAULT_DIR = relpath(join(dirname(__file__), \"fixtures/\"))\nMANAGE_PY = relpath(join(dirname(dirname((abspath(join(__file__))))), join(\"tabbycat\", \"manage.py\")))\n# Arguments\nparser = argparse.ArgumentParser(description=\"Migrates all fixtures in a directory. \"\n    \"It's best to run this on a completely brand-new, unmigrated database.\")\nparser.add_argument(\"old_commit\", type=str,\n    help=\"Git commit (or branch name, etc.) before the migration\")\nparser.add_argument(\"new_commit\", type=str,\n    help=\"Git commit (or branch name, etc.) after the migration\")\nparser.add_argument(\"--dry-run\", action=\"store_true\", default=False,",
        "detail": "data.migrate_fixtures",
        "documentation": {}
    },
    {
        "label": "MANAGE_PY",
        "kind": 5,
        "importPath": "data.migrate_fixtures",
        "description": "data.migrate_fixtures",
        "peekOfCode": "MANAGE_PY = relpath(join(dirname(dirname((abspath(join(__file__))))), join(\"tabbycat\", \"manage.py\")))\n# Arguments\nparser = argparse.ArgumentParser(description=\"Migrates all fixtures in a directory. \"\n    \"It's best to run this on a completely brand-new, unmigrated database.\")\nparser.add_argument(\"old_commit\", type=str,\n    help=\"Git commit (or branch name, etc.) before the migration\")\nparser.add_argument(\"new_commit\", type=str,\n    help=\"Git commit (or branch name, etc.) after the migration\")\nparser.add_argument(\"--dry-run\", action=\"store_true\", default=False,\n    help=\"Print commands, don't run them.\")",
        "detail": "data.migrate_fixtures",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "data.migrate_fixtures",
        "description": "data.migrate_fixtures",
        "peekOfCode": "parser = argparse.ArgumentParser(description=\"Migrates all fixtures in a directory. \"\n    \"It's best to run this on a completely brand-new, unmigrated database.\")\nparser.add_argument(\"old_commit\", type=str,\n    help=\"Git commit (or branch name, etc.) before the migration\")\nparser.add_argument(\"new_commit\", type=str,\n    help=\"Git commit (or branch name, etc.) after the migration\")\nparser.add_argument(\"--dry-run\", action=\"store_true\", default=False,\n    help=\"Print commands, don't run them.\")\nparser.add_argument(\"--directory\", type=str, default=DEFAULT_DIR,\n    help=\"Directory where fixtures are located, default: \" + DEFAULT_DIR)",
        "detail": "data.migrate_fixtures",
        "documentation": {}
    },
    {
        "label": "args",
        "kind": 5,
        "importPath": "data.migrate_fixtures",
        "description": "data.migrate_fixtures",
        "peekOfCode": "args = parser.parse_args()\nif platform.system() == \"Windows\":\n    subprocess_kwargs = dict(shell=True)\n    use_color = False\nelse:\n    subprocess_kwargs = dict()\n    use_color = True\ndef print_command(command):\n    message = \"$ \" + \" \".join(command)\n    if use_color:",
        "detail": "data.migrate_fixtures",
        "documentation": {}
    },
    {
        "label": "fixtures",
        "kind": 5,
        "importPath": "data.migrate_fixtures",
        "description": "data.migrate_fixtures",
        "peekOfCode": "fixtures = os.listdir(args.directory)\nfor fixture in fixtures:\n    path = join(args.directory, fixture)\n    print_yellow(\"Migrating fixture %s...\" % (path,))\n    for app_label, migration_number in unmigrations:\n        run_command([\"python\", MANAGE_PY, \"migrate\", app_label, migration_number, \"--no-input\"])\n    run_command([\"git\", \"checkout\", args.old_commit])\n    run_command([\"python\", MANAGE_PY, \"flush\", \"--no-input\"])\n    run_command([\"python\", MANAGE_PY, \"loaddata\", path])\n    run_command([\"git\", \"checkout\", args.new_commit])",
        "detail": "data.migrate_fixtures",
        "documentation": {}
    },
    {
        "label": "extensions",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "extensions = [\n    'sphinx.ext.todo',\n    'sphinx.ext.imgmath',\n]\n# Add any paths that contain templates here, relative to this directory.\ntemplates_path = ['_templates']\n# The suffix(es) of source filenames.\n# You can specify multiple suffix as a list of string:\n# source_suffix = ['.rst', '.md']\nsource_suffix = '.rst'",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "templates_path",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "templates_path = ['_templates']\n# The suffix(es) of source filenames.\n# You can specify multiple suffix as a list of string:\n# source_suffix = ['.rst', '.md']\nsource_suffix = '.rst'\n# The encoding of source files.\n# source_encoding = 'utf-8-sig'\n# The master toctree document.\nmaster_doc = 'index'\n# General information about the project.",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "source_suffix",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "source_suffix = '.rst'\n# The encoding of source files.\n# source_encoding = 'utf-8-sig'\n# The master toctree document.\nmaster_doc = 'index'\n# General information about the project.\nproject = 'Tabbycat'\ncopyright = '2024, Philip Belesky, Chuan-Zheng Lee, Étienne Beaulé'\nauthor = 'Philip Belesky, Chuan-Zheng Lee, Étienne Beaulé'\n# The version info for the project you're documenting, acts as replacement for",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "master_doc",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "master_doc = 'index'\n# General information about the project.\nproject = 'Tabbycat'\ncopyright = '2024, Philip Belesky, Chuan-Zheng Lee, Étienne Beaulé'\nauthor = 'Philip Belesky, Chuan-Zheng Lee, Étienne Beaulé'\n# The version info for the project you're documenting, acts as replacement for\n# |version| and |release|, also used in various other places throughout the\n# built documents.\n#\n# The short X.Y version.",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "project",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "project = 'Tabbycat'\ncopyright = '2024, Philip Belesky, Chuan-Zheng Lee, Étienne Beaulé'\nauthor = 'Philip Belesky, Chuan-Zheng Lee, Étienne Beaulé'\n# The version info for the project you're documenting, acts as replacement for\n# |version| and |release|, also used in various other places throughout the\n# built documents.\n#\n# The short X.Y version.\nversion = '2.9'\n# The full version, including alpha/beta/rc tags.",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "copyright",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "copyright = '2024, Philip Belesky, Chuan-Zheng Lee, Étienne Beaulé'\nauthor = 'Philip Belesky, Chuan-Zheng Lee, Étienne Beaulé'\n# The version info for the project you're documenting, acts as replacement for\n# |version| and |release|, also used in various other places throughout the\n# built documents.\n#\n# The short X.Y version.\nversion = '2.9'\n# The full version, including alpha/beta/rc tags.\nrelease = '2.9.2'",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "author",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "author = 'Philip Belesky, Chuan-Zheng Lee, Étienne Beaulé'\n# The version info for the project you're documenting, acts as replacement for\n# |version| and |release|, also used in various other places throughout the\n# built documents.\n#\n# The short X.Y version.\nversion = '2.9'\n# The full version, including alpha/beta/rc tags.\nrelease = '2.9.2'\nrst_epilog = \"\"\"",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "version",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "version = '2.9'\n# The full version, including alpha/beta/rc tags.\nrelease = '2.9.2'\nrst_epilog = \"\"\"\n.. |vrelease| replace:: v{release}\n.. _our GitHub repository: https://github.com/TabbycatDebate/tabbycat/\n\"\"\".format(release=release)\n# The language for content autogenerated by Sphinx. Refer to documentation\n# for a list of supported languages.\n#",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "release",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "release = '2.9.2'\nrst_epilog = \"\"\"\n.. |vrelease| replace:: v{release}\n.. _our GitHub repository: https://github.com/TabbycatDebate/tabbycat/\n\"\"\".format(release=release)\n# The language for content autogenerated by Sphinx. Refer to documentation\n# for a list of supported languages.\n#\n# This is also used if you do content translation via gettext catalogs.\n# Usually you set \"language\" from the command line for these cases.",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "rst_epilog",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "rst_epilog = \"\"\"\n.. |vrelease| replace:: v{release}\n.. _our GitHub repository: https://github.com/TabbycatDebate/tabbycat/\n\"\"\".format(release=release)\n# The language for content autogenerated by Sphinx. Refer to documentation\n# for a list of supported languages.\n#\n# This is also used if you do content translation via gettext catalogs.\n# Usually you set \"language\" from the command line for these cases.\nlanguage = None",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "language",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "language = None\n# There are two options for replacing |today|: either, you set today to some\n# non-false value, then it is used:\n# today = ''\n# Else, today_fmt is used as the format for a strftime call.\n# today_fmt = '%B %d, %Y'\n# List of patterns, relative to source directory, that match files and\n# directories to ignore when looking for source files.\nexclude_patterns = ['_build']\n# The reST default role (used for this markup: `text`) to use for all",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "exclude_patterns",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "exclude_patterns = ['_build']\n# The reST default role (used for this markup: `text`) to use for all\n# documents.\n# default_role = None\n# If true, '()' will be appended to :func: etc. cross-reference text.\n# add_function_parentheses = True\n# If true, the current module name will be prepended to all description\n# unit titles (such as .. function::).\n# add_module_names = True\n# If true, sectionauthor and moduleauthor directives will be shown in the",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "pygments_style",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "pygments_style = 'sphinx'\n# A list of ignored prefixes for module index sorting.\n# modindex_common_prefix = []\n# If true, keep warnings as \"system message\" paragraphs in the built documents.\n# keep_warnings = False\n# If true, `todo` and `todoList` produce output, else they produce nothing.\ntodo_include_todos = True\n# -- Options for HTML output ----------------------------------------------\n# The theme to use for HTML and HTML Help pages.  See the documentation for\n# a list of builtin themes.",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "todo_include_todos",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "todo_include_todos = True\n# -- Options for HTML output ----------------------------------------------\n# The theme to use for HTML and HTML Help pages.  See the documentation for\n# a list of builtin themes.\nhtml_theme = 'sphinx_rtd_theme'\n# Theme options are theme-specific and customize the look and feel of a theme\n# further.  For a list of options available for each theme, see the\n# documentation.\n# html_theme_options = {}\n# Add any paths that contain custom themes here, relative to this directory.",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "html_theme",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "html_theme = 'sphinx_rtd_theme'\n# Theme options are theme-specific and customize the look and feel of a theme\n# further.  For a list of options available for each theme, see the\n# documentation.\n# html_theme_options = {}\n# Add any paths that contain custom themes here, relative to this directory.\n# html_theme_path = []\n# The name for this set of Sphinx documents.  If None, it defaults to\n# \"<project> v<release> documentation\".\n# html_title = None",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "html_favicon",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "html_favicon = \"favicon.ico\"\n# Add any paths that contain custom static files (such as style sheets) here,\n# relative to this directory. They are copied after the builtin static files,\n# so a file named \"default.css\" will overwrite the builtin \"default.css\".\nhtml_static_path = ['_static']\n# Add any extra paths that contain custom files (such as robots.txt or\n# .htaccess) here, relative to this directory. These files are copied\n# directly to the root of the documentation.\n# html_extra_path = []\n# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "html_static_path",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "html_static_path = ['_static']\n# Add any extra paths that contain custom files (such as robots.txt or\n# .htaccess) here, relative to this directory. These files are copied\n# directly to the root of the documentation.\n# html_extra_path = []\n# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,\n# using the given strftime format.\n# html_last_updated_fmt = '%b %d, %Y'\n# If true, SmartyPants will be used to convert quotes and dashes to\n# typographically correct entities.",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "htmlhelp_basename",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "htmlhelp_basename = 'Tabbycatdoc'\n# -- Options for LaTeX output ---------------------------------------------\n# latex_elements = {\n# The paper size ('letterpaper' or 'a4paper').\n# 'papersize': 'letterpaper',\n# The font size ('10pt', '11pt' or '12pt').\n# 'pointsize': '10pt',\n# Additional stuff for the LaTeX preamble.\n# 'preamble': '',\n# Latex figure (float) alignment",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "latex_documents",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "latex_documents = [\n    (master_doc, 'Tabbycat.tex', 'Tabbycat Documentation',\n     author, 'manual'),\n]\n# The name of an image file (relative to this directory) to place at the top of\n# the title page.\n# latex_logo = None\n# For \"manual\" documents, if this is true, then toplevel headings are parts,\n# not chapters.\n# latex_use_parts = False",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "man_pages",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "man_pages = [\n    (master_doc, 'tabbycat', 'Tabbycat Documentation',\n     [author], 1),\n]\n# If true, show URL addresses after external links.\n# man_show_urls = False\n# -- Options for Texinfo output -------------------------------------------\n# Grouping the document tree into Texinfo files. List of tuples\n# (source start file, target name, title, author,\n#  dir menu entry, description, category)",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "texinfo_documents",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "texinfo_documents = [\n    (master_doc, 'Tabbycat', 'Tabbycat Documentation',\n     author, 'Tabbycat', 'Debating tabulation software for British Parliamentary and a variety of two-team formats',\n     'Miscellaneous'),\n]\n# Documents to append as an appendix to all manuals.\n# texinfo_appendices = []\n# If false, no module index is generated.\n# texinfo_domain_indices = True\n# How to display URL addresses: 'footnote', 'no', or 'inline'.",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "on_rtd",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "on_rtd = os.environ.get('READTHEDOCS', None) == 'True'\nif not on_rtd:  # only import and set the theme if we're building docs locally\n    import sphinx_rtd_theme\n    html_theme = 'sphinx_rtd_theme'\n    html_theme_path = [sphinx_rtd_theme.get_html_theme_path()]\n    # Override default css to get a larger width for local build\n    def setup(app):\n        app.add_css_file('theme_overrides.css')\nelse:\n    # Override default css to get a larger width for ReadTheDoc build",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "imgmath_image_format",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "imgmath_image_format = 'svg'\n# -- Localisation options --------------------------------------------------\nlocale_dirs = ['locale/']\ngettext_compact = False",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "locale_dirs",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "locale_dirs = ['locale/']\ngettext_compact = False",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "gettext_compact",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "gettext_compact = False",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "host",
        "kind": 5,
        "importPath": "node_modules.quagga.simple-https-server",
        "description": "node_modules.quagga.simple-https-server",
        "peekOfCode": "host = 'localhost'\nport = 4443\ntry:\n  opts, args = getopt.getopt(sys.argv[1:],\"\",[\"host=\", \"port=\"])\nexcept getopt.GetoptError:\n  print 'simple-https-server.py --host <host> --port <port>'\n  sys.exit(2)\nfor opt, arg in opts:\n  if opt in (\"--host\"):\n     host = arg",
        "detail": "node_modules.quagga.simple-https-server",
        "documentation": {}
    },
    {
        "label": "port",
        "kind": 5,
        "importPath": "node_modules.quagga.simple-https-server",
        "description": "node_modules.quagga.simple-https-server",
        "peekOfCode": "port = 4443\ntry:\n  opts, args = getopt.getopt(sys.argv[1:],\"\",[\"host=\", \"port=\"])\nexcept getopt.GetoptError:\n  print 'simple-https-server.py --host <host> --port <port>'\n  sys.exit(2)\nfor opt, arg in opts:\n  if opt in (\"--host\"):\n     host = arg\n  elif opt in (\"--port\"):",
        "detail": "node_modules.quagga.simple-https-server",
        "documentation": {}
    },
    {
        "label": "httpd",
        "kind": 5,
        "importPath": "node_modules.quagga.simple-https-server",
        "description": "node_modules.quagga.simple-https-server",
        "peekOfCode": "httpd = BaseHTTPServer.HTTPServer((host, port), SimpleHTTPServer.SimpleHTTPRequestHandler)\nhttpd.socket = ssl.wrap_socket (httpd.socket, certfile='./server.pem', server_side=True)\nhttpd.serve_forever()",
        "detail": "node_modules.quagga.simple-https-server",
        "documentation": {}
    },
    {
        "label": "httpd.socket",
        "kind": 5,
        "importPath": "node_modules.quagga.simple-https-server",
        "description": "node_modules.quagga.simple-https-server",
        "peekOfCode": "httpd.socket = ssl.wrap_socket (httpd.socket, certfile='./server.pem', server_side=True)\nhttpd.serve_forever()",
        "detail": "node_modules.quagga.simple-https-server",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "tabbycat.actionlog.management.commands.keytimes",
        "description": "tabbycat.actionlog.management.commands.keytimes",
        "peekOfCode": "class Command(TournamentCommand):\n    help = \"Prints a summary of key action log times in preliminary rounds\"\n    def handle_tournament(self, tournament, **options):\n        writer = csv.writer(self.stdout)\n        headings = [\n            'round',\n            'create',\n            'importance',\n            'adj-auto',\n            'adj-done',",
        "detail": "tabbycat.actionlog.management.commands.keytimes",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "tabbycat.actionlog.management.commands.printactionlog",
        "description": "tabbycat.actionlog.management.commands.printactionlog",
        "peekOfCode": "class Command(BaseCommand):\n    help = \"Prints every entry in the action log (for all tournaments)\"\n    def handle(self, **options):\n        for al in ActionLogEntry.objects.order_by('-timestamp'):\n            self.stdout.write(repr(al))",
        "detail": "tabbycat.actionlog.management.commands.printactionlog",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.actionlog.migrations.0001_initial",
        "description": "tabbycat.actionlog.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('contenttypes', '0002_remove_content_type_name'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='ActionLogEntry',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "tabbycat.actionlog.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.actionlog.migrations.0002_auto_20171110_0905",
        "description": "tabbycat.actionlog.migrations.0002_auto_20171110_0905",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('tournaments', '0001_initial'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n        ('actionlog', '0001_initial'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='actionlogentry',",
        "detail": "tabbycat.actionlog.migrations.0002_auto_20171110_0905",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.actionlog.migrations.0003_auto_20180304_2218",
        "description": "tabbycat.actionlog.migrations.0003_auto_20180304_2218",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('actionlog', '0002_auto_20171110_0905'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='actionlogentry',\n            name='type',\n            field=models.CharField(choices=[('ba.disc', 'Discarded ballot set'), ('ba.ckin', 'Checked in ballot set'), ('ba.crea', 'Created ballot set'), ('ba.edit', 'Edited ballot set'), ('ba.conf', 'Confirmed ballot set'), ('ba.subm', 'Submitted ballot set from the public form'), ('fb.subm', 'Submitted feedback from the public form'), ('fb.save', 'Saved feedback'), ('ts.edit', 'Edited adjudicator test score'), ('aj.note', 'Set adjudicator note'), ('aa.save', 'Saved adjudicator allocation'), ('aa.auto', 'Auto-allocated adjudicators'), ('ve.save', 'Saved a venue manual edit'), ('ve.auto', 'Auto-allocated venues'), ('ve.ca.edit', 'Edited venue categories'), ('dr.crea', 'Created draw'), ('dr.conf', 'Confirmed draw'), ('dr.rege', 'Regenerated draw'), ('dr.rele', 'Released draw'), ('dr.unre', 'Unreleased draw'), ('mu.save', 'Saved a matchup manual edit'), ('ms.save', 'Saved the sides status of a matchup'), ('dv.save', 'Saved divisions'), ('mo.edit', 'Added/edited motion'), ('mo.rele', 'Released motions'), ('mo.unre', 'Unreleased motions'), ('db.im.edit', 'Edited debate importance'), ('br.aj.set', 'Changed adjudicator breaking status'), ('br.el.edit', 'Edited break eligibility'), ('br.ca.edit', 'Edited break categories'), ('br.gene', 'Generated the team break for all categories'), ('br.upda', 'Edited breaking team remarks and updated all team breaks'), ('br.upd1', 'Edited breaking team remarks and updated this team break'), ('br.rm.edit', 'Edited breaking team remarks'), ('rd.st.set', 'Set start time'), ('rd.adva', 'Advanced the current round to'), ('av.tm.save', 'Edited teams availability'), ('av.aj.save', 'Edited adjudicators availability'), ('av.ve.save', 'Edited venue availability'), ('op.edit', 'Edited tournament options'), ('se.edit', 'Edited speaker category eligibility'), ('se.ca.edit', 'Edited speaker categories'), ('ch.sp.gene', 'Generated check in identifiers for speakers'), ('ch.aj.gene', 'Generated check in identifiers for adjudicators'), ('ch.ve.gene', 'Generated check in identifiers for venues')], max_length=10, verbose_name='type'),\n        ),",
        "detail": "tabbycat.actionlog.migrations.0003_auto_20180304_2218",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.actionlog.migrations.0003_auto_20180305_1543",
        "description": "tabbycat.actionlog.migrations.0003_auto_20180305_1543",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('actionlog', '0002_auto_20171110_0905'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='actionlogentry',\n            name='type',\n            field=models.CharField(choices=[('ba.disc', 'Discarded ballot set'), ('ba.ckin', 'Checked in ballot set'), ('ba.crea', 'Created ballot set'), ('ba.edit', 'Edited ballot set'), ('ba.conf', 'Confirmed ballot set'), ('ba.subm', 'Submitted ballot set from the public form'), ('fb.subm', 'Submitted feedback from the public form'), ('fb.save', 'Saved feedback'), ('ts.edit', 'Edited adjudicator test score'), ('aj.note', 'Set adjudicator note'), ('aa.save', 'Saved adjudicator allocation'), ('aa.auto', 'Auto-allocated adjudicators'), ('ve.save', 'Saved a venue manual edit'), ('ve.auto', 'Auto-allocated venues'), ('ve.ca.edit', 'Edited venue categories'), ('ve.co.edit', 'Edited venue constraints'), ('dr.crea', 'Created draw'), ('dr.conf', 'Confirmed draw'), ('dr.rege', 'Regenerated draw'), ('dr.rele', 'Released draw'), ('dr.unre', 'Unreleased draw'), ('mu.save', 'Saved a matchup manual edit'), ('ms.save', 'Saved the sides status of a matchup'), ('dv.save', 'Saved divisions'), ('mo.edit', 'Added/edited motion'), ('mo.rele', 'Released motions'), ('mo.unre', 'Unreleased motions'), ('db.im.edit', 'Edited debate importance'), ('br.aj.set', 'Changed adjudicator breaking status'), ('br.el.edit', 'Edited break eligibility'), ('br.ca.edit', 'Edited break categories'), ('br.gene', 'Generated the team break for all categories'), ('br.upda', 'Edited breaking team remarks and updated all team breaks'), ('br.upd1', 'Edited breaking team remarks and updated this team break'), ('br.rm.edit', 'Edited breaking team remarks'), ('rd.st.set', 'Set start time'), ('rd.adva', 'Advanced the current round to'), ('av.tm.save', 'Edited teams availability'), ('av.aj.save', 'Edited adjudicators availability'), ('av.ve.save', 'Edited venue availability'), ('op.edit', 'Edited tournament options'), ('se.edit', 'Edited speaker category eligibility'), ('se.ca.edit', 'Edited speaker categories'), ('si.inst', 'Imported institutions using the simple importer'), ('si.venu', 'Imported venues using the simple importer'), ('si.team', 'Imported teams using the simple importer'), ('si.adju', 'Imported adjudicators using the simple importer'), ('ac.at.edit', 'Edited adjudicator-team conflicts')], max_length=10, verbose_name='type'),\n        ),",
        "detail": "tabbycat.actionlog.migrations.0003_auto_20180305_1543",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.actionlog.migrations.0004_merge_20180307_2015",
        "description": "tabbycat.actionlog.migrations.0004_merge_20180307_2015",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('actionlog', '0003_auto_20180305_1543'),\n        ('actionlog', '0003_auto_20180304_2218'),\n    ]\n    operations = [\n    ]",
        "detail": "tabbycat.actionlog.migrations.0004_merge_20180307_2015",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.actionlog.migrations.0005_auto_20180312_1733",
        "description": "tabbycat.actionlog.migrations.0005_auto_20180312_1733",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('actionlog', '0004_merge_20180307_2015'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='actionlogentry',\n            name='type',\n            field=models.CharField(choices=[('ba.disc', 'Discarded ballot set'), ('ba.ckin', 'Checked in ballot set'), ('ba.crea', 'Created ballot set'), ('ba.edit', 'Edited ballot set'), ('ba.conf', 'Confirmed ballot set'), ('ba.subm', 'Submitted ballot set from the public form'), ('fb.subm', 'Submitted feedback from the public form'), ('fb.save', 'Saved feedback'), ('ts.edit', 'Edited adjudicator test score'), ('aj.note', 'Set adjudicator note'), ('aa.save', 'Saved adjudicator allocation'), ('aa.auto', 'Auto-allocated adjudicators'), ('ve.save', 'Saved a venue manual edit'), ('ve.auto', 'Auto-allocated venues'), ('ve.ca.edit', 'Edited venue categories'), ('ve.co.edit', 'Edited venue constraints'), ('dr.crea', 'Created draw'), ('dr.conf', 'Confirmed draw'), ('dr.rege', 'Regenerated draw'), ('dr.rele', 'Released draw'), ('dr.unre', 'Unreleased draw'), ('mu.save', 'Saved a matchup manual edit'), ('ms.save', 'Saved the sides status of a matchup'), ('dv.save', 'Saved divisions'), ('mo.edit', 'Added/edited motion'), ('mo.rele', 'Released motions'), ('mo.unre', 'Unreleased motions'), ('db.im.edit', 'Edited debate importance'), ('br.aj.set', 'Changed adjudicator breaking status'), ('br.el.edit', 'Edited break eligibility'), ('br.ca.edit', 'Edited break categories'), ('br.gene', 'Generated the team break for all categories'), ('br.upda', 'Edited breaking team remarks and updated all team breaks'), ('br.upd1', 'Edited breaking team remarks and updated this team break'), ('br.rm.edit', 'Edited breaking team remarks'), ('rd.st.set', 'Set start time'), ('rd.adva', 'Advanced the current round to'), ('av.tm.save', 'Edited teams availability'), ('av.aj.save', 'Edited adjudicators availability'), ('av.ve.save', 'Edited venue availability'), ('op.edit', 'Edited tournament options'), ('se.edit', 'Edited speaker category eligibility'), ('se.ca.edit', 'Edited speaker categories'), ('si.inst', 'Imported institutions using the simple importer'), ('si.venu', 'Imported venues using the simple importer'), ('si.team', 'Imported teams using the simple importer'), ('si.adju', 'Imported adjudicators using the simple importer'), ('ac.at.edit', 'Edited adjudicator-team conflicts'), ('ch.sp.gene', 'Generated check in identifiers for speakers'), ('ch.aj.gene', 'Generated check in identifiers for adjudicators'), ('ch.ve.gene', 'Generated check in identifiers for venues')], max_length=10, verbose_name='type'),\n        ),",
        "detail": "tabbycat.actionlog.migrations.0005_auto_20180312_1733",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.actionlog.migrations.0006_auto_20180318_2355",
        "description": "tabbycat.actionlog.migrations.0006_auto_20180318_2355",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('actionlog', '0005_auto_20180312_1733'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='actionlogentry',\n            name='type',\n            field=models.CharField(choices=[('ba.disc', 'Discarded ballot set'), ('ba.ckin', 'Checked in ballot set'), ('ba.crea', 'Created ballot set'), ('ba.edit', 'Edited ballot set'), ('ba.conf', 'Confirmed ballot set'), ('ba.subm', 'Submitted ballot set from the public form'), ('fb.subm', 'Submitted feedback from the public form'), ('fb.save', 'Saved feedback'), ('ts.edit', 'Edited adjudicator test score'), ('aj.note', 'Set adjudicator note'), ('aa.save', 'Saved adjudicator allocation'), ('aa.auto', 'Auto-allocated adjudicators'), ('ve.save', 'Saved a venue manual edit'), ('ve.auto', 'Auto-allocated venues'), ('ve.ca.edit', 'Edited venue categories'), ('ve.co.edit', 'Edited venue constraints'), ('dr.crea', 'Created draw'), ('dr.conf', 'Confirmed draw'), ('dr.rege', 'Regenerated draw'), ('dr.rele', 'Released draw'), ('dr.unre', 'Unreleased draw'), ('mu.save', 'Saved a matchup manual edit'), ('ms.save', 'Saved the sides status of a matchup'), ('dv.save', 'Saved divisions'), ('mo.edit', 'Added/edited motion'), ('mo.rele', 'Released motions'), ('mo.unre', 'Unreleased motions'), ('db.im.edit', 'Edited debate importance'), ('br.aj.set', 'Changed adjudicator breaking status'), ('br.el.edit', 'Edited break eligibility'), ('br.ca.edit', 'Edited break categories'), ('br.gene', 'Generated the team break for all categories'), ('br.upda', 'Edited breaking team remarks and updated all team breaks'), ('br.upd1', 'Edited breaking team remarks and updated this team break'), ('br.rm.edit', 'Edited breaking team remarks'), ('rd.st.set', 'Set start time'), ('rd.adva', 'Advanced the current round to'), ('av.tm.save', 'Edited teams availability'), ('av.aj.save', 'Edited adjudicators availability'), ('av.ve.save', 'Edited venue availability'), ('op.edit', 'Edited tournament options'), ('se.edit', 'Edited speaker category eligibility'), ('se.ca.edit', 'Edited speaker categories'), ('si.inst', 'Imported institutions using the simple importer'), ('si.venu', 'Imported venues using the simple importer'), ('si.team', 'Imported teams using the simple importer'), ('si.adju', 'Imported adjudicators using the simple importer'), ('ac.at.edit', 'Edited adjudicator-team conflicts'), ('ac.aa.edit', 'Edited adjudicator-adjudicator conflicts'), ('ac.ai.edit', 'Edited adjudicator-institution conflicts'), ('ch.sp.gene', 'Generated check in identifiers for speakers'), ('ch.aj.gene', 'Generated check in identifiers for adjudicators'), ('ch.ve.gene', 'Generated check in identifiers for venues')], max_length=10, verbose_name='type'),\n        ),",
        "detail": "tabbycat.actionlog.migrations.0006_auto_20180318_2355",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.actionlog.migrations.0007_auto_20180402_1620",
        "description": "tabbycat.actionlog.migrations.0007_auto_20180402_1620",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('actionlog', '0006_auto_20180318_2355'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='actionlogentry',\n            name='type',\n            field=models.CharField(choices=[('ba.disc', 'Discarded ballot set'), ('ba.ckin', 'Checked in ballot set'), ('ba.crea', 'Created ballot set'), ('ba.edit', 'Edited ballot set'), ('ba.conf', 'Confirmed ballot set'), ('ba.subm', 'Submitted ballot set from the public form'), ('fb.subm', 'Submitted feedback from the public form'), ('fb.save', 'Saved feedback'), ('ts.edit', 'Edited adjudicator test score'), ('aj.note', 'Set adjudicator note'), ('aa.save', 'Saved adjudicator allocation'), ('aa.auto', 'Auto-allocated adjudicators'), ('ve.save', 'Saved a venue manual edit'), ('ve.auto', 'Auto-allocated venues'), ('ve.ca.edit', 'Edited venue categories'), ('ve.co.edit', 'Edited venue constraints'), ('dr.crea', 'Created draw'), ('dr.conf', 'Confirmed draw'), ('dr.rege', 'Regenerated draw'), ('dr.rele', 'Released draw'), ('dr.unre', 'Unreleased draw'), ('mu.save', 'Saved a matchup manual edit'), ('ms.save', 'Saved the sides status of a matchup'), ('dv.save', 'Saved divisions'), ('mo.edit', 'Added/edited motion'), ('mo.rele', 'Released motions'), ('mo.unre', 'Unreleased motions'), ('db.im.edit', 'Edited debate importance'), ('br.aj.set', 'Changed adjudicator breaking status'), ('br.el.edit', 'Edited break eligibility'), ('br.ca.edit', 'Edited break categories'), ('br.gene', 'Generated the team break for all categories'), ('br.upda', 'Edited breaking team remarks and updated all team breaks'), ('br.upd1', 'Edited breaking team remarks and updated this team break'), ('br.rm.edit', 'Edited breaking team remarks'), ('rd.st.set', 'Set start time'), ('rd.adva', 'Advanced the current round to'), ('av.tm.save', 'Edited teams availability'), ('av.aj.save', 'Edited adjudicators availability'), ('av.ve.save', 'Edited venue availability'), ('op.edit', 'Edited tournament options'), ('se.edit', 'Edited speaker category eligibility'), ('se.ca.edit', 'Edited speaker categories'), ('si.inst', 'Imported institutions using the simple importer'), ('si.venu', 'Imported venues using the simple importer'), ('si.team', 'Imported teams using the simple importer'), ('si.adju', 'Imported adjudicators using the simple importer'), ('aj.sc.upda', 'Updated adjudicator scores in bulk'), ('ac.at.edit', 'Edited adjudicator-team conflicts'), ('ac.aa.edit', 'Edited adjudicator-adjudicator conflicts'), ('ac.ai.edit', 'Edited adjudicator-institution conflicts'), ('ch.sp.gene', 'Generated check in identifiers for speakers'), ('ch.aj.gene', 'Generated check in identifiers for adjudicators'), ('ch.ve.gene', 'Generated check in identifiers for venues')], max_length=10, verbose_name='type'),\n        ),",
        "detail": "tabbycat.actionlog.migrations.0007_auto_20180402_1620",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.actionlog.migrations.0008_auto_20180928_1441",
        "description": "tabbycat.actionlog.migrations.0008_auto_20180928_1441",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('actionlog', '0007_auto_20180402_1620'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='actionlogentry',\n            name='type',\n            field=models.CharField(choices=[('ba.disc', 'Discarded ballot set'), ('ba.ckin', 'Checked in ballot set'), ('ba.crea', 'Created ballot set'), ('ba.edit', 'Edited ballot set'), ('ba.conf', 'Confirmed ballot set'), ('ba.subm', 'Submitted ballot set from the public form'), ('fb.subm', 'Submitted feedback from the public form'), ('fb.save', 'Saved feedback'), ('ts.edit', 'Edited adjudicator test score'), ('aj.note', 'Set adjudicator note'), ('aa.save', 'Saved adjudicator allocation'), ('aa.auto', 'Auto-allocated adjudicators'), ('ve.save', 'Saved a venue manual edit'), ('ve.auto', 'Auto-allocated venues'), ('ve.ca.edit', 'Edited venue categories'), ('ve.co.edit', 'Edited venue constraints'), ('dr.crea', 'Created draw'), ('dr.conf', 'Confirmed draw'), ('dr.rege', 'Regenerated draw'), ('dr.rele', 'Released draw'), ('dr.unre', 'Unreleased draw'), ('mu.save', 'Saved a matchup manual edit'), ('ms.save', 'Saved the sides status of a matchup'), ('dv.save', 'Saved divisions'), ('mo.edit', 'Added/edited motion'), ('mo.rele', 'Released motions'), ('mo.unre', 'Unreleased motions'), ('db.im.edit', 'Edited debate importance'), ('br.aj.set', 'Changed adjudicator breaking status'), ('br.el.edit', 'Edited break eligibility'), ('br.ca.edit', 'Edited break categories'), ('br.gene', 'Generated the team break for all categories'), ('br.upda', 'Edited breaking team remarks and updated all team breaks'), ('br.upd1', 'Edited breaking team remarks and updated this team break'), ('br.rm.edit', 'Edited breaking team remarks'), ('rd.st.set', 'Set start time'), ('rd.adva', 'Advanced the current round to'), ('rd.comp', 'Marked round as completed'), ('av.tm.save', 'Edited teams availability'), ('av.aj.save', 'Edited adjudicators availability'), ('av.ve.save', 'Edited venue availability'), ('op.edit', 'Edited tournament options'), ('se.edit', 'Edited speaker category eligibility'), ('se.ca.edit', 'Edited speaker categories'), ('si.inst', 'Imported institutions using the simple importer'), ('si.venu', 'Imported venues using the simple importer'), ('si.team', 'Imported teams using the simple importer'), ('si.adju', 'Imported adjudicators using the simple importer'), ('aj.sc.upda', 'Updated adjudicator scores in bulk'), ('ac.at.edit', 'Edited adjudicator-team conflicts'), ('ac.aa.edit', 'Edited adjudicator-adjudicator conflicts'), ('ac.ai.edit', 'Edited adjudicator-institution conflicts'), ('ac.ti.edit', 'Edited team-institution conflicts'), ('ch.sp.gene', 'Generated check in identifiers for speakers'), ('ch.aj.gene', 'Generated check in identifiers for adjudicators'), ('ch.ve.gene', 'Generated check in identifiers for venues')], max_length=10, verbose_name='type'),\n        ),",
        "detail": "tabbycat.actionlog.migrations.0008_auto_20180928_1441",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.actionlog.migrations.0009_auto_20181224_1719",
        "description": "tabbycat.actionlog.migrations.0009_auto_20181224_1719",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('actionlog', '0008_auto_20180928_1441'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='actionlogentry',\n            name='type',\n            field=models.CharField(choices=[('ba.disc', 'Discarded ballot set'), ('ba.ckin', 'Checked in ballot set'), ('ba.crea', 'Created ballot set'), ('ba.edit', 'Edited ballot set'), ('ba.conf', 'Confirmed ballot set'), ('ba.subm', 'Submitted ballot set from the public form'), ('fb.subm', 'Submitted feedback from the public form'), ('fb.save', 'Saved feedback'), ('ts.edit', 'Edited adjudicator test score'), ('aj.note', 'Set adjudicator note'), ('aa.save', 'Saved adjudicator allocation'), ('aa.auto', 'Auto-allocated adjudicators'), ('ve.save', 'Saved a venue manual edit'), ('ve.auto', 'Auto-allocated venues'), ('ve.ca.edit', 'Edited venue categories'), ('ve.co.edit', 'Edited venue constraints'), ('dr.crea', 'Created draw'), ('dr.conf', 'Confirmed draw'), ('dr.rege', 'Regenerated draw'), ('dr.rele', 'Released draw'), ('dr.unre', 'Unreleased draw'), ('mu.save', 'Saved a matchup manual edit'), ('ms.save', 'Saved the sides status of a matchup'), ('dv.save', 'Saved divisions'), ('mo.edit', 'Added/edited motion'), ('mo.rele', 'Released motions'), ('mo.unre', 'Unreleased motions'), ('db.im.auto', 'Auto-prioritized debate importance'), ('db.im.edit', 'Edited debate importance'), ('br.aj.set', 'Changed adjudicator breaking status'), ('br.el.edit', 'Edited break eligibility'), ('br.ca.edit', 'Edited break categories'), ('br.gene', 'Generated the team break for all categories'), ('br.upda', 'Edited breaking team remarks and updated all team breaks'), ('br.upd1', 'Edited breaking team remarks and updated this team break'), ('br.rm.edit', 'Edited breaking team remarks'), ('rd.st.set', 'Set start time'), ('rd.adva', 'Advanced the current round to'), ('rd.comp', 'Marked round as completed'), ('av.tm.save', 'Edited teams availability'), ('av.aj.save', 'Edited adjudicators availability'), ('av.ve.save', 'Edited venue availability'), ('op.edit', 'Edited tournament options'), ('se.edit', 'Edited speaker category eligibility'), ('se.ca.edit', 'Edited speaker categories'), ('si.inst', 'Imported institutions using the simple importer'), ('si.venu', 'Imported venues using the simple importer'), ('si.team', 'Imported teams using the simple importer'), ('si.adju', 'Imported adjudicators using the simple importer'), ('aj.sc.upda', 'Updated adjudicator scores in bulk'), ('ac.at.edit', 'Edited adjudicator-team conflicts'), ('ac.aa.edit', 'Edited adjudicator-adjudicator conflicts'), ('ac.ai.edit', 'Edited adjudicator-institution conflicts'), ('ac.ti.edit', 'Edited team-institution conflicts'), ('ch.sp.gene', 'Generated check in identifiers for speakers'), ('ch.aj.gene', 'Generated check in identifiers for adjudicators'), ('ch.ve.gene', 'Generated check in identifiers for venues'), ('pp.crea', 'Created preformed panels'), ('pp.im.auto', 'Auto-prioritized preformed panels'), ('pp.im.edit', 'Edited preformed panel importance'), ('pp.aj.auto', 'Auto-allocated adjudicators to preformed panels'), ('pp.aj.auto', 'Edited preformed panel adjudicator'), ('pp.db.auto', 'Auto-allocated preformed panels to debates')], max_length=10, verbose_name='type'),\n        ),",
        "detail": "tabbycat.actionlog.migrations.0009_auto_20181224_1719",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.actionlog.migrations.0010_auto_20191109_1240",
        "description": "tabbycat.actionlog.migrations.0010_auto_20191109_1240",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('actionlog', '0009_auto_20181224_1719'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='actionlogentry',\n            name='type',\n            field=models.CharField(choices=[('ba.disc', 'Discarded ballot set'), ('ba.ckin', 'Checked in ballot set'), ('ba.crea', 'Created ballot set'), ('ba.edit', 'Edited ballot set'), ('ba.conf', 'Confirmed ballot set'), ('ba.subm', 'Submitted ballot set from the public form'), ('fb.subm', 'Submitted feedback from the public form'), ('fb.save', 'Saved feedback'), ('ts.edit', 'Edited adjudicator base score'), ('aj.note', 'Set adjudicator note'), ('aa.save', 'Saved adjudicator allocation'), ('aa.auto', 'Auto-allocated adjudicators'), ('ve.save', 'Saved a venue manual edit'), ('ve.auto', 'Auto-allocated venues'), ('ve.ca.edit', 'Edited venue categories'), ('ve.co.edit', 'Edited venue constraints'), ('dr.crea', 'Created draw'), ('dr.conf', 'Confirmed draw'), ('dr.rege', 'Regenerated draw'), ('dr.rele', 'Released draw'), ('dr.unre', 'Unreleased draw'), ('mu.save', 'Saved a matchup manual edit'), ('ms.save', 'Saved the sides status of a matchup'), ('dv.save', 'Saved divisions'), ('mo.edit', 'Added/edited motion'), ('mo.rele', 'Released motions'), ('mo.unre', 'Unreleased motions'), ('db.im.auto', 'Auto-prioritized debate importance'), ('db.im.edit', 'Edited debate importance'), ('br.aj.set', 'Changed adjudicator breaking status'), ('br.el.edit', 'Edited break eligibility'), ('br.ca.edit', 'Edited break categories'), ('br.gene', 'Generated the team break for all categories'), ('br.upda', 'Edited breaking team remarks and updated all team breaks'), ('br.upd1', 'Edited breaking team remarks and updated this team break'), ('br.rm.edit', 'Edited breaking team remarks'), ('rd.st.set', 'Set start time'), ('rd.adva', 'Advanced the current round to'), ('rd.comp', 'Marked round as completed'), ('av.tm.save', 'Edited teams availability'), ('av.aj.save', 'Edited adjudicators availability'), ('av.ve.save', 'Edited venue availability'), ('op.edit', 'Edited tournament options'), ('se.edit', 'Edited speaker category eligibility'), ('se.ca.edit', 'Edited speaker categories'), ('si.inst', 'Imported institutions using the simple importer'), ('si.venu', 'Imported venues using the simple importer'), ('si.team', 'Imported teams using the simple importer'), ('si.adju', 'Imported adjudicators using the simple importer'), ('aj.sc.upda', 'Updated adjudicator scores in bulk'), ('ac.at.edit', 'Edited adjudicator-team conflicts'), ('ac.aa.edit', 'Edited adjudicator-adjudicator conflicts'), ('ac.ai.edit', 'Edited adjudicator-institution conflicts'), ('ac.ti.edit', 'Edited team-institution conflicts'), ('ch.sp.gene', 'Generated check in identifiers for speakers'), ('ch.aj.gene', 'Generated check in identifiers for adjudicators'), ('ch.ve.gene', 'Generated check in identifiers for venues'), ('pp.crea', 'Created preformed panels'), ('pp.im.auto', 'Auto-prioritized preformed panels'), ('pp.im.edit', 'Edited preformed panel importance'), ('pp.aj.auto', 'Auto-allocated adjudicators to preformed panels'), ('pp.aj.auto', 'Edited preformed panel adjudicator'), ('pp.db.auto', 'Auto-allocated preformed panels to debates')], max_length=10, verbose_name='type'),\n        ),",
        "detail": "tabbycat.actionlog.migrations.0010_auto_20191109_1240",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.actionlog.migrations.0011_auto_20200613_2006",
        "description": "tabbycat.actionlog.migrations.0011_auto_20200613_2006",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('actionlog', '0010_auto_20191109_1240'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='actionlogentry',\n            name='type',\n            field=models.CharField(choices=[('ba.disc', 'Discarded ballot set'), ('ba.ckin', 'Checked in ballot set'), ('ba.crea', 'Created ballot set'), ('ba.edit', 'Edited ballot set'), ('ba.conf', 'Confirmed ballot set'), ('ba.subm', 'Submitted ballot set from the public form'), ('fb.subm', 'Submitted feedback from the public form'), ('fb.save', 'Saved feedback'), ('ts.edit', 'Edited adjudicator base score'), ('aj.note', 'Set adjudicator note'), ('aa.save', 'Saved adjudicator allocation'), ('aa.auto', 'Auto-allocated adjudicators'), ('ve.save', 'Saved a room manual edit'), ('ve.auto', 'Auto-allocated rooms'), ('ve.ca.edit', 'Edited room categories'), ('ve.co.edit', 'Edited room constraints'), ('dr.crea', 'Created draw'), ('dr.conf', 'Confirmed draw'), ('dr.rege', 'Regenerated draw'), ('dr.rele', 'Released draw'), ('dr.unre', 'Unreleased draw'), ('mu.save', 'Saved a matchup manual edit'), ('ms.save', 'Saved the sides status of a matchup'), ('dv.save', 'Saved divisions'), ('mo.edit', 'Added/edited motion'), ('mo.rele', 'Released motions'), ('mo.unre', 'Unreleased motions'), ('db.im.auto', 'Auto-prioritized debate importance'), ('db.im.edit', 'Edited debate importance'), ('br.aj.set', 'Changed adjudicator breaking status'), ('br.el.edit', 'Edited break eligibility'), ('br.ca.edit', 'Edited break categories'), ('br.gene', 'Generated the team break for all categories'), ('br.upda', 'Edited breaking team remarks and updated all team breaks'), ('br.upd1', 'Edited breaking team remarks and updated this team break'), ('br.rm.edit', 'Edited breaking team remarks'), ('rd.st.set', 'Set start time'), ('rd.adva', 'Advanced the current round to'), ('rd.comp', 'Marked round as completed'), ('av.tm.save', 'Edited teams availability'), ('av.aj.save', 'Edited adjudicators availability'), ('av.ve.save', 'Edited room availability'), ('op.edit', 'Edited tournament options'), ('se.edit', 'Edited speaker category eligibility'), ('se.ca.edit', 'Edited speaker categories'), ('si.inst', 'Imported institutions using the simple importer'), ('si.venu', 'Imported rooms using the simple importer'), ('si.team', 'Imported teams using the simple importer'), ('si.adju', 'Imported adjudicators using the simple importer'), ('aj.sc.upda', 'Updated adjudicator scores in bulk'), ('ac.at.edit', 'Edited adjudicator-team conflicts'), ('ac.aa.edit', 'Edited adjudicator-adjudicator conflicts'), ('ac.ai.edit', 'Edited adjudicator-institution conflicts'), ('ac.ti.edit', 'Edited team-institution conflicts'), ('ch.sp.gene', 'Generated check in identifiers for speakers'), ('ch.aj.gene', 'Generated check in identifiers for adjudicators'), ('ch.ve.gene', 'Generated check in identifiers for rooms'), ('pp.crea', 'Created preformed panels'), ('pp.im.auto', 'Auto-prioritized preformed panels'), ('pp.im.edit', 'Edited preformed panel importance'), ('pp.aj.auto', 'Auto-allocated adjudicators to preformed panels'), ('pp.aj.auto', 'Edited preformed panel adjudicator'), ('pp.db.auto', 'Auto-allocated preformed panels to debates')], max_length=10, verbose_name='type'),\n        ),",
        "detail": "tabbycat.actionlog.migrations.0011_auto_20200613_2006",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.actionlog.migrations.0012_auto_20200705_1317",
        "description": "tabbycat.actionlog.migrations.0012_auto_20200705_1317",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n        ('actionlog', '0011_auto_20200613_2006'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='actionlogentry',\n            name='user',\n            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='user'),",
        "detail": "tabbycat.actionlog.migrations.0012_auto_20200705_1317",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.actionlog.migrations.0013_actionlogentry_agent_alter_actionlogentry_type",
        "description": "tabbycat.actionlog.migrations.0013_actionlogentry_agent_alter_actionlogentry_type",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"actionlog\", \"0012_auto_20200705_1317\"),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name=\"actionlogentry\",\n            name=\"agent\",\n            field=models.CharField(\n                choices=[(\"a\", \"API\"), (\"w\", \"Web\")],",
        "detail": "tabbycat.actionlog.migrations.0013_actionlogentry_agent_alter_actionlogentry_type",
        "documentation": {}
    },
    {
        "label": "ActionLogEntryAdmin",
        "kind": 6,
        "importPath": "tabbycat.actionlog.admin",
        "description": "tabbycat.actionlog.admin",
        "peekOfCode": "class ActionLogEntryAdmin(ModelAdmin):\n    list_display = ('type', 'user', 'ip_address', 'timestamp', 'content_object',\n                    'tournament', 'round')\n    list_filter = ('tournament', 'user', 'type', 'content_type', 'round')\n    search_fields = ('type', 'user__username')\n    def get_queryset(self, request):\n        return super().get_queryset(request).select_related(\n            'tournament', 'round', 'round__tournament', 'user').prefetch_related('content_object')\n    def has_add_permission(self, request, obj=None):\n        return False",
        "detail": "tabbycat.actionlog.admin",
        "documentation": {}
    },
    {
        "label": "ActionLogConfig",
        "kind": 6,
        "importPath": "tabbycat.actionlog.apps",
        "description": "tabbycat.actionlog.apps",
        "peekOfCode": "class ActionLogConfig(AppConfig):\n    name = 'actionlog'\n    verbose_name = _(\"Action Log\")",
        "detail": "tabbycat.actionlog.apps",
        "documentation": {}
    },
    {
        "label": "ActionLogEntryConsumer",
        "kind": 6,
        "importPath": "tabbycat.actionlog.consumers",
        "description": "tabbycat.actionlog.consumers",
        "peekOfCode": "class ActionLogEntryConsumer(LoginRequiredWebsocketMixin, TournamentWebsocketMixin, JsonWebsocketConsumer):\n    group_prefix = 'actionlogs'",
        "detail": "tabbycat.actionlog.consumers",
        "documentation": {}
    },
    {
        "label": "LogActionMixin",
        "kind": 6,
        "importPath": "tabbycat.actionlog.mixins",
        "description": "tabbycat.actionlog.mixins",
        "peekOfCode": "class LogActionMixin:\n    \"\"\"Mixin for views that log an action in the action log when a form is\n    successfully submitted.\n    Views using this mixin should specify an `action_log_type` and, if\n    applicable, an `action_log_content_object_attr`. The mixin will add an\n    `ActionLogEntry` instance when the form is successfully submitted.\n    This mixin is best used with views that also derive from `FormMixin`\n    somehow. For forms that don't, they can call `self.log_action()` explicitly.\n    \"\"\"\n    action_log_type = None",
        "detail": "tabbycat.actionlog.mixins",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "tabbycat.actionlog.mixins",
        "description": "tabbycat.actionlog.mixins",
        "peekOfCode": "User = get_user_model()\nclass LogActionMixin:\n    \"\"\"Mixin for views that log an action in the action log when a form is\n    successfully submitted.\n    Views using this mixin should specify an `action_log_type` and, if\n    applicable, an `action_log_content_object_attr`. The mixin will add an\n    `ActionLogEntry` instance when the form is successfully submitted.\n    This mixin is best used with views that also derive from `FormMixin`\n    somehow. For forms that don't, they can call `self.log_action()` explicitly.\n    \"\"\"",
        "detail": "tabbycat.actionlog.mixins",
        "documentation": {}
    },
    {
        "label": "ActionLogManager",
        "kind": 6,
        "importPath": "tabbycat.actionlog.models",
        "description": "tabbycat.actionlog.models",
        "peekOfCode": "class ActionLogManager(models.Manager):\n    def log(self, *args, **kwargs):\n        obj = self.model(*args, **kwargs)\n        obj.full_clean()\n        obj.save()\n        return obj\nclass ActionLogEntry(models.Model):\n    # These aren't generated automatically - all generations of these should\n    # be done in views (not models).\n    class ActionType(models.TextChoices):",
        "detail": "tabbycat.actionlog.models",
        "documentation": {}
    },
    {
        "label": "ActionLogEntry",
        "kind": 6,
        "importPath": "tabbycat.actionlog.models",
        "description": "tabbycat.actionlog.models",
        "peekOfCode": "class ActionLogEntry(models.Model):\n    # These aren't generated automatically - all generations of these should\n    # be done in views (not models).\n    class ActionType(models.TextChoices):\n        ADJUDICATOR_BREAK_SET             = 'br.aj.set', _(\"Changed adjudicator breaking status\")\n        ADJUDICATOR_CREATE                = 'aj.crea', _(\"Created adjudicator\")\n        ADJUDICATOR_EDIT                  = 'aj.edit', _(\"Edited adjudicator\")\n        ADJUDICATOR_NOTE_SET              = 'aj.note', _(\"Set adjudicator note\")   # obsolete\n        ADJUDICATORS_AUTO                 = 'aa.auto', _(\"Auto-allocated adjudicators\")\n        ADJUDICATORS_SAVE                 = 'aa.save', _(\"Saved adjudicator allocation\")",
        "detail": "tabbycat.actionlog.models",
        "documentation": {}
    },
    {
        "label": "AdjudicatorAllocationError",
        "kind": 6,
        "importPath": "tabbycat.adjallocation.allocators.base",
        "description": "tabbycat.adjallocation.allocators.base",
        "peekOfCode": "class AdjudicatorAllocationError(RuntimeError):\n    pass\nclass BaseAdjudicatorAllocator:\n    def __init__(self, debates, adjudicators, round):\n        self.tournament = round.tournament\n        self.round = round\n        self.debates = debates\n        self.adjudicators = adjudicators\n        if len(self.adjudicators) == 0:\n            info = _(\"There are no available adjudicators. Ensure there are \"",
        "detail": "tabbycat.adjallocation.allocators.base",
        "documentation": {}
    },
    {
        "label": "BaseAdjudicatorAllocator",
        "kind": 6,
        "importPath": "tabbycat.adjallocation.allocators.base",
        "description": "tabbycat.adjallocation.allocators.base",
        "peekOfCode": "class BaseAdjudicatorAllocator:\n    def __init__(self, debates, adjudicators, round):\n        self.tournament = round.tournament\n        self.round = round\n        self.debates = debates\n        self.adjudicators = adjudicators\n        if len(self.adjudicators) == 0:\n            info = _(\"There are no available adjudicators. Ensure there are \"\n                     \"adjudicators who have been marked as available for this \"\n                     \"round before auto-allocating.\")",
        "detail": "tabbycat.adjallocation.allocators.base",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 2,
        "importPath": "tabbycat.adjallocation.allocators.base",
        "description": "tabbycat.adjallocation.allocators.base",
        "peekOfCode": "def register(cls):\n    registry[cls.key] = cls\n    return cls\nclass AdjudicatorAllocationError(RuntimeError):\n    pass\nclass BaseAdjudicatorAllocator:\n    def __init__(self, debates, adjudicators, round):\n        self.tournament = round.tournament\n        self.round = round\n        self.debates = debates",
        "detail": "tabbycat.adjallocation.allocators.base",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "tabbycat.adjallocation.allocators.base",
        "description": "tabbycat.adjallocation.allocators.base",
        "peekOfCode": "logger = logging.getLogger(__name__)\nregistry = {}\ndef register(cls):\n    registry[cls.key] = cls\n    return cls\nclass AdjudicatorAllocationError(RuntimeError):\n    pass\nclass BaseAdjudicatorAllocator:\n    def __init__(self, debates, adjudicators, round):\n        self.tournament = round.tournament",
        "detail": "tabbycat.adjallocation.allocators.base",
        "documentation": {}
    },
    {
        "label": "registry",
        "kind": 5,
        "importPath": "tabbycat.adjallocation.allocators.base",
        "description": "tabbycat.adjallocation.allocators.base",
        "peekOfCode": "registry = {}\ndef register(cls):\n    registry[cls.key] = cls\n    return cls\nclass AdjudicatorAllocationError(RuntimeError):\n    pass\nclass BaseAdjudicatorAllocator:\n    def __init__(self, debates, adjudicators, round):\n        self.tournament = round.tournament\n        self.round = round",
        "detail": "tabbycat.adjallocation.allocators.base",
        "documentation": {}
    },
    {
        "label": "DumbAllocator",
        "kind": 6,
        "importPath": "tabbycat.adjallocation.allocators.dumb",
        "description": "tabbycat.adjallocation.allocators.dumb",
        "peekOfCode": "class DumbAllocator(BaseAdjudicatorAllocator):\n    key = \"dumb\"\n    def allocate(self):\n        debates = self.debates\n        adjs = list(self.adjudicators)\n        result = []\n        for debate in debates:\n            alloc = AdjudicatorAllocation(debate)\n            alloc.chair = adjs.pop(0)\n            result.append(alloc)",
        "detail": "tabbycat.adjallocation.allocators.dumb",
        "documentation": {}
    },
    {
        "label": "BaseHungarianAllocator",
        "kind": 6,
        "importPath": "tabbycat.adjallocation.allocators.hungarian",
        "description": "tabbycat.adjallocation.allocators.hungarian",
        "peekOfCode": "class BaseHungarianAllocator(BaseAdjudicatorAllocator):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        t = self.tournament\n        self.min_score = t.pref('adj_min_score')\n        self.max_score = t.pref('adj_max_score')\n        self.min_voting_score = t.pref('adj_min_voting_score')\n        self.conflict_penalty = t.pref('adj_conflict_penalty')\n        self.history_penalty = t.pref('adj_history_penalty')\n        self.no_panellists = t.pref('no_panellist_position')",
        "detail": "tabbycat.adjallocation.allocators.hungarian",
        "documentation": {}
    },
    {
        "label": "VotingHungarianAllocator",
        "kind": 6,
        "importPath": "tabbycat.adjallocation.allocators.hungarian",
        "description": "tabbycat.adjallocation.allocators.hungarian",
        "peekOfCode": "class VotingHungarianAllocator(BaseHungarianAllocator):\n    key = \"hungarian-voting\"\n    def run_allocation(self):\n        # Sort voting adjudicators in descending order by score\n        voting = [a for a in self.adjudicators if a._weighted_score >= self.min_voting_score and not a.trainee]\n        random.shuffle(voting)\n        voting.sort(key=lambda a: a._normalized_score, reverse=True)\n        # Divide into solos, panellists and trainees\n        n_debates = len(self.debates)\n        n_voting = len(voting)",
        "detail": "tabbycat.adjallocation.allocators.hungarian",
        "documentation": {}
    },
    {
        "label": "ConsensusHungarianAllocator",
        "kind": 6,
        "importPath": "tabbycat.adjallocation.allocators.hungarian",
        "description": "tabbycat.adjallocation.allocators.hungarian",
        "peekOfCode": "class ConsensusHungarianAllocator(BaseHungarianAllocator):\n    key = \"hungarian-consensus\"\n    def run_allocation(self):\n        # Sort voting adjudicators in descending order by score\n        voting = [a for a in self.adjudicators if a._weighted_score >= self.min_voting_score and not a.trainee]\n        random.shuffle(voting)\n        voting.sort(key=lambda a: a._normalized_score, reverse=True)\n        n_debates = len(self.debates)\n        if self.no_panellists:\n            voting = voting[:n_debates]",
        "detail": "tabbycat.adjallocation.allocators.hungarian",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "tabbycat.adjallocation.allocators.hungarian",
        "description": "tabbycat.adjallocation.allocators.hungarian",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass BaseHungarianAllocator(BaseAdjudicatorAllocator):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        t = self.tournament\n        self.min_score = t.pref('adj_min_score')\n        self.max_score = t.pref('adj_max_score')\n        self.min_voting_score = t.pref('adj_min_voting_score')\n        self.conflict_penalty = t.pref('adj_conflict_penalty')\n        self.history_penalty = t.pref('adj_history_penalty')",
        "detail": "tabbycat.adjallocation.allocators.hungarian",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "tabbycat.adjallocation.management.commands.addowninstitutionconflicts",
        "description": "tabbycat.adjallocation.management.commands.addowninstitutionconflicts",
        "peekOfCode": "class Command(TournamentCommand):\n    help = \"Adds missing institution conflicts for each teams's and adjudicator's own institution.\"\n    def add_arguments(self, parser):\n        super().add_arguments(parser)\n        parser.add_argument(\"--adjudicators-only\", action=\"store_true\",\n            help=\"Only add for adjudicators, skip teams\")\n        parser.add_argument(\"--teams-only\", action=\"store_true\",\n            help=\"Only add for teams, skip adjudicators\")\n    def handle_tournament(self, tournament, **options):\n        if not options[\"teams_only\"]:",
        "detail": "tabbycat.adjallocation.management.commands.addowninstitutionconflicts",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "tabbycat.adjallocation.management.commands.allocateadjudicators",
        "description": "tabbycat.adjallocation.management.commands.allocateadjudicators",
        "peekOfCode": "class Command(RoundCommand):\n    help = (\"Runs the auto-allocator to assign adjudicators to debates. This \"\n            \"always allocates adjudicators to debates (or preformed panels) \"\n            \"directly, even if preformed panels exist.\")\n    def add_arguments(self, parser):\n        super(Command, self).add_arguments(parser)\n        parser.add_argument(\"-a\", \"--allocator\", default=\"hungarian\",\n            choices=list(registry.keys()) + [\"hungarian\"],\n            help=\"Which allocator to use. The option 'hungarian' (default) \"\n            \"chooses between 'hungarian-voting' and 'hungarian-consensus' \"",
        "detail": "tabbycat.adjallocation.management.commands.allocateadjudicators",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "tabbycat.adjallocation.management.commands.allocatepreformedpanels",
        "description": "tabbycat.adjallocation.management.commands.allocatepreformedpanels",
        "peekOfCode": "class Command(RoundCommand):\n    help = \"Runs the auto-allocator to assign preformed panels to debates\"\n    def add_arguments(self, parser):\n        super(Command, self).add_arguments(parser)\n        parser.add_argument(\"-a\", \"--allocator\", choices=registry.keys(), default=\"hungarian\",\n            help=\"Which allocator to use (default: hungarian)\")\n        parser.add_argument(\"-q\", \"--quiet\", action=\"store_true\",\n            help=\"Don't print the final full allocation out at the end\")\n        parser.add_argument(\"-n\", \"--dry-run\", action=\"store_true\",\n            help=\"Don't write allocation to database\")",
        "detail": "tabbycat.adjallocation.management.commands.allocatepreformedpanels",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "tabbycat.adjallocation.management.commands.conflictscsv",
        "description": "tabbycat.adjallocation.management.commands.conflictscsv",
        "peekOfCode": "class Command(TournamentCommand):\n    help = \"Prints CSV-style exports of conflicts\"\n    def add_arguments(self, parser):\n        super(Command, self).add_arguments(parser)\n        parser.add_argument(\"--full-institution-name\", action=\"store_true\", default=False,\n            help=\"Use full institution name (rather than code)\")\n        parser.add_argument(\"--include-own-institution\", action=\"store_true\", default=False,\n            help=\"Include own-institution conflicts\")\n    def handle_tournament(self, tournament, **options):\n        def institution_name(inst):",
        "detail": "tabbycat.adjallocation.management.commands.conflictscsv",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.adjallocation.migrations.0001_initial",
        "description": "tabbycat.adjallocation.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='AdjudicatorAdjudicatorConflict',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n            ],",
        "detail": "tabbycat.adjallocation.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.adjallocation.migrations.0002_debateadjudicator_adjudicator",
        "description": "tabbycat.adjallocation.migrations.0002_debateadjudicator_adjudicator",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('participants', '0001_initial'),\n        ('adjallocation', '0001_initial'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='debateadjudicator',\n            name='adjudicator',",
        "detail": "tabbycat.adjallocation.migrations.0002_debateadjudicator_adjudicator",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.adjallocation.migrations.0003_auto_20171110_0905",
        "description": "tabbycat.adjallocation.migrations.0003_auto_20171110_0905",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('participants', '0001_initial'),\n        ('draw', '0001_initial'),\n        ('adjallocation', '0002_debateadjudicator_adjudicator'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='debateadjudicator',",
        "detail": "tabbycat.adjallocation.migrations.0003_auto_20171110_0905",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.adjallocation.migrations.0004_add_teaminstitutionconflict",
        "description": "tabbycat.adjallocation.migrations.0004_add_teaminstitutionconflict",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('participants', '0006_auto_20180807_2132'),\n        ('adjallocation', '0003_auto_20171110_0905'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='TeamInstitutionConflict',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "tabbycat.adjallocation.migrations.0004_add_teaminstitutionconflict",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.adjallocation.migrations.0005_populate_teaminstitutionconflict",
        "description": "tabbycat.adjallocation.migrations.0005_populate_teaminstitutionconflict",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('adjallocation', '0004_add_teaminstitutionconflict'),\n    ]\n    operations = [\n        migrations.RunSQL(\n            \"INSERT INTO adjallocation_teaminstitutionconflict (team_id, institution_id) SELECT id, institution_id FROM participants_team WHERE institution_id IS NOT NULL ON CONFLICT DO NOTHING;\",\n            migrations.RunSQL.noop,\n            elidable=True,\n        ),",
        "detail": "tabbycat.adjallocation.migrations.0005_populate_teaminstitutionconflict",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.adjallocation.migrations.0006_auto_20180919_2143",
        "description": "tabbycat.adjallocation.migrations.0006_auto_20180919_2143",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('participants', '0006_auto_20180807_2132'),\n        ('adjallocation', '0005_populate_teaminstitutionconflict'),\n    ]\n    operations = [\n        migrations.RenameModel(\n            old_name='AdjudicatorConflict',\n            new_name='AdjudicatorTeamConflict',\n        ),",
        "detail": "tabbycat.adjallocation.migrations.0006_auto_20180919_2143",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.adjallocation.migrations.0007_preformedpanel_preformedpaneladjudicator",
        "description": "tabbycat.adjallocation.migrations.0007_preformedpanel_preformedpaneladjudicator",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('participants', '0007_auto_20180909_2156'),\n        ('tournaments', '0005_remove_tournament_current_round'),\n        ('adjallocation', '0006_auto_20180919_2143'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='PreformedPanel',\n            fields=[",
        "detail": "tabbycat.adjallocation.migrations.0007_preformedpanel_preformedpaneladjudicator",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.adjallocation.migrations.0008_auto_20181019_2059",
        "description": "tabbycat.adjallocation.migrations.0008_auto_20181019_2059",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('adjallocation', '0007_preformedpanel_preformedpaneladjudicator'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='preformedpanel',\n            name='bracket_max',\n            field=models.FloatField(default=0, help_text='Estimate of the highest bracket for which this panel might be', verbose_name='maximum bracket'),\n        ),",
        "detail": "tabbycat.adjallocation.migrations.0008_auto_20181019_2059",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.adjallocation.migrations.0009_auto_20200902_1208",
        "description": "tabbycat.adjallocation.migrations.0009_auto_20200902_1208",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('adjallocation', '0008_auto_20181019_2059'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='debateadjudicator',\n            name='timing_confirmed',\n            field=models.BooleanField(null=True, verbose_name='available?'),\n        ),",
        "detail": "tabbycat.adjallocation.migrations.0009_auto_20200902_1208",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.adjallocation.migrations.0010_alter_adjudicatoradjudicatorconflict_unique_together_and_more",
        "description": "tabbycat.adjallocation.migrations.0010_alter_adjudicatoradjudicatorconflict_unique_together_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('adjallocation', '0009_auto_20200902_1208'),\n        ('draw', '0008_alter_debateteam_side_alter_teamsideallocation_side'),\n        ('participants', '0021_team_seed'),\n    ]\n    operations = [\n        migrations.AlterUniqueTogether(\n            name='adjudicatoradjudicatorconflict',\n            unique_together=set(),",
        "detail": "tabbycat.adjallocation.migrations.0010_alter_adjudicatoradjudicatorconflict_unique_together_and_more",
        "documentation": {}
    },
    {
        "label": "calculate_anticipated_draw",
        "kind": 2,
        "importPath": "tabbycat.adjallocation.preformed.anticipated",
        "description": "tabbycat.adjallocation.preformed.anticipated",
        "peekOfCode": "def calculate_anticipated_draw(round):\n    \"\"\"Calculates an anticipated draw for the next round, based on the draw for\n    the last round. Returns a list of tuples\n        `(bracket_min, bracket_max, liveness)`,\n    being the minimum and maximum brackets possible for that room, and the\n    maximum number of teams that might be live in it. If the previous round's\n    draw doesn't exist, it will just return an empty list.\n    Procedure:\n      1. Take the (actual) draw of the last round, with team points\n      2. For each room, compute a (min, max) of outcomes for each team.",
        "detail": "tabbycat.adjallocation.preformed.anticipated",
        "documentation": {}
    },
    {
        "label": "BasePreformedPanelAllocator",
        "kind": 6,
        "importPath": "tabbycat.adjallocation.preformed.base",
        "description": "tabbycat.adjallocation.preformed.base",
        "peekOfCode": "class BasePreformedPanelAllocator:\n    \"\"\"Base class for preformed panel allocators.\n    A preformed panel allocators allocates preformed panels (which must already\n    exist in the database) to debates. It should be run after preformed panels\n    have been created *and* the draw for the relevant round has been created.\n    \"\"\"\n    def __init__(self, debates, panels, round):\n        \"\"\"`debates` and `panels` must both be QuerySets, not other iterables.\"\"\"\n        self.tournament = round.tournament\n        self.round = round",
        "detail": "tabbycat.adjallocation.preformed.base",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 2,
        "importPath": "tabbycat.adjallocation.preformed.base",
        "description": "tabbycat.adjallocation.preformed.base",
        "peekOfCode": "def register(cls):\n    registry[cls.key] = cls\n    return cls\nclass BasePreformedPanelAllocator:\n    \"\"\"Base class for preformed panel allocators.\n    A preformed panel allocators allocates preformed panels (which must already\n    exist in the database) to debates. It should be run after preformed panels\n    have been created *and* the draw for the relevant round has been created.\n    \"\"\"\n    def __init__(self, debates, panels, round):",
        "detail": "tabbycat.adjallocation.preformed.base",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "tabbycat.adjallocation.preformed.base",
        "description": "tabbycat.adjallocation.preformed.base",
        "peekOfCode": "logger = logging.getLogger(__name__)\nregistry = {}\ndef register(cls):\n    registry[cls.key] = cls\n    return cls\nclass BasePreformedPanelAllocator:\n    \"\"\"Base class for preformed panel allocators.\n    A preformed panel allocators allocates preformed panels (which must already\n    exist in the database) to debates. It should be run after preformed panels\n    have been created *and* the draw for the relevant round has been created.",
        "detail": "tabbycat.adjallocation.preformed.base",
        "documentation": {}
    },
    {
        "label": "registry",
        "kind": 5,
        "importPath": "tabbycat.adjallocation.preformed.base",
        "description": "tabbycat.adjallocation.preformed.base",
        "peekOfCode": "registry = {}\ndef register(cls):\n    registry[cls.key] = cls\n    return cls\nclass BasePreformedPanelAllocator:\n    \"\"\"Base class for preformed panel allocators.\n    A preformed panel allocators allocates preformed panels (which must already\n    exist in the database) to debates. It should be run after preformed panels\n    have been created *and* the draw for the relevant round has been created.\n    \"\"\"",
        "detail": "tabbycat.adjallocation.preformed.base",
        "documentation": {}
    },
    {
        "label": "DirectPreformedPanelAllocator",
        "kind": 6,
        "importPath": "tabbycat.adjallocation.preformed.direct",
        "description": "tabbycat.adjallocation.preformed.direct",
        "peekOfCode": "class DirectPreformedPanelAllocator(BasePreformedPanelAllocator):\n    \"\"\"Allocates panels to debates in the same order as their room ranks.\"\"\"\n    key = \"direct\"\n    def allocate(self):\n        return self.debates.order_by('room_rank'), self.panels.order_by('room_rank')",
        "detail": "tabbycat.adjallocation.preformed.direct",
        "documentation": {}
    },
    {
        "label": "DumbPreformedPanelAllocator",
        "kind": 6,
        "importPath": "tabbycat.adjallocation.preformed.dumb",
        "description": "tabbycat.adjallocation.preformed.dumb",
        "peekOfCode": "class DumbPreformedPanelAllocator(BasePreformedPanelAllocator):\n    \"\"\"Allocates panels to debates arbitrarily.\"\"\"\n    key = \"dumb\"\n    def allocate(self):\n        return self.debates, self.panels",
        "detail": "tabbycat.adjallocation.preformed.dumb",
        "documentation": {}
    },
    {
        "label": "HungarianPreformedPanelAllocator",
        "kind": 6,
        "importPath": "tabbycat.adjallocation.preformed.hungarian",
        "description": "tabbycat.adjallocation.preformed.hungarian",
        "peekOfCode": "class HungarianPreformedPanelAllocator(BasePreformedPanelAllocator):\n    key = \"hungarian\"\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        t = self.tournament\n        self.conflict_penalty = t.pref('adj_conflict_penalty')\n        self.history_penalty = t.pref('adj_history_penalty')\n        self.mismatch_penalty = t.pref('preformed_panel_mismatch_penalty')\n        self.munkres = Munkres()\n    def calc_cost(self, debate, panel):",
        "detail": "tabbycat.adjallocation.preformed.hungarian",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "tabbycat.adjallocation.preformed.hungarian",
        "description": "tabbycat.adjallocation.preformed.hungarian",
        "peekOfCode": "logger = logging.getLogger(__name__)\n@register\nclass HungarianPreformedPanelAllocator(BasePreformedPanelAllocator):\n    key = \"hungarian\"\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        t = self.tournament\n        self.conflict_penalty = t.pref('adj_conflict_penalty')\n        self.history_penalty = t.pref('adj_history_penalty')\n        self.mismatch_penalty = t.pref('preformed_panel_mismatch_penalty')",
        "detail": "tabbycat.adjallocation.preformed.hungarian",
        "documentation": {}
    },
    {
        "label": "EditDebateAdjudicatorsViewTest",
        "kind": 6,
        "importPath": "tabbycat.adjallocation.tests.test_views",
        "description": "tabbycat.adjallocation.tests.test_views",
        "peekOfCode": "class EditDebateAdjudicatorsViewTest(AdminTournamentViewSimpleLoadTestMixin, TestCase):\n    view_name = 'edit-debate-adjudicators'\n    round_seq = 1\nclass EditPanelAdjudicatorsViewTest(AdminTournamentViewSimpleLoadTestMixin, TestCase):\n    view_name = 'edit-panel-adjudicators'\n    round_seq = 1",
        "detail": "tabbycat.adjallocation.tests.test_views",
        "documentation": {}
    },
    {
        "label": "EditPanelAdjudicatorsViewTest",
        "kind": 6,
        "importPath": "tabbycat.adjallocation.tests.test_views",
        "description": "tabbycat.adjallocation.tests.test_views",
        "peekOfCode": "class EditPanelAdjudicatorsViewTest(AdminTournamentViewSimpleLoadTestMixin, TestCase):\n    view_name = 'edit-panel-adjudicators'\n    round_seq = 1",
        "detail": "tabbycat.adjallocation.tests.test_views",
        "documentation": {}
    },
    {
        "label": "DebateAdjudicatorAdmin",
        "kind": 6,
        "importPath": "tabbycat.adjallocation.admin",
        "description": "tabbycat.adjallocation.admin",
        "peekOfCode": "class DebateAdjudicatorAdmin(ModelAdmin):\n    list_display = ('debate', 'adjudicator', 'type')\n    search_fields = ('adjudicator__name', 'type')\n    raw_id_fields = ('debate',)\n    def get_queryset(self, request):\n        # can't use list_select_related class attribute, because DebateAdjudicatorManager\n        # always puts a select_related on this\n        return super().get_queryset(request).prefetch_related(\n            Prefetch('debate__debateteam_set', queryset=DebateTeam.objects.select_related('team')),\n        ).select_related(",
        "detail": "tabbycat.adjallocation.admin",
        "documentation": {}
    },
    {
        "label": "AdjudicatorTeamConflictAdmin",
        "kind": 6,
        "importPath": "tabbycat.adjallocation.admin",
        "description": "tabbycat.adjallocation.admin",
        "peekOfCode": "class AdjudicatorTeamConflictAdmin(ModelAdmin):\n    list_display = ('adjudicator', 'team')\n    list_select_related = ('adjudicator__institution', 'team__tournament')\n    search_fields = ('adjudicator__name', 'team__short_name', 'team__long_name')\n    def formfield_for_foreignkey(self, db_field, request, **kwargs):\n        if db_field.name == 'team':\n            kwargs['queryset'] = db_field.related_model.objects.select_related('tournament')\n        return super().formfield_for_foreignkey(db_field, request, **kwargs)\n@admin.register(AdjudicatorAdjudicatorConflict)\nclass AdjudicatorAdjudicatorConflictAdmin(ModelAdmin):",
        "detail": "tabbycat.adjallocation.admin",
        "documentation": {}
    },
    {
        "label": "AdjudicatorAdjudicatorConflictAdmin",
        "kind": 6,
        "importPath": "tabbycat.adjallocation.admin",
        "description": "tabbycat.adjallocation.admin",
        "peekOfCode": "class AdjudicatorAdjudicatorConflictAdmin(ModelAdmin):\n    list_display = ('adjudicator1', 'adjudicator2')\n    list_select_related = ('adjudicator1__institution', 'adjudicator2__institution')\n    search_fields = ('adjudicator1__name', 'adjudicator2__name',\n                     'adjudicator1__institution__name', 'adjudicator2__institution__name')\n@admin.register(AdjudicatorInstitutionConflict)\nclass AdjudicatorInstitutionConflictAdmin(ModelAdmin):\n    list_display = ('adjudicator', 'institution')\n    list_select_related = ('adjudicator__institution', 'institution')\n    search_fields = ('adjudicator__name', 'institution__name')",
        "detail": "tabbycat.adjallocation.admin",
        "documentation": {}
    },
    {
        "label": "AdjudicatorInstitutionConflictAdmin",
        "kind": 6,
        "importPath": "tabbycat.adjallocation.admin",
        "description": "tabbycat.adjallocation.admin",
        "peekOfCode": "class AdjudicatorInstitutionConflictAdmin(ModelAdmin):\n    list_display = ('adjudicator', 'institution')\n    list_select_related = ('adjudicator__institution', 'institution')\n    search_fields = ('adjudicator__name', 'institution__name')\n@admin.register(TeamInstitutionConflict)\nclass TeamInstitutionConflictAdmin(ModelAdmin):\n    list_display = ('team', 'institution')\n    list_select_related = ('team__institution', 'team__tournament', 'institution')\n    search_fields = ('team__short_name', 'team__long_name', 'institution__name')\nclass PreformedPanelAdjudicatorInline(admin.TabularInline):",
        "detail": "tabbycat.adjallocation.admin",
        "documentation": {}
    },
    {
        "label": "TeamInstitutionConflictAdmin",
        "kind": 6,
        "importPath": "tabbycat.adjallocation.admin",
        "description": "tabbycat.adjallocation.admin",
        "peekOfCode": "class TeamInstitutionConflictAdmin(ModelAdmin):\n    list_display = ('team', 'institution')\n    list_select_related = ('team__institution', 'team__tournament', 'institution')\n    search_fields = ('team__short_name', 'team__long_name', 'institution__name')\nclass PreformedPanelAdjudicatorInline(admin.TabularInline):\n    model = PreformedPanelAdjudicator\n    extra = 1\n    raw_id_fields = ('adjudicator',)\n@admin.register(PreformedPanel)\nclass PreformedPanelAdmin(ModelAdmin):",
        "detail": "tabbycat.adjallocation.admin",
        "documentation": {}
    },
    {
        "label": "PreformedPanelAdjudicatorInline",
        "kind": 6,
        "importPath": "tabbycat.adjallocation.admin",
        "description": "tabbycat.adjallocation.admin",
        "peekOfCode": "class PreformedPanelAdjudicatorInline(admin.TabularInline):\n    model = PreformedPanelAdjudicator\n    extra = 1\n    raw_id_fields = ('adjudicator',)\n@admin.register(PreformedPanel)\nclass PreformedPanelAdmin(ModelAdmin):\n    list_filter = ('round', 'round__tournament')\n    list_display = ('id', 'round', 'importance', 'bracket_min', 'bracket_max', 'room_rank', 'liveness')\n    list_select_related = ('round__tournament',)\n    inlines = (PreformedPanelAdjudicatorInline,)",
        "detail": "tabbycat.adjallocation.admin",
        "documentation": {}
    },
    {
        "label": "PreformedPanelAdmin",
        "kind": 6,
        "importPath": "tabbycat.adjallocation.admin",
        "description": "tabbycat.adjallocation.admin",
        "peekOfCode": "class PreformedPanelAdmin(ModelAdmin):\n    list_filter = ('round', 'round__tournament')\n    list_display = ('id', 'round', 'importance', 'bracket_min', 'bracket_max', 'room_rank', 'liveness')\n    list_select_related = ('round__tournament',)\n    inlines = (PreformedPanelAdjudicatorInline,)",
        "detail": "tabbycat.adjallocation.admin",
        "documentation": {}
    },
    {
        "label": "AdjudicatorAllocation",
        "kind": 6,
        "importPath": "tabbycat.adjallocation.allocation",
        "description": "tabbycat.adjallocation.allocation",
        "peekOfCode": "class AdjudicatorAllocation:\n    \"\"\"Class for handling the adjudicators on a panel.\"\"\"\n    POSITION_CHAIR = 'c'\n    POSITION_ONLY = 'o'\n    POSITION_PANELLIST = 'p'\n    POSITION_TRAINEE = 't'\n    def __init__(self, container, chair=None, panellists=None, trainees=None, from_db=False):\n        \"\"\"The `container` is a model instance that relates to adjudicators via\n        a RelatedManager. It's easiest to think of this as a \"panel\", though the\n        typical use case is actually a debate. The model instance's model class",
        "detail": "tabbycat.adjallocation.allocation",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "tabbycat.adjallocation.allocation",
        "description": "tabbycat.adjallocation.allocation",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass AdjudicatorAllocation:\n    \"\"\"Class for handling the adjudicators on a panel.\"\"\"\n    POSITION_CHAIR = 'c'\n    POSITION_ONLY = 'o'\n    POSITION_PANELLIST = 'p'\n    POSITION_TRAINEE = 't'\n    def __init__(self, container, chair=None, panellists=None, trainees=None, from_db=False):\n        \"\"\"The `container` is a model instance that relates to adjudicators via\n        a RelatedManager. It's easiest to think of this as a \"panel\", though the",
        "detail": "tabbycat.adjallocation.allocation",
        "documentation": {}
    },
    {
        "label": "AdjAllocationConfig",
        "kind": 6,
        "importPath": "tabbycat.adjallocation.apps",
        "description": "tabbycat.adjallocation.apps",
        "peekOfCode": "class AdjAllocationConfig(AppConfig):\n    name = 'adjallocation'\n    verbose_name = _(\"Adjudicator Allocation\")",
        "detail": "tabbycat.adjallocation.apps",
        "documentation": {}
    },
    {
        "label": "AdjudicatorConflicts",
        "kind": 6,
        "importPath": "tabbycat.adjallocation.conflicts",
        "description": "tabbycat.adjallocation.conflicts",
        "peekOfCode": "class AdjudicatorConflicts(TypedDict):\n    class Conflict(TypedDict):\n        ago: int\n        id: int\n    team: List[Conflict]\n    adjudicator: List[Conflict]\nTeamConflicts = AdjudicatorConflicts\nclass ConflictsInfo:\n    \"\"\"Manages information about conflicts between participants.\n    The main purpose of this class is to streamline queries about conflicts.",
        "detail": "tabbycat.adjallocation.conflicts",
        "documentation": {}
    },
    {
        "label": "ConflictsInfo",
        "kind": 6,
        "importPath": "tabbycat.adjallocation.conflicts",
        "description": "tabbycat.adjallocation.conflicts",
        "peekOfCode": "class ConflictsInfo:\n    \"\"\"Manages information about conflicts between participants.\n    The main purpose of this class is to streamline queries about conflicts.\n    This class hits the database once, on creation, with one query per type of\n    conflict (adjudicator-team, adjudicator-adjudicator, adjudicator-institution\n    and adjudicator-team). It then can be used to find efficiently whether\n    particular participants conflict, without a need for further SQL queries or\n    excessive data processing.\n    All queries must relate to teams and adjudicators that were in the QuerySets\n    or other iterables that were provided to the constructor.",
        "detail": "tabbycat.adjallocation.conflicts",
        "documentation": {}
    },
    {
        "label": "HistoryInfo",
        "kind": 6,
        "importPath": "tabbycat.adjallocation.conflicts",
        "description": "tabbycat.adjallocation.conflicts",
        "peekOfCode": "class HistoryInfo:\n    \"\"\"Manages information about past encounters between participants prior to\n    (and not including) a given round. The object stores information about all\n    teams and adjudicators who participated in any round prior to the given\n    round.\n    The main purpose of this class is to streamline queries about history. This\n    class hits the database once, on creation, with queries for\n    `DebateAdjudicator` and `DebateTeam`. It then can be used to find\n    efficiently whether particular participants have seen each other, without a\n    need for further SQL queries or excessive data processing.",
        "detail": "tabbycat.adjallocation.conflicts",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "tabbycat.adjallocation.conflicts",
        "description": "tabbycat.adjallocation.conflicts",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass AdjudicatorConflicts(TypedDict):\n    class Conflict(TypedDict):\n        ago: int\n        id: int\n    team: List[Conflict]\n    adjudicator: List[Conflict]\nTeamConflicts = AdjudicatorConflicts\nclass ConflictsInfo:\n    \"\"\"Manages information about conflicts between participants.",
        "detail": "tabbycat.adjallocation.conflicts",
        "documentation": {}
    },
    {
        "label": "TeamConflicts",
        "kind": 5,
        "importPath": "tabbycat.adjallocation.conflicts",
        "description": "tabbycat.adjallocation.conflicts",
        "peekOfCode": "TeamConflicts = AdjudicatorConflicts\nclass ConflictsInfo:\n    \"\"\"Manages information about conflicts between participants.\n    The main purpose of this class is to streamline queries about conflicts.\n    This class hits the database once, on creation, with one query per type of\n    conflict (adjudicator-team, adjudicator-adjudicator, adjudicator-institution\n    and adjudicator-team). It then can be used to find efficiently whether\n    particular participants conflict, without a need for further SQL queries or\n    excessive data processing.\n    All queries must relate to teams and adjudicators that were in the QuerySets",
        "detail": "tabbycat.adjallocation.conflicts",
        "documentation": {}
    },
    {
        "label": "PanelEditConsumer",
        "kind": 6,
        "importPath": "tabbycat.adjallocation.consumers",
        "description": "tabbycat.adjallocation.consumers",
        "peekOfCode": "class PanelEditConsumer(BaseAdjudicatorContainerConsumer):\n    group_prefix = 'panels'\n    model = PreformedPanel\n    importance_serializer = SimplePanelImportanceSerializer\n    adjudicators_serializer = SimplePanelAllocationSerializer\n    access_permission = Permission.EDIT_PREFORMEDPANELS\nclass AdjudicatorAllocationWorkerConsumer(EditDebateOrPanelWorkerMixin):\n    def _apply_allocation_settings(self, round, settings):\n        t = round.tournament\n        for key, value in settings.items():",
        "detail": "tabbycat.adjallocation.consumers",
        "documentation": {}
    },
    {
        "label": "AdjudicatorAllocationWorkerConsumer",
        "kind": 6,
        "importPath": "tabbycat.adjallocation.consumers",
        "description": "tabbycat.adjallocation.consumers",
        "peekOfCode": "class AdjudicatorAllocationWorkerConsumer(EditDebateOrPanelWorkerMixin):\n    def _apply_allocation_settings(self, round, settings):\n        t = round.tournament\n        for key, value in settings.items():\n            if key in (\"usePreformedPanels\", \"allocationMethod\"):\n                # Passing this here is much easier than splitting the function\n                continue # (Not actually a preference; just a toggle from Vue)\n            # No way to force front-end to only accept floats/integers :(\n            if isinstance(t.preferences[key], bool):\n                t.preferences[key] = bool(value)",
        "detail": "tabbycat.adjallocation.consumers",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "tabbycat.adjallocation.consumers",
        "description": "tabbycat.adjallocation.consumers",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass PanelEditConsumer(BaseAdjudicatorContainerConsumer):\n    group_prefix = 'panels'\n    model = PreformedPanel\n    importance_serializer = SimplePanelImportanceSerializer\n    adjudicators_serializer = SimplePanelAllocationSerializer\n    access_permission = Permission.EDIT_PREFORMEDPANELS\nclass AdjudicatorAllocationWorkerConsumer(EditDebateOrPanelWorkerMixin):\n    def _apply_allocation_settings(self, round, settings):\n        t = round.tournament",
        "detail": "tabbycat.adjallocation.consumers",
        "documentation": {}
    },
    {
        "label": "DebateAdjudicatorManager",
        "kind": 6,
        "importPath": "tabbycat.adjallocation.models",
        "description": "tabbycat.adjallocation.models",
        "peekOfCode": "class DebateAdjudicatorManager(models.Manager):\n    use_for_related_fields = True\n    def get_queryset(self):\n        return super().get_queryset().select_related('debate')\nclass DebateAdjudicator(models.Model):\n    TYPE_CHAIR = 'C'\n    TYPE_PANEL = 'P'\n    TYPE_TRAINEE = 'T'\n    TYPE_CHOICES = (\n        (TYPE_CHAIR,   _(\"chair\")),",
        "detail": "tabbycat.adjallocation.models",
        "documentation": {}
    },
    {
        "label": "DebateAdjudicator",
        "kind": 6,
        "importPath": "tabbycat.adjallocation.models",
        "description": "tabbycat.adjallocation.models",
        "peekOfCode": "class DebateAdjudicator(models.Model):\n    TYPE_CHAIR = 'C'\n    TYPE_PANEL = 'P'\n    TYPE_TRAINEE = 'T'\n    TYPE_CHOICES = (\n        (TYPE_CHAIR,   _(\"chair\")),\n        (TYPE_PANEL,   _(\"panellist\")),\n        (TYPE_TRAINEE, _(\"trainee\")),\n    )\n    objects = DebateAdjudicatorManager()",
        "detail": "tabbycat.adjallocation.models",
        "documentation": {}
    },
    {
        "label": "AdjudicatorTeamConflict",
        "kind": 6,
        "importPath": "tabbycat.adjallocation.models",
        "description": "tabbycat.adjallocation.models",
        "peekOfCode": "class AdjudicatorTeamConflict(models.Model):\n    adjudicator = models.ForeignKey('participants.Adjudicator', models.CASCADE,\n        verbose_name=_(\"adjudicator\"))\n    team = models.ForeignKey('participants.Team', models.CASCADE,\n        verbose_name=_(\"team\"))\n    class Meta:\n        constraints = [UniqueConstraint(fields=['adjudicator', 'team'])]\n        verbose_name = _(\"adjudicator-team conflict\")\n        verbose_name_plural = _(\"adjudicator-team conflicts\")\n    def __str__(self):",
        "detail": "tabbycat.adjallocation.models",
        "documentation": {}
    },
    {
        "label": "AdjudicatorAdjudicatorConflict",
        "kind": 6,
        "importPath": "tabbycat.adjallocation.models",
        "description": "tabbycat.adjallocation.models",
        "peekOfCode": "class AdjudicatorAdjudicatorConflict(models.Model):\n    adjudicator1 = models.ForeignKey('participants.Adjudicator', models.CASCADE,\n        related_name=\"adjudicatoradjudicatorconflict_source_set\",\n        verbose_name=_(\"adjudicator 1\"))\n    adjudicator2 = models.ForeignKey('participants.Adjudicator', models.CASCADE,\n        related_name=\"adjudicatoradjudicatorconflict_target_set\",\n        verbose_name=_(\"adjudicator 2\"))\n    class Meta:\n        constraints = [UniqueConstraint(fields=['adjudicator1', 'adjudicator2'])]\n        verbose_name = _(\"adjudicator-adjudicator conflict\")",
        "detail": "tabbycat.adjallocation.models",
        "documentation": {}
    },
    {
        "label": "AdjudicatorInstitutionConflict",
        "kind": 6,
        "importPath": "tabbycat.adjallocation.models",
        "description": "tabbycat.adjallocation.models",
        "peekOfCode": "class AdjudicatorInstitutionConflict(models.Model):\n    adjudicator = models.ForeignKey('participants.Adjudicator', models.CASCADE,\n        verbose_name=_(\"adjudicator\"))\n    institution = models.ForeignKey('participants.Institution', models.CASCADE,\n        verbose_name=_(\"institution\"))\n    class Meta:\n        constraints = [UniqueConstraint(fields=['adjudicator', 'institution'])]\n        verbose_name = _(\"adjudicator-institution conflict\")\n        verbose_name_plural = _(\"adjudicator-institution conflicts\")\n    def __str__(self):",
        "detail": "tabbycat.adjallocation.models",
        "documentation": {}
    },
    {
        "label": "TeamInstitutionConflict",
        "kind": 6,
        "importPath": "tabbycat.adjallocation.models",
        "description": "tabbycat.adjallocation.models",
        "peekOfCode": "class TeamInstitutionConflict(models.Model):\n    team = models.ForeignKey('participants.Team', models.CASCADE,\n        verbose_name=_(\"team\"))\n    institution = models.ForeignKey('participants.Institution', models.CASCADE,\n        verbose_name=_(\"institution\"))\n    class Meta:\n        constraints = [UniqueConstraint(fields=['team', 'institution'])]\n        verbose_name = _(\"team-institution conflict\")\n        verbose_name_plural = _(\"team-institution conflicts\")\n    def __str__(self):",
        "detail": "tabbycat.adjallocation.models",
        "documentation": {}
    },
    {
        "label": "PreformedPanel",
        "kind": 6,
        "importPath": "tabbycat.adjallocation.models",
        "description": "tabbycat.adjallocation.models",
        "peekOfCode": "class PreformedPanel(models.Model):\n    round = models.ForeignKey('tournaments.Round', models.CASCADE,\n        verbose_name=_(\"round\"))\n    importance = models.FloatField(default=0.0, choices=[(float(i), i) for i in range(-2, 3)],\n        verbose_name=_(\"importance\"))\n    bracket_min = models.FloatField(default=0,\n        verbose_name=_(\"minimum bracket\"),\n        help_text=_(\"Estimate of the lowest bracket for which this panel might be\"))\n    bracket_max = models.FloatField(default=0,\n        verbose_name=_(\"maximum bracket\"),",
        "detail": "tabbycat.adjallocation.models",
        "documentation": {}
    },
    {
        "label": "PreformedPanelAdjudicator",
        "kind": 6,
        "importPath": "tabbycat.adjallocation.models",
        "description": "tabbycat.adjallocation.models",
        "peekOfCode": "class PreformedPanelAdjudicator(models.Model):\n    panel = models.ForeignKey(PreformedPanel, models.CASCADE,\n        verbose_name=_(\"panel\"))\n    adjudicator = models.ForeignKey('participants.Adjudicator', models.CASCADE,\n        verbose_name=_(\"adjudicator\"))\n    type = models.CharField(max_length=2, choices=DebateAdjudicator.TYPE_CHOICES,\n        verbose_name=_(\"type\"))\n    class Meta:\n        verbose_name = _(\"preformed panel adjudicator\")\n        verbose_name_plural = _(\"preformed panel adjudicators\")",
        "detail": "tabbycat.adjallocation.models",
        "documentation": {}
    },
    {
        "label": "EditPanelOrDebateAdjSerializer",
        "kind": 6,
        "importPath": "tabbycat.adjallocation.serializers",
        "description": "tabbycat.adjallocation.serializers",
        "peekOfCode": "class EditPanelOrDebateAdjSerializer(AdjudicatorSerializer, VueDraggableItemMixin):\n    \"\"\" Returns adjudicators for use in views where they are allocated \"\"\"\n    score = serializers.SerializerMethodField(read_only=True)\n    name = serializers.SerializerMethodField(read_only=True)\n    def get_name(self, obj):\n        return escape(obj.name)\n    def get_score(self, obj):\n        return obj.weighted_score(self.context['feedback_weight'])\n    class Meta:\n        model = AdjudicatorSerializer.Meta.model",
        "detail": "tabbycat.adjallocation.serializers",
        "documentation": {}
    },
    {
        "label": "EditDebateAdjsDebateSerializer",
        "kind": 6,
        "importPath": "tabbycat.adjallocation.serializers",
        "description": "tabbycat.adjallocation.serializers",
        "peekOfCode": "class EditDebateAdjsDebateSerializer(DebateSerializerMixin):\n    \"\"\" Returns debates for the Edit Adjudicator Allocation view\"\"\"\n    def adjudicator_representation(self, debate_or_panel_adj):\n        return debate_or_panel_adj.adjudicator.pk\nclass EditPanelAdjsPanelSerializer(EditDebateAdjsDebateSerializer):\n    \"\"\" Returns panels for the Edit Panels Allocation view\"\"\"\n    def debate_or_panel_adjudicators(self, obj):\n        return obj.preformedpaneladjudicator_set.all()\n    class Meta:\n        model = PreformedPanel",
        "detail": "tabbycat.adjallocation.serializers",
        "documentation": {}
    },
    {
        "label": "EditPanelAdjsPanelSerializer",
        "kind": 6,
        "importPath": "tabbycat.adjallocation.serializers",
        "description": "tabbycat.adjallocation.serializers",
        "peekOfCode": "class EditPanelAdjsPanelSerializer(EditDebateAdjsDebateSerializer):\n    \"\"\" Returns panels for the Edit Panels Allocation view\"\"\"\n    def debate_or_panel_adjudicators(self, obj):\n        return obj.preformedpaneladjudicator_set.all()\n    class Meta:\n        model = PreformedPanel\n        fields = ('id', 'importance', 'adjudicators', 'sort_index',\n                  'bracket_min', 'bracket_max', 'room_rank', 'liveness')\n# Below classes serialise only a specified field (i.e. allocated adjudicators);\n# i.e. they act as a lightweight data update to be broadcast back over the",
        "detail": "tabbycat.adjallocation.serializers",
        "documentation": {}
    },
    {
        "label": "SimpleDebateImportanceSerializer",
        "kind": 6,
        "importPath": "tabbycat.adjallocation.serializers",
        "description": "tabbycat.adjallocation.serializers",
        "peekOfCode": "class SimpleDebateImportanceSerializer(EditDebateAdjsDebateSerializer):\n    class Meta:\n        model = EditDebateAdjsDebateSerializer.Meta.model\n        fields = ('id', 'importance')\nclass SimplePanelImportanceSerializer(EditPanelAdjsPanelSerializer):\n    class Meta:\n        model = EditPanelAdjsPanelSerializer.Meta.model\n        fields = ('id', 'importance')\nclass SimpleDebateAllocationSerializer(EditDebateAdjsDebateSerializer):\n    class Meta:",
        "detail": "tabbycat.adjallocation.serializers",
        "documentation": {}
    },
    {
        "label": "SimplePanelImportanceSerializer",
        "kind": 6,
        "importPath": "tabbycat.adjallocation.serializers",
        "description": "tabbycat.adjallocation.serializers",
        "peekOfCode": "class SimplePanelImportanceSerializer(EditPanelAdjsPanelSerializer):\n    class Meta:\n        model = EditPanelAdjsPanelSerializer.Meta.model\n        fields = ('id', 'importance')\nclass SimpleDebateAllocationSerializer(EditDebateAdjsDebateSerializer):\n    class Meta:\n        model = EditDebateAdjsDebateSerializer.Meta.model\n        fields = ('id', 'adjudicators')\nclass SimplePanelAllocationSerializer(EditPanelAdjsPanelSerializer):\n    class Meta:",
        "detail": "tabbycat.adjallocation.serializers",
        "documentation": {}
    },
    {
        "label": "SimpleDebateAllocationSerializer",
        "kind": 6,
        "importPath": "tabbycat.adjallocation.serializers",
        "description": "tabbycat.adjallocation.serializers",
        "peekOfCode": "class SimpleDebateAllocationSerializer(EditDebateAdjsDebateSerializer):\n    class Meta:\n        model = EditDebateAdjsDebateSerializer.Meta.model\n        fields = ('id', 'adjudicators')\nclass SimplePanelAllocationSerializer(EditPanelAdjsPanelSerializer):\n    class Meta:\n        model = EditPanelAdjsPanelSerializer.Meta.model\n        fields = ('id', 'adjudicators')",
        "detail": "tabbycat.adjallocation.serializers",
        "documentation": {}
    },
    {
        "label": "SimplePanelAllocationSerializer",
        "kind": 6,
        "importPath": "tabbycat.adjallocation.serializers",
        "description": "tabbycat.adjallocation.serializers",
        "peekOfCode": "class SimplePanelAllocationSerializer(EditPanelAdjsPanelSerializer):\n    class Meta:\n        model = EditPanelAdjsPanelSerializer.Meta.model\n        fields = ('id', 'adjudicators')",
        "detail": "tabbycat.adjallocation.serializers",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "tabbycat.adjallocation.urls",
        "description": "tabbycat.adjallocation.urls",
        "peekOfCode": "urlpatterns = [\n    path('round/<int:round_seq>/', include([\n        path('debates/edit/',\n            views.EditDebateAdjudicatorsView.as_view(),\n            name='edit-debate-adjudicators'),\n        path('panels/edit/',\n            views.EditPanelAdjudicatorsView.as_view(),\n            name='edit-panel-adjudicators'),\n    ])),\n    path('panels/edit/',",
        "detail": "tabbycat.adjallocation.urls",
        "documentation": {}
    },
    {
        "label": "adjudicator_conflicts_display",
        "kind": 2,
        "importPath": "tabbycat.adjallocation.utils",
        "description": "tabbycat.adjallocation.utils",
        "peekOfCode": "def adjudicator_conflicts_display(debates):\n    \"\"\"Returns a dict mapping elements (debates) in `debates` to a list of\n    strings of explaining conflicts between adjudicators and teams, and\n    conflicts between adjudicators and each other.\"\"\"\n    adjudicators = Adjudicator.objects.filter(debateadjudicator__debate__in=debates)\n    teams = Team.objects.filter(debateteam__debate__in=debates)\n    conflicts = ConflictsInfo(teams=teams, adjudicators=adjudicators)\n    conflict_messages = {debate: [] for debate in debates}\n    for debate in debates:\n        for adj, team in product(debate.adjudicators.all(), debate.teams):",
        "detail": "tabbycat.adjallocation.utils",
        "documentation": {}
    },
    {
        "label": "percentile",
        "kind": 2,
        "importPath": "tabbycat.adjallocation.utils",
        "description": "tabbycat.adjallocation.utils",
        "peekOfCode": "def percentile(n, percent, key=lambda x: x):\n    \"\"\"\n    Find the percentile of a list of values.\n    @parameter N - is a list of values. Note N MUST BE already sorted.\n    @parameter percent - a float value from 0.0 to 1.0.\n    @parameter key - optional key function to compute value from each element of N.\n    @return - the percentile of the values\n    \"\"\"\n    if not n:\n        return None",
        "detail": "tabbycat.adjallocation.utils",
        "documentation": {}
    },
    {
        "label": "BaseEditDebateOrPanelAdjudicatorsView",
        "kind": 6,
        "importPath": "tabbycat.adjallocation.views",
        "description": "tabbycat.adjallocation.views",
        "peekOfCode": "class BaseEditDebateOrPanelAdjudicatorsView(DebateDragAndDropMixin, AdministratorMixin, TemplateView):\n    def get_extra_info(self):\n        info = super().get_extra_info()\n        # TODO: construct adj score ranges from settings\n        info['highlights']['gender'] = [\n            {'pk': 'm', 'fields': {'name': _('Male')}},\n            {'pk': 'f', 'fields': {'name': _('Female')}},\n            {'pk': 'o', 'fields': {'name': _('Other')}},\n            {'pk': 'u', 'fields': {'name': _('Unknown')}},\n        ]",
        "detail": "tabbycat.adjallocation.views",
        "documentation": {}
    },
    {
        "label": "EditDebateAdjudicatorsView",
        "kind": 6,
        "importPath": "tabbycat.adjallocation.views",
        "description": "tabbycat.adjallocation.views",
        "peekOfCode": "class EditDebateAdjudicatorsView(BaseEditDebateOrPanelAdjudicatorsView):\n    template_name = \"edit_debate_adjudicators.html\"\n    page_title = gettext_lazy(\"Edit Allocation\")\n    prefetch_adjs = True # Fetched in full as get_serialised\n    view_permission = Permission.VIEW_DEBATEADJUDICATORS\n    edit_permission = Permission.EDIT_DEBATEADJUDICATORS\n    def get_extra_info(self):\n        info = super().get_extra_info()\n        return info\n    def debates_or_panels_factory(self, debates):",
        "detail": "tabbycat.adjallocation.views",
        "documentation": {}
    },
    {
        "label": "EditPanelAdjudicatorsView",
        "kind": 6,
        "importPath": "tabbycat.adjallocation.views",
        "description": "tabbycat.adjallocation.views",
        "peekOfCode": "class EditPanelAdjudicatorsView(BaseEditDebateOrPanelAdjudicatorsView):\n    template_name = \"edit_panel_adjudicators.html\"\n    page_title = gettext_lazy(\"Edit Panels\")\n    view_permission = Permission.VIEW_PREFORMEDPANELS\n    edit_permission = Permission.EDIT_PREFORMEDPANELS\n    def get_extra_info(self):\n        info = super().get_extra_info()\n        info['backUrl'] = reverse_tournament('panel-adjudicators-index',\n                                             self.tournament)  # Override\n        info['backLabel'] = _(\"Return to Panels Overview\")",
        "detail": "tabbycat.adjallocation.views",
        "documentation": {}
    },
    {
        "label": "PanelAdjudicatorsIndexView",
        "kind": 6,
        "importPath": "tabbycat.adjallocation.views",
        "description": "tabbycat.adjallocation.views",
        "peekOfCode": "class PanelAdjudicatorsIndexView(AdministratorMixin, TournamentMixin, TemplateView):\n    template_name = \"preformed_index.html\"\n    page_title = gettext_lazy(\"Preformed Panels\")\n    view_permission = True\n# ==============================================================================\n# Conflict formset views\n# ==============================================================================\nclass TeamChoiceField(ModelChoiceField):\n    def label_from_instance(self, obj):\n        return obj.short_name",
        "detail": "tabbycat.adjallocation.views",
        "documentation": {}
    },
    {
        "label": "TeamChoiceField",
        "kind": 6,
        "importPath": "tabbycat.adjallocation.views",
        "description": "tabbycat.adjallocation.views",
        "peekOfCode": "class TeamChoiceField(ModelChoiceField):\n    def label_from_instance(self, obj):\n        return obj.short_name\nclass BaseAdjudicatorConflictsView(LogActionMixin, AdministratorMixin, TournamentMixin, ModelFormSetView):\n    template_name = 'edit_conflicts.html'\n    page_emoji = \"🔶\"\n    formset_factory_kwargs = {}\n    def get_formset_factory_kwargs(self):\n        can_edit = has_permission(self.request.user, self.get_edit_permission(), self.tournament)\n        kwargs = super().get_formset_factory_kwargs()",
        "detail": "tabbycat.adjallocation.views",
        "documentation": {}
    },
    {
        "label": "BaseAdjudicatorConflictsView",
        "kind": 6,
        "importPath": "tabbycat.adjallocation.views",
        "description": "tabbycat.adjallocation.views",
        "peekOfCode": "class BaseAdjudicatorConflictsView(LogActionMixin, AdministratorMixin, TournamentMixin, ModelFormSetView):\n    template_name = 'edit_conflicts.html'\n    page_emoji = \"🔶\"\n    formset_factory_kwargs = {}\n    def get_formset_factory_kwargs(self):\n        can_edit = has_permission(self.request.user, self.get_edit_permission(), self.tournament)\n        kwargs = super().get_formset_factory_kwargs()\n        kwargs['extra'] = 10 * int(can_edit)\n        kwargs['can_delete'] = can_edit\n        return kwargs",
        "detail": "tabbycat.adjallocation.views",
        "documentation": {}
    },
    {
        "label": "AdjudicatorTeamConflictsView",
        "kind": 6,
        "importPath": "tabbycat.adjallocation.views",
        "description": "tabbycat.adjallocation.views",
        "peekOfCode": "class AdjudicatorTeamConflictsView(BaseAdjudicatorConflictsView):\n    view_permission = Permission.VIEW_ADJ_TEAM_CONFLICTS\n    edit_permission = Permission.EDIT_ADJ_TEAM_CONFLICTS\n    action_log_type = ActionLogEntry.ActionType.CONFLICTS_ADJ_TEAM_EDIT\n    formset_model = AdjudicatorTeamConflict\n    page_title = gettext_lazy(\"Adjudicator-Team Conflicts\")\n    save_text = gettext_lazy(\"Save Adjudicator-Team Conflicts\")\n    same_view = 'adjallocation-conflicts-adj-team'\n    formset_factory_kwargs = BaseAdjudicatorConflictsView.formset_factory_kwargs.copy()\n    formset_factory_kwargs.update({",
        "detail": "tabbycat.adjallocation.views",
        "documentation": {}
    },
    {
        "label": "AdjudicatorAdjudicatorConflictsView",
        "kind": 6,
        "importPath": "tabbycat.adjallocation.views",
        "description": "tabbycat.adjallocation.views",
        "peekOfCode": "class AdjudicatorAdjudicatorConflictsView(BaseAdjudicatorConflictsView):\n    view_permission = Permission.VIEW_ADJ_ADJ_CONFLICTS\n    edit_permission = Permission.EDIT_ADJ_ADJ_CONFLICTS\n    action_log_type = ActionLogEntry.ActionType.CONFLICTS_ADJ_ADJ_EDIT\n    formset_model = AdjudicatorAdjudicatorConflict\n    page_title = gettext_lazy(\"Adjudicator-Adjudicator Conflicts\")\n    save_text = gettext_lazy(\"Save Adjudicator-Adjudicator Conflicts\")\n    same_view = 'adjallocation-conflicts-adj-adj'\n    formset_factory_kwargs = BaseAdjudicatorConflictsView.formset_factory_kwargs.copy()\n    formset_factory_kwargs.update({'fields': ('adjudicator1', 'adjudicator2')})",
        "detail": "tabbycat.adjallocation.views",
        "documentation": {}
    },
    {
        "label": "AdjudicatorInstitutionConflictsView",
        "kind": 6,
        "importPath": "tabbycat.adjallocation.views",
        "description": "tabbycat.adjallocation.views",
        "peekOfCode": "class AdjudicatorInstitutionConflictsView(BaseAdjudicatorConflictsView):\n    view_permission = Permission.VIEW_ADJ_INST_CONFLICTS\n    edit_permission = Permission.EDIT_ADJ_INST_CONFLICTS\n    action_log_type = ActionLogEntry.ActionType.CONFLICTS_ADJ_INST_EDIT\n    formset_model = AdjudicatorInstitutionConflict\n    page_title = gettext_lazy(\"Adjudicator-Institution Conflicts\")\n    save_text = gettext_lazy(\"Save Adjudicator-Institution Conflicts\")\n    same_view = 'adjallocation-conflicts-adj-inst'\n    formset_factory_kwargs = BaseAdjudicatorConflictsView.formset_factory_kwargs.copy()\n    formset_factory_kwargs.update({'fields': ('adjudicator', 'institution')})",
        "detail": "tabbycat.adjallocation.views",
        "documentation": {}
    },
    {
        "label": "TeamInstitutionConflictsView",
        "kind": 6,
        "importPath": "tabbycat.adjallocation.views",
        "description": "tabbycat.adjallocation.views",
        "peekOfCode": "class TeamInstitutionConflictsView(BaseAdjudicatorConflictsView):\n    view_permission = Permission.VIEW_TEAM_INST_CONFLICTS\n    edit_permission = Permission.EDIT_TEAM_INST_CONFLICTS\n    action_log_type = ActionLogEntry.ActionType.CONFLICTS_TEAM_INST_EDIT\n    formset_model = TeamInstitutionConflict\n    page_title = gettext_lazy(\"Team-Institution Conflicts\")\n    save_text = gettext_lazy(\"Save Team-Institution Conflicts\")\n    same_view = 'adjallocation-conflicts-team-inst'\n    formset_factory_kwargs = BaseAdjudicatorConflictsView.formset_factory_kwargs.copy()\n    formset_factory_kwargs.update({",
        "detail": "tabbycat.adjallocation.views",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "tabbycat.adjallocation.views",
        "description": "tabbycat.adjallocation.views",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass BaseEditDebateOrPanelAdjudicatorsView(DebateDragAndDropMixin, AdministratorMixin, TemplateView):\n    def get_extra_info(self):\n        info = super().get_extra_info()\n        # TODO: construct adj score ranges from settings\n        info['highlights']['gender'] = [\n            {'pk': 'm', 'fields': {'name': _('Male')}},\n            {'pk': 'f', 'fields': {'name': _('Female')}},\n            {'pk': 'o', 'fields': {'name': _('Other')}},\n            {'pk': 'u', 'fields': {'name': _('Unknown')}},",
        "detail": "tabbycat.adjallocation.views",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "tabbycat.adjfeedback.management.commands.generatefeedback",
        "description": "tabbycat.adjfeedback.management.commands.generatefeedback",
        "peekOfCode": "class Command(RoundCommand):\n    help = \"Adds randomly-generated feedback to the database\"\n    rounds_required = False\n    def add_arguments(self, parser):\n        super(Command, self).add_arguments(parser)\n        parser.add_argument(\"--debates\", type=int, nargs=\"+\",\n                            help=\"IDs of specific debates to add feedback to. \"\n                            \"Done in addition to rounds, if any.\",\n                            default=[])\n        parser.add_argument(\"-p\", \"--probability\", type=float,",
        "detail": "tabbycat.adjfeedback.management.commands.generatefeedback",
        "documentation": {}
    },
    {
        "label": "OBJECT_TYPE_CHOICES",
        "kind": 5,
        "importPath": "tabbycat.adjfeedback.management.commands.generatefeedback",
        "description": "tabbycat.adjfeedback.management.commands.generatefeedback",
        "peekOfCode": "OBJECT_TYPE_CHOICES = [\"round\", \"debate\"]\nSUBMITTER_TYPE_MAP = {\n    'tabroom': AdjudicatorFeedback.Submitter.TABROOM,\n    'public':  AdjudicatorFeedback.Submitter.PUBLIC,\n}\nUser = get_user_model()\nclass Command(RoundCommand):\n    help = \"Adds randomly-generated feedback to the database\"\n    rounds_required = False\n    def add_arguments(self, parser):",
        "detail": "tabbycat.adjfeedback.management.commands.generatefeedback",
        "documentation": {}
    },
    {
        "label": "SUBMITTER_TYPE_MAP",
        "kind": 5,
        "importPath": "tabbycat.adjfeedback.management.commands.generatefeedback",
        "description": "tabbycat.adjfeedback.management.commands.generatefeedback",
        "peekOfCode": "SUBMITTER_TYPE_MAP = {\n    'tabroom': AdjudicatorFeedback.Submitter.TABROOM,\n    'public':  AdjudicatorFeedback.Submitter.PUBLIC,\n}\nUser = get_user_model()\nclass Command(RoundCommand):\n    help = \"Adds randomly-generated feedback to the database\"\n    rounds_required = False\n    def add_arguments(self, parser):\n        super(Command, self).add_arguments(parser)",
        "detail": "tabbycat.adjfeedback.management.commands.generatefeedback",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "tabbycat.adjfeedback.management.commands.generatefeedback",
        "description": "tabbycat.adjfeedback.management.commands.generatefeedback",
        "peekOfCode": "User = get_user_model()\nclass Command(RoundCommand):\n    help = \"Adds randomly-generated feedback to the database\"\n    rounds_required = False\n    def add_arguments(self, parser):\n        super(Command, self).add_arguments(parser)\n        parser.add_argument(\"--debates\", type=int, nargs=\"+\",\n                            help=\"IDs of specific debates to add feedback to. \"\n                            \"Done in addition to rounds, if any.\",\n                            default=[])",
        "detail": "tabbycat.adjfeedback.management.commands.generatefeedback",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "tabbycat.adjfeedback.management.commands.printmultiplefeedback",
        "description": "tabbycat.adjfeedback.management.commands.printmultiplefeedback",
        "peekOfCode": "class Command(TournamentCommand):\n    help = \"Checks for feedback with more than one version.\"\n    def add_arguments(self, parser):\n        super(Command, self).add_arguments(parser)\n        parser.add_argument(\n            \"--num\", \"-n\", type=int,\n            help=\"Show feedback with at least this many versions\", default=2)\n    def handle_tournament(self, tournament, **options):\n        for adj in tournament.adjudicator_set.all():\n            seen = list()",
        "detail": "tabbycat.adjfeedback.management.commands.printmultiplefeedback",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.adjfeedback.migrations.0001_initial",
        "description": "tabbycat.adjfeedback.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='AdjudicatorFeedback',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='timestamp')),",
        "detail": "tabbycat.adjfeedback.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.adjfeedback.migrations.0002_auto_20171110_0905",
        "description": "tabbycat.adjfeedback.migrations.0002_auto_20171110_0905",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('participants', '0001_initial'),\n        ('tournaments', '0001_initial'),\n        ('adjfeedback', '0001_initial'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n        ('adjallocation', '0002_debateadjudicator_adjudicator'),\n    ]\n    operations = [",
        "detail": "tabbycat.adjfeedback.migrations.0002_auto_20171110_0905",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.adjfeedback.migrations.0003_auto_20171110_0905",
        "description": "tabbycat.adjfeedback.migrations.0003_auto_20171110_0905",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('draw', '0001_initial'),\n        ('adjfeedback', '0002_auto_20171110_0905'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='adjudicatorfeedback',",
        "detail": "tabbycat.adjfeedback.migrations.0003_auto_20171110_0905",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.adjfeedback.migrations.0004_adjudicatorfeedback_ignored",
        "description": "tabbycat.adjfeedback.migrations.0004_adjudicatorfeedback_ignored",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('adjfeedback', '0003_auto_20171110_0905'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='adjudicatorfeedback',\n            name='ignored',\n            field=models.BooleanField(default=False, help_text=\"Whether the feedback should affect the judge's score\", verbose_name='ignored'),\n        ),",
        "detail": "tabbycat.adjfeedback.migrations.0004_adjudicatorfeedback_ignored",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.adjfeedback.migrations.0005_auto_20180928_1441",
        "description": "tabbycat.adjfeedback.migrations.0005_auto_20180928_1441",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('adjfeedback', '0004_adjudicatorfeedback_ignored'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='adjudicatorfeedbackquestion',\n            name='choices',\n            field=models.TextField(blank=True, help_text=\"Permissible choices for select one/multiple fields, separated by '//' (ignored for other fields)\", verbose_name='choices'),\n        ),",
        "detail": "tabbycat.adjfeedback.migrations.0005_auto_20180928_1441",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.adjfeedback.migrations.0006_auto_20191109_1240",
        "description": "tabbycat.adjfeedback.migrations.0006_auto_20191109_1240",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('participants', '0013_rename_test_score'),\n        ('tournaments', '0006_auto_20191109_1240'),\n        ('adjfeedback', '0005_auto_20180928_1441'),\n    ]\n    operations = [\n        migrations.RenameModel(\n            old_name='AdjudicatorTestScoreHistory',\n            new_name='AdjudicatorBaseScoreHistory',",
        "detail": "tabbycat.adjfeedback.migrations.0006_auto_20191109_1240",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.adjfeedback.migrations.0007_auto_20200613_1527",
        "description": "tabbycat.adjfeedback.migrations.0007_auto_20200613_1527",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('adjfeedback', '0006_auto_20191109_1240'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='adjudicatorfeedbackquestion',\n            name='choices_temp',\n            field=django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), blank=True, help_text=\"Permissible choices for select one/multiple fields (ignored for other fields)\", size=None, verbose_name='choices', default=list),\n        ),",
        "detail": "tabbycat.adjfeedback.migrations.0007_auto_20200613_1527",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.adjfeedback.migrations.0007_auto_20200613_2006",
        "description": "tabbycat.adjfeedback.migrations.0007_auto_20200613_2006",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('adjfeedback', '0006_auto_20191109_1240'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='adjudicatorfeedback',\n            name='ignored',\n            field=models.BooleanField(default=False, help_text=\"Whether the feedback should affect the adjudicator's score\", verbose_name='ignored'),\n        ),",
        "detail": "tabbycat.adjfeedback.migrations.0007_auto_20200613_2006",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.adjfeedback.migrations.0008_auto_20200705_1317",
        "description": "tabbycat.adjfeedback.migrations.0008_auto_20200705_1317",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n        ('adjfeedback', '0007_auto_20200613_2006'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='adjudicatorfeedback',\n            name='confirmer',\n            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='adjfeedback_adjudicatorfeedback_confirmed', to=settings.AUTH_USER_MODEL, verbose_name='confirmer'),",
        "detail": "tabbycat.adjfeedback.migrations.0008_auto_20200705_1317",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.adjfeedback.migrations.0009_adjudicatorfeedback_participant_submitter",
        "description": "tabbycat.adjfeedback.migrations.0009_adjudicatorfeedback_participant_submitter",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('participants', '0016_auto_20200705_1317'),\n        ('adjfeedback', '0008_auto_20200705_1317'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='adjudicatorfeedback',\n            name='participant_submitter',\n            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='adjfeedback_adjudicatorfeedback_participant_submitted', to='participants.Person', verbose_name='from participant'),",
        "detail": "tabbycat.adjfeedback.migrations.0009_adjudicatorfeedback_participant_submitter",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.adjfeedback.migrations.0009_merge_20200904_1639",
        "description": "tabbycat.adjfeedback.migrations.0009_merge_20200904_1639",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('adjfeedback', '0007_auto_20200613_1527'),\n        ('adjfeedback', '0008_auto_20200705_1317'),\n    ]\n    operations = [\n    ]",
        "detail": "tabbycat.adjfeedback.migrations.0009_merge_20200904_1639",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.adjfeedback.migrations.0010_merge_20200904_1943",
        "description": "tabbycat.adjfeedback.migrations.0010_merge_20200904_1943",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('adjfeedback', '0009_adjudicatorfeedback_participant_submitter'),\n        ('adjfeedback', '0009_merge_20200904_1639'),\n    ]\n    operations = [\n    ]",
        "detail": "tabbycat.adjfeedback.migrations.0010_merge_20200904_1943",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.adjfeedback.migrations.0011_auto_20210102_1337",
        "description": "tabbycat.adjfeedback.migrations.0011_auto_20210102_1337",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('adjfeedback', '0010_merge_20200904_1943'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='adjudicatorfeedbackmanyanswer',\n            name='answer',\n            field=django_better_admin_arrayfield.models.fields.ArrayField(base_field=models.TextField(), size=None),\n        ),",
        "detail": "tabbycat.adjfeedback.migrations.0011_auto_20210102_1337",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.adjfeedback.migrations.0012_adjudicatorfeedback_private_url",
        "description": "tabbycat.adjfeedback.migrations.0012_adjudicatorfeedback_private_url",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('adjfeedback', '0011_auto_20210102_1337'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='adjudicatorfeedback',\n            name='private_url',\n            field=models.BooleanField(default=False, verbose_name='from private URL'),\n        ),",
        "detail": "tabbycat.adjfeedback.migrations.0012_adjudicatorfeedback_private_url",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.adjfeedback.migrations.0013_alter_adjudicatorfeedback_confirmer_and_more",
        "description": "tabbycat.adjfeedback.migrations.0013_alter_adjudicatorfeedback_confirmer_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n        ('participants', '0019_auto_20201216_1415'),\n        ('adjfeedback', '0012_adjudicatorfeedback_private_url'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='adjudicatorfeedback',\n            name='confirmer',",
        "detail": "tabbycat.adjfeedback.migrations.0013_alter_adjudicatorfeedback_confirmer_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.adjfeedback.migrations.0014_alter_adjudicatorfeedback_submitter_type",
        "description": "tabbycat.adjfeedback.migrations.0014_alter_adjudicatorfeedback_submitter_type",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"adjfeedback\", \"0013_alter_adjudicatorfeedback_confirmer_and_more\"),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name=\"adjudicatorfeedback\",\n            name=\"submitter_type\",\n            field=models.CharField(\n                choices=[(\"T\", \"Tab room\"), (\"P\", \"Public\"), (\"A\", \"Automation\")],",
        "detail": "tabbycat.adjfeedback.migrations.0014_alter_adjudicatorfeedback_submitter_type",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.adjfeedback.migrations.0015_alter_adjudicatorfeedback_unique_together_and_more",
        "description": "tabbycat.adjfeedback.migrations.0015_alter_adjudicatorfeedback_unique_together_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('adjallocation', '0010_alter_adjudicatoradjudicatorconflict_unique_together_and_more'),\n        ('adjfeedback', '0014_alter_adjudicatorfeedback_submitter_type'),\n        ('draw', '0008_alter_debateteam_side_alter_teamsideallocation_side'),\n        ('participants', '0021_team_seed'),\n        ('tournaments', '0010_alter_round_draw_type'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [",
        "detail": "tabbycat.adjfeedback.migrations.0015_alter_adjudicatorfeedback_unique_together_and_more",
        "documentation": {}
    },
    {
        "label": "TestFeedbackProgress",
        "kind": 6,
        "importPath": "tabbycat.adjfeedback.tests.test_progress",
        "description": "tabbycat.adjfeedback.tests.test_progress",
        "peekOfCode": "class TestFeedbackProgress(TestCase):\n    NUM_TEAMS = 6\n    NUM_ADJS = 7\n    NUM_VENUES = 3\n    def setUp(self):\n        self.tournament = Tournament.objects.create()\n        for i in range(self.NUM_TEAMS):\n            inst = Institution.objects.create(code=i, name=i)\n            team = Team.objects.create(tournament=self.tournament, institution=inst, reference=i)\n            for j in range(3):",
        "detail": "tabbycat.adjfeedback.tests.test_progress",
        "documentation": {}
    },
    {
        "label": "PublicAddFeedbackViewTestCase",
        "kind": 6,
        "importPath": "tabbycat.adjfeedback.tests.test_views",
        "description": "tabbycat.adjfeedback.tests.test_views",
        "peekOfCode": "class PublicAddFeedbackViewTestCase(ConditionalTableViewTestsMixin, TestCase):\n    view_name = 'adjfeedback-public-add-index'\n    view_toggle_preference = 'data_entry__participant_feedback'\n    view_toggle_on_value = 'public'\n    view_toggle_off_value = 'off'\n    def expected_row_counts(self):\n        return [\n            self.tournament.team_set.count(),\n            self.tournament.adjudicator_set.count(),\n        ]",
        "detail": "tabbycat.adjfeedback.tests.test_views",
        "documentation": {}
    },
    {
        "label": "AdjudicatorBaseScoreHistoryAdmin",
        "kind": 6,
        "importPath": "tabbycat.adjfeedback.admin",
        "description": "tabbycat.adjfeedback.admin",
        "peekOfCode": "class AdjudicatorBaseScoreHistoryAdmin(ModelAdmin):\n    list_display = ('adjudicator', 'round', 'score', 'timestamp')\n    list_filter  = ('adjudicator', 'round')\n    ordering     = ('timestamp',)\n    search_fields = ('adjudicator__name', 'adjudicator__institution__name')\n    def get_queryset(self, request):\n        return super().get_queryset(request).select_related('round__tournament', 'adjudicator__institution')\n# ==============================================================================\n# Adjudicator feedback questions\n# ==============================================================================",
        "detail": "tabbycat.adjfeedback.admin",
        "documentation": {}
    },
    {
        "label": "QuestionForm",
        "kind": 6,
        "importPath": "tabbycat.adjfeedback.admin",
        "description": "tabbycat.adjfeedback.admin",
        "peekOfCode": "class QuestionForm(forms.ModelForm):\n    class Meta:\n        model = AdjudicatorFeedbackQuestion\n        fields = '__all__'\n    def clean(self):\n        integer_scale = AdjudicatorFeedbackQuestion.ANSWER_TYPE_INTEGER_SCALE\n        if self.cleaned_data.get('answer_type') == integer_scale:\n            if not self.cleaned_data.get('min_value') or not self.cleaned_data.get('max_value'):\n                raise forms.ValidationError(_(\"Integer scales must have a minimum and maximum\"))\n        return self.cleaned_data",
        "detail": "tabbycat.adjfeedback.admin",
        "documentation": {}
    },
    {
        "label": "AdjudicatorFeedbackQuestionAdmin",
        "kind": 6,
        "importPath": "tabbycat.adjfeedback.admin",
        "description": "tabbycat.adjfeedback.admin",
        "peekOfCode": "class AdjudicatorFeedbackQuestionAdmin(DynamicArrayMixin, ModelAdmin):\n    form = QuestionForm\n    list_display = ('reference', 'text', 'seq', 'tournament', 'answer_type',\n                    'required', 'from_adj', 'from_team')\n    list_filter  = ('tournament',)\n    ordering     = ('tournament', 'seq')\n# ==============================================================================\n# Adjudicator feedback answers\n# ==============================================================================\n@admin.register(AdjudicatorFeedbackBooleanAnswer)",
        "detail": "tabbycat.adjfeedback.admin",
        "documentation": {}
    },
    {
        "label": "AdjudicatorFeedbackAnswerAdmin",
        "kind": 6,
        "importPath": "tabbycat.adjfeedback.admin",
        "description": "tabbycat.adjfeedback.admin",
        "peekOfCode": "class AdjudicatorFeedbackAnswerAdmin(ModelAdmin):\n    list_display = ('question', 'get_target', 'get_source', 'answer', 'get_feedback_description')\n    list_select_related = ('question', 'feedback__adjudicator',\n                           'feedback__source_adjudicator__adjudicator',\n                           'feedback__source_team__team')\n    list_filter  = (\n        'question', 'answer',\n        ('feedback__adjudicator__name', custom_titled_filter(_('target'))),\n        ('feedback__source_adjudicator__adjudicator__name', custom_titled_filter(_('source adjudicator'))),\n        ('feedback__source_team__team__short_name', custom_titled_filter(_('source team'))),",
        "detail": "tabbycat.adjfeedback.admin",
        "documentation": {}
    },
    {
        "label": "BaseAdjudicatorFeedbackAnswerInline",
        "kind": 6,
        "importPath": "tabbycat.adjfeedback.admin",
        "description": "tabbycat.adjfeedback.admin",
        "peekOfCode": "class BaseAdjudicatorFeedbackAnswerInline(admin.TabularInline):\n    model = None  # Must be set by subclasses\n    fields = ('question', 'answer')\n    extra = 1\n    def formfield_for_foreignkey(self, db_field, request, **kwargs):\n        if db_field.name == \"question\":\n            kwargs[\"queryset\"] = AdjudicatorFeedbackQuestion.objects.filter(\n                answer_type__in=AdjudicatorFeedbackQuestion.ANSWER_TYPE_CLASSES_REVERSE[self.model])\n        return super(BaseAdjudicatorFeedbackAnswerInline, self).formfield_for_foreignkey(db_field, request, **kwargs)\nclass RoundListFilter(admin.SimpleListFilter):",
        "detail": "tabbycat.adjfeedback.admin",
        "documentation": {}
    },
    {
        "label": "RoundListFilter",
        "kind": 6,
        "importPath": "tabbycat.adjfeedback.admin",
        "description": "tabbycat.adjfeedback.admin",
        "peekOfCode": "class RoundListFilter(admin.SimpleListFilter):\n    \"\"\"Filters AdjudicatorFeedbacks by round.\"\"\"\n    title = \"round\"\n    parameter_name = \"round\"\n    def lookups(self, request, model_admin):\n        from tournaments.models import Round\n        return [(str(r.id), \"[{}] {}\".format(r.tournament.short_name, r.name)) for r in Round.objects.all()]\n    def queryset(self, request, queryset):\n        return queryset.filter(source_team__debate__round_id=self.value()) | queryset.filter(source_adjudicator__debate__round_id=self.value())\n# ==============================================================================",
        "detail": "tabbycat.adjfeedback.admin",
        "documentation": {}
    },
    {
        "label": "AdjudicatorFeedbackAdmin",
        "kind": 6,
        "importPath": "tabbycat.adjfeedback.admin",
        "description": "tabbycat.adjfeedback.admin",
        "peekOfCode": "class AdjudicatorFeedbackAdmin(ModelAdmin):\n    list_display  = ('adjudicator', 'confirmed', 'ignored', 'score', 'version', 'get_source')\n    search_fields = ('adjudicator__name', 'adjudicator__institution__name',\n            'score', 'source_adjudicator__adjudicator__name',\n            'source_team__team__short_name', 'source_team__team__long_name')\n    raw_id_fields = ('source_team', 'adjudicator', 'source_team', 'source_adjudicator')\n    list_filter   = (\n        RoundListFilter,\n        ('adjudicator', custom_titled_filter(_('target'))),\n        ('source_adjudicator__adjudicator__name', custom_titled_filter(_('source adjudicator'))),",
        "detail": "tabbycat.adjfeedback.admin",
        "documentation": {}
    },
    {
        "label": "AdjFeedbackConfig",
        "kind": 6,
        "importPath": "tabbycat.adjfeedback.apps",
        "description": "tabbycat.adjfeedback.apps",
        "peekOfCode": "class AdjFeedbackConfig(AppConfig):\n    name = 'adjfeedback'\n    verbose_name = _(\"Adjudicator Feedback\")",
        "detail": "tabbycat.adjfeedback.apps",
        "documentation": {}
    },
    {
        "label": "add_feedback_to_round",
        "kind": 2,
        "importPath": "tabbycat.adjfeedback.dbutils",
        "description": "tabbycat.adjfeedback.dbutils",
        "peekOfCode": "def add_feedback_to_round(round, **kwargs):\n    \"\"\"Calls add_feedback() for every debate in the given round.\"\"\"\n    for debate in round.debate_set_with_prefetches():\n        add_feedback(debate, **kwargs)\ndef delete_all_feedback_for_round(round):\n    \"\"\"Deletes all feedback for the given round.\"\"\"\n    fm.AdjudicatorFeedback.objects.filter(source_adjudicator__debate__round=round).delete()\n    fm.AdjudicatorFeedback.objects.filter(source_team__debate__round=round).delete()\ndef delete_feedback(debate):\n    \"\"\"Deletes all feedback for the given debate.\"\"\"",
        "detail": "tabbycat.adjfeedback.dbutils",
        "documentation": {}
    },
    {
        "label": "delete_all_feedback_for_round",
        "kind": 2,
        "importPath": "tabbycat.adjfeedback.dbutils",
        "description": "tabbycat.adjfeedback.dbutils",
        "peekOfCode": "def delete_all_feedback_for_round(round):\n    \"\"\"Deletes all feedback for the given round.\"\"\"\n    fm.AdjudicatorFeedback.objects.filter(source_adjudicator__debate__round=round).delete()\n    fm.AdjudicatorFeedback.objects.filter(source_team__debate__round=round).delete()\ndef delete_feedback(debate):\n    \"\"\"Deletes all feedback for the given debate.\"\"\"\n    fm.AdjudicatorFeedback.objects.filter(source_adjudicator__debate=debate).delete()\n    fm.AdjudicatorFeedback.objects.filter(source_team__debate=debate).delete()\ndef add_feedback(debate, submitter_type, user, probability=1.0, discarded=False, confirmed=False):\n    \"\"\"Adds feedback to a debate.",
        "detail": "tabbycat.adjfeedback.dbutils",
        "documentation": {}
    },
    {
        "label": "delete_feedback",
        "kind": 2,
        "importPath": "tabbycat.adjfeedback.dbutils",
        "description": "tabbycat.adjfeedback.dbutils",
        "peekOfCode": "def delete_feedback(debate):\n    \"\"\"Deletes all feedback for the given debate.\"\"\"\n    fm.AdjudicatorFeedback.objects.filter(source_adjudicator__debate=debate).delete()\n    fm.AdjudicatorFeedback.objects.filter(source_team__debate=debate).delete()\ndef add_feedback(debate, submitter_type, user, probability=1.0, discarded=False, confirmed=False):\n    \"\"\"Adds feedback to a debate.\n    Specifically, adds feedback from both teams on the chair, and from every\n    adjudicator on every other adjudicator.\n    ``debate`` is the Debate to which feedback should be added.\n    ``submitter_type`` is a valid value of AdjudicatorFeedback.submitter_type.",
        "detail": "tabbycat.adjfeedback.dbutils",
        "documentation": {}
    },
    {
        "label": "add_feedback",
        "kind": 2,
        "importPath": "tabbycat.adjfeedback.dbutils",
        "description": "tabbycat.adjfeedback.dbutils",
        "peekOfCode": "def add_feedback(debate, submitter_type, user, probability=1.0, discarded=False, confirmed=False):\n    \"\"\"Adds feedback to a debate.\n    Specifically, adds feedback from both teams on the chair, and from every\n    adjudicator on every other adjudicator.\n    ``debate`` is the Debate to which feedback should be added.\n    ``submitter_type`` is a valid value of AdjudicatorFeedback.submitter_type.\n    ``user`` is a User object.\n    ``probability``, a float between 0.0 and 1.0, is the probability with which\n        feedback is generated.\n    ``discarded`` and ``confirmed`` are whether the feedback should be",
        "detail": "tabbycat.adjfeedback.dbutils",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "tabbycat.adjfeedback.dbutils",
        "description": "tabbycat.adjfeedback.dbutils",
        "peekOfCode": "logger = logging.getLogger(__name__)\nUser = get_user_model()\nWORDS = {\n    5: [\"perfect\", \"outstanding\", \"super\", \"collected\", \"insightful\"],\n    4: [\"great\", \"methodical\", \"logical\", \"insightful\", \"happy\"],\n    3: [\"middler\", \"average\", \"solid\", \"fair\", \"clear\"],\n    2: [\"biased\", \"unclear\", \"convoluted\", \"learning\", \"smart\"],\n    1: [\"useless\", \"incompetent\", \"novice\", \"stupid\", \"biased\"],\n}\nCOMMENTS = {",
        "detail": "tabbycat.adjfeedback.dbutils",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "tabbycat.adjfeedback.dbutils",
        "description": "tabbycat.adjfeedback.dbutils",
        "peekOfCode": "User = get_user_model()\nWORDS = {\n    5: [\"perfect\", \"outstanding\", \"super\", \"collected\", \"insightful\"],\n    4: [\"great\", \"methodical\", \"logical\", \"insightful\", \"happy\"],\n    3: [\"middler\", \"average\", \"solid\", \"fair\", \"clear\"],\n    2: [\"biased\", \"unclear\", \"convoluted\", \"learning\", \"smart\"],\n    1: [\"useless\", \"incompetent\", \"novice\", \"stupid\", \"biased\"],\n}\nCOMMENTS = {\n    5: [",
        "detail": "tabbycat.adjfeedback.dbutils",
        "documentation": {}
    },
    {
        "label": "WORDS",
        "kind": 5,
        "importPath": "tabbycat.adjfeedback.dbutils",
        "description": "tabbycat.adjfeedback.dbutils",
        "peekOfCode": "WORDS = {\n    5: [\"perfect\", \"outstanding\", \"super\", \"collected\", \"insightful\"],\n    4: [\"great\", \"methodical\", \"logical\", \"insightful\", \"happy\"],\n    3: [\"middler\", \"average\", \"solid\", \"fair\", \"clear\"],\n    2: [\"biased\", \"unclear\", \"convoluted\", \"learning\", \"smart\"],\n    1: [\"useless\", \"incompetent\", \"novice\", \"stupid\", \"biased\"],\n}\nCOMMENTS = {\n    5: [\n        \"Amazeballs.\",",
        "detail": "tabbycat.adjfeedback.dbutils",
        "documentation": {}
    },
    {
        "label": "COMMENTS",
        "kind": 5,
        "importPath": "tabbycat.adjfeedback.dbutils",
        "description": "tabbycat.adjfeedback.dbutils",
        "peekOfCode": "COMMENTS = {\n    5: [\n        \"Amazeballs.\",\n        \"Saw it exactly how we did.\",\n        \"Couldn't have been better.\",\n        \"Really insightful feedback.\",\n    ],\n    4: [\n        \"Great adjudication but parts were unclear.\",\n        \"Clear but a bit long. Should break.\",",
        "detail": "tabbycat.adjfeedback.dbutils",
        "documentation": {}
    },
    {
        "label": "SpacedRadioWidget",
        "kind": 6,
        "importPath": "tabbycat.adjfeedback.forms",
        "description": "tabbycat.adjfeedback.forms",
        "peekOfCode": "class SpacedRadioWidget(forms.RadioSelect):\n    template_name = 'spaced_choice_widget.html'\nclass IntegerScaleField(forms.IntegerField):\n    \"\"\"Class to do integer scale fields.\"\"\"\n    widget = SpacedRadioWidget()\n    def __init__(self, *args, **kwargs):\n        super(IntegerScaleField, self).__init__(*args, **kwargs)\n        self.widget.choices = tuple((i, str(i)) for i in range(self.min_value, self.max_value+1))\nclass BlankUnknownBooleanSelect(forms.NullBooleanSelect):\n    \"\"\"Uses '--------' instead of 'Unknown' for the None choice.\"\"\"",
        "detail": "tabbycat.adjfeedback.forms",
        "documentation": {}
    },
    {
        "label": "IntegerScaleField",
        "kind": 6,
        "importPath": "tabbycat.adjfeedback.forms",
        "description": "tabbycat.adjfeedback.forms",
        "peekOfCode": "class IntegerScaleField(forms.IntegerField):\n    \"\"\"Class to do integer scale fields.\"\"\"\n    widget = SpacedRadioWidget()\n    def __init__(self, *args, **kwargs):\n        super(IntegerScaleField, self).__init__(*args, **kwargs)\n        self.widget.choices = tuple((i, str(i)) for i in range(self.min_value, self.max_value+1))\nclass BlankUnknownBooleanSelect(forms.NullBooleanSelect):\n    \"\"\"Uses '--------' instead of 'Unknown' for the None choice.\"\"\"\n    def __init__(self, attrs=None):\n        choices = (",
        "detail": "tabbycat.adjfeedback.forms",
        "documentation": {}
    },
    {
        "label": "BlankUnknownBooleanSelect",
        "kind": 6,
        "importPath": "tabbycat.adjfeedback.forms",
        "description": "tabbycat.adjfeedback.forms",
        "peekOfCode": "class BlankUnknownBooleanSelect(forms.NullBooleanSelect):\n    \"\"\"Uses '--------' instead of 'Unknown' for the None choice.\"\"\"\n    def __init__(self, attrs=None):\n        choices = (\n            ('1', '--------'),\n            # Translators: Please leave this blank, it should be left for the base Django translations.\n            ('2', gettext_lazy('Yes')),\n            # Translators: Please leave this blank, it should be left for the base Django translations.\n            ('3', gettext_lazy('No')),\n        )",
        "detail": "tabbycat.adjfeedback.forms",
        "documentation": {}
    },
    {
        "label": "BooleanSelectField",
        "kind": 6,
        "importPath": "tabbycat.adjfeedback.forms",
        "description": "tabbycat.adjfeedback.forms",
        "peekOfCode": "class BooleanSelectField(forms.NullBooleanField):\n    \"\"\"Widget to do boolean select fields following our conventions.\n    Specifically, if 'required', checks that an option was chosen.\"\"\"\n    widget = BlankUnknownBooleanSelect\n    def clean(self, value):\n        value = super(BooleanSelectField, self).clean(value)\n        if self.required and value is None:\n            # Translators: Please leave this blank, it should be left for the base Django translations.\n            raise forms.ValidationError(_(\"This field is required.\"))\n        return value",
        "detail": "tabbycat.adjfeedback.forms",
        "documentation": {}
    },
    {
        "label": "RequiredTypedChoiceField",
        "kind": 6,
        "importPath": "tabbycat.adjfeedback.forms",
        "description": "tabbycat.adjfeedback.forms",
        "peekOfCode": "class RequiredTypedChoiceField(forms.TypedChoiceField):\n    def clean(self, value):\n        value = super(RequiredTypedChoiceField, self).clean(value)\n        if value == \"None\":\n            # Translators: Please leave this blank, it should be left for the base Django translations.\n            raise forms.ValidationError(_(\"This field is required.\"))\n        return value\n# ==============================================================================\n# Feedback Fields\n# ==============================================================================",
        "detail": "tabbycat.adjfeedback.forms",
        "documentation": {}
    },
    {
        "label": "BlockCheckboxWidget",
        "kind": 6,
        "importPath": "tabbycat.adjfeedback.forms",
        "description": "tabbycat.adjfeedback.forms",
        "peekOfCode": "class BlockCheckboxWidget(forms.CheckboxSelectMultiple):\n    template_name = 'spaced_choice_widget.html'\n# ==============================================================================\n# Feedback Forms\n# ==============================================================================\nclass BaseFeedbackForm(forms.Form):\n    \"\"\"Base class for all dynamically-created feedback forms. Contains all\n    question fields.\"\"\"\n    # parameters set at \"compile time\" by subclasses\n    _tournament = None  # must be set by subclasses",
        "detail": "tabbycat.adjfeedback.forms",
        "documentation": {}
    },
    {
        "label": "BaseFeedbackForm",
        "kind": 6,
        "importPath": "tabbycat.adjfeedback.forms",
        "description": "tabbycat.adjfeedback.forms",
        "peekOfCode": "class BaseFeedbackForm(forms.Form):\n    \"\"\"Base class for all dynamically-created feedback forms. Contains all\n    question fields.\"\"\"\n    # parameters set at \"compile time\" by subclasses\n    _tournament = None  # must be set by subclasses\n    _use_tournament_password = False\n    _confirm_on_submit = False\n    _enforce_required = True\n    _ignored_option = False\n    question_filter = dict()",
        "detail": "tabbycat.adjfeedback.forms",
        "documentation": {}
    },
    {
        "label": "UpdateAdjudicatorScoresForm",
        "kind": 6,
        "importPath": "tabbycat.adjfeedback.forms",
        "description": "tabbycat.adjfeedback.forms",
        "peekOfCode": "class UpdateAdjudicatorScoresForm(forms.Form):\n    \"\"\"Form that takes in a CSV-style list of adjudicators with scores, and\n    saves the scores, overwriting existing ones. Unlike the other forms, this\n    isn't part of a wizard, it just saves directly.\"\"\"\n    scores_raw = forms.CharField(widget=forms.Textarea(attrs={'rows': 20}))\n    def __init__(self, tournament, *args, **kwargs):\n        self.tournament = tournament\n        return super().__init__(*args, **kwargs)\n    def clean_scores_raw(self):\n        lines = self.cleaned_data['scores_raw'].split('\\n')",
        "detail": "tabbycat.adjfeedback.forms",
        "documentation": {}
    },
    {
        "label": "make_feedback_form_class",
        "kind": 2,
        "importPath": "tabbycat.adjfeedback.forms",
        "description": "tabbycat.adjfeedback.forms",
        "peekOfCode": "def make_feedback_form_class(source, tournament, *args, **kwargs):\n    \"\"\"Constructs a FeedbackForm class specific to the given source.\n    'source' is the Adjudicator or Team who is giving feedback.\n    'submission_fields' is a dict of fields that is passed directly as keyword\n        arguments to Submission.\n    'confirm_on_submit' is a bool, and indicates that this feedback should be\n        as confirmed and all others discarded.\"\"\"\n    if isinstance(source, Adjudicator):\n        return make_feedback_form_class_for_adj(source, tournament, *args, **kwargs)\n    elif isinstance(source, Speaker):",
        "detail": "tabbycat.adjfeedback.forms",
        "documentation": {}
    },
    {
        "label": "make_feedback_form_class_for_adj",
        "kind": 2,
        "importPath": "tabbycat.adjfeedback.forms",
        "description": "tabbycat.adjfeedback.forms",
        "peekOfCode": "def make_feedback_form_class_for_adj(source, tournament, submission_fields, confirm_on_submit=False,\n                                     enforce_required=True, include_unreleased_draws=False,\n                                     use_tournament_password=False, ignored_option=False):\n    \"\"\"Constructs a FeedbackForm class specific to the given source adjudicator.\n    Parameters are as for make_feedback_form_class.\"\"\"\n    def adj_choice(adj, debate, pos):\n        value = '%d-%d' % (debate.id, adj.id)\n        # Translators: e.g. \"Megan Pearson (chair)\", with adjpos=\"chair\"\n        display = _(\"Submitted - \") if adj.submitted else \"\"\n        display += _(\"%(name)s (%(adjpos)s)\") % {'name': adj.get_public_name(tournament), 'adjpos': ADJUDICATOR_POSITION_NAMES[pos]}",
        "detail": "tabbycat.adjfeedback.forms",
        "documentation": {}
    },
    {
        "label": "make_feedback_form_class_for_team",
        "kind": 2,
        "importPath": "tabbycat.adjfeedback.forms",
        "description": "tabbycat.adjfeedback.forms",
        "peekOfCode": "def make_feedback_form_class_for_team(source, tournament, submission_fields, confirm_on_submit=False,\n                                      enforce_required=True, include_unreleased_draws=False,\n                                      use_tournament_password=False, ignored_option=False):\n    \"\"\"Constructs a FeedbackForm class specific to the given source team.\n    Parameters are as for make_feedback_form_class.\"\"\"\n    def adj_choice(adj, debate, pos):\n        value = '%d-%d' % (debate.id, adj.id)\n        display = _(\"Submitted - \") if adj.submitted else \"\"\n        if pos == AdjudicatorAllocation.POSITION_ONLY:\n            display += _(\"%(name)s\")",
        "detail": "tabbycat.adjfeedback.forms",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "tabbycat.adjfeedback.forms",
        "description": "tabbycat.adjfeedback.forms",
        "peekOfCode": "logger = logging.getLogger(__name__)\nADJUDICATOR_POSITION_NAMES = {\n    AdjudicatorAllocation.POSITION_CHAIR: gettext_lazy(\"chair\"),\n    AdjudicatorAllocation.POSITION_ONLY: gettext_lazy(\"solo\"),\n    AdjudicatorAllocation.POSITION_PANELLIST: gettext_lazy(\"panellist\"),\n    AdjudicatorAllocation.POSITION_TRAINEE: gettext_lazy(\"trainee\"),\n}\n# ==============================================================================\n# General, but only used here\n# ==============================================================================",
        "detail": "tabbycat.adjfeedback.forms",
        "documentation": {}
    },
    {
        "label": "ADJUDICATOR_POSITION_NAMES",
        "kind": 5,
        "importPath": "tabbycat.adjfeedback.forms",
        "description": "tabbycat.adjfeedback.forms",
        "peekOfCode": "ADJUDICATOR_POSITION_NAMES = {\n    AdjudicatorAllocation.POSITION_CHAIR: gettext_lazy(\"chair\"),\n    AdjudicatorAllocation.POSITION_ONLY: gettext_lazy(\"solo\"),\n    AdjudicatorAllocation.POSITION_PANELLIST: gettext_lazy(\"panellist\"),\n    AdjudicatorAllocation.POSITION_TRAINEE: gettext_lazy(\"trainee\"),\n}\n# ==============================================================================\n# General, but only used here\n# ==============================================================================\nclass SpacedRadioWidget(forms.RadioSelect):",
        "detail": "tabbycat.adjfeedback.forms",
        "documentation": {}
    },
    {
        "label": "AdjudicatorBaseScoreHistory",
        "kind": 6,
        "importPath": "tabbycat.adjfeedback.models",
        "description": "tabbycat.adjfeedback.models",
        "peekOfCode": "class AdjudicatorBaseScoreHistory(models.Model):\n    adjudicator = models.ForeignKey('participants.Adjudicator', models.CASCADE,\n        verbose_name=_(\"adjudicator\"))\n    # cascade to avoid ambiguity, null round indicates beginning of tournament\n    round = models.ForeignKey('tournaments.Round', models.CASCADE, blank=True, null=True,\n        verbose_name=_(\"round\"))\n    score = models.FloatField(verbose_name=_(\"score\"))\n    timestamp = models.DateTimeField(auto_now_add=True, verbose_name=_(\"timestamp\"))\n    class Meta:\n        verbose_name = _(\"adjudicator base score history\")",
        "detail": "tabbycat.adjfeedback.models",
        "documentation": {}
    },
    {
        "label": "AdjudicatorFeedbackAnswer",
        "kind": 6,
        "importPath": "tabbycat.adjfeedback.models",
        "description": "tabbycat.adjfeedback.models",
        "peekOfCode": "class AdjudicatorFeedbackAnswer(models.Model):\n    question = models.ForeignKey('AdjudicatorFeedbackQuestion', models.CASCADE,\n        verbose_name=_(\"question\"))\n    feedback = models.ForeignKey('AdjudicatorFeedback', models.CASCADE,\n        verbose_name=_(\"feedback\"))\n    class Meta:\n        abstract = True\n        constraints = [UniqueConstraint(fields=['question', 'feedback'])]\nclass AdjudicatorFeedbackBooleanAnswer(AdjudicatorFeedbackAnswer):\n    ANSWER_TYPE = bool",
        "detail": "tabbycat.adjfeedback.models",
        "documentation": {}
    },
    {
        "label": "AdjudicatorFeedbackBooleanAnswer",
        "kind": 6,
        "importPath": "tabbycat.adjfeedback.models",
        "description": "tabbycat.adjfeedback.models",
        "peekOfCode": "class AdjudicatorFeedbackBooleanAnswer(AdjudicatorFeedbackAnswer):\n    ANSWER_TYPE = bool\n    # Note: by convention, if no answer is chosen for a boolean answer, an\n    # instance of this object should not be created. This way, there is no need\n    # for a NullBooleanField.\n    answer = models.BooleanField(verbose_name=_(\"answer\"))\n    class Meta(AdjudicatorFeedbackAnswer.Meta):\n        verbose_name = _(\"adjudicator feedback boolean answer\")\n        verbose_name_plural = _(\"adjudicator feedback boolean answers\")\nclass AdjudicatorFeedbackIntegerAnswer(AdjudicatorFeedbackAnswer):",
        "detail": "tabbycat.adjfeedback.models",
        "documentation": {}
    },
    {
        "label": "AdjudicatorFeedbackIntegerAnswer",
        "kind": 6,
        "importPath": "tabbycat.adjfeedback.models",
        "description": "tabbycat.adjfeedback.models",
        "peekOfCode": "class AdjudicatorFeedbackIntegerAnswer(AdjudicatorFeedbackAnswer):\n    ANSWER_TYPE = int\n    answer = models.IntegerField(verbose_name=_(\"answer\"))\n    class Meta(AdjudicatorFeedbackAnswer.Meta):\n        verbose_name = _(\"adjudicator feedback integer answer\")\n        verbose_name_plural = _(\"adjudicator feedback integer answers\")\nclass AdjudicatorFeedbackFloatAnswer(AdjudicatorFeedbackAnswer):\n    ANSWER_TYPE = float\n    answer = models.FloatField(verbose_name=_(\"answer\"))\n    class Meta(AdjudicatorFeedbackAnswer.Meta):",
        "detail": "tabbycat.adjfeedback.models",
        "documentation": {}
    },
    {
        "label": "AdjudicatorFeedbackFloatAnswer",
        "kind": 6,
        "importPath": "tabbycat.adjfeedback.models",
        "description": "tabbycat.adjfeedback.models",
        "peekOfCode": "class AdjudicatorFeedbackFloatAnswer(AdjudicatorFeedbackAnswer):\n    ANSWER_TYPE = float\n    answer = models.FloatField(verbose_name=_(\"answer\"))\n    class Meta(AdjudicatorFeedbackAnswer.Meta):\n        verbose_name = _(\"adjudicator feedback float answer\")\n        verbose_name_plural = _(\"adjudicator feedback float answers\")\nclass AdjudicatorFeedbackStringAnswer(AdjudicatorFeedbackAnswer):\n    ANSWER_TYPE = str\n    answer = models.TextField(verbose_name=_(\"answer\"))\n    class Meta(AdjudicatorFeedbackAnswer.Meta):",
        "detail": "tabbycat.adjfeedback.models",
        "documentation": {}
    },
    {
        "label": "AdjudicatorFeedbackStringAnswer",
        "kind": 6,
        "importPath": "tabbycat.adjfeedback.models",
        "description": "tabbycat.adjfeedback.models",
        "peekOfCode": "class AdjudicatorFeedbackStringAnswer(AdjudicatorFeedbackAnswer):\n    ANSWER_TYPE = str\n    answer = models.TextField(verbose_name=_(\"answer\"))\n    class Meta(AdjudicatorFeedbackAnswer.Meta):\n        verbose_name = _(\"adjudicator feedback string answer\")\n        verbose_name_plural = _(\"adjudicator feedback string answers\")\nclass AdjudicatorFeedbackManyAnswer(AdjudicatorFeedbackAnswer):\n    ANSWER_TYPE = list\n    answer = ArrayField(base_field=models.TextField())\n    class Meta(AdjudicatorFeedbackAnswer.Meta):",
        "detail": "tabbycat.adjfeedback.models",
        "documentation": {}
    },
    {
        "label": "AdjudicatorFeedbackManyAnswer",
        "kind": 6,
        "importPath": "tabbycat.adjfeedback.models",
        "description": "tabbycat.adjfeedback.models",
        "peekOfCode": "class AdjudicatorFeedbackManyAnswer(AdjudicatorFeedbackAnswer):\n    ANSWER_TYPE = list\n    answer = ArrayField(base_field=models.TextField())\n    class Meta(AdjudicatorFeedbackAnswer.Meta):\n        verbose_name = _(\"adjudicator feedback multiple select answer\")\n        verbose_name_plural = _(\"adjudicator feedback multiple select answers\")\nclass AdjudicatorFeedbackQuestion(models.Model):\n    # When adding or changing an answer type, here are the other places you need\n    # to edit:\n    #   - forms.py : BaseFeedbackForm._make_question_field()",
        "detail": "tabbycat.adjfeedback.models",
        "documentation": {}
    },
    {
        "label": "AdjudicatorFeedbackQuestion",
        "kind": 6,
        "importPath": "tabbycat.adjfeedback.models",
        "description": "tabbycat.adjfeedback.models",
        "peekOfCode": "class AdjudicatorFeedbackQuestion(models.Model):\n    # When adding or changing an answer type, here are the other places you need\n    # to edit:\n    #   - forms.py : BaseFeedbackForm._make_question_field()\n    #   - importer/importers/anorak.py : AnorakTournamentDataImporter.FEEDBACK_ANSWER_TYPES\n    ANSWER_TYPE_BOOLEAN_CHECKBOX = 'bc'\n    ANSWER_TYPE_BOOLEAN_SELECT = 'bs'\n    ANSWER_TYPE_INTEGER_TEXTBOX = 'i'\n    ANSWER_TYPE_INTEGER_SCALE = 'is'\n    ANSWER_TYPE_FLOAT = 'f'",
        "detail": "tabbycat.adjfeedback.models",
        "documentation": {}
    },
    {
        "label": "AdjudicatorFeedback",
        "kind": 6,
        "importPath": "tabbycat.adjfeedback.models",
        "description": "tabbycat.adjfeedback.models",
        "peekOfCode": "class AdjudicatorFeedback(Submission):\n    adjudicator = models.ForeignKey('participants.Adjudicator', models.CASCADE, db_index=True,\n        verbose_name=_(\"adjudicator\"))\n    score = models.FloatField(verbose_name=_(\"score\"))\n    # cascade to avoid double-null sources, each feedback must have exactly one source\n    source_adjudicator = models.ForeignKey('adjallocation.DebateAdjudicator', models.CASCADE, blank=True, null=True,\n        verbose_name=_(\"source adjudicator\"))\n    source_team = models.ForeignKey('draw.DebateTeam', models.CASCADE, blank=True, null=True,\n        verbose_name=_(\"source team\"))\n    ignored = models.BooleanField(default=False,",
        "detail": "tabbycat.adjfeedback.models",
        "documentation": {}
    },
    {
        "label": "populate_debate_adjudicators",
        "kind": 2,
        "importPath": "tabbycat.adjfeedback.prefetch",
        "description": "tabbycat.adjfeedback.prefetch",
        "peekOfCode": "def populate_debate_adjudicators(feedbacks):\n    adjudicators = [feedback.adjudicator for feedback in feedbacks]\n    debates = [feedback.debate for feedback in feedbacks]\n    debateadjs = DebateAdjudicator.objects.filter(adjudicator__in=adjudicators, debate__in=debates)\n    debateadjs_by_ids = {(da.adjudicator_id, da.debate_id): da for da in debateadjs}\n    for feedback in feedbacks:\n        try:\n            feedback._debateadj = debateadjs_by_ids[(feedback.adjudicator_id, feedback.debate.id)]\n        except KeyError:\n            # This occurs when the matching debate adjudicator for this feedback no longer exists",
        "detail": "tabbycat.adjfeedback.prefetch",
        "documentation": {}
    },
    {
        "label": "BaseFeedbackExpectedSubmissionTracker",
        "kind": 6,
        "importPath": "tabbycat.adjfeedback.progress",
        "description": "tabbycat.adjfeedback.progress",
        "peekOfCode": "class BaseFeedbackExpectedSubmissionTracker:\n    \"\"\"Represents a single piece of expected feedback.\"\"\"\n    expected = True\n    def __init__(self, source):\n        self.source = source  # either a DebateTeam or a DebateAdjudicator\n    @property\n    def round(self):\n        return self.source.debate.round\n    @property\n    def count(self):",
        "detail": "tabbycat.adjfeedback.progress",
        "documentation": {}
    },
    {
        "label": "FeedbackExpectedSubmissionFromTeamTracker",
        "kind": 6,
        "importPath": "tabbycat.adjfeedback.progress",
        "description": "tabbycat.adjfeedback.progress",
        "peekOfCode": "class FeedbackExpectedSubmissionFromTeamTracker(BaseFeedbackExpectedSubmissionTracker):\n    \"\"\"Represents a single piece of expected feedback from a team on any valid\n    adjudicator in a panel.\"\"\"\n    def __init__(self, source, enforce_orallist=True):\n        self.enforce_orallist = enforce_orallist\n        return super().__init__(source)\n    def acceptable_targets(self):\n        \"\"\"For a team, this must be the adjudicator who delivered the oral\n        adjudication. If the chair was rolled, then it is one of the majority\n        adjudicators; if the chair was in the majority, then it must be the",
        "detail": "tabbycat.adjfeedback.progress",
        "documentation": {}
    },
    {
        "label": "FeedbackExpectedSubmissionFromTeamOnSingleAdjudicatorTracker",
        "kind": 6,
        "importPath": "tabbycat.adjfeedback.progress",
        "description": "tabbycat.adjfeedback.progress",
        "peekOfCode": "class FeedbackExpectedSubmissionFromTeamOnSingleAdjudicatorTracker(BaseFeedbackExpectedSubmissionTracker):\n    \"\"\"Represents a single piece of expected feedback from a team on a single\n    adjudicator.\"\"\"\n    def __init__(self, source, target=None):\n        self.target = target\n        return super().__init__(source)\n    def acceptable_targets(self):\n        return [self.target]\n    def get_acceptable_submissions(self):\n        return self.source.adjudicatorfeedback_set.filter(confirmed=True,",
        "detail": "tabbycat.adjfeedback.progress",
        "documentation": {}
    },
    {
        "label": "FeedbackExpectedSubmissionFromAdjudicatorTracker",
        "kind": 6,
        "importPath": "tabbycat.adjfeedback.progress",
        "description": "tabbycat.adjfeedback.progress",
        "peekOfCode": "class FeedbackExpectedSubmissionFromAdjudicatorTracker(BaseFeedbackExpectedSubmissionTracker):\n    \"\"\"Represents a single piece of expected feedback from an adjudicator.\"\"\"\n    def __init__(self, source, target):\n        self.target = target\n        return super().__init__(source)\n    def acceptable_targets(self):\n        return [self.target]\n    def get_acceptable_submissions(self):\n        return self.source.adjudicatorfeedback_set.filter(confirmed=True,\n                source_adjudicator=self.source, adjudicator=self.target).select_related(",
        "detail": "tabbycat.adjfeedback.progress",
        "documentation": {}
    },
    {
        "label": "FeedbackUnexpectedSubmissionTracker",
        "kind": 6,
        "importPath": "tabbycat.adjfeedback.progress",
        "description": "tabbycat.adjfeedback.progress",
        "peekOfCode": "class FeedbackUnexpectedSubmissionTracker:\n    \"\"\"Represents a single piece of unexpected feedback.\"\"\"\n    expected = False\n    fulfilled = False\n    def __init__(self, feedback):\n        self.feedback = feedback  # an AdjudicatorFeedback instance\n    @property\n    def round(self):\n        return self.feedback.round\n    @property",
        "detail": "tabbycat.adjfeedback.progress",
        "documentation": {}
    },
    {
        "label": "BaseFeedbackProgress",
        "kind": 6,
        "importPath": "tabbycat.adjfeedback.progress",
        "description": "tabbycat.adjfeedback.progress",
        "peekOfCode": "class BaseFeedbackProgress:\n    \"\"\"Class to compute feedback submitted or owed by a participant.\n    Rather than just counting and comparing aggregates, everything is compared\n    at the individual feedback level using objects called \"trackers\". This\n    ensures that feedbacks that were actually submitted match those that were\n    expected.\"\"\"\n    def __init__(self, tournament):\n        self.show_unexpected = tournament.pref('show_unexpected_feedback')\n    def get_expected_trackers(self):\n        raise NotImplementedError",
        "detail": "tabbycat.adjfeedback.progress",
        "documentation": {}
    },
    {
        "label": "FeedbackProgressForTeam",
        "kind": 6,
        "importPath": "tabbycat.adjfeedback.progress",
        "description": "tabbycat.adjfeedback.progress",
        "peekOfCode": "class FeedbackProgressForTeam(BaseFeedbackProgress):\n    \"\"\"Class to compute feedback submitted or owed by a team.\"\"\"\n    def __init__(self, team, tournament=None):\n        self.team = team\n        if tournament is None:\n            tournament = team.tournament\n        self.enforce_orallist = (tournament.pref(\"show_splitting_adjudicators\") and\n                                 tournament.pref(\"ballots_per_debate_prelim\") == 'per-adj')\n        self.expect_orallists = tournament.pref(\"feedback_from_teams\") in ['orallist', 'all-adjs']\n        self.expect_all_adjs = tournament.pref(\"feedback_from_teams\") == 'all-adjs'",
        "detail": "tabbycat.adjfeedback.progress",
        "documentation": {}
    },
    {
        "label": "FeedbackProgressForAdjudicator",
        "kind": 6,
        "importPath": "tabbycat.adjfeedback.progress",
        "description": "tabbycat.adjfeedback.progress",
        "peekOfCode": "class FeedbackProgressForAdjudicator(BaseFeedbackProgress):\n    \"\"\"Class to compute feedback submitted or owed by an adjudicator.\"\"\"\n    def __init__(self, adjudicator, tournament=None):\n        self.adjudicator = adjudicator\n        if tournament is None:\n            tournament = adjudicator.tournament\n        if tournament is None:\n            logger.warning(\"No tournament specified and adjudicator %s has no tournament\", adjudicator)\n        else:\n            self.feedback_paths = tournament.pref('feedback_paths')",
        "detail": "tabbycat.adjfeedback.progress",
        "documentation": {}
    },
    {
        "label": "get_feedback_progress",
        "kind": 2,
        "importPath": "tabbycat.adjfeedback.progress",
        "description": "tabbycat.adjfeedback.progress",
        "peekOfCode": "def get_feedback_progress(tournament):\n    \"\"\"Returns a list of FeedbackProgressForTeam objects and a list of\n    FeedbackProgressForAdjudicator objects.\n    This function pre-populates the FeedbackProgress objects to avoid needing\n    duplicate SQL queries for every team and adjudicator, so it should be used\n    for performance when the feedback progress of all teams and adjudicators is\n    needed.\"\"\"\n    teams_progress = []\n    adjs_progress = []\n    teams = tournament.team_set.prefetch_related('speaker_set').all()",
        "detail": "tabbycat.adjfeedback.progress",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "tabbycat.adjfeedback.progress",
        "description": "tabbycat.adjfeedback.progress",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass BaseFeedbackExpectedSubmissionTracker:\n    \"\"\"Represents a single piece of expected feedback.\"\"\"\n    expected = True\n    def __init__(self, source):\n        self.source = source  # either a DebateTeam or a DebateAdjudicator\n    @property\n    def round(self):\n        return self.source.debate.round\n    @property",
        "detail": "tabbycat.adjfeedback.progress",
        "documentation": {}
    },
    {
        "label": "FeedbackTableBuilder",
        "kind": 6,
        "importPath": "tabbycat.adjfeedback.tables",
        "description": "tabbycat.adjfeedback.tables",
        "peekOfCode": "class FeedbackTableBuilder(TabbycatTableBuilder):\n    def add_breaking_checkbox(self, adjudicators, key=\"Breaking\"):\n        breaking_header = {\n            'key': 'breaking',\n            'icon': 'award',\n            'tooltip': _(\"Whether the adj is marked as breaking (click to mark)\"),\n        }\n        breaking_data = [{\n            'component': 'check-cell',\n            'checked':  adj.breaking ,",
        "detail": "tabbycat.adjfeedback.tables",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "tabbycat.adjfeedback.tables",
        "description": "tabbycat.adjfeedback.tables",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass FeedbackTableBuilder(TabbycatTableBuilder):\n    def add_breaking_checkbox(self, adjudicators, key=\"Breaking\"):\n        breaking_header = {\n            'key': 'breaking',\n            'icon': 'award',\n            'tooltip': _(\"Whether the adj is marked as breaking (click to mark)\"),\n        }\n        breaking_data = [{\n            'component': 'check-cell',",
        "detail": "tabbycat.adjfeedback.tables",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "tabbycat.adjfeedback.urls_admin",
        "description": "tabbycat.adjfeedback.urls_admin",
        "peekOfCode": "urlpatterns = [\n    # Overviews\n    path('',\n        views.FeedbackOverview.as_view(),\n        name='adjfeedback-overview'),\n    path('progress/',\n        views.FeedbackProgress.as_view(),\n        name='adjfeedback-progress'),\n    # Getting/setting values\n    path('test/set/',",
        "detail": "tabbycat.adjfeedback.urls_admin",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "tabbycat.adjfeedback.urls_assistant",
        "description": "tabbycat.adjfeedback.urls_assistant",
        "peekOfCode": "urlpatterns = [\n    path('add/',\n        views.AssistantAddFeedbackIndexView.as_view(),\n        name='adjfeedback-assistant-add-index'),\n    path('add/team/<int:source_id>/',\n        views.AssistantAddFeedbackView.as_view(model=Team),\n        name='adjfeedback-assistant-add-from-team'),\n    path('add/adjudicator/<int:source_id>/',\n        views.AssistantAddFeedbackView.as_view(model=Adjudicator),\n        name='adjfeedback-assistant-add-from-adjudicator'),",
        "detail": "tabbycat.adjfeedback.urls_assistant",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "tabbycat.adjfeedback.urls_public",
        "description": "tabbycat.adjfeedback.urls_public",
        "peekOfCode": "urlpatterns = [\n    # Overviews\n    path('progress/',\n        views.PublicFeedbackProgress.as_view(),\n        name='public_feedback_progress'),\n    # Submission via Public Form\n    path('add/',\n        views.PublicAddFeedbackIndexView.as_view(),\n        name='adjfeedback-public-add-index'),\n    path('add/team/<int:source_id>/',",
        "detail": "tabbycat.adjfeedback.urls_public",
        "documentation": {}
    },
    {
        "label": "expected_feedback_targets",
        "kind": 2,
        "importPath": "tabbycat.adjfeedback.utils",
        "description": "tabbycat.adjfeedback.utils",
        "peekOfCode": "def expected_feedback_targets(debateadj, feedback_paths=None, debate=None):\n    \"\"\"Returns a list of adjudicators and positions (adj, pos), each being\n    someone that the given DebateAdjudicator object is expected to give feedback\n    on. If the debate adjudicator's position and the tournament preferences\n    dictate that the source adjudicator should not submit feedback on anyone for\n    this debate, then it returns an empty list.\n    Each element of the returned list is a 2-tuple `(adj, pos)`, where `adj` is\n    an Adjudicator instance and `pos` is an AdjudicatorAllocation.POSITION_*\n    constant. DebateAdjudicator instances are not returned by this function; in\n    fact, the use of DebateAdjudicator instances for feedback targets is in",
        "detail": "tabbycat.adjfeedback.utils",
        "documentation": {}
    },
    {
        "label": "get_feedback_overview",
        "kind": 2,
        "importPath": "tabbycat.adjfeedback.utils",
        "description": "tabbycat.adjfeedback.utils",
        "peekOfCode": "def get_feedback_overview(t, adjudicators):\n    \"\"\"Collates feedback statistics for the feedback overview.\"\"\"\n    rounds = list(t.prelim_rounds(until=t.current_round))  # force to list for performance in next querysets\n    annotated_adjs = adjudicators.filter(id__in=[adj.id for adj in adjudicators]).prefetch_related(\n        Prefetch('adjudicatorfeedback_set', to_attr='adjfeedback_for_rounds',\n            queryset=AdjudicatorFeedback.objects.filter(\n                Q(source_adjudicator__debate__round__in=rounds) | Q(source_team__debate__round__in=rounds),\n                confirmed=True,\n                ignored=False,\n            ).exclude(",
        "detail": "tabbycat.adjfeedback.utils",
        "documentation": {}
    },
    {
        "label": "feedback_variance",
        "kind": 2,
        "importPath": "tabbycat.adjfeedback.utils",
        "description": "tabbycat.adjfeedback.utils",
        "peekOfCode": "def feedback_variance(adj, rounds):\n    feedback_scores = [fb.score for fb in adj.adjfeedback_for_rounds]\n    feedback_scores.append(adj.base_score)\n    if len(feedback_scores) > 1:\n        return stdev(feedback_scores)\n    else:\n        return None\ndef feedback_stats(adj, rounds):\n    \"\"\"Collates the feedback statistics for an adjudicator. Assumes\n    adj.adjfeedback_for_rounds and adj.debateadj_for_rounds are populated as in",
        "detail": "tabbycat.adjfeedback.utils",
        "documentation": {}
    },
    {
        "label": "feedback_stats",
        "kind": 2,
        "importPath": "tabbycat.adjfeedback.utils",
        "description": "tabbycat.adjfeedback.utils",
        "peekOfCode": "def feedback_stats(adj, rounds):\n    \"\"\"Collates the feedback statistics for an adjudicator. Assumes\n    adj.adjfeedback_for_rounds and adj.debateadj_for_rounds are populated as in\n    get_feedback_overview().\"\"\"\n    adj_classes = {  # Do not translate\n        DebateAdjudicator.TYPE_CHAIR: \"chair\",\n        DebateAdjudicator.TYPE_PANEL: \"panellist\",\n        DebateAdjudicator.TYPE_TRAINEE: \"trainee\",\n    }\n    # Start with base score",
        "detail": "tabbycat.adjfeedback.utils",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "tabbycat.adjfeedback.utils",
        "description": "tabbycat.adjfeedback.utils",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef expected_feedback_targets(debateadj, feedback_paths=None, debate=None):\n    \"\"\"Returns a list of adjudicators and positions (adj, pos), each being\n    someone that the given DebateAdjudicator object is expected to give feedback\n    on. If the debate adjudicator's position and the tournament preferences\n    dictate that the source adjudicator should not submit feedback on anyone for\n    this debate, then it returns an empty list.\n    Each element of the returned list is a 2-tuple `(adj, pos)`, where `adj` is\n    an Adjudicator instance and `pos` is an AdjudicatorAllocation.POSITION_*\n    constant. DebateAdjudicator instances are not returned by this function; in",
        "detail": "tabbycat.adjfeedback.utils",
        "documentation": {}
    },
    {
        "label": "BaseFeedbackOverview",
        "kind": 6,
        "importPath": "tabbycat.adjfeedback.views",
        "description": "tabbycat.adjfeedback.views",
        "peekOfCode": "class BaseFeedbackOverview(TournamentMixin, VueTableTemplateView):\n    \"\"\" Also inherited by the adjudicator's tab \"\"\"\n    def get_adjudicators(self):\n        if not hasattr(self, '_adjudicators'):\n            t = self.tournament\n            self._adjudicators = Adjudicator.objects.filter(tournament=t)\n            populate_feedback_scores(self._adjudicators)\n        return self._adjudicators\n    def get_context_data(self, **kwargs):\n        t = self.tournament",
        "detail": "tabbycat.adjfeedback.views",
        "documentation": {}
    },
    {
        "label": "FeedbackOverview",
        "kind": 6,
        "importPath": "tabbycat.adjfeedback.views",
        "description": "tabbycat.adjfeedback.views",
        "peekOfCode": "class FeedbackOverview(AdministratorMixin, BaseFeedbackOverview):\n    page_title = gettext_lazy(\"Feedback Overview\")\n    page_emoji = '🙅'\n    for_public = False\n    sort_key = 'score'\n    sort_order = 'desc'\n    template_name = 'feedback_overview.html'\n    view_permission = Permission.VIEW_FEEDBACK_OVERVIEW\n    def annotate_table(self, table, adjudicators):\n        feedback_weight = self.tournament.current_round.feedback_weight",
        "detail": "tabbycat.adjfeedback.views",
        "documentation": {}
    },
    {
        "label": "FeedbackByTargetView",
        "kind": 6,
        "importPath": "tabbycat.adjfeedback.views",
        "description": "tabbycat.adjfeedback.views",
        "peekOfCode": "class FeedbackByTargetView(AdministratorMixin, TournamentMixin, VueTableTemplateView):\n    template_name = \"feedback_base.html\"\n    page_title = gettext_lazy(\"Find Feedback on Adjudicator\")\n    page_emoji = '🔍'\n    view_permission = Permission.VIEW_FEEDBACK\n    def get_table(self):\n        adjudicators = self.tournament.adjudicator_set.annotate(feedback_count=Count('adjudicatorfeedback'))\n        table = TabbycatTableBuilder(view=self, sort_key=\"name\")\n        table.add_adjudicator_columns(adjudicators)\n        feedback_data = []",
        "detail": "tabbycat.adjfeedback.views",
        "documentation": {}
    },
    {
        "label": "FeedbackBySourceView",
        "kind": 6,
        "importPath": "tabbycat.adjfeedback.views",
        "description": "tabbycat.adjfeedback.views",
        "peekOfCode": "class FeedbackBySourceView(AdministratorMixin, TournamentMixin, VueTableTemplateView):\n    template_name = \"feedback_base.html\"\n    page_title = gettext_lazy(\"Find Feedback\")\n    page_emoji = '🔍'\n    view_permission = Permission.VIEW_FEEDBACK\n    def get_tables(self):\n        tournament = self.tournament\n        teams = tournament.team_set.all().annotate(feedback_count=Count('debateteam__adjudicatorfeedback')).prefetch_related('speaker_set')\n        team_table = TabbycatTableBuilder(\n            view=self, title=_('From Teams'), sort_key='team')",
        "detail": "tabbycat.adjfeedback.views",
        "documentation": {}
    },
    {
        "label": "FeedbackMixin",
        "kind": 6,
        "importPath": "tabbycat.adjfeedback.views",
        "description": "tabbycat.adjfeedback.views",
        "peekOfCode": "class FeedbackMixin(TournamentMixin):\n    only_comments = False\n    def get_feedbacks(self):\n        feedbacks = self.get_feedback_queryset()\n        populate_debate_adjudicators(feedbacks)\n        populate_wins_for_debateteams([f.source_team for f in feedbacks if f.source_team is not None])\n        # Can't prefetch an abstract model effectively; so get all answers...\n        questions = list(self.tournament.adj_feedback_questions)\n        if self.only_comments:\n            long_text = AdjudicatorFeedbackQuestion.ANSWER_TYPE_LONGTEXT",
        "detail": "tabbycat.adjfeedback.views",
        "documentation": {}
    },
    {
        "label": "FeedbackCardsView",
        "kind": 6,
        "importPath": "tabbycat.adjfeedback.views",
        "description": "tabbycat.adjfeedback.views",
        "peekOfCode": "class FeedbackCardsView(FeedbackMixin, AdministratorMixin, TournamentMixin, TemplateView):\n    \"\"\"Base class for views displaying feedback as cards.\"\"\"\n    template_name = \"feedback_cards_list.html\"\n    view_permission = Permission.VIEW_FEEDBACK\n    def get_score_thresholds(self):\n        tournament = self.tournament\n        min_score = tournament.pref('adj_min_score')\n        max_score = tournament.pref('adj_max_score')\n        score_range = max_score - min_score\n        return {",
        "detail": "tabbycat.adjfeedback.views",
        "documentation": {}
    },
    {
        "label": "LatestFeedbackView",
        "kind": 6,
        "importPath": "tabbycat.adjfeedback.views",
        "description": "tabbycat.adjfeedback.views",
        "peekOfCode": "class LatestFeedbackView(FeedbackCardsView):\n    \"\"\"View displaying the latest feedback.\"\"\"\n    page_title = gettext_lazy(\"Latest Feedback\")\n    page_subtitle = gettext_lazy(\"(30 most recent)\")\n    page_emoji = '🕗'\n    def get_feedback_queryset(self):\n        queryset = super().get_feedback_queryset()\n        return queryset.order_by('-timestamp')[:30]\nclass CommentsFeedbackView(FeedbackCardsView):\n    \"\"\"View displaying the latest feedback.\"\"\"",
        "detail": "tabbycat.adjfeedback.views",
        "documentation": {}
    },
    {
        "label": "CommentsFeedbackView",
        "kind": 6,
        "importPath": "tabbycat.adjfeedback.views",
        "description": "tabbycat.adjfeedback.views",
        "peekOfCode": "class CommentsFeedbackView(FeedbackCardsView):\n    \"\"\"View displaying the latest feedback.\"\"\"\n    page_title = gettext_lazy(\"Only Comments\")\n    page_subtitle = gettext_lazy(\"(250 most recent)\")\n    page_emoji = '💬'\n    only_comments = True\n    def get_feedback_queryset(self):\n        queryset = super().get_feedback_queryset()\n        return queryset.order_by('-timestamp')[:250]\nclass ImportantFeedbackView(FeedbackCardsView):",
        "detail": "tabbycat.adjfeedback.views",
        "documentation": {}
    },
    {
        "label": "ImportantFeedbackView",
        "kind": 6,
        "importPath": "tabbycat.adjfeedback.views",
        "description": "tabbycat.adjfeedback.views",
        "peekOfCode": "class ImportantFeedbackView(FeedbackCardsView):\n    \"\"\"View displaying the feedback in order of most 'important'.\"\"\"\n    page_title = gettext_lazy(\"Important Feedback\")\n    page_subtitle = gettext_lazy(\"(rating was much higher/lower than expected)\")\n    page_emoji = '⁉️'\n    def get_feedback_queryset(self):\n        queryset = super().get_feedback_queryset()\n        return queryset.annotate(\n            feedback_importance=F('score') - F('adjudicator__base_score'),\n        ).filter(",
        "detail": "tabbycat.adjfeedback.views",
        "documentation": {}
    },
    {
        "label": "FeedbackFromSourceView",
        "kind": 6,
        "importPath": "tabbycat.adjfeedback.views",
        "description": "tabbycat.adjfeedback.views",
        "peekOfCode": "class FeedbackFromSourceView(SingleObjectFromTournamentMixin, FeedbackCardsView):\n    \"\"\"Base class for views displaying feedback from a given team or adjudicator.\"\"\"\n    template_name = \"feedback_by_source.html\"\n    source_name_attr = None\n    source_type = \"from\"\n    adjfeedback_filter_field = None\n    def get_context_data(self, **kwargs):\n        kwargs['source_name'] = getattr(self.object, self.source_name_attr, '<ERROR>')\n        kwargs['source_type'] = self.source_type\n        return super().get_context_data(**kwargs)",
        "detail": "tabbycat.adjfeedback.views",
        "documentation": {}
    },
    {
        "label": "FeedbackOnAdjudicatorView",
        "kind": 6,
        "importPath": "tabbycat.adjfeedback.views",
        "description": "tabbycat.adjfeedback.views",
        "peekOfCode": "class FeedbackOnAdjudicatorView(FeedbackFromSourceView):\n    \"\"\"Base class for views displaying feedback from a given team or adjudicator.\"\"\"\n    model = Adjudicator\n    source_name_attr = 'name'\n    source_type = \"on\"\n    adjfeedback_filter_field = 'adjudicator'\n    allow_null_tournament = True\nclass FeedbackFromTeamView(FeedbackFromSourceView):\n    \"\"\"View displaying feedback from a given source.\"\"\"\n    model = Team",
        "detail": "tabbycat.adjfeedback.views",
        "documentation": {}
    },
    {
        "label": "FeedbackFromTeamView",
        "kind": 6,
        "importPath": "tabbycat.adjfeedback.views",
        "description": "tabbycat.adjfeedback.views",
        "peekOfCode": "class FeedbackFromTeamView(FeedbackFromSourceView):\n    \"\"\"View displaying feedback from a given source.\"\"\"\n    model = Team\n    source_name_attr = 'short_name'\n    adjfeedback_filter_field = 'source_team__team'\n    allow_null_tournament = False\nclass FeedbackFromAdjudicatorView(FeedbackFromSourceView):\n    \"\"\"View displaying feedback from a given adjudicator.\"\"\"\n    model = Adjudicator\n    source_name_attr = 'name'",
        "detail": "tabbycat.adjfeedback.views",
        "documentation": {}
    },
    {
        "label": "FeedbackFromAdjudicatorView",
        "kind": 6,
        "importPath": "tabbycat.adjfeedback.views",
        "description": "tabbycat.adjfeedback.views",
        "peekOfCode": "class FeedbackFromAdjudicatorView(FeedbackFromSourceView):\n    \"\"\"View displaying feedback from a given adjudicator.\"\"\"\n    model = Adjudicator\n    source_name_attr = 'name'\n    adjfeedback_filter_field = 'source_adjudicator__adjudicator'\n    allow_null_tournament = True\nclass BaseAddFeedbackIndexView(TournamentMixin, VueTableTemplateView):\n    def get_tables(self):\n        tournament = self.tournament\n        use_code_names = use_team_code_names_data_entry(self.tournament, self.tabroom)",
        "detail": "tabbycat.adjfeedback.views",
        "documentation": {}
    },
    {
        "label": "BaseAddFeedbackIndexView",
        "kind": 6,
        "importPath": "tabbycat.adjfeedback.views",
        "description": "tabbycat.adjfeedback.views",
        "peekOfCode": "class BaseAddFeedbackIndexView(TournamentMixin, VueTableTemplateView):\n    def get_tables(self):\n        tournament = self.tournament\n        use_code_names = use_team_code_names_data_entry(self.tournament, self.tabroom)\n        teams_table = TabbycatTableBuilder(view=self, sort_key=\"team\", title=_(\"A Team\"))\n        add_link_data = [{\n            'text': conditional_escape(team_name_for_data_entry(team, use_code_names)),\n            'link': self.get_from_team_link(team),\n        } for team in tournament.team_set.all()]\n        header = {'key': 'team', 'title': _(\"Team\")}",
        "detail": "tabbycat.adjfeedback.views",
        "documentation": {}
    },
    {
        "label": "AdminAddFeedbackIndexView",
        "kind": 6,
        "importPath": "tabbycat.adjfeedback.views",
        "description": "tabbycat.adjfeedback.views",
        "peekOfCode": "class AdminAddFeedbackIndexView(AdministratorMixin, BaseAddFeedbackIndexView):\n    \"\"\"View for the index page for administrators to add feedback. The index\n    page lists all possible sources; officials should then choose the author\n    of the feedback.\"\"\"\n    template_name = 'add_feedback.html'\n    tabroom = True\n    view_permission = Permission.ADD_FEEDBACK\n    def get_from_adj_link(self, adj):\n        return reverse_tournament('adjfeedback-add-from-adjudicator',\n                self.tournament, kwargs={'source_id': adj.id})",
        "detail": "tabbycat.adjfeedback.views",
        "documentation": {}
    },
    {
        "label": "AssistantAddFeedbackIndexView",
        "kind": 6,
        "importPath": "tabbycat.adjfeedback.views",
        "description": "tabbycat.adjfeedback.views",
        "peekOfCode": "class AssistantAddFeedbackIndexView(AssistantMixin, BaseAddFeedbackIndexView):\n    \"\"\"As for AdminAddFeedbackIndexView, but for assistants.\"\"\"\n    template_name = 'assistant_add_feedback.html'\n    tabroom = True\n    def get_from_adj_link(self, adj):\n        return reverse_tournament('adjfeedback-assistant-add-from-adjudicator',\n                self.tournament, kwargs={'source_id': adj.id})\n    def get_from_team_link(self, team):\n        return reverse_tournament('adjfeedback-assistant-add-from-team',\n                self.tournament, kwargs={'source_id': team.id})",
        "detail": "tabbycat.adjfeedback.views",
        "documentation": {}
    },
    {
        "label": "PublicAddFeedbackIndexView",
        "kind": 6,
        "importPath": "tabbycat.adjfeedback.views",
        "description": "tabbycat.adjfeedback.views",
        "peekOfCode": "class PublicAddFeedbackIndexView(PublicTournamentPageMixin, BaseAddFeedbackIndexView):\n    \"\"\"View for the index page for public users to add feedback. The index page\n    lists all possible sources; public users should then choose themselves.\"\"\"\n    template_name = 'public_add_feedback.html'\n    tabroom = False\n    def is_page_enabled(self, tournament):\n        return tournament.pref('participant_feedback') == 'public'\n    def get_from_adj_link(self, team):\n        return reverse_tournament('adjfeedback-public-add-from-adjudicator-pk',\n                self.tournament, kwargs={'source_id': team.id})",
        "detail": "tabbycat.adjfeedback.views",
        "documentation": {}
    },
    {
        "label": "BaseAddFeedbackView",
        "kind": 6,
        "importPath": "tabbycat.adjfeedback.views",
        "description": "tabbycat.adjfeedback.views",
        "peekOfCode": "class BaseAddFeedbackView(LogActionMixin, SingleObjectFromTournamentMixin, FormView):\n    \"\"\"Base class for views that allow users to add feedback.\"\"\"\n    template_name = \"enter_feedback.html\"\n    pk_url_kwarg = 'source_id'\n    allow_null_tournament = True\n    action_log_content_object_attr = 'adj_feedback'\n    def get_form_class(self):\n        return make_feedback_form_class(self.object, self.tournament,\n                self.get_submitter_fields(), **self.feedback_form_class_kwargs)\n    def form_valid(self, form):",
        "detail": "tabbycat.adjfeedback.views",
        "documentation": {}
    },
    {
        "label": "BaseTabroomAddFeedbackView",
        "kind": 6,
        "importPath": "tabbycat.adjfeedback.views",
        "description": "tabbycat.adjfeedback.views",
        "peekOfCode": "class BaseTabroomAddFeedbackView(TabroomSubmissionFieldsMixin, BaseAddFeedbackView):\n    \"\"\"View for tabroom officials to add feedback.\"\"\"\n    action_log_type = ActionLogEntry.ActionType.FEEDBACK_SAVE\n    feedback_form_class_kwargs = {\n        'confirm_on_submit': True,\n        'enforce_required': False,\n        'include_unreleased_draws': True,\n        'use_tournament_password': False,\n        'ignored_option': True,\n    }",
        "detail": "tabbycat.adjfeedback.views",
        "documentation": {}
    },
    {
        "label": "AdminAddFeedbackView",
        "kind": 6,
        "importPath": "tabbycat.adjfeedback.views",
        "description": "tabbycat.adjfeedback.views",
        "peekOfCode": "class AdminAddFeedbackView(AdministratorMixin, BaseTabroomAddFeedbackView):\n    edit_permission = Permission.ADD_FEEDBACK\nclass AssistantAddFeedbackView(AssistantMixin, BaseTabroomAddFeedbackView):\n    pass\nclass PublicAddFeedbackView(PublicSubmissionFieldsMixin, PersonalizablePublicTournamentPageMixin, BaseAddFeedbackView):\n    \"\"\"Base class for views for public users to add feedback.\"\"\"\n    action_log_type = ActionLogEntry.ActionType.FEEDBACK_SUBMIT\n    feedback_form_class_kwargs = {\n        'confirm_on_submit': True,\n        'enforce_required': True,",
        "detail": "tabbycat.adjfeedback.views",
        "documentation": {}
    },
    {
        "label": "AssistantAddFeedbackView",
        "kind": 6,
        "importPath": "tabbycat.adjfeedback.views",
        "description": "tabbycat.adjfeedback.views",
        "peekOfCode": "class AssistantAddFeedbackView(AssistantMixin, BaseTabroomAddFeedbackView):\n    pass\nclass PublicAddFeedbackView(PublicSubmissionFieldsMixin, PersonalizablePublicTournamentPageMixin, BaseAddFeedbackView):\n    \"\"\"Base class for views for public users to add feedback.\"\"\"\n    action_log_type = ActionLogEntry.ActionType.FEEDBACK_SUBMIT\n    feedback_form_class_kwargs = {\n        'confirm_on_submit': True,\n        'enforce_required': True,\n        'include_unreleased_draws': False,\n        'use_tournament_password': True,",
        "detail": "tabbycat.adjfeedback.views",
        "documentation": {}
    },
    {
        "label": "PublicAddFeedbackView",
        "kind": 6,
        "importPath": "tabbycat.adjfeedback.views",
        "description": "tabbycat.adjfeedback.views",
        "peekOfCode": "class PublicAddFeedbackView(PublicSubmissionFieldsMixin, PersonalizablePublicTournamentPageMixin, BaseAddFeedbackView):\n    \"\"\"Base class for views for public users to add feedback.\"\"\"\n    action_log_type = ActionLogEntry.ActionType.FEEDBACK_SUBMIT\n    feedback_form_class_kwargs = {\n        'confirm_on_submit': True,\n        'enforce_required': True,\n        'include_unreleased_draws': False,\n        'use_tournament_password': True,\n        'ignored_option': False,\n    }",
        "detail": "tabbycat.adjfeedback.views",
        "documentation": {}
    },
    {
        "label": "PublicAddFeedbackByRandomisedUrlView",
        "kind": 6,
        "importPath": "tabbycat.adjfeedback.views",
        "description": "tabbycat.adjfeedback.views",
        "peekOfCode": "class PublicAddFeedbackByRandomisedUrlView(SingleObjectByRandomisedUrlMixin, PublicAddFeedbackView):\n    \"\"\"View for public users to add feedback, where the URL is a randomised one.\"\"\"\n    def get_team_short_name(self, team):\n        # It's a private URL, so always show the team's real name.\n        return team.short_name\n    def is_page_enabled(self, tournament):\n        return tournament.pref('participant_feedback') == 'private-urls'\n    def get_submitter_fields(self):\n        fields = super().get_submitter_fields()\n        fields['participant_submitter'] = self.object",
        "detail": "tabbycat.adjfeedback.views",
        "documentation": {}
    },
    {
        "label": "SpeakerAddFeedbackByRandomisedUrlView",
        "kind": 6,
        "importPath": "tabbycat.adjfeedback.views",
        "description": "tabbycat.adjfeedback.views",
        "peekOfCode": "class SpeakerAddFeedbackByRandomisedUrlView(PublicAddFeedbackByRandomisedUrlView):\n    model = Speaker\n    tournament_field_name = 'team__tournament'\nclass AdjudicatorAddFeedbackByRandomisedUrlView(PublicAddFeedbackByRandomisedUrlView):\n    model = Adjudicator\nclass PublicAddFeedbackByIdUrlView(PublicAddFeedbackView):\n    \"\"\"View for public users to add feedback, where the URL is by object ID.\"\"\"\n    tabroom = False\n    def get_team_short_name(self, team):\n        use_code_names = use_team_code_names(self.tournament, admin=False, user=self.request.user)",
        "detail": "tabbycat.adjfeedback.views",
        "documentation": {}
    },
    {
        "label": "AdjudicatorAddFeedbackByRandomisedUrlView",
        "kind": 6,
        "importPath": "tabbycat.adjfeedback.views",
        "description": "tabbycat.adjfeedback.views",
        "peekOfCode": "class AdjudicatorAddFeedbackByRandomisedUrlView(PublicAddFeedbackByRandomisedUrlView):\n    model = Adjudicator\nclass PublicAddFeedbackByIdUrlView(PublicAddFeedbackView):\n    \"\"\"View for public users to add feedback, where the URL is by object ID.\"\"\"\n    tabroom = False\n    def get_team_short_name(self, team):\n        use_code_names = use_team_code_names(self.tournament, admin=False, user=self.request.user)\n        return team.code_name if use_code_names else team.short_name\n    def is_page_enabled(self, tournament):\n        return tournament.pref('participant_feedback') == 'public'",
        "detail": "tabbycat.adjfeedback.views",
        "documentation": {}
    },
    {
        "label": "PublicAddFeedbackByIdUrlView",
        "kind": 6,
        "importPath": "tabbycat.adjfeedback.views",
        "description": "tabbycat.adjfeedback.views",
        "peekOfCode": "class PublicAddFeedbackByIdUrlView(PublicAddFeedbackView):\n    \"\"\"View for public users to add feedback, where the URL is by object ID.\"\"\"\n    tabroom = False\n    def get_team_short_name(self, team):\n        use_code_names = use_team_code_names(self.tournament, admin=False, user=self.request.user)\n        return team.code_name if use_code_names else team.short_name\n    def is_page_enabled(self, tournament):\n        return tournament.pref('participant_feedback') == 'public'\n    def get_success_url(self):\n        # Redirect to non-cached page: the public feedback form",
        "detail": "tabbycat.adjfeedback.views",
        "documentation": {}
    },
    {
        "label": "AdjudicatorActionError",
        "kind": 6,
        "importPath": "tabbycat.adjfeedback.views",
        "description": "tabbycat.adjfeedback.views",
        "peekOfCode": "class AdjudicatorActionError(RuntimeError):\n    pass\nclass BaseAdjudicatorActionView(LogActionMixin, AdministratorMixin, TournamentMixin, PostOnlyRedirectView):\n    tournament_redirect_pattern_name = 'adjfeedback-overview'\n    action_log_content_object_attr = 'adjudicator'\n    def get_adjudicator(self, request):\n        try:\n            adj_id = int(request.POST[\"adj_id\"])\n            adjudicator = Adjudicator.objects.get(id=adj_id)\n        except (ValueError, Adjudicator.DoesNotExist, Adjudicator.MultipleObjectsReturned):",
        "detail": "tabbycat.adjfeedback.views",
        "documentation": {}
    },
    {
        "label": "BaseAdjudicatorActionView",
        "kind": 6,
        "importPath": "tabbycat.adjfeedback.views",
        "description": "tabbycat.adjfeedback.views",
        "peekOfCode": "class BaseAdjudicatorActionView(LogActionMixin, AdministratorMixin, TournamentMixin, PostOnlyRedirectView):\n    tournament_redirect_pattern_name = 'adjfeedback-overview'\n    action_log_content_object_attr = 'adjudicator'\n    def get_adjudicator(self, request):\n        try:\n            adj_id = int(request.POST[\"adj_id\"])\n            adjudicator = Adjudicator.objects.get(id=adj_id)\n        except (ValueError, Adjudicator.DoesNotExist, Adjudicator.MultipleObjectsReturned):\n            raise AdjudicatorActionError(_(\"Whoops! I didn't recognise that adjudicator: %(adjudicator)s\") % {'adjudicator': adj_id})\n        return adjudicator",
        "detail": "tabbycat.adjfeedback.views",
        "documentation": {}
    },
    {
        "label": "SetAdjudicatorBaseScoreView",
        "kind": 6,
        "importPath": "tabbycat.adjfeedback.views",
        "description": "tabbycat.adjfeedback.views",
        "peekOfCode": "class SetAdjudicatorBaseScoreView(BaseAdjudicatorActionView):\n    action_log_type = ActionLogEntry.ActionType.TEST_SCORE_EDIT\n    action_log_content_object_attr = 'atsh'\n    edit_permission = Permission.EDIT_BASEJUDGESCORES_IND\n    def modify_adjudicator(self, request, adjudicator):\n        try:\n            score = float(request.POST[\"base_score\"])\n        except ValueError:\n            raise AdjudicatorActionError(_(\"Whoops! The value isn't a valid base score.\"))\n        adjudicator.base_score = score",
        "detail": "tabbycat.adjfeedback.views",
        "documentation": {}
    },
    {
        "label": "SetAdjudicatorBreakingStatusView",
        "kind": 6,
        "importPath": "tabbycat.adjfeedback.views",
        "description": "tabbycat.adjfeedback.views",
        "peekOfCode": "class SetAdjudicatorBreakingStatusView(AdministratorMixin, TournamentMixin, LogActionMixin, View):\n    edit_permission = Permission.EDIT_ADJ_BREAK\n    action_log_type = ActionLogEntry.ActionType.ADJUDICATOR_BREAK_SET\n    def post(self, request, *args, **kwargs):\n        body = self.request.body.decode('utf-8')\n        posted_info = json.loads(body)\n        adjudicator = Adjudicator.objects.get(id=posted_info['id'])\n        adjudicator.breaking = posted_info['breaking']\n        adjudicator.save()\n        return JsonResponse(json.dumps(True), safe=False)",
        "detail": "tabbycat.adjfeedback.views",
        "documentation": {}
    },
    {
        "label": "BaseFeedbackProgressView",
        "kind": 6,
        "importPath": "tabbycat.adjfeedback.views",
        "description": "tabbycat.adjfeedback.views",
        "peekOfCode": "class BaseFeedbackProgressView(TournamentMixin, VueTableTemplateView):\n    page_title = gettext_lazy(\"Feedback Progress\")\n    page_subtitle = ''\n    page_emoji = '🆘'\n    def get_feedback_progress(self):\n        if not hasattr(self, \"_feedback_progress_result\"):\n            self._feedback_progress_result = get_feedback_progress(self.tournament)\n        return self._feedback_progress_result\n    def get_page_subtitle(self):\n        teams_progress, adjs_progress = self.get_feedback_progress()",
        "detail": "tabbycat.adjfeedback.views",
        "documentation": {}
    },
    {
        "label": "FeedbackProgress",
        "kind": 6,
        "importPath": "tabbycat.adjfeedback.views",
        "description": "tabbycat.adjfeedback.views",
        "peekOfCode": "class FeedbackProgress(AdministratorMixin, BaseFeedbackProgressView):\n    template_name = 'feedback_base.html'\n    view_permission = Permission.VIEW_FEEDBACK_UNSUBMITTED\nclass PublicFeedbackProgress(PublicTournamentPageMixin, BaseFeedbackProgressView):\n    public_page_preference = 'feedback_progress'\nclass BaseFeedbackToggleView(AdministratorMixin, TournamentMixin, PostOnlyRedirectView):\n    def post(self, request, *args, **kwargs):\n        feedback = AdjudicatorFeedback.objects.get(id=kwargs['feedback_id'])\n        feedback = self.modify_feedback(feedback)\n        feedback.save()",
        "detail": "tabbycat.adjfeedback.views",
        "documentation": {}
    },
    {
        "label": "PublicFeedbackProgress",
        "kind": 6,
        "importPath": "tabbycat.adjfeedback.views",
        "description": "tabbycat.adjfeedback.views",
        "peekOfCode": "class PublicFeedbackProgress(PublicTournamentPageMixin, BaseFeedbackProgressView):\n    public_page_preference = 'feedback_progress'\nclass BaseFeedbackToggleView(AdministratorMixin, TournamentMixin, PostOnlyRedirectView):\n    def post(self, request, *args, **kwargs):\n        feedback = AdjudicatorFeedback.objects.get(id=kwargs['feedback_id'])\n        feedback = self.modify_feedback(feedback)\n        feedback.save()\n        # Make message\n        if feedback.source_adjudicator:\n            source = feedback.source_adjudicator.adjudicator.get_public_name(self.tournament)",
        "detail": "tabbycat.adjfeedback.views",
        "documentation": {}
    },
    {
        "label": "BaseFeedbackToggleView",
        "kind": 6,
        "importPath": "tabbycat.adjfeedback.views",
        "description": "tabbycat.adjfeedback.views",
        "peekOfCode": "class BaseFeedbackToggleView(AdministratorMixin, TournamentMixin, PostOnlyRedirectView):\n    def post(self, request, *args, **kwargs):\n        feedback = AdjudicatorFeedback.objects.get(id=kwargs['feedback_id'])\n        feedback = self.modify_feedback(feedback)\n        feedback.save()\n        # Make message\n        if feedback.source_adjudicator:\n            source = feedback.source_adjudicator.adjudicator.get_public_name(self.tournament)\n        else:\n            source = feedback.source_team.team.short_name",
        "detail": "tabbycat.adjfeedback.views",
        "documentation": {}
    },
    {
        "label": "ConfirmFeedbackView",
        "kind": 6,
        "importPath": "tabbycat.adjfeedback.views",
        "description": "tabbycat.adjfeedback.views",
        "peekOfCode": "class ConfirmFeedbackView(BaseFeedbackToggleView):\n    edit_permission = Permission.EDIT_FEEDBACK_CONFIRM\n    def feedback_result(self, feedback):\n        return _(\"confirmed\") if feedback.confirmed else _(\"un-confirmed\")\n    def modify_feedback(self, feedback):\n        feedback.confirmed = not feedback.confirmed\n        if feedback.confirmed:\n            feedback.confirm_timestamp = timezone.now()\n            feedback.confirmer = self.request.user\n        return feedback",
        "detail": "tabbycat.adjfeedback.views",
        "documentation": {}
    },
    {
        "label": "IgnoreFeedbackView",
        "kind": 6,
        "importPath": "tabbycat.adjfeedback.views",
        "description": "tabbycat.adjfeedback.views",
        "peekOfCode": "class IgnoreFeedbackView(BaseFeedbackToggleView):\n    edit_permission = Permission.EDIT_FEEDBACK_IGNORE\n    def feedback_result(self, feedback):\n        return _(\"ignored\") if feedback.ignored else _(\"un-ignored\")\n    def modify_feedback(self, feedback):\n        feedback.ignored = not feedback.ignored\n        return feedback\n# ==============================================================================\n# Update adjudicator scores in bulk\n# ==============================================================================",
        "detail": "tabbycat.adjfeedback.views",
        "documentation": {}
    },
    {
        "label": "UpdateAdjudicatorScoresView",
        "kind": 6,
        "importPath": "tabbycat.adjfeedback.views",
        "description": "tabbycat.adjfeedback.views",
        "peekOfCode": "class UpdateAdjudicatorScoresView(AdministratorMixin, LogActionMixin, TournamentMixin, FormView):\n    template_name = 'update_adjudicator_scores.html'\n    form_class = UpdateAdjudicatorScoresForm\n    edit_permission = Permission.EDIT_JUDGESCORES_BULK\n    action_log_type = ActionLogEntry.ActionType.UPDATE_ADJUDICATOR_SCORES\n    def get_context_data(self, **kwargs):\n        sample_adjs = self.tournament.relevant_adjudicators.all()[:3]\n        if len(sample_adjs) == 0:\n            kwargs['no_adjs_in_database'] = True\n            kwargs['sample'] = [(\"Estella Brandybuck\", 5.0), (\"Pia Hermansson\", 4.0), (\"Lucas Sousa\", 3.5)]",
        "detail": "tabbycat.adjfeedback.views",
        "documentation": {}
    },
    {
        "label": "BaseCsvView",
        "kind": 6,
        "importPath": "tabbycat.adjfeedback.views",
        "description": "tabbycat.adjfeedback.views",
        "peekOfCode": "class BaseCsvView(View):\n    def get_filename(self):\n        return self.filename\n    def get(self, request, *args, **kwargs):\n        response = HttpResponse(content_type='text/csv; charset=utf-8')\n        response['Content-Disposition'] = \"attachment; filename=\\\"\" + self.get_filename() + \"\\\"\"\n        writer = csv.writer(response)\n        self.write_rows(writer)\n        return response\nclass AdjudicatorScoresCsvView(TournamentMixin, AdministratorMixin, BaseCsvView):",
        "detail": "tabbycat.adjfeedback.views",
        "documentation": {}
    },
    {
        "label": "AdjudicatorScoresCsvView",
        "kind": 6,
        "importPath": "tabbycat.adjfeedback.views",
        "description": "tabbycat.adjfeedback.views",
        "peekOfCode": "class AdjudicatorScoresCsvView(TournamentMixin, AdministratorMixin, BaseCsvView):\n    filename = \"scores.csv\"\n    def write_rows(self, writer):\n        writer.writerow([\"id\", \"name\", \"base_score\", \"gender\", \"region\", \"nrounds\"])\n        for adj in self.tournament.adjudicator_set.all():\n            row = [adj.id, adj.name, adj.base_score, adj.gender]\n            row.append(adj.region.name if adj.region else \"\")\n            row.append(adj.debateadjudicator_set.count())\n            writer.writerow(row)\nclass AdjudicatorFeedbackCsvView(FeedbackMixin, AdministratorMixin, TournamentMixin, BaseCsvView):",
        "detail": "tabbycat.adjfeedback.views",
        "documentation": {}
    },
    {
        "label": "AdjudicatorFeedbackCsvView",
        "kind": 6,
        "importPath": "tabbycat.adjfeedback.views",
        "description": "tabbycat.adjfeedback.views",
        "peekOfCode": "class AdjudicatorFeedbackCsvView(FeedbackMixin, AdministratorMixin, TournamentMixin, BaseCsvView):\n    filename = \"feedback.csv\"\n    def get_feedback_queryset(self):\n        return super().get_feedback_queryset().filter(confirmed=True)\n    def write_rows(self, writer):\n        headers = [\n            \"round.seq\", \"round.abbreviation\",\n            \"adjudicator.id\", \"adjudicator.name\", \"adjudicator.type\",\n            \"source_adjudicator.id\", \"source_adjudicator.name\", \"source_adjudicator.type\",\n            \"source_team.id\", \"source_team.short_name\", \"source_team.result\",",
        "detail": "tabbycat.adjfeedback.views",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "tabbycat.adjfeedback.views",
        "description": "tabbycat.adjfeedback.views",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass BaseFeedbackOverview(TournamentMixin, VueTableTemplateView):\n    \"\"\" Also inherited by the adjudicator's tab \"\"\"\n    def get_adjudicators(self):\n        if not hasattr(self, '_adjudicators'):\n            t = self.tournament\n            self._adjudicators = Adjudicator.objects.filter(tournament=t)\n            populate_feedback_scores(self._adjudicators)\n        return self._adjudicators\n    def get_context_data(self, **kwargs):",
        "detail": "tabbycat.adjfeedback.views",
        "documentation": {}
    },
    {
        "label": "RoundSerializerTests",
        "kind": 6,
        "importPath": "tabbycat.api.tests.test_serializers",
        "description": "tabbycat.api.tests.test_serializers",
        "peekOfCode": "class RoundSerializerTests(CompletedTournamentTestMixin, APITestCase):\n    def test_exclude_motions_if_list(self):\n        response = self.client.get(reverse_tournament('api-round-list', self.tournament))\n        self.assertIsNone(response.data[0].get('motions'))\n    def test_include_motions_if_released(self):\n        round = self.tournament.round_set.first()\n        round.motions_released = True\n        round.save()\n        response = self.client.get(reverse_round('api-round-detail', self.tournament.round_set.first()))\n        self.assertEqual(len(response.data.get('motions')), 3)",
        "detail": "tabbycat.api.tests.test_serializers",
        "documentation": {}
    },
    {
        "label": "MotionSerializerTests",
        "kind": 6,
        "importPath": "tabbycat.api.tests.test_serializers",
        "description": "tabbycat.api.tests.test_serializers",
        "peekOfCode": "class MotionSerializerTests(CompletedTournamentTestMixin, APITestCase):\n    def test_create_motion_with_round(self):\n        client = APIClient()\n        client.login(username=\"admin\", password=\"admin\")\n        response = client.post(reverse_tournament('api-motion-list', self.tournament), {\n            'text': 'This House would straighten all bananas',\n            'reference': 'Bananas',\n            'info_slide': 'Get bent',\n            'rounds': [{'seq': 4, 'round': 'http://testserver/api/v1/tournaments/demo/rounds/1'}],\n        })",
        "detail": "tabbycat.api.tests.test_serializers",
        "documentation": {}
    },
    {
        "label": "AdjudicatorSerializerTests",
        "kind": 6,
        "importPath": "tabbycat.api.tests.test_serializers",
        "description": "tabbycat.api.tests.test_serializers",
        "peekOfCode": "class AdjudicatorSerializerTests(CompletedTournamentTestMixin, APITestCase):\n    def test_create_adj_null_institution(self):\n        client = APIClient()\n        client.login(username=\"admin\", password=\"admin\")\n        response = client.post(reverse_tournament('api-adjudicator-list', self.tournament), {\n            \"name\": \"string\",\n            \"gender\": \"M\",\n            \"email\": \"user@example.com\",\n            \"phone\": \"string\",\n            \"anonymous\": True,",
        "detail": "tabbycat.api.tests.test_serializers",
        "documentation": {}
    },
    {
        "label": "BallotSerializerTests",
        "kind": 6,
        "importPath": "tabbycat.api.tests.test_serializers",
        "description": "tabbycat.api.tests.test_serializers",
        "peekOfCode": "class BallotSerializerTests(APITestCase):\n    def setUp(self):\n        logging.disable(logging.CRITICAL)\n        self.user = User.objects.create_superuser(username='admin1', password='admin', is_active=True)\n        self.tournament = Tournament.objects.create(slug='apitest')\n        self.round = Round.objects.create(seq=1, tournament=self.tournament)\n        self.debate = Debate.objects.create(round=self.round)\n        CanadianParliamentaryPreferences.save(self.tournament)\n        self.t1 = Team.objects.create(tournament=self.tournament, reference='A')\n        self.s1 = Speaker.objects.create(name='1', team=self.t1)",
        "detail": "tabbycat.api.tests.test_serializers",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "tabbycat.api.tests.test_serializers",
        "description": "tabbycat.api.tests.test_serializers",
        "peekOfCode": "User = get_user_model()\ntz = zoneinfo.ZoneInfo('Australia/Melbourne')\nclass RoundSerializerTests(CompletedTournamentTestMixin, APITestCase):\n    def test_exclude_motions_if_list(self):\n        response = self.client.get(reverse_tournament('api-round-list', self.tournament))\n        self.assertIsNone(response.data[0].get('motions'))\n    def test_include_motions_if_released(self):\n        round = self.tournament.round_set.first()\n        round.motions_released = True\n        round.save()",
        "detail": "tabbycat.api.tests.test_serializers",
        "documentation": {}
    },
    {
        "label": "tz",
        "kind": 5,
        "importPath": "tabbycat.api.tests.test_serializers",
        "description": "tabbycat.api.tests.test_serializers",
        "peekOfCode": "tz = zoneinfo.ZoneInfo('Australia/Melbourne')\nclass RoundSerializerTests(CompletedTournamentTestMixin, APITestCase):\n    def test_exclude_motions_if_list(self):\n        response = self.client.get(reverse_tournament('api-round-list', self.tournament))\n        self.assertIsNone(response.data[0].get('motions'))\n    def test_include_motions_if_released(self):\n        round = self.tournament.round_set.first()\n        round.motions_released = True\n        round.save()\n        response = self.client.get(reverse_round('api-round-detail', self.tournament.round_set.first()))",
        "detail": "tabbycat.api.tests.test_serializers",
        "documentation": {}
    },
    {
        "label": "RootTests",
        "kind": 6,
        "importPath": "tabbycat.api.tests.test_views",
        "description": "tabbycat.api.tests.test_views",
        "peekOfCode": "class RootTests(APITestCase):\n    def test_get_root(self):\n        response = self.client.get(reverse('api-root'))\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(response.data, {\n            \"_links\": {\"v1\": \"http://testserver/api/v1\"},\n            \"timezone\": settings.TIME_ZONE,\n            \"version\": settings.TABBYCAT_VERSION,\n        })\n    def test_api_disabled_root(self):",
        "detail": "tabbycat.api.tests.test_views",
        "documentation": {}
    },
    {
        "label": "MotionViewsetTests",
        "kind": 6,
        "importPath": "tabbycat.api.tests.test_views",
        "description": "tabbycat.api.tests.test_views",
        "peekOfCode": "class MotionViewsetTests(CompletedTournamentTestMixin, APITestCase):\n    def test_no_public_access_preferences(self):\n        self.tournament.preferences['public_features__public_motions'] = False\n        self.tournament.preferences['tab_release__motion_tab_released'] = False\n        response = self.client.get(reverse('api-motion-list', kwargs={'tournament_slug': self.tournament.slug}))\n        self.assertEqual(response.status_code, 401)\n    def test_exclude_unreleased_public(self):\n        self.tournament.round_set.filter(seq=1).update(motions_released=True)\n        self.tournament.preferences['public_features__public_motions'] = True\n        self.tournament.preferences['tab_release__motion_tab_released'] = False",
        "detail": "tabbycat.api.tests.test_views",
        "documentation": {}
    },
    {
        "label": "SpeakerCategoryViewsetTests",
        "kind": 6,
        "importPath": "tabbycat.api.tests.test_views",
        "description": "tabbycat.api.tests.test_views",
        "peekOfCode": "class SpeakerCategoryViewsetTests(CompletedTournamentTestMixin, APITestCase):\n    def setUp(self):\n        super().setUp()\n        self.tournament.speakercategory_set.create(name='sc1', slug='sc1', seq=1, public=False)\n        self.tournament.speakercategory_set.create(name='sc2', slug='sc2', seq=2, public=True)\n    def test_private_excluded_public(self):\n        response = self.client.get(reverse('api-speakercategory-list', kwargs={'tournament_slug': self.tournament.slug}))\n        self.assertEqual(len(response.data), 1)\n    def test_all_categories_authenticated(self):\n        self.client.login(username=\"admin\", password=\"admin\")",
        "detail": "tabbycat.api.tests.test_views",
        "documentation": {}
    },
    {
        "label": "BreakEligibilityViewsetTests",
        "kind": 6,
        "importPath": "tabbycat.api.tests.test_views",
        "description": "tabbycat.api.tests.test_views",
        "peekOfCode": "class BreakEligibilityViewsetTests(CompletedTournamentTestMixin, APITestCase):\n    def test_get_eligible_teams(self):\n        self.client.login(username=\"admin\", password=\"admin\")\n        response = self.client.get(reverse('api-breakcategory-eligibility', kwargs={'tournament_slug': self.tournament.slug, 'pk': 1}))\n        self.assertEqual(len(response.data), 2)\nclass SpeakerEligibilityViewsetTests(CompletedTournamentTestMixin, APITestCase):\n    def setUp(self):\n        super().setUp()\n        self.sc = self.tournament.speakercategory_set.create(name='sc1', slug='sc1', seq=1, public=False)\n        self.sc.speaker_set.set(self.tournament.team_set.first().speaker_set.all())",
        "detail": "tabbycat.api.tests.test_views",
        "documentation": {}
    },
    {
        "label": "SpeakerEligibilityViewsetTests",
        "kind": 6,
        "importPath": "tabbycat.api.tests.test_views",
        "description": "tabbycat.api.tests.test_views",
        "peekOfCode": "class SpeakerEligibilityViewsetTests(CompletedTournamentTestMixin, APITestCase):\n    def setUp(self):\n        super().setUp()\n        self.sc = self.tournament.speakercategory_set.create(name='sc1', slug='sc1', seq=1, public=False)\n        self.sc.speaker_set.set(self.tournament.team_set.first().speaker_set.all())\n    def test_get_eligible_speakers(self):\n        self.client.login(username=\"admin\", password=\"admin\")\n        response = self.client.get(reverse('api-speakercategory-eligibility', kwargs={'tournament_slug': self.tournament.slug, 'pk': self.sc.pk}))\n        self.assertEqual(len(response.data), 2)\n    def test_unauthorized_if_private(self):",
        "detail": "tabbycat.api.tests.test_views",
        "documentation": {}
    },
    {
        "label": "BreakingTeamsViewsetTests",
        "kind": 6,
        "importPath": "tabbycat.api.tests.test_views",
        "description": "tabbycat.api.tests.test_views",
        "peekOfCode": "class BreakingTeamsViewsetTests(CompletedTournamentTestMixin, APITestCase):\n    def test_get_breaking_teams(self):\n        self.client.login(username=\"admin\", password=\"admin\")\n        response = self.client.get(reverse('api-breakcategory-break', kwargs={'tournament_slug': self.tournament.slug, 'pk': 1}))\n        self.assertEqual(len(response.data), 8)\n    def test_generate_break(self):\n        self.client.login(username=\"admin\", password=\"admin\")\n        response = self.client.post(reverse('api-breakcategory-break', kwargs={'tournament_slug': self.tournament.slug, 'pk': 1}))\n        self.assertEqual(len(response.data), 13)\n    def test_delete_break(self):",
        "detail": "tabbycat.api.tests.test_views",
        "documentation": {}
    },
    {
        "label": "ApiConfig",
        "kind": 6,
        "importPath": "tabbycat.api.apps",
        "description": "tabbycat.api.apps",
        "peekOfCode": "class ApiConfig(AppConfig):\n    name = 'api'\n    verbose_name = _(\"Application Programming Interface\")\n    def ready(self):\n        from . import signals  # noqa: F401",
        "detail": "tabbycat.api.apps",
        "documentation": {}
    },
    {
        "label": "TournamentHyperlinkedRelatedField",
        "kind": 6,
        "importPath": "tabbycat.api.fields",
        "description": "tabbycat.api.fields",
        "peekOfCode": "class TournamentHyperlinkedRelatedField(HyperlinkedRelatedField):\n    default_tournament_field = 'tournament'\n    def __init__(self, *args, **kwargs):\n        self.tournament_field = kwargs.pop('tournament_field', self.default_tournament_field)\n        super().__init__(*args, **kwargs)\n    def use_pk_only_optimization(self):\n        return False\n    def get_tournament(self, obj):\n        return obj.tournament\n    def get_url_kwargs(self, obj):",
        "detail": "tabbycat.api.fields",
        "documentation": {}
    },
    {
        "label": "TournamentHyperlinkedIdentityField",
        "kind": 6,
        "importPath": "tabbycat.api.fields",
        "description": "tabbycat.api.fields",
        "peekOfCode": "class TournamentHyperlinkedIdentityField(TournamentHyperlinkedRelatedField, HyperlinkedIdentityField):\n    pass\nclass RoundHyperlinkedRelatedField(TournamentHyperlinkedRelatedField):\n    default_tournament_field = 'round__tournament'\n    round_field = 'round'\n    def get_tournament(self, obj):\n        return self.get_round(obj).tournament\n    def get_round(self, obj):\n        return obj.round\n    def get_url_kwargs(self, obj):",
        "detail": "tabbycat.api.fields",
        "documentation": {}
    },
    {
        "label": "RoundHyperlinkedRelatedField",
        "kind": 6,
        "importPath": "tabbycat.api.fields",
        "description": "tabbycat.api.fields",
        "peekOfCode": "class RoundHyperlinkedRelatedField(TournamentHyperlinkedRelatedField):\n    default_tournament_field = 'round__tournament'\n    round_field = 'round'\n    def get_tournament(self, obj):\n        return self.get_round(obj).tournament\n    def get_round(self, obj):\n        return obj.round\n    def get_url_kwargs(self, obj):\n        kwargs = super().get_url_kwargs(obj)\n        kwargs['round_seq'] = self.get_round(obj).seq",
        "detail": "tabbycat.api.fields",
        "documentation": {}
    },
    {
        "label": "RoundHyperlinkedIdentityField",
        "kind": 6,
        "importPath": "tabbycat.api.fields",
        "description": "tabbycat.api.fields",
        "peekOfCode": "class RoundHyperlinkedIdentityField(RoundHyperlinkedRelatedField, HyperlinkedIdentityField):\n    pass\nclass DebateHyperlinkedIdentityField(RoundHyperlinkedIdentityField):\n    default_tournament_field = 'debate__round__tournament'\n    round_field = 'debate__round'\n    def get_round(self, obj):\n        return obj.debate.round\n    def get_url_kwargs(self, obj):\n        kwargs = super().get_url_kwargs(obj)\n        kwargs['debate_pk'] = obj.debate.pk",
        "detail": "tabbycat.api.fields",
        "documentation": {}
    },
    {
        "label": "DebateHyperlinkedIdentityField",
        "kind": 6,
        "importPath": "tabbycat.api.fields",
        "description": "tabbycat.api.fields",
        "peekOfCode": "class DebateHyperlinkedIdentityField(RoundHyperlinkedIdentityField):\n    default_tournament_field = 'debate__round__tournament'\n    round_field = 'debate__round'\n    def get_round(self, obj):\n        return obj.debate.round\n    def get_url_kwargs(self, obj):\n        kwargs = super().get_url_kwargs(obj)\n        kwargs['debate_pk'] = obj.debate.pk\n        return kwargs\n    def lookup_kwargs(self):",
        "detail": "tabbycat.api.fields",
        "documentation": {}
    },
    {
        "label": "AnonymisingParticipantNameField",
        "kind": 6,
        "importPath": "tabbycat.api.fields",
        "description": "tabbycat.api.fields",
        "peekOfCode": "class AnonymisingParticipantNameField(CharField):\n    def get_attribute(self, instance):\n        # Pass entire instance to use other fields (not just .name)\n        return instance\n    def to_representation(self, instance):\n        if not is_staff(self.context):\n            if instance.anonymous:\n                return None\n            return instance.get_public_name(self.context['tournament'])\n        return super().to_representation(instance.name)",
        "detail": "tabbycat.api.fields",
        "documentation": {}
    },
    {
        "label": "AnonymisingHyperlinkedTournamentRelatedField",
        "kind": 6,
        "importPath": "tabbycat.api.fields",
        "description": "tabbycat.api.fields",
        "peekOfCode": "class AnonymisingHyperlinkedTournamentRelatedField(TournamentHyperlinkedRelatedField):\n    default_tournament_field = 'team__tournament'\n    def __init__(self, view_name=None, queryset=Speaker.objects.all(), **kwargs):\n        self.null_when = kwargs.pop('anonymous_source')\n        super().__init__(view_name=view_name, queryset=queryset, **kwargs)\n    def to_representation(self, value):\n        if getattr(value, self.null_when, True):\n            return None\n        return super().to_representation(value)\nclass AdjudicatorFeedbackIdentityField(RoundHyperlinkedIdentityField):",
        "detail": "tabbycat.api.fields",
        "documentation": {}
    },
    {
        "label": "AdjudicatorFeedbackIdentityField",
        "kind": 6,
        "importPath": "tabbycat.api.fields",
        "description": "tabbycat.api.fields",
        "peekOfCode": "class AdjudicatorFeedbackIdentityField(RoundHyperlinkedIdentityField):\n    default_tournament_field = None\n    round_field = None\n    def get_url_kwargs(self, obj):\n        kwargs = super().get_url_kwargs(obj)\n        kwargs.pop('round_seq')\n        return kwargs\n    def lookup_kwargs(self):\n        return {}  # More complicated lookup than with kwargs\n    def get_queryset(self):",
        "detail": "tabbycat.api.fields",
        "documentation": {}
    },
    {
        "label": "CreatableSlugRelatedField",
        "kind": 6,
        "importPath": "tabbycat.api.fields",
        "description": "tabbycat.api.fields",
        "peekOfCode": "class CreatableSlugRelatedField(SlugRelatedField):\n    def to_internal_value(self, data):\n        if data is None:\n            return None\n        try:\n            # get_or_create returns (obj, created?) - only want the object\n            return self.get_queryset().get_or_create(**{self.slug_field: data})[0]\n        except (TypeError, ValueError):\n            self.fail('invalid')\nclass ParticipantAvailabilityForeignKeyField(TournamentHyperlinkedRelatedField):",
        "detail": "tabbycat.api.fields",
        "documentation": {}
    },
    {
        "label": "ParticipantAvailabilityForeignKeyField",
        "kind": 6,
        "importPath": "tabbycat.api.fields",
        "description": "tabbycat.api.fields",
        "peekOfCode": "class ParticipantAvailabilityForeignKeyField(TournamentHyperlinkedRelatedField):\n    default_tournament_field = 'round__tournament'\n    def get_tournament(self, obj):\n        return obj.round.tournament\n    def get_url_kwargs(self, obj):\n        return {\n            'tournament_slug': self.get_tournament(obj).slug,\n            'pk': obj.object_id,\n        }\n    def get_url(self, obj, view_name, request, format):",
        "detail": "tabbycat.api.fields",
        "documentation": {}
    },
    {
        "label": "BaseSourceField",
        "kind": 6,
        "importPath": "tabbycat.api.fields",
        "description": "tabbycat.api.fields",
        "peekOfCode": "class BaseSourceField(TournamentHyperlinkedRelatedField):\n    \"\"\"Taken from REST_Framework: rest_framework.relations.HyperlinkedRelatedField\n    This subclass adapts the framework in order to have a hyperlinked field which\n    is dynamic on the model of object given or taken; merging into one field, as\n    well as using an attribute from it, which would not be possible for fear of\n    nulls.\"\"\"\n    view_name = ''  # View and model/queryset is dynamic on the object\n    def get_queryset(self):\n        return self.model.objects.all()\n    def get_attribute(self, obj):",
        "detail": "tabbycat.api.fields",
        "documentation": {}
    },
    {
        "label": "ParticipantSourceField",
        "kind": 6,
        "importPath": "tabbycat.api.fields",
        "description": "tabbycat.api.fields",
        "peekOfCode": "class ParticipantSourceField(BaseSourceField):\n    field_source_name = 'participant_submitter'\n    models = {\n        'api-speaker-detail': (Speaker, 'participant_submitter'),\n        'api-adjudicator-detail': (Adjudicator, 'participant_submitter'),\n    }\n    def get_url_options(self, value, format):\n        for view_name, (model, field) in self.models.items():\n            obj = getattr(value.participant_submitter, model.__name__.lower(), None)\n            if obj is not None:",
        "detail": "tabbycat.api.fields",
        "documentation": {}
    },
    {
        "label": "AnyField",
        "kind": 6,
        "importPath": "tabbycat.api.fields",
        "description": "tabbycat.api.fields",
        "peekOfCode": "class AnyField(Field):\n    def to_representation(self, value):\n        return value\n    def to_internal_value(self, data):\n        return data\n@extend_schema_field({'anyOf': [{\"type\": \"number\"}, {\"type\": \"string\", \"enum\": [ds.name.lower() for ds in DebateSide]}]})\nclass SideChoiceField(IntegerField):\n    def to_internal_value(self, data):\n        if isinstance(data, str):\n            if len(data) > self.MAX_STRING_LENGTH:",
        "detail": "tabbycat.api.fields",
        "documentation": {}
    },
    {
        "label": "SideChoiceField",
        "kind": 6,
        "importPath": "tabbycat.api.fields",
        "description": "tabbycat.api.fields",
        "peekOfCode": "class SideChoiceField(IntegerField):\n    def to_internal_value(self, data):\n        if isinstance(data, str):\n            if len(data) > self.MAX_STRING_LENGTH:\n                self.fail('max_string_length')\n            try:\n                return DebateSide[data.upper()].value\n            except KeyError:\n                self.fail('invalid')\n        try:",
        "detail": "tabbycat.api.fields",
        "documentation": {}
    },
    {
        "label": "APILogActionMixin",
        "kind": 6,
        "importPath": "tabbycat.api.mixins",
        "description": "tabbycat.api.mixins",
        "peekOfCode": "class APILogActionMixin(LogActionMixin):\n    action_log_content_object_attr = 'obj'\n    def perform_create(self, serializer):\n        self.obj = serializer.save(**self.lookup_kwargs())\n        self.log_action(type=self.action_log_type_created, agent=ActionLogEntry.Agent.API)\n    def perform_update(self, serializer):\n        self.obj = serializer.save()\n        self.log_action(type=self.action_log_type_updated, agent=ActionLogEntry.Agent.API)\n    def lookup_kwargs(self):\n        return {}",
        "detail": "tabbycat.api.mixins",
        "documentation": {}
    },
    {
        "label": "TournamentAPIMixin",
        "kind": 6,
        "importPath": "tabbycat.api.mixins",
        "description": "tabbycat.api.mixins",
        "peekOfCode": "class TournamentAPIMixin(APILogActionMixin):\n    tournament_field = 'tournament'\n    access_operator = operator.eq\n    access_setting = True\n    @property\n    def tournament(self):\n        if not hasattr(self, \"_tournament\"):\n            self._tournament = get_object_or_404(Tournament, slug=self.kwargs['tournament_slug'])\n        return self._tournament\n    def lookup_kwargs(self):",
        "detail": "tabbycat.api.mixins",
        "documentation": {}
    },
    {
        "label": "RoundAPIMixin",
        "kind": 6,
        "importPath": "tabbycat.api.mixins",
        "description": "tabbycat.api.mixins",
        "peekOfCode": "class RoundAPIMixin(TournamentAPIMixin):\n    tournament_field = 'round__tournament'\n    round_field = 'round'\n    @property\n    def round(self):\n        if not hasattr(self, \"_round\"):\n            self._round = get_object_or_404(Round, tournament=self.tournament, seq=self.kwargs['round_seq'])\n        return self._round\n    def lookup_kwargs(self):\n        return {self.round_field: self.round}",
        "detail": "tabbycat.api.mixins",
        "documentation": {}
    },
    {
        "label": "AdministratorAPIMixin",
        "kind": 6,
        "importPath": "tabbycat.api.mixins",
        "description": "tabbycat.api.mixins",
        "peekOfCode": "class AdministratorAPIMixin:\n    permission_classes = [APIEnabledPermission, IsAdminUser | PerTournamentPermissionRequired]\nclass TournamentPublicAPIMixin:\n    permission_classes = [APIEnabledPermission, PublicPreferencePermission | PerTournamentPermissionRequired]\nclass OnReleasePublicAPIMixin(TournamentPublicAPIMixin):\n    permission_classes = [APIEnabledPermission, PublicIfReleasedPermission | PerTournamentPermissionRequired]\nclass PublicAPIMixin:\n    permission_classes = [APIEnabledPermission, IsAdminOrReadOnly | PerTournamentPermissionRequired]",
        "detail": "tabbycat.api.mixins",
        "documentation": {}
    },
    {
        "label": "TournamentPublicAPIMixin",
        "kind": 6,
        "importPath": "tabbycat.api.mixins",
        "description": "tabbycat.api.mixins",
        "peekOfCode": "class TournamentPublicAPIMixin:\n    permission_classes = [APIEnabledPermission, PublicPreferencePermission | PerTournamentPermissionRequired]\nclass OnReleasePublicAPIMixin(TournamentPublicAPIMixin):\n    permission_classes = [APIEnabledPermission, PublicIfReleasedPermission | PerTournamentPermissionRequired]\nclass PublicAPIMixin:\n    permission_classes = [APIEnabledPermission, IsAdminOrReadOnly | PerTournamentPermissionRequired]",
        "detail": "tabbycat.api.mixins",
        "documentation": {}
    },
    {
        "label": "OnReleasePublicAPIMixin",
        "kind": 6,
        "importPath": "tabbycat.api.mixins",
        "description": "tabbycat.api.mixins",
        "peekOfCode": "class OnReleasePublicAPIMixin(TournamentPublicAPIMixin):\n    permission_classes = [APIEnabledPermission, PublicIfReleasedPermission | PerTournamentPermissionRequired]\nclass PublicAPIMixin:\n    permission_classes = [APIEnabledPermission, IsAdminOrReadOnly | PerTournamentPermissionRequired]",
        "detail": "tabbycat.api.mixins",
        "documentation": {}
    },
    {
        "label": "PublicAPIMixin",
        "kind": 6,
        "importPath": "tabbycat.api.mixins",
        "description": "tabbycat.api.mixins",
        "peekOfCode": "class PublicAPIMixin:\n    permission_classes = [APIEnabledPermission, IsAdminOrReadOnly | PerTournamentPermissionRequired]",
        "detail": "tabbycat.api.mixins",
        "documentation": {}
    },
    {
        "label": "APIEnabledPermission",
        "kind": 6,
        "importPath": "tabbycat.api.permissions",
        "description": "tabbycat.api.permissions",
        "peekOfCode": "class APIEnabledPermission(BasePermission):\n    message = \"The API has been disabled on this site.\"\n    def has_permission(self, request, view):\n        return global_preferences_registry.manager()['global__enable_api']\nclass PublicPreferencePermission(BasePermission):\n    def has_permission(self, request, view):\n        return (request.user and request.user.is_staff) or (\n            request.method in SAFE_METHODS and self.get_tournament_preference(view, view.access_operator))\n    def get_tournament_preference(self, view, op):\n        if type(view.access_preference) is tuple:",
        "detail": "tabbycat.api.permissions",
        "documentation": {}
    },
    {
        "label": "PublicPreferencePermission",
        "kind": 6,
        "importPath": "tabbycat.api.permissions",
        "description": "tabbycat.api.permissions",
        "peekOfCode": "class PublicPreferencePermission(BasePermission):\n    def has_permission(self, request, view):\n        return (request.user and request.user.is_staff) or (\n            request.method in SAFE_METHODS and self.get_tournament_preference(view, view.access_operator))\n    def get_tournament_preference(self, view, op):\n        if type(view.access_preference) is tuple:\n            return op(view.tournament.pref(pref) for pref in view.access_preference)\n        return op(view.tournament.pref(view.access_preference), view.access_setting)\nclass PublicIfReleasedPermission(PublicPreferencePermission):\n    def has_object_permission(self, request, view, obj):",
        "detail": "tabbycat.api.permissions",
        "documentation": {}
    },
    {
        "label": "PublicIfReleasedPermission",
        "kind": 6,
        "importPath": "tabbycat.api.permissions",
        "description": "tabbycat.api.permissions",
        "peekOfCode": "class PublicIfReleasedPermission(PublicPreferencePermission):\n    def has_object_permission(self, request, view, obj):\n        return getattr(obj.round, view.round_released_field) == view.round_released_value\nclass IsAdminOrReadOnly(BasePermission):\n    def has_permission(self, request, view):\n        return request.method in SAFE_METHODS or (request.user and request.user.is_staff)\nclass PerTournamentPermissionRequired(BasePermission):\n    def get_required_permission(self, view):\n        \"\"\"\n        Given a model and an HTTP method, return the list of permission",
        "detail": "tabbycat.api.permissions",
        "documentation": {}
    },
    {
        "label": "IsAdminOrReadOnly",
        "kind": 6,
        "importPath": "tabbycat.api.permissions",
        "description": "tabbycat.api.permissions",
        "peekOfCode": "class IsAdminOrReadOnly(BasePermission):\n    def has_permission(self, request, view):\n        return request.method in SAFE_METHODS or (request.user and request.user.is_staff)\nclass PerTournamentPermissionRequired(BasePermission):\n    def get_required_permission(self, view):\n        \"\"\"\n        Given a model and an HTTP method, return the list of permission\n        codes that the user is required to have.\n        \"\"\"\n        return ({",
        "detail": "tabbycat.api.permissions",
        "documentation": {}
    },
    {
        "label": "PerTournamentPermissionRequired",
        "kind": 6,
        "importPath": "tabbycat.api.permissions",
        "description": "tabbycat.api.permissions",
        "peekOfCode": "class PerTournamentPermissionRequired(BasePermission):\n    def get_required_permission(self, view):\n        \"\"\"\n        Given a model and an HTTP method, return the list of permission\n        codes that the user is required to have.\n        \"\"\"\n        return ({\n            'list': getattr(view, 'list_permission', False),\n            'create': getattr(view, 'create_permission', False),\n            'retrieve': getattr(view, 'list_permission', False),",
        "detail": "tabbycat.api.permissions",
        "documentation": {}
    },
    {
        "label": "RootSerializer",
        "kind": 6,
        "importPath": "tabbycat.api.serializers",
        "description": "tabbycat.api.serializers",
        "peekOfCode": "class RootSerializer(serializers.Serializer):\n    class RootLinksSerializer(serializers.Serializer):\n        v1 = serializers.HyperlinkedIdentityField(view_name='api-v1-root')\n    _links = RootLinksSerializer(source='*', read_only=True)\n    timezone = serializers.CharField(allow_blank=False, read_only=True)\n    version = serializers.CharField()\nclass V1RootSerializer(serializers.Serializer):\n    class V1LinksSerializer(serializers.Serializer):\n        tournaments = serializers.HyperlinkedIdentityField(view_name='api-tournament-list')\n        institutions = serializers.HyperlinkedIdentityField(view_name='api-global-institution-list')",
        "detail": "tabbycat.api.serializers",
        "documentation": {}
    },
    {
        "label": "V1RootSerializer",
        "kind": 6,
        "importPath": "tabbycat.api.serializers",
        "description": "tabbycat.api.serializers",
        "peekOfCode": "class V1RootSerializer(serializers.Serializer):\n    class V1LinksSerializer(serializers.Serializer):\n        tournaments = serializers.HyperlinkedIdentityField(view_name='api-tournament-list')\n        institutions = serializers.HyperlinkedIdentityField(view_name='api-global-institution-list')\n        users = serializers.HyperlinkedIdentityField(view_name='api-user-list')\n    _links = V1LinksSerializer(source='*', read_only=True)\nclass CheckinSerializer(serializers.Serializer):\n    object = serializers.HyperlinkedIdentityField(view_name='api-root')\n    barcode = serializers.CharField()\n    checked = serializers.BooleanField()",
        "detail": "tabbycat.api.serializers",
        "documentation": {}
    },
    {
        "label": "CheckinSerializer",
        "kind": 6,
        "importPath": "tabbycat.api.serializers",
        "description": "tabbycat.api.serializers",
        "peekOfCode": "class CheckinSerializer(serializers.Serializer):\n    object = serializers.HyperlinkedIdentityField(view_name='api-root')\n    barcode = serializers.CharField()\n    checked = serializers.BooleanField()\n    timestamp = serializers.DateTimeField()\nclass AvailabilitiesSerializer(serializers.ListSerializer):\n    child = fields.ParticipantAvailabilityForeignKeyField(view_name='api-availability-list')\nclass VenueConstraintSerializer(serializers.ModelSerializer):\n    category = fields.TournamentHyperlinkedRelatedField(view_name='api-venuecategory-detail', queryset=VenueCategory.objects.all())\n    class Meta:",
        "detail": "tabbycat.api.serializers",
        "documentation": {}
    },
    {
        "label": "AvailabilitiesSerializer",
        "kind": 6,
        "importPath": "tabbycat.api.serializers",
        "description": "tabbycat.api.serializers",
        "peekOfCode": "class AvailabilitiesSerializer(serializers.ListSerializer):\n    child = fields.ParticipantAvailabilityForeignKeyField(view_name='api-availability-list')\nclass VenueConstraintSerializer(serializers.ModelSerializer):\n    category = fields.TournamentHyperlinkedRelatedField(view_name='api-venuecategory-detail', queryset=VenueCategory.objects.all())\n    class Meta:\n        model = VenueConstraint\n        fields = ('category', 'priority')\nclass TournamentSerializer(serializers.ModelSerializer):\n    url = serializers.HyperlinkedIdentityField(\n        view_name='api-tournament-detail',",
        "detail": "tabbycat.api.serializers",
        "documentation": {}
    },
    {
        "label": "VenueConstraintSerializer",
        "kind": 6,
        "importPath": "tabbycat.api.serializers",
        "description": "tabbycat.api.serializers",
        "peekOfCode": "class VenueConstraintSerializer(serializers.ModelSerializer):\n    category = fields.TournamentHyperlinkedRelatedField(view_name='api-venuecategory-detail', queryset=VenueCategory.objects.all())\n    class Meta:\n        model = VenueConstraint\n        fields = ('category', 'priority')\nclass TournamentSerializer(serializers.ModelSerializer):\n    url = serializers.HyperlinkedIdentityField(\n        view_name='api-tournament-detail',\n        lookup_field='slug', lookup_url_kwarg='tournament_slug')\n    current_rounds = fields.TournamentHyperlinkedRelatedField(",
        "detail": "tabbycat.api.serializers",
        "documentation": {}
    },
    {
        "label": "TournamentSerializer",
        "kind": 6,
        "importPath": "tabbycat.api.serializers",
        "description": "tabbycat.api.serializers",
        "peekOfCode": "class TournamentSerializer(serializers.ModelSerializer):\n    url = serializers.HyperlinkedIdentityField(\n        view_name='api-tournament-detail',\n        lookup_field='slug', lookup_url_kwarg='tournament_slug')\n    current_rounds = fields.TournamentHyperlinkedRelatedField(\n        view_name='api-round-detail', read_only=True, many=True,\n        lookup_field='seq', lookup_url_kwarg='round_seq',\n    )\n    class TournamentLinksSerializer(serializers.Serializer):\n        rounds = serializers.HyperlinkedIdentityField(",
        "detail": "tabbycat.api.serializers",
        "documentation": {}
    },
    {
        "label": "RoundSerializer",
        "kind": 6,
        "importPath": "tabbycat.api.serializers",
        "description": "tabbycat.api.serializers",
        "peekOfCode": "class RoundSerializer(serializers.ModelSerializer):\n    class RoundMotionSerializer(serializers.ModelSerializer):\n        id = serializers.IntegerField(source='motion.pk', read_only=True)\n        url = fields.TournamentHyperlinkedRelatedField(required=False,\n            view_name='api-motion-detail', queryset=Motion.objects.all(), source='motion')\n        text = serializers.CharField(source='motion.text', max_length=500, required=False)\n        reference = serializers.CharField(source='motion.reference', max_length=100, required=False)\n        info_slide = serializers.CharField(source='motion.info_slide', required=False)\n        info_slide_plain = serializers.CharField(source='motion.info_slide_plain', read_only=True)\n        seq = serializers.IntegerField(read_only=True)",
        "detail": "tabbycat.api.serializers",
        "documentation": {}
    },
    {
        "label": "MotionSerializer",
        "kind": 6,
        "importPath": "tabbycat.api.serializers",
        "description": "tabbycat.api.serializers",
        "peekOfCode": "class MotionSerializer(serializers.ModelSerializer):\n    class RoundsSerializer(serializers.ModelSerializer):\n        # Should these be filtered if unreleased?\n        round = fields.TournamentHyperlinkedRelatedField(view_name='api-round-detail',\n            lookup_field='seq', lookup_url_kwarg='round_seq',\n            queryset=Round.objects.all())\n        class Meta:\n            model = RoundMotion\n            fields = ('round', 'seq')\n    url = fields.TournamentHyperlinkedIdentityField(view_name='api-motion-detail')",
        "detail": "tabbycat.api.serializers",
        "documentation": {}
    },
    {
        "label": "BreakCategorySerializer",
        "kind": 6,
        "importPath": "tabbycat.api.serializers",
        "description": "tabbycat.api.serializers",
        "peekOfCode": "class BreakCategorySerializer(serializers.ModelSerializer):\n    class BreakCategoryLinksSerializer(serializers.Serializer):\n        eligibility = fields.TournamentHyperlinkedIdentityField(\n            view_name='api-breakcategory-eligibility')\n        breaking_teams = fields.TournamentHyperlinkedIdentityField(\n            view_name='api-breakcategory-break')\n    url = fields.TournamentHyperlinkedIdentityField(\n        view_name='api-breakcategory-detail')\n    _links = BreakCategoryLinksSerializer(source='*', read_only=True)\n    class Meta:",
        "detail": "tabbycat.api.serializers",
        "documentation": {}
    },
    {
        "label": "SpeakerCategorySerializer",
        "kind": 6,
        "importPath": "tabbycat.api.serializers",
        "description": "tabbycat.api.serializers",
        "peekOfCode": "class SpeakerCategorySerializer(serializers.ModelSerializer):\n    class SpeakerCategoryLinksSerializer(serializers.Serializer):\n        eligibility = fields.TournamentHyperlinkedIdentityField(\n            view_name='api-speakercategory-eligibility', lookup_field='pk')\n    url = fields.TournamentHyperlinkedIdentityField(\n        view_name='api-speakercategory-detail', lookup_field='pk')\n    _links = SpeakerCategoryLinksSerializer(source='*', read_only=True)\n    class Meta:\n        model = SpeakerCategory\n        exclude = ('tournament',)",
        "detail": "tabbycat.api.serializers",
        "documentation": {}
    },
    {
        "label": "BaseEligibilitySerializer",
        "kind": 6,
        "importPath": "tabbycat.api.serializers",
        "description": "tabbycat.api.serializers",
        "peekOfCode": "class BaseEligibilitySerializer(serializers.ModelSerializer):\n    class Meta:\n        read_only_fields = ('slug',)\n    def update(self, instance, validated_data):\n        participants = validated_data.get(self.Meta.participants_field, [])\n        if self.partial:\n            # Add teams to category, don't remove any\n            getattr(self.instance, self.Meta.participants_field).add(*participants)\n        else:\n            getattr(self.instance, self.Meta.participants_field).set(participants)",
        "detail": "tabbycat.api.serializers",
        "documentation": {}
    },
    {
        "label": "BreakEligibilitySerializer",
        "kind": 6,
        "importPath": "tabbycat.api.serializers",
        "description": "tabbycat.api.serializers",
        "peekOfCode": "class BreakEligibilitySerializer(BaseEligibilitySerializer):\n    team_set = fields.TournamentHyperlinkedRelatedField(\n        many=True,\n        queryset=Team.objects.all(),\n        view_name='api-team-detail',\n    )\n    class Meta(BaseEligibilitySerializer.Meta):\n        model = BreakCategory\n        participants_field = 'team_set'\n        fields = ('slug', participants_field)",
        "detail": "tabbycat.api.serializers",
        "documentation": {}
    },
    {
        "label": "SpeakerEligibilitySerializer",
        "kind": 6,
        "importPath": "tabbycat.api.serializers",
        "description": "tabbycat.api.serializers",
        "peekOfCode": "class SpeakerEligibilitySerializer(BaseEligibilitySerializer):\n    speaker_set = fields.TournamentHyperlinkedRelatedField(\n        many=True,\n        queryset=Speaker.objects.all(),\n        view_name='api-speaker-detail',\n        tournament_field='team__tournament',\n    )\n    class Meta(BaseEligibilitySerializer.Meta):\n        model = SpeakerCategory\n        participants_field = 'speaker_set'",
        "detail": "tabbycat.api.serializers",
        "documentation": {}
    },
    {
        "label": "BreakingTeamSerializer",
        "kind": 6,
        "importPath": "tabbycat.api.serializers",
        "description": "tabbycat.api.serializers",
        "peekOfCode": "class BreakingTeamSerializer(serializers.ModelSerializer):\n    team = fields.TournamentHyperlinkedRelatedField(view_name='api-team-detail', queryset=Team.objects.all())\n    class Meta:\n        model = BreakingTeam\n        exclude = ('id', 'break_category')\n    def validate_team(self, value):\n        qs = BreakingTeam.objects.filter(\n            break_category=self.context['break_category'], team=value).exclude(id=getattr(self.instance, 'id', None))\n        if qs.exists():\n            raise serializers.ValidationError(\"Object with same value already exists\")",
        "detail": "tabbycat.api.serializers",
        "documentation": {}
    },
    {
        "label": "PartialBreakingTeamSerializer",
        "kind": 6,
        "importPath": "tabbycat.api.serializers",
        "description": "tabbycat.api.serializers",
        "peekOfCode": "class PartialBreakingTeamSerializer(BreakingTeamSerializer):\n    class Meta:\n        model = BreakingTeam\n        fields = ('team', 'remark')\n    def validate_team(self, value):\n        try:\n            return self.context['break_category'].breakingteam_set.get(team=value)\n        except BreakingTeam.DoesNotExist:\n            raise serializers.ValidationError('Team is not included in break')\n    def save(self, **kwargs):",
        "detail": "tabbycat.api.serializers",
        "documentation": {}
    },
    {
        "label": "SpeakerSerializer",
        "kind": 6,
        "importPath": "tabbycat.api.serializers",
        "description": "tabbycat.api.serializers",
        "peekOfCode": "class SpeakerSerializer(serializers.ModelSerializer):\n    class SpeakerLinksSerializer(serializers.Serializer):\n        checkin = fields.TournamentHyperlinkedIdentityField(tournament_field='team__tournament', view_name='api-speaker-checkin')\n    url = fields.TournamentHyperlinkedIdentityField(tournament_field='team__tournament', view_name='api-speaker-detail')\n    name = fields.AnonymisingParticipantNameField()\n    team = fields.TournamentHyperlinkedRelatedField(view_name='api-team-detail', queryset=Team.objects.all())\n    categories = fields.TournamentHyperlinkedRelatedField(\n        many=True,\n        view_name='api-speakercategory-detail',\n        queryset=SpeakerCategory.objects.all(),",
        "detail": "tabbycat.api.serializers",
        "documentation": {}
    },
    {
        "label": "AdjudicatorSerializer",
        "kind": 6,
        "importPath": "tabbycat.api.serializers",
        "description": "tabbycat.api.serializers",
        "peekOfCode": "class AdjudicatorSerializer(serializers.ModelSerializer):\n    class AdjudicatorLinksSerializer(serializers.Serializer):\n        checkin = fields.TournamentHyperlinkedIdentityField(view_name='api-adjudicator-checkin')\n    url = fields.TournamentHyperlinkedIdentityField(view_name='api-adjudicator-detail')\n    name = fields.AnonymisingParticipantNameField()\n    institution = serializers.HyperlinkedRelatedField(\n        allow_null=True,\n        view_name='api-global-institution-detail',\n        queryset=Institution.objects.all(),\n    )",
        "detail": "tabbycat.api.serializers",
        "documentation": {}
    },
    {
        "label": "TeamSerializer",
        "kind": 6,
        "importPath": "tabbycat.api.serializers",
        "description": "tabbycat.api.serializers",
        "peekOfCode": "class TeamSerializer(serializers.ModelSerializer):\n    class TeamSpeakerSerializer(SpeakerSerializer):\n        team = None\n        class Meta:\n            model = Speaker\n            exclude = ('team',)\n    url = fields.TournamentHyperlinkedIdentityField(view_name='api-team-detail')\n    institution = serializers.HyperlinkedRelatedField(\n        allow_null=True,\n        view_name='api-global-institution-detail',",
        "detail": "tabbycat.api.serializers",
        "documentation": {}
    },
    {
        "label": "InstitutionSerializer",
        "kind": 6,
        "importPath": "tabbycat.api.serializers",
        "description": "tabbycat.api.serializers",
        "peekOfCode": "class InstitutionSerializer(serializers.ModelSerializer):\n    url = serializers.HyperlinkedIdentityField(view_name='api-global-institution-detail')\n    region = fields.CreatableSlugRelatedField(slug_field='name', queryset=Region.objects.all(), required=False, allow_null=True)\n    venue_constraints = VenueConstraintSerializer(many=True, required=False)\n    class Meta:\n        model = Institution\n        fields = '__all__'\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        if not is_staff(kwargs.get('context')):",
        "detail": "tabbycat.api.serializers",
        "documentation": {}
    },
    {
        "label": "PerTournamentInstitutionSerializer",
        "kind": 6,
        "importPath": "tabbycat.api.serializers",
        "description": "tabbycat.api.serializers",
        "peekOfCode": "class PerTournamentInstitutionSerializer(InstitutionSerializer):\n    teams = fields.TournamentHyperlinkedRelatedField(\n        source='team_set',\n        many=True,\n        view_name='api-team-detail',\n        required=False,\n    )\n    adjudicators = fields.TournamentHyperlinkedRelatedField(\n        source='adjudicator_set',\n        many=True,",
        "detail": "tabbycat.api.serializers",
        "documentation": {}
    },
    {
        "label": "VenueSerializer",
        "kind": 6,
        "importPath": "tabbycat.api.serializers",
        "description": "tabbycat.api.serializers",
        "peekOfCode": "class VenueSerializer(serializers.ModelSerializer):\n    class VenueLinksSerializer(serializers.Serializer):\n        checkin = fields.TournamentHyperlinkedIdentityField(view_name='api-venue-checkin')\n    url = fields.TournamentHyperlinkedIdentityField(view_name='api-venue-detail')\n    categories = fields.TournamentHyperlinkedRelatedField(\n        source='venuecategory_set', many=True,\n        view_name='api-venuecategory-detail',\n        queryset=VenueCategory.objects.all(),\n    )\n    display_name = serializers.ReadOnlyField()",
        "detail": "tabbycat.api.serializers",
        "documentation": {}
    },
    {
        "label": "VenueCategorySerializer",
        "kind": 6,
        "importPath": "tabbycat.api.serializers",
        "description": "tabbycat.api.serializers",
        "peekOfCode": "class VenueCategorySerializer(serializers.ModelSerializer):\n    url = fields.TournamentHyperlinkedIdentityField(view_name='api-venuecategory-detail')\n    venues = fields.TournamentHyperlinkedRelatedField(\n        many=True,\n        view_name='api-venue-detail',\n        queryset=Venue.objects.all(),\n    )\n    class Meta:\n        model = VenueCategory\n        exclude = ('tournament',)",
        "detail": "tabbycat.api.serializers",
        "documentation": {}
    },
    {
        "label": "BaseStandingsSerializer",
        "kind": 6,
        "importPath": "tabbycat.api.serializers",
        "description": "tabbycat.api.serializers",
        "peekOfCode": "class BaseStandingsSerializer(serializers.Serializer):\n    rank = serializers.SerializerMethodField()\n    tied = serializers.SerializerMethodField()\n    metrics = serializers.SerializerMethodField()\n    def get_rank(self, obj) -> int:\n        return obj.rankings['rank'][0]\n    def get_tied(self, obj) -> bool:\n        return obj.rankings['rank'][1]\n    def get_metrics(self, obj) -> list:\n        return [{'metric': s, 'value': v} for s, v in obj.metrics.items()]",
        "detail": "tabbycat.api.serializers",
        "documentation": {}
    },
    {
        "label": "TeamStandingsSerializer",
        "kind": 6,
        "importPath": "tabbycat.api.serializers",
        "description": "tabbycat.api.serializers",
        "peekOfCode": "class TeamStandingsSerializer(BaseStandingsSerializer):\n    team = fields.TournamentHyperlinkedRelatedField(view_name='api-team-detail', queryset=Team.objects.all())\n    @extend_schema_field(get_metrics_field_type(TeamStandingsGenerator))\n    def get_metrics(self, obj) -> list:\n        return super().get_metrics(obj)\nclass SpeakerStandingsSerializer(BaseStandingsSerializer):\n    speaker = fields.AnonymisingHyperlinkedTournamentRelatedField(view_name='api-speaker-detail', anonymous_source='anonymous')\n    @extend_schema_field(get_metrics_field_type(SpeakerStandingsGenerator))\n    def get_metrics(self, obj) -> list:\n        return super().get_metrics(obj)",
        "detail": "tabbycat.api.serializers",
        "documentation": {}
    },
    {
        "label": "SpeakerStandingsSerializer",
        "kind": 6,
        "importPath": "tabbycat.api.serializers",
        "description": "tabbycat.api.serializers",
        "peekOfCode": "class SpeakerStandingsSerializer(BaseStandingsSerializer):\n    speaker = fields.AnonymisingHyperlinkedTournamentRelatedField(view_name='api-speaker-detail', anonymous_source='anonymous')\n    @extend_schema_field(get_metrics_field_type(SpeakerStandingsGenerator))\n    def get_metrics(self, obj) -> list:\n        return super().get_metrics(obj)\nclass DebateAdjudicatorSerializer(serializers.Serializer):\n    adjudicators = Adjudicator.objects.all()\n    chair = fields.TournamentHyperlinkedRelatedField(view_name='api-adjudicator-detail', queryset=adjudicators)\n    panellists = fields.TournamentHyperlinkedRelatedField(many=True, view_name='api-adjudicator-detail', queryset=adjudicators)\n    trainees = fields.TournamentHyperlinkedRelatedField(many=True, view_name='api-adjudicator-detail', queryset=adjudicators)",
        "detail": "tabbycat.api.serializers",
        "documentation": {}
    },
    {
        "label": "DebateAdjudicatorSerializer",
        "kind": 6,
        "importPath": "tabbycat.api.serializers",
        "description": "tabbycat.api.serializers",
        "peekOfCode": "class DebateAdjudicatorSerializer(serializers.Serializer):\n    adjudicators = Adjudicator.objects.all()\n    chair = fields.TournamentHyperlinkedRelatedField(view_name='api-adjudicator-detail', queryset=adjudicators)\n    panellists = fields.TournamentHyperlinkedRelatedField(many=True, view_name='api-adjudicator-detail', queryset=adjudicators)\n    trainees = fields.TournamentHyperlinkedRelatedField(many=True, view_name='api-adjudicator-detail', queryset=adjudicators)\n    def save(self, **kwargs):\n        aa = kwargs['debate'].adjudicators\n        aa.chair = self.validated_data.get('chair')\n        aa.panellists = self.validated_data.get('panellists')\n        aa.trainees = self.validated_data.get('trainees')",
        "detail": "tabbycat.api.serializers",
        "documentation": {}
    },
    {
        "label": "RoundPairingSerializer",
        "kind": 6,
        "importPath": "tabbycat.api.serializers",
        "description": "tabbycat.api.serializers",
        "peekOfCode": "class RoundPairingSerializer(serializers.ModelSerializer):\n    class DebateTeamSerializer(serializers.ModelSerializer):\n        team = fields.TournamentHyperlinkedRelatedField(view_name='api-team-detail', queryset=Team.objects.all())\n        side = fields.SideChoiceField(required=False)\n        class Meta:\n            model = DebateTeam\n            fields = ('team', 'side')\n        def save(self, **kwargs):\n            kwargs['side'] = kwargs.get('side', kwargs['seq'])\n            return super().save(**kwargs)",
        "detail": "tabbycat.api.serializers",
        "documentation": {}
    },
    {
        "label": "FeedbackQuestionSerializer",
        "kind": 6,
        "importPath": "tabbycat.api.serializers",
        "description": "tabbycat.api.serializers",
        "peekOfCode": "class FeedbackQuestionSerializer(serializers.ModelSerializer):\n    url = fields.TournamentHyperlinkedIdentityField(view_name='api-feedbackquestion-detail')\n    class Meta:\n        model = AdjudicatorFeedbackQuestion\n        exclude = ('tournament',)\n    validate_reference = partialmethod(_validate_field, 'reference')\n    validate_seq = partialmethod(_validate_field, 'seq')\nclass FeedbackSerializer(TabroomSubmissionFieldsMixin, serializers.ModelSerializer):\n    class SubmitterSourceField(fields.BaseSourceField):\n        field_source_name = 'source'",
        "detail": "tabbycat.api.serializers",
        "documentation": {}
    },
    {
        "label": "FeedbackSerializer",
        "kind": 6,
        "importPath": "tabbycat.api.serializers",
        "description": "tabbycat.api.serializers",
        "peekOfCode": "class FeedbackSerializer(TabroomSubmissionFieldsMixin, serializers.ModelSerializer):\n    class SubmitterSourceField(fields.BaseSourceField):\n        field_source_name = 'source'\n        models = {\n            'api-adjudicator-detail': (Adjudicator, 'source_adjudicator'),\n            'api-team-detail': (Team, 'source_team'),\n        }\n        def get_url_options(self, value, format):\n            for view_name, (model, field) in self.models.items():\n                if getattr(value, field) is not None:",
        "detail": "tabbycat.api.serializers",
        "documentation": {}
    },
    {
        "label": "BallotSerializer",
        "kind": 6,
        "importPath": "tabbycat.api.serializers",
        "description": "tabbycat.api.serializers",
        "peekOfCode": "class BallotSerializer(TabroomSubmissionFieldsMixin, serializers.ModelSerializer):\n    class ResultSerializer(serializers.Serializer):\n        class SheetSerializer(serializers.Serializer):\n            class TeamResultSerializer(serializers.Serializer):\n                side = fields.SideChoiceField(required=False)\n                points = serializers.IntegerField(required=False)\n                win = serializers.BooleanField(required=False)\n                score = serializers.FloatField(required=False, allow_null=True)\n                team = fields.TournamentHyperlinkedRelatedField(\n                    view_name='api-team-detail',",
        "detail": "tabbycat.api.serializers",
        "documentation": {}
    },
    {
        "label": "UpdateBallotSerializer",
        "kind": 6,
        "importPath": "tabbycat.api.serializers",
        "description": "tabbycat.api.serializers",
        "peekOfCode": "class UpdateBallotSerializer(serializers.ModelSerializer):\n    \"\"\"Unused, just for OpenAPI with BallotSerializer.update()\"\"\"\n    class Meta:\n        model = BallotSubmission\n        fields = ('confirmed', 'discarded')\nclass PreformedPanelSerializer(serializers.ModelSerializer):\n    url = fields.RoundHyperlinkedIdentityField(view_name='api-preformedpanel-detail', lookup_url_kwarg='debate_pk')\n    adjudicators = DebateAdjudicatorSerializer(required=False, allow_null=True)\n    class Meta:\n        model = PreformedPanel",
        "detail": "tabbycat.api.serializers",
        "documentation": {}
    },
    {
        "label": "PreformedPanelSerializer",
        "kind": 6,
        "importPath": "tabbycat.api.serializers",
        "description": "tabbycat.api.serializers",
        "peekOfCode": "class PreformedPanelSerializer(serializers.ModelSerializer):\n    url = fields.RoundHyperlinkedIdentityField(view_name='api-preformedpanel-detail', lookup_url_kwarg='debate_pk')\n    adjudicators = DebateAdjudicatorSerializer(required=False, allow_null=True)\n    class Meta:\n        model = PreformedPanel\n        exclude = ('round',)\n    def create(self, validated_data):\n        adjs_data = validated_data.pop('adjudicators', None)\n        validated_data['round'] = self.context['round']\n        debate = super().create(validated_data)",
        "detail": "tabbycat.api.serializers",
        "documentation": {}
    },
    {
        "label": "SpeakerRoundScoresSerializer",
        "kind": 6,
        "importPath": "tabbycat.api.serializers",
        "description": "tabbycat.api.serializers",
        "peekOfCode": "class SpeakerRoundScoresSerializer(serializers.ModelSerializer):\n    class RoundScoresSerializer(serializers.ModelSerializer):\n        class RoundSpeechSerializer(serializers.ModelSerializer):\n            class Meta:\n                model = SpeakerScore\n                fields = ('score', 'position', 'ghost')\n        round = fields.TournamentHyperlinkedRelatedField(view_name='api-round-detail', source='debate.round',\n            lookup_field='seq', lookup_url_kwarg='round_seq',\n            queryset=Round.objects.all())\n        speeches = RoundSpeechSerializer(many=True, source=\"scores\")",
        "detail": "tabbycat.api.serializers",
        "documentation": {}
    },
    {
        "label": "TeamRoundScoresSerializer",
        "kind": 6,
        "importPath": "tabbycat.api.serializers",
        "description": "tabbycat.api.serializers",
        "peekOfCode": "class TeamRoundScoresSerializer(serializers.ModelSerializer):\n    class ScoreSerializer(serializers.ModelSerializer):\n        round = fields.TournamentHyperlinkedRelatedField(view_name='api-round-detail', source='debate.round',\n            lookup_field='seq', lookup_url_kwarg='round_seq',\n            queryset=Round.objects.all())\n        points = serializers.IntegerField(source='ballot.points')\n        score = serializers.FloatField(source='ballot.score')\n        has_ghost = serializers.BooleanField(source='ballot.has_ghost')\n        class Meta:\n            model = TeamScore",
        "detail": "tabbycat.api.serializers",
        "documentation": {}
    },
    {
        "label": "UserSerializer",
        "kind": 6,
        "importPath": "tabbycat.api.serializers",
        "description": "tabbycat.api.serializers",
        "peekOfCode": "class UserSerializer(serializers.ModelSerializer):\n    class TournamentPermissionsSerializer(serializers.Serializer):\n        tournament = serializers.HyperlinkedIdentityField(view_name='api-tournament-detail', lookup_field='slug', lookup_url_kwarg='tournament_slug')\n        groups = fields.TournamentHyperlinkedRelatedField(many=True, view_name='api-group-detail', queryset=Group.objects.all(), default=[])\n        permissions = serializers.ListField(child=serializers.ChoiceField(choices=Permission.choices), required=False)\n    url = serializers.HyperlinkedIdentityField(view_name='api-user-detail')\n    tournaments = TournamentPermissionsSerializer(many=True, required=False)\n    class Meta:\n        model = get_user_model()\n        fields = ('id', 'url', 'username', 'password', 'is_superuser', 'is_staff', 'email', 'is_active', 'date_joined', 'last_login', 'tournaments')",
        "detail": "tabbycat.api.serializers",
        "documentation": {}
    },
    {
        "label": "GroupSerializer",
        "kind": 6,
        "importPath": "tabbycat.api.serializers",
        "description": "tabbycat.api.serializers",
        "peekOfCode": "class GroupSerializer(serializers.ModelSerializer):\n    url = fields.TournamentHyperlinkedIdentityField(view_name='api-group-detail')\n    class Meta:\n        model = Group\n        exclude = ('tournament',)\nclass ScoreCriterionSerializer(serializers.ModelSerializer):\n    url = fields.TournamentHyperlinkedIdentityField(view_name='api-score-criteria-detail')\n    class Meta:\n        model = ScoreCriterion\n        exclude = ('tournament',)",
        "detail": "tabbycat.api.serializers",
        "documentation": {}
    },
    {
        "label": "ScoreCriterionSerializer",
        "kind": 6,
        "importPath": "tabbycat.api.serializers",
        "description": "tabbycat.api.serializers",
        "peekOfCode": "class ScoreCriterionSerializer(serializers.ModelSerializer):\n    url = fields.TournamentHyperlinkedIdentityField(view_name='api-score-criteria-detail')\n    class Meta:\n        model = ScoreCriterion\n        exclude = ('tournament',)",
        "detail": "tabbycat.api.serializers",
        "documentation": {}
    },
    {
        "label": "get_metrics_field_type",
        "kind": 2,
        "importPath": "tabbycat.api.serializers",
        "description": "tabbycat.api.serializers",
        "peekOfCode": "def get_metrics_field_type(generator):\n    return {\n        'type': 'array',\n        'items': {\n            'type': 'object',\n            'properties': {\n                'metric': {'type': 'string', 'enum': list(generator.metric_annotator_classes.keys())},\n                'value': {'type': 'number'},\n            },\n        },",
        "detail": "tabbycat.api.serializers",
        "documentation": {}
    },
    {
        "label": "create_auth_token",
        "kind": 2,
        "importPath": "tabbycat.api.signals",
        "description": "tabbycat.api.signals",
        "peekOfCode": "def create_auth_token(sender, instance=None, created=False, **kwargs):\n    if created:\n        Token.objects.create(user=instance)",
        "detail": "tabbycat.api.signals",
        "documentation": {}
    },
    {
        "label": "pref_router",
        "kind": 5,
        "importPath": "tabbycat.api.urls",
        "description": "tabbycat.api.urls",
        "peekOfCode": "pref_router = SimpleRouter(trailing_slash=False)\npref_router.register('preferences', views.TournamentPreferenceViewSet)\nlist_methods = {'get': 'list', 'post': 'create'}\ndetail_methods = {'get': 'retrieve', 'post': 'update', 'patch': 'partial_update', 'delete': 'destroy'}\nurlpatterns = [\n    path('',\n        views.APIRootView.as_view(),\n        name='api-root'),\n    path('/schema', include([\n        path('.yml', SpectacularAPIView.as_view(), name='api-schema'),",
        "detail": "tabbycat.api.urls",
        "documentation": {}
    },
    {
        "label": "list_methods",
        "kind": 5,
        "importPath": "tabbycat.api.urls",
        "description": "tabbycat.api.urls",
        "peekOfCode": "list_methods = {'get': 'list', 'post': 'create'}\ndetail_methods = {'get': 'retrieve', 'post': 'update', 'patch': 'partial_update', 'delete': 'destroy'}\nurlpatterns = [\n    path('',\n        views.APIRootView.as_view(),\n        name='api-root'),\n    path('/schema', include([\n        path('.yml', SpectacularAPIView.as_view(), name='api-schema'),\n        path('/redoc/', SpectacularRedocView.as_view(url_name='api-schema'), name='redoc'),\n    ])),",
        "detail": "tabbycat.api.urls",
        "documentation": {}
    },
    {
        "label": "detail_methods",
        "kind": 5,
        "importPath": "tabbycat.api.urls",
        "description": "tabbycat.api.urls",
        "peekOfCode": "detail_methods = {'get': 'retrieve', 'post': 'update', 'patch': 'partial_update', 'delete': 'destroy'}\nurlpatterns = [\n    path('',\n        views.APIRootView.as_view(),\n        name='api-root'),\n    path('/schema', include([\n        path('.yml', SpectacularAPIView.as_view(), name='api-schema'),\n        path('/redoc/', SpectacularRedocView.as_view(url_name='api-schema'), name='redoc'),\n    ])),\n    path('/v1', include([",
        "detail": "tabbycat.api.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "tabbycat.api.urls",
        "description": "tabbycat.api.urls",
        "peekOfCode": "urlpatterns = [\n    path('',\n        views.APIRootView.as_view(),\n        name='api-root'),\n    path('/schema', include([\n        path('.yml', SpectacularAPIView.as_view(), name='api-schema'),\n        path('/redoc/', SpectacularRedocView.as_view(url_name='api-schema'), name='redoc'),\n    ])),\n    path('/v1', include([\n        path('',",
        "detail": "tabbycat.api.urls",
        "documentation": {}
    },
    {
        "label": "is_staff",
        "kind": 2,
        "importPath": "tabbycat.api.utils",
        "description": "tabbycat.api.utils",
        "peekOfCode": "def is_staff(context):\n    # OpenAPI generation does not have a view (sometimes context is also None in that circumstance).\n    # Avoid redacting fields.\n    return context is None or 'view' not in context or not context['request'].user.is_anonymous",
        "detail": "tabbycat.api.utils",
        "documentation": {}
    },
    {
        "label": "APIRootView",
        "kind": 6,
        "importPath": "tabbycat.api.views",
        "description": "tabbycat.api.views",
        "peekOfCode": "class APIRootView(PublicAPIMixin, GenericAPIView):\n    name = \"API Root\"\n    serializer_class = serializers.RootSerializer\n    def get(self, request, format=None):\n        \"\"\"API Entrypoint; info about versions\"\"\"\n        return Response({\n            \"_links\": {\n                \"v1\": reverse('api-v1-root', request=request, format=format),\n            },\n            \"timezone\": settings.TIME_ZONE,",
        "detail": "tabbycat.api.views",
        "documentation": {}
    },
    {
        "label": "APIV1RootView",
        "kind": 6,
        "importPath": "tabbycat.api.views",
        "description": "tabbycat.api.views",
        "peekOfCode": "class APIV1RootView(PublicAPIMixin, GenericAPIView):\n    name = \"API Version 1 Root\"\n    serializer_class = serializers.V1RootSerializer\n    lookup_field = 'slug'\n    lookup_url_kwarg = 'tournament_slug'\n    def get(self, request, format=None):\n        \"\"\"Entrypoint for version 1 of the API\"\"\"\n        tournaments_create_url = reverse('api-tournament-list', request=request, format=format)\n        institution_create_url = reverse('api-global-institution-list', request=request, format=format)\n        users_create_url = reverse('api-user-list', request=request, format=format)",
        "detail": "tabbycat.api.views",
        "documentation": {}
    },
    {
        "label": "TournamentViewSet",
        "kind": 6,
        "importPath": "tabbycat.api.views",
        "description": "tabbycat.api.views",
        "peekOfCode": "class TournamentViewSet(PublicAPIMixin, APILogActionMixin, ModelViewSet):\n    # Don't use TournamentAPIMixin here, it's not filtering objects by tournament.\n    queryset = Tournament.objects.all().prefetch_related(\n        'breakcategory_set',\n        Prefetch('round_set',\n            queryset=Round.objects.filter(completed=False).annotate(Count('debate')).order_by('seq'),\n            to_attr='current_round_set'),\n    )\n    serializer_class = serializers.TournamentSerializer\n    lookup_field = 'slug'",
        "detail": "tabbycat.api.views",
        "documentation": {}
    },
    {
        "label": "TournamentPreferenceViewSet",
        "kind": 6,
        "importPath": "tabbycat.api.views",
        "description": "tabbycat.api.views",
        "peekOfCode": "class TournamentPreferenceViewSet(TournamentFromUrlMixin, AdministratorAPIMixin, APILogActionMixin, PerInstancePreferenceViewSet):\n    \"\"\"\n    \"\"\"\n    # Blank comment to avoid comment from TournamentFromUrlMixin appearing.\n    queryset = TournamentPreferenceModel.objects.all()\n    serializer_class = PreferenceSerializer\n    list_permission = Permission.VIEW_TOURNAMENTPREFERENCEMODEL\n    update_permission = Permission.EDIT_TOURNAMENTPREFERENCEMODEL\n    action_log_content_object_attr = 'obj'\n    action_log_type_updated = ActionLogEntry.ActionType.OPTIONS_EDIT",
        "detail": "tabbycat.api.views",
        "documentation": {}
    },
    {
        "label": "RoundViewSet",
        "kind": 6,
        "importPath": "tabbycat.api.views",
        "description": "tabbycat.api.views",
        "peekOfCode": "class RoundViewSet(TournamentAPIMixin, PublicAPIMixin, ModelViewSet):\n    serializer_class = serializers.RoundSerializer\n    lookup_field = 'seq'\n    lookup_url_kwarg = 'round_seq'\n    action_log_type_created = ActionLogEntry.ActionType.ROUND_CREATE\n    action_log_type_updated = ActionLogEntry.ActionType.ROUND_EDIT\n    create_permission = Permission.CREATE_ROUND\n    update_permission = Permission.EDIT_ROUND\n    destroy_permission = False\n    def get_queryset(self):",
        "detail": "tabbycat.api.views",
        "documentation": {}
    },
    {
        "label": "MotionViewSet",
        "kind": 6,
        "importPath": "tabbycat.api.views",
        "description": "tabbycat.api.views",
        "peekOfCode": "class MotionViewSet(TournamentAPIMixin, TournamentPublicAPIMixin, ModelViewSet):\n    serializer_class = serializers.MotionSerializer\n    access_preference = ('public_motions', 'motion_tab_released')\n    access_operator = any\n    action_log_type_created = ActionLogEntry.ActionType.MOTION_EDIT\n    action_log_type_updated = ActionLogEntry.ActionType.MOTION_EDIT\n    list_permission = Permission.VIEW_MOTION\n    create_permission = Permission.EDIT_MOTION\n    update_permission = Permission.EDIT_MOTION\n    destroy_permission = False",
        "detail": "tabbycat.api.views",
        "documentation": {}
    },
    {
        "label": "BreakCategoryViewSet",
        "kind": 6,
        "importPath": "tabbycat.api.views",
        "description": "tabbycat.api.views",
        "peekOfCode": "class BreakCategoryViewSet(TournamentAPIMixin, PublicAPIMixin, ModelViewSet):\n    serializer_class = serializers.BreakCategorySerializer\n    action_log_type_created = ActionLogEntry.ActionType.BREAK_CATEGORIES_EDIT\n    action_log_type_updated = ActionLogEntry.ActionType.BREAK_CATEGORIES_EDIT\n    list_permission = Permission.VIEW_BREAK_CATEGORIES\n    create_permission = Permission.EDIT_BREAK_CATEGORIES\n    update_permission = Permission.EDIT_BREAK_CATEGORIES\n    destroy_permission = Permission.EDIT_BREAK_CATEGORIES\n@extend_schema(tags=['speaker-categories'], parameters=[tournament_parameter])\n@extend_schema_view(",
        "detail": "tabbycat.api.views",
        "documentation": {}
    },
    {
        "label": "SpeakerCategoryViewSet",
        "kind": 6,
        "importPath": "tabbycat.api.views",
        "description": "tabbycat.api.views",
        "peekOfCode": "class SpeakerCategoryViewSet(TournamentAPIMixin, PublicAPIMixin, ModelViewSet):\n    serializer_class = serializers.SpeakerCategorySerializer\n    action_log_type_created = ActionLogEntry.ActionType.SPEAKER_CATEGORIES_EDIT\n    action_log_type_updated = ActionLogEntry.ActionType.SPEAKER_CATEGORIES_EDIT\n    list_permission = Permission.VIEW_SPEAKER_CATEGORIES\n    create_permission = Permission.EDIT_SPEAKER_CATEGORIES\n    update_permission = Permission.EDIT_SPEAKER_CATEGORIES\n    destroy_permission = Permission.EDIT_SPEAKER_CATEGORIES\n    def get_queryset(self):\n        if not self.request.user or not self.request.user.is_staff:",
        "detail": "tabbycat.api.views",
        "documentation": {}
    },
    {
        "label": "BreakEligibilityView",
        "kind": 6,
        "importPath": "tabbycat.api.views",
        "description": "tabbycat.api.views",
        "peekOfCode": "class BreakEligibilityView(TournamentAPIMixin, TournamentPublicAPIMixin, RetrieveUpdateAPIView):\n    serializer_class = serializers.BreakEligibilitySerializer\n    access_preference = 'public_break_categories'\n    action_log_type_updated = ActionLogEntry.ActionType.BREAK_ELIGIBILITY_EDIT\n    list_permission = Permission.VIEW_BREAK_ELIGIBILITY\n    create_permission = Permission.EDIT_BREAK_ELIGIBILITY\n    update_permission = Permission.EDIT_BREAK_ELIGIBILITY\n    def get_queryset(self):\n        return super().get_queryset().prefetch_related('team_set')\n@extend_schema(tags=['speaker-categories'], parameters=[tournament_parameter, id_parameter])",
        "detail": "tabbycat.api.views",
        "documentation": {}
    },
    {
        "label": "SpeakerEligibilityView",
        "kind": 6,
        "importPath": "tabbycat.api.views",
        "description": "tabbycat.api.views",
        "peekOfCode": "class SpeakerEligibilityView(TournamentAPIMixin, TournamentPublicAPIMixin, RetrieveUpdateAPIView):\n    serializer_class = serializers.SpeakerEligibilitySerializer\n    access_preference = 'public_participants'\n    action_log_type_updated = ActionLogEntry.ActionType.SPEAKER_ELIGIBILITY_EDIT\n    list_permission = Permission.VIEW_SPEAKER_ELIGIBILITY\n    create_permission = Permission.EDIT_SPEAKER_ELIGIBILITY\n    update_permission = Permission.EDIT_SPEAKER_ELIGIBILITY\n    def get_queryset(self):\n        qs = super().get_queryset().prefetch_related('speaker_set')\n        if not self.request.user or not self.request.user.is_staff:",
        "detail": "tabbycat.api.views",
        "documentation": {}
    },
    {
        "label": "BreakingTeamsView",
        "kind": 6,
        "importPath": "tabbycat.api.views",
        "description": "tabbycat.api.views",
        "peekOfCode": "class BreakingTeamsView(TournamentAPIMixin, TournamentPublicAPIMixin, GenerateBreakMixin, GenericViewSet, ListModelMixin):\n    serializer_class = serializers.BreakingTeamSerializer\n    tournament_field = 'break_category__tournament'\n    pagination_class = None\n    access_preference = 'public_breaking_teams'\n    action_log_content_object_attr = 'break_category'\n    list_permission = Permission.VIEW_BREAK\n    create_permission = Permission.GENERATE_BREAK\n    update_permission = Permission.GENERATE_BREAK\n    destroy_permission = Permission.GENERATE_BREAK",
        "detail": "tabbycat.api.views",
        "documentation": {}
    },
    {
        "label": "InstitutionViewSet",
        "kind": 6,
        "importPath": "tabbycat.api.views",
        "description": "tabbycat.api.views",
        "peekOfCode": "class InstitutionViewSet(TournamentAPIMixin, TournamentPublicAPIMixin, ModelViewSet):\n    serializer_class = serializers.PerTournamentInstitutionSerializer\n    access_preference = 'public_institutions_list'\n    action_log_type_created = ActionLogEntry.ActionType.INSTITUTION_CREATE\n    action_log_type_updated = ActionLogEntry.ActionType.INSTITUTION_EDIT\n    list_permission = Permission.VIEW_INSTITUTIONS\n    create_permission = Permission.ADD_INSTITUTIONS\n    update_permission = Permission.ADD_INSTITUTIONS\n    destroy_permission = Permission.ADD_INSTITUTIONS\n    def perform_create(self, serializer):",
        "detail": "tabbycat.api.views",
        "documentation": {}
    },
    {
        "label": "TeamViewSet",
        "kind": 6,
        "importPath": "tabbycat.api.views",
        "description": "tabbycat.api.views",
        "peekOfCode": "class TeamViewSet(TournamentAPIMixin, TournamentPublicAPIMixin, ModelViewSet):\n    serializer_class = serializers.TeamSerializer\n    access_preference = 'public_participants'\n    action_log_type_created = ActionLogEntry.ActionType.TEAM_CREATE\n    action_log_type_updated = ActionLogEntry.ActionType.TEAM_EDIT\n    list_permission = Permission.VIEW_TEAMS\n    create_permission = Permission.ADD_TEAMS\n    update_permission = Permission.ADD_TEAMS\n    destroy_permission = Permission.ADD_TEAMS\n    def get_queryset(self):",
        "detail": "tabbycat.api.views",
        "documentation": {}
    },
    {
        "label": "AdjudicatorViewSet",
        "kind": 6,
        "importPath": "tabbycat.api.views",
        "description": "tabbycat.api.views",
        "peekOfCode": "class AdjudicatorViewSet(TournamentAPIMixin, TournamentPublicAPIMixin, ModelViewSet):\n    serializer_class = serializers.AdjudicatorSerializer\n    access_preference = 'public_participants'\n    action_log_type_created = ActionLogEntry.ActionType.ADJUDICATOR_CREATE\n    action_log_type_updated = ActionLogEntry.ActionType.ADJUDICATOR_EDIT\n    list_permission = Permission.VIEW_ADJUDICATORS\n    create_permission = Permission.ADD_ADJUDICATORS\n    update_permission = Permission.ADD_ADJUDICATORS\n    destroy_permission = Permission.ADD_ADJUDICATORS\n    def get_break_permission(self):",
        "detail": "tabbycat.api.views",
        "documentation": {}
    },
    {
        "label": "GlobalInstitutionViewSet",
        "kind": 6,
        "importPath": "tabbycat.api.views",
        "description": "tabbycat.api.views",
        "peekOfCode": "class GlobalInstitutionViewSet(AdministratorAPIMixin, ModelViewSet):\n    serializer_class = serializers.InstitutionSerializer\n    action_log_type_created = ActionLogEntry.ActionType.INSTITUTION_CREATE\n    action_log_type_updated = ActionLogEntry.ActionType.INSTITUTION_EDIT\n    list_permission = Permission.VIEW_INSTITUTIONS\n    create_permission = Permission.ADD_INSTITUTIONS\n    update_permission = Permission.ADD_INSTITUTIONS\n    destroy_permission = Permission.ADD_INSTITUTIONS\n    def get_queryset(self):\n        filters = Q()",
        "detail": "tabbycat.api.views",
        "documentation": {}
    },
    {
        "label": "SpeakerViewSet",
        "kind": 6,
        "importPath": "tabbycat.api.views",
        "description": "tabbycat.api.views",
        "peekOfCode": "class SpeakerViewSet(TournamentAPIMixin, TournamentPublicAPIMixin, ModelViewSet):\n    serializer_class = serializers.SpeakerSerializer\n    tournament_field = \"team__tournament\"\n    access_preference = 'public_participants'\n    action_log_type_created = ActionLogEntry.ActionType.SPEAKER_CREATE\n    action_log_type_updated = ActionLogEntry.ActionType.SPEAKER_EDIT\n    list_permission = Permission.VIEW_TEAMS\n    create_permission = Permission.ADD_TEAMS\n    update_permission = Permission.ADD_TEAMS\n    destroy_permission = Permission.ADD_TEAMS",
        "detail": "tabbycat.api.views",
        "documentation": {}
    },
    {
        "label": "VenueViewSet",
        "kind": 6,
        "importPath": "tabbycat.api.views",
        "description": "tabbycat.api.views",
        "peekOfCode": "class VenueViewSet(TournamentAPIMixin, PublicAPIMixin, ModelViewSet):\n    serializer_class = serializers.VenueSerializer\n    action_log_type_created = ActionLogEntry.ActionType.VENUE_CREATE\n    action_log_type_updated = ActionLogEntry.ActionType.VENUE_EDIT\n    list_permission = Permission.VIEW_ROOMS\n    create_permission = Permission.ADD_ROOMS\n    update_permission = Permission.ADD_ROOMS\n    destroy_permission = Permission.ADD_ROOMS\n    def get_queryset(self):\n        # Tournament must exist for URLs",
        "detail": "tabbycat.api.views",
        "documentation": {}
    },
    {
        "label": "VenueCategoryViewSet",
        "kind": 6,
        "importPath": "tabbycat.api.views",
        "description": "tabbycat.api.views",
        "peekOfCode": "class VenueCategoryViewSet(TournamentAPIMixin, PublicAPIMixin, ModelViewSet):\n    serializer_class = serializers.VenueCategorySerializer\n    action_log_type_created = ActionLogEntry.ActionType.VENUE_CATEGORY_CREATE\n    action_log_type_updated = ActionLogEntry.ActionType.VENUE_CATEGORIES_EDIT\n    list_permission = Permission.VIEW_ROOMCATEGORIES\n    create_permission = Permission.EDIT_ROOMCATEGORIES\n    update_permission = Permission.EDIT_ROOMCATEGORIES\n    destroy_permission = Permission.EDIT_ROOMCATEGORIES\n    def get_queryset(self):\n        # Tournament must exist for URLs",
        "detail": "tabbycat.api.views",
        "documentation": {}
    },
    {
        "label": "BaseCheckinsView",
        "kind": 6,
        "importPath": "tabbycat.api.views",
        "description": "tabbycat.api.views",
        "peekOfCode": "class BaseCheckinsView(AdministratorAPIMixin, TournamentAPIMixin, APIView):\n    name = \"Check-ins\"\n    lookup_field = 'pk'\n    lookup_url_kwarg = None\n    list_permission = Permission.VIEW_CHECKIN\n    create_permission = Permission.EDIT_PARTICIPANT_CHECKIN\n    update_permission = Permission.EDIT_PARTICIPANT_CHECKIN\n    destroy_permission = Permission.EDIT_PARTICIPANT_CHECKIN\n    def get_object_queryset(self):\n        lookup_url_kwarg = self.lookup_url_kwarg or self.lookup_field",
        "detail": "tabbycat.api.views",
        "documentation": {}
    },
    {
        "label": "AdjudicatorCheckinsView",
        "kind": 6,
        "importPath": "tabbycat.api.views",
        "description": "tabbycat.api.views",
        "peekOfCode": "class AdjudicatorCheckinsView(BaseCheckinsView):\n    model = Adjudicator\n    object_api_view = 'api-adjudicator-detail'\n    window_preference_pref = 'checkin_window_people'\n@extend_schema(tags=['teams'])\n@extend_schema_view(\n    get=extend_schema(summary=\"Get speaker checkin status\"),\n    delete=extend_schema(summary=\"Check out speaker\"),\n    put=extend_schema(summary=\"Check in speaker\"),\n    patch=extend_schema(summary=\"Toggle speaker checkin status\"),",
        "detail": "tabbycat.api.views",
        "documentation": {}
    },
    {
        "label": "SpeakerCheckinsView",
        "kind": 6,
        "importPath": "tabbycat.api.views",
        "description": "tabbycat.api.views",
        "peekOfCode": "class SpeakerCheckinsView(BaseCheckinsView):\n    model = Speaker\n    object_api_view = 'api-speaker-detail'\n    window_preference_pref = 'checkin_window_people'\n    tournament_field = 'team__tournament'\n@extend_schema(tags=['venues'])\n@extend_schema_view(\n    get=extend_schema(summary=\"Get room checkin status\"),\n    delete=extend_schema(summary=\"Check out room\"),\n    put=extend_schema(summary=\"Check in room\"),",
        "detail": "tabbycat.api.views",
        "documentation": {}
    },
    {
        "label": "VenueCheckinsView",
        "kind": 6,
        "importPath": "tabbycat.api.views",
        "description": "tabbycat.api.views",
        "peekOfCode": "class VenueCheckinsView(BaseCheckinsView):\n    model = Venue\n    object_api_view = 'api-venue-detail'\n    window_preference_pref = 'checkin_window_venues'\n    create_permission = Permission.EDIT_ROOM_CHECKIN\n    update_permission = Permission.EDIT_ROOM_CHECKIN\n    destroy_permission = Permission.EDIT_ROOM_CHECKIN\ndef get_metrics_params(generator):\n    metrics = {\n        'type': 'array',",
        "detail": "tabbycat.api.views",
        "documentation": {}
    },
    {
        "label": "BaseStandingsView",
        "kind": 6,
        "importPath": "tabbycat.api.views",
        "description": "tabbycat.api.views",
        "peekOfCode": "class BaseStandingsView(TournamentAPIMixin, TournamentPublicAPIMixin, GenericAPIView):\n    lookup_field = 'slug'\n    lookup_url_kwarg = 'tournament_slug'\n    def get_metrics(self):\n        if self.request.query_params.get('metrics'):\n            return self.request.query_params.get('metrics').split(\",\"), self.request.query_params.get('extra_metrics').split(\",\")\n        pref_model = self.model.__name__.lower()\n        return self.tournament.pref(pref_model + '_standings_precedence'), self.tournament.pref(pref_model + '_standings_extra_metrics')\n    def get_queryset(self):\n        qs = self.model.objects.filter(**{self.tournament_field: self.tournament}).select_related(self.tournament_field)",
        "detail": "tabbycat.api.views",
        "documentation": {}
    },
    {
        "label": "SubstantiveSpeakerStandingsView",
        "kind": 6,
        "importPath": "tabbycat.api.views",
        "description": "tabbycat.api.views",
        "peekOfCode": "class SubstantiveSpeakerStandingsView(BaseStandingsView):\n    name = \"Speaker Standings\"\n    serializer_class = serializers.SpeakerStandingsSerializer\n    access_preference = 'speaker_tab_released'\n    model = Speaker\n    tournament_field = 'team__tournament'\n    generator = SpeakerStandingsGenerator\n    list_permission = Permission.VIEW_SPEAKERSSTANDINGS\n    def get_queryset(self):\n        category = self.request.query_params.get('category', None)",
        "detail": "tabbycat.api.views",
        "documentation": {}
    },
    {
        "label": "ReplySpeakerStandingsView",
        "kind": 6,
        "importPath": "tabbycat.api.views",
        "description": "tabbycat.api.views",
        "peekOfCode": "class ReplySpeakerStandingsView(SubstantiveSpeakerStandingsView):\n    def get_metrics(self):\n        return ('replies_avg',), ('replies_stddev', 'replies_count')\n@extend_schema_view(\n    get=extend_schema(\n        summary=\"Get team standings\",\n        parameters=get_metrics_params(TeamStandingsGenerator),\n        responses=serializers.TeamStandingsSerializer(many=True),\n    ),\n)",
        "detail": "tabbycat.api.views",
        "documentation": {}
    },
    {
        "label": "TeamStandingsView",
        "kind": 6,
        "importPath": "tabbycat.api.views",
        "description": "tabbycat.api.views",
        "peekOfCode": "class TeamStandingsView(BaseStandingsView):\n    name = 'Team Standings'\n    serializer_class = serializers.TeamStandingsSerializer\n    access_preference = 'team_tab_released'\n    model = Team\n    generator = TeamStandingsGenerator\n    list_permission = Permission.VIEW_TEAMSTANDINGS\n    def get_queryset(self):\n        category = self.request.query_params.get('category', None)\n        if category is not None:",
        "detail": "tabbycat.api.views",
        "documentation": {}
    },
    {
        "label": "SpeakerRoundStandingsRoundsView",
        "kind": 6,
        "importPath": "tabbycat.api.views",
        "description": "tabbycat.api.views",
        "peekOfCode": "class SpeakerRoundStandingsRoundsView(TournamentAPIMixin, TournamentPublicAPIMixin, ModelViewSet):\n    serializer_class = serializers.SpeakerRoundScoresSerializer\n    tournament_field = \"team__tournament\"\n    access_preference = 'speaker_tab_released'\n    list_permission = Permission.VIEW_SPEAKERSSTANDINGS\n    def get_queryset(self):\n        qs = super().get_queryset().prefetch_related(Prefetch('team__debateteam_set', queryset=DebateTeam.objects.all().select_related('debate__round__tournament')))\n        data = {s.id: s for s in qs.all()}\n        speaker_scores = SpeakerScore.objects.select_related('speaker', 'ballot_submission',\n            'debate_team__debate__round__tournament').filter(",
        "detail": "tabbycat.api.views",
        "documentation": {}
    },
    {
        "label": "TeamRoundStandingsRoundsView",
        "kind": 6,
        "importPath": "tabbycat.api.views",
        "description": "tabbycat.api.views",
        "peekOfCode": "class TeamRoundStandingsRoundsView(TournamentAPIMixin, TournamentPublicAPIMixin, ModelViewSet):\n    serializer_class = serializers.TeamRoundScoresSerializer\n    access_preference = 'team_tab_released'\n    list_permission = Permission.VIEW_TEAMSTANDINGS\n    def get_queryset(self):\n        ts_pf = Prefetch('teamscore_set', queryset=TeamScore.objects.filter(ballot_submission__confirmed=True), to_attr='round_scores')\n        qs = super().get_queryset().prefetch_related(\n            Prefetch('debateteam_set', queryset=DebateTeam.objects.all().prefetch_related(ts_pf).select_related('debate__round__tournament')))\n        for t in qs:\n            for dt in t.debateteam_set.all():",
        "detail": "tabbycat.api.views",
        "documentation": {}
    },
    {
        "label": "PairingViewSet",
        "kind": 6,
        "importPath": "tabbycat.api.views",
        "description": "tabbycat.api.views",
        "peekOfCode": "class PairingViewSet(RoundAPIMixin, ModelViewSet):\n    class Permission(PublicPreferencePermission):\n        def get_tournament_preference(self, view, op):\n            t = view.tournament\n            r = view.round\n            draw_status = {\n                'off': False,\n                'current': t.current_round.id == r.id and self.get_round_status(view),\n                'all-released': self.get_round_status(view),\n            }[t.pref(view.access_preference)]",
        "detail": "tabbycat.api.views",
        "documentation": {}
    },
    {
        "label": "BallotViewSet",
        "kind": 6,
        "importPath": "tabbycat.api.views",
        "description": "tabbycat.api.views",
        "peekOfCode": "class BallotViewSet(RoundAPIMixin, TournamentPublicAPIMixin, ModelViewSet):\n    serializer_class = serializers.BallotSerializer\n    access_preference = 'ballots_released'\n    tournament_field = 'debate__round__tournament'\n    round_field = 'debate__round'\n    list_permission = Permission.VIEW_BALLOTSUBMISSIONS\n    create_permission = Permission.ADD_BALLOTSUBMISSIONS\n    update_permission = Permission.EDIT_BALLOTSUBMISSIONS\n    destroy_permission = Permission.MARK_BALLOTSUBMISSIONS\n    action_log_type_created = ActionLogEntry.ActionType.BALLOT_CREATE",
        "detail": "tabbycat.api.views",
        "documentation": {}
    },
    {
        "label": "FeedbackQuestionViewSet",
        "kind": 6,
        "importPath": "tabbycat.api.views",
        "description": "tabbycat.api.views",
        "peekOfCode": "class FeedbackQuestionViewSet(TournamentAPIMixin, PublicAPIMixin, ModelViewSet):\n    serializer_class = serializers.FeedbackQuestionSerializer\n    action_log_type_created = ActionLogEntry.ActionType.FEEDBACK_QUESTION_CREATE\n    action_log_type_updated = ActionLogEntry.ActionType.FEEDBACK_QUESTION_EDIT\n    list_permission = True\n    create_permission = Permission.EDIT_FEEDBACKQUESTION\n    update_permission = Permission.EDIT_FEEDBACKQUESTION\n    destroy_permission = Permission.EDIT_FEEDBACKQUESTION\n    def get_queryset(self):\n        filters = Q()",
        "detail": "tabbycat.api.views",
        "documentation": {}
    },
    {
        "label": "FeedbackViewSet",
        "kind": 6,
        "importPath": "tabbycat.api.views",
        "description": "tabbycat.api.views",
        "peekOfCode": "class FeedbackViewSet(TournamentAPIMixin, AdministratorAPIMixin, ModelViewSet):\n    serializer_class = serializers.FeedbackSerializer\n    tournament_field = 'adjudicator__tournament'\n    action_log_type_created = ActionLogEntry.ActionType.FEEDBACK_SAVE\n    action_log_type_updated = ActionLogEntry.ActionType.FEEDBACK_SAVE\n    list_permission = Permission.VIEW_FEEDBACK\n    create_permission = Permission.ADD_FEEDBACK\n    update_permission = Permission.EDIT_FEEDBACK_IGNORE\n    destroy_permission = Permission.EDIT_FEEDBACK_CONFIRM\n    def perform_create(self, serializer):",
        "detail": "tabbycat.api.views",
        "documentation": {}
    },
    {
        "label": "AvailabilitiesViewSet",
        "kind": 6,
        "importPath": "tabbycat.api.views",
        "description": "tabbycat.api.views",
        "peekOfCode": "class AvailabilitiesViewSet(RoundAPIMixin, AdministratorAPIMixin, APIView):\n    serializer_class = serializers.AvailabilitiesSerializer  # Isn't actually used\n    action_log_type_updated = ActionLogEntry.ActionType.AVAIL_SAVE\n    list_permission = Permission.VIEW_ROUNDAVAILABILITIES\n    create_permission = Permission.EDIT_ROUNDAVAILABILITIES\n    update_permission = Permission.EDIT_ROUNDAVAILABILITIES\n    destroy_permission = Permission.EDIT_ROUNDAVAILABILITIES\n    extra_params = [\n        OpenApiParameter('adjudicators', description='Only include adjudicators', required=False, type=bool, default=False),\n        OpenApiParameter('teams', description='Only include teams', required=False, type=bool, default=False),",
        "detail": "tabbycat.api.views",
        "documentation": {}
    },
    {
        "label": "PreformedPanelViewSet",
        "kind": 6,
        "importPath": "tabbycat.api.views",
        "description": "tabbycat.api.views",
        "peekOfCode": "class PreformedPanelViewSet(RoundAPIMixin, AdministratorAPIMixin, ModelViewSet):\n    serializer_class = serializers.PreformedPanelSerializer\n    lookup_url_kwarg = 'debate_pk'\n    action_log_type_created = ActionLogEntry.ActionType.PREFORMED_PANELS_CREATE\n    action_log_type_updated = ActionLogEntry.ActionType.PREFORMED_PANELS_ADJUDICATOR_EDIT\n    list_permission = Permission.VIEW_PREFORMEDPANELS\n    create_permission = Permission.EDIT_PREFORMEDPANELS\n    update_permission = Permission.EDIT_PREFORMEDPANELS\n    destroy_permission = Permission.EDIT_PREFORMEDPANELS\n    @property",
        "detail": "tabbycat.api.views",
        "documentation": {}
    },
    {
        "label": "UserViewSet",
        "kind": 6,
        "importPath": "tabbycat.api.views",
        "description": "tabbycat.api.views",
        "peekOfCode": "class UserViewSet(AdministratorAPIMixin, ModelViewSet):\n    serializer_class = serializers.UserSerializer\n    permission_classes = [IsAdminUser]\n    def get_queryset(self):\n        qs = get_user_model().objects.prefetch_related('membership_set__group__tournament', 'userpermission_set__tournament')\n        for user in qs:\n            user.tournaments = get_permissions(user)\n        return qs\n    def get_object(self):\n        obj = super().get_object()",
        "detail": "tabbycat.api.views",
        "documentation": {}
    },
    {
        "label": "GroupViewSet",
        "kind": 6,
        "importPath": "tabbycat.api.views",
        "description": "tabbycat.api.views",
        "peekOfCode": "class GroupViewSet(TournamentAPIMixin, AdministratorAPIMixin, ModelViewSet):\n    serializer_class = serializers.GroupSerializer\n@extend_schema(tags=['scorecriteria'], parameters=[tournament_parameter])\n@extend_schema_view(\n    list=extend_schema(summary=\"List all score criteria in tournament\"),\n    create=extend_schema(summary=\"Create score criterion\"),\n    retrieve=extend_schema(summary=\"Get score criterion\", parameters=[id_parameter]),\n    update=extend_schema(summary=\"Update score criterion\", parameters=[id_parameter]),\n    partial_update=extend_schema(summary=\"Patch score criterion\", parameters=[id_parameter]),\n    destroy=extend_schema(summary=\"Delete score criterion\", parameters=[id_parameter]),",
        "detail": "tabbycat.api.views",
        "documentation": {}
    },
    {
        "label": "ScoreCriterionViewSet",
        "kind": 6,
        "importPath": "tabbycat.api.views",
        "description": "tabbycat.api.views",
        "peekOfCode": "class ScoreCriterionViewSet(TournamentAPIMixin, PublicAPIMixin, ModelViewSet):\n    serializer_class = serializers.ScoreCriterionSerializer",
        "detail": "tabbycat.api.views",
        "documentation": {}
    },
    {
        "label": "get_metrics_params",
        "kind": 2,
        "importPath": "tabbycat.api.views",
        "description": "tabbycat.api.views",
        "peekOfCode": "def get_metrics_params(generator):\n    metrics = {\n        'type': 'array',\n        'items': {\n            'type': 'string',\n            'enum': list(generator.metric_annotator_classes.keys()),\n        },\n    }\n    desc_default = '; default is tournament settings'\n    return [",
        "detail": "tabbycat.api.views",
        "documentation": {}
    },
    {
        "label": "tournament_parameter",
        "kind": 5,
        "importPath": "tabbycat.api.views",
        "description": "tabbycat.api.views",
        "peekOfCode": "tournament_parameter = OpenApiParameter('tournament_slug', description=\"The tournament's slug\", type=str, location=\"path\")\nround_parameters = [\n    tournament_parameter,\n    OpenApiParameter('round_seq', description=\"The round's sequence number\", type=int, location=\"path\"),\n]\ndebate_parameters = [\n    *round_parameters,\n    OpenApiParameter('debate_pk', description=\"The debate's primary key\", type=int, location=\"path\"),\n]\nid_parameter = OpenApiParameter('id', description=\"The object's primary key\", type=int, location=\"path\")",
        "detail": "tabbycat.api.views",
        "documentation": {}
    },
    {
        "label": "round_parameters",
        "kind": 5,
        "importPath": "tabbycat.api.views",
        "description": "tabbycat.api.views",
        "peekOfCode": "round_parameters = [\n    tournament_parameter,\n    OpenApiParameter('round_seq', description=\"The round's sequence number\", type=int, location=\"path\"),\n]\ndebate_parameters = [\n    *round_parameters,\n    OpenApiParameter('debate_pk', description=\"The debate's primary key\", type=int, location=\"path\"),\n]\nid_parameter = OpenApiParameter('id', description=\"The object's primary key\", type=int, location=\"path\")\n@extend_schema(tags=['root'], summary=\"API root\")",
        "detail": "tabbycat.api.views",
        "documentation": {}
    },
    {
        "label": "debate_parameters",
        "kind": 5,
        "importPath": "tabbycat.api.views",
        "description": "tabbycat.api.views",
        "peekOfCode": "debate_parameters = [\n    *round_parameters,\n    OpenApiParameter('debate_pk', description=\"The debate's primary key\", type=int, location=\"path\"),\n]\nid_parameter = OpenApiParameter('id', description=\"The object's primary key\", type=int, location=\"path\")\n@extend_schema(tags=['root'], summary=\"API root\")\nclass APIRootView(PublicAPIMixin, GenericAPIView):\n    name = \"API Root\"\n    serializer_class = serializers.RootSerializer\n    def get(self, request, format=None):",
        "detail": "tabbycat.api.views",
        "documentation": {}
    },
    {
        "label": "id_parameter",
        "kind": 5,
        "importPath": "tabbycat.api.views",
        "description": "tabbycat.api.views",
        "peekOfCode": "id_parameter = OpenApiParameter('id', description=\"The object's primary key\", type=int, location=\"path\")\n@extend_schema(tags=['root'], summary=\"API root\")\nclass APIRootView(PublicAPIMixin, GenericAPIView):\n    name = \"API Root\"\n    serializer_class = serializers.RootSerializer\n    def get(self, request, format=None):\n        \"\"\"API Entrypoint; info about versions\"\"\"\n        return Response({\n            \"_links\": {\n                \"v1\": reverse('api-v1-root', request=request, format=format),",
        "detail": "tabbycat.api.views",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "tabbycat.availability.management.commands.availabilitydump",
        "description": "tabbycat.availability.management.commands.availabilitydump",
        "peekOfCode": "class Command(TournamentCommand):\n    help = \"Prints a CSV-style list of adjudicator availabilities\"\n    def handle_tournament(self, tournament, **options):\n        rounds = tournament.prelim_rounds()\n        queryset = tournament.relevant_adjudicators.all()\n        for rd in rounds:\n            queryset = queryset.prefetch_related(Prefetch('round_availabilities',\n                    queryset=RoundAvailability.objects.filter(round=rd),\n                    to_attr='available_%d' % rd.seq))\n        self.stdout.write(\"institution,name\")",
        "detail": "tabbycat.availability.management.commands.availabilitydump",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.availability.migrations.0001_initial",
        "description": "tabbycat.availability.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('contenttypes', '0002_remove_content_type_name'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='RoundAvailability',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "tabbycat.availability.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.availability.migrations.0002_auto_20171110_0905",
        "description": "tabbycat.availability.migrations.0002_auto_20171110_0905",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('availability', '0001_initial'),\n        ('tournaments', '0001_initial'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='roundavailability',\n            name='round',",
        "detail": "tabbycat.availability.migrations.0002_auto_20171110_0905",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.availability.migrations.0003_auto_20180218_1311",
        "description": "tabbycat.availability.migrations.0003_auto_20180218_1311",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('availability', '0002_auto_20171110_0905'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='roundavailability',\n            name='content_type',\n            field=models.ForeignKey(limit_choices_to=django.db.models.query_utils.Q(django.db.models.query_utils.Q(('app_label', 'participants'), ('model', 'team'), _connector='AND'), django.db.models.query_utils.Q(('app_label', 'participants'), ('model', 'adjudicator'), _connector='AND'), django.db.models.query_utils.Q(('app_label', 'venues'), ('model', 'venue'), _connector='AND'), _connector='OR'), on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType', verbose_name='content type'),\n        ),",
        "detail": "tabbycat.availability.migrations.0003_auto_20180218_1311",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.availability.migrations.0004_auto_20180305_1544",
        "description": "tabbycat.availability.migrations.0004_auto_20180305_1544",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('availability', '0003_auto_20180218_1311'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='roundavailability',\n            name='content_type',\n            field=models.ForeignKey(limit_choices_to=django.db.models.query_utils.Q(django.db.models.query_utils.Q(('model', 'team'), ('app_label', 'participants'), _connector='AND'), django.db.models.query_utils.Q(('model', 'adjudicator'), ('app_label', 'participants'), _connector='AND'), django.db.models.query_utils.Q(('model', 'venue'), ('app_label', 'venues'), _connector='AND'), _connector='OR'), on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType', verbose_name='content type'),\n        ),",
        "detail": "tabbycat.availability.migrations.0004_auto_20180305_1544",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.availability.migrations.0005_auto_20180307_2217",
        "description": "tabbycat.availability.migrations.0005_auto_20180307_2217",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('availability', '0004_auto_20180305_1544'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='roundavailability',\n            name='content_type',\n            field=models.ForeignKey(limit_choices_to=django.db.models.query_utils.Q(django.db.models.query_utils.Q(('app_label', 'participants'), ('model', 'team'), _connector='AND'), django.db.models.query_utils.Q(('app_label', 'participants'), ('model', 'adjudicator'), _connector='AND'), django.db.models.query_utils.Q(('app_label', 'venues'), ('model', 'venue'), _connector='AND'), _connector='OR'), on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType', verbose_name='content type'),\n        ),",
        "detail": "tabbycat.availability.migrations.0005_auto_20180307_2217",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.availability.migrations.0006_alter_roundavailability_unique_together_and_more",
        "description": "tabbycat.availability.migrations.0006_alter_roundavailability_unique_together_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('availability', '0005_auto_20180307_2217'),\n        ('contenttypes', '0002_remove_content_type_name'),\n        ('tournaments', '0010_alter_round_draw_type'),\n    ]\n    operations = [\n        migrations.AlterUniqueTogether(\n            name='roundavailability',\n            unique_together=set(),",
        "detail": "tabbycat.availability.migrations.0006_alter_roundavailability_unique_together_and_more",
        "documentation": {}
    },
    {
        "label": "TestAvailability",
        "kind": 6,
        "importPath": "tabbycat.availability.tests.test_availability",
        "description": "tabbycat.availability.tests.test_availability",
        "peekOfCode": "class TestAvailability(BaseMinimalTournamentTestCase):\n    def setUp(self):\n        super().setUp()\n        self.round = Round.objects.create(tournament=self.tournament, seq=1)\n    def tearDown(self):\n        super().tearDown()\n        self.round.delete()\n    def test_all_active(self):\n        set_availability(Adjudicator.objects.all(), self.round)\n        self.assertEqual(8, Adjudicator.objects.count())",
        "detail": "tabbycat.availability.tests.test_availability",
        "documentation": {}
    },
    {
        "label": "RoundAvailabilityAdmin",
        "kind": 6,
        "importPath": "tabbycat.availability.admin",
        "description": "tabbycat.availability.admin",
        "peekOfCode": "class RoundAvailabilityAdmin(ModelAdmin):\n    list_display = ('content_object', 'content_type', 'round')\n    list_filter = ('content_type__model', 'round')\n    def get_queryset(self, request):\n        return super().get_queryset(request).prefetch_related('content_object')\n# Used in participants/admin.py and venues/admin.py\nclass RoundAvailabilityInline(GenericTabularInline):\n    model = RoundAvailability\n    extra = 1",
        "detail": "tabbycat.availability.admin",
        "documentation": {}
    },
    {
        "label": "RoundAvailabilityInline",
        "kind": 6,
        "importPath": "tabbycat.availability.admin",
        "description": "tabbycat.availability.admin",
        "peekOfCode": "class RoundAvailabilityInline(GenericTabularInline):\n    model = RoundAvailability\n    extra = 1",
        "detail": "tabbycat.availability.admin",
        "documentation": {}
    },
    {
        "label": "AvailabilityConfig",
        "kind": 6,
        "importPath": "tabbycat.availability.apps",
        "description": "tabbycat.availability.apps",
        "peekOfCode": "class AvailabilityConfig(AppConfig):\n    name = \"availability\"\n    verbose_name = _(\"Availability\")",
        "detail": "tabbycat.availability.apps",
        "documentation": {}
    },
    {
        "label": "RoundAvailability",
        "kind": 6,
        "importPath": "tabbycat.availability.models",
        "description": "tabbycat.availability.models",
        "peekOfCode": "class RoundAvailability(models.Model):\n    CONTENT_TYPE_CHOICES = models.Q(app_label='participants', model='team') | \\\n        models.Q(app_label='participants', model='adjudicator') | \\\n        models.Q(app_label='venues', model='venue')\n    content_type = models.ForeignKey(ContentType, models.CASCADE,\n        limit_choices_to=CONTENT_TYPE_CHOICES,\n        verbose_name=_(\"content type\"))\n    object_id = models.PositiveIntegerField(verbose_name=_(\"object id\"))\n    content_object = GenericForeignKey('content_type', 'object_id')\n    round = models.ForeignKey('tournaments.Round', models.CASCADE,",
        "detail": "tabbycat.availability.models",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "tabbycat.availability.urls",
        "description": "tabbycat.availability.urls",
        "peekOfCode": "urlpatterns = [\n    path('round/<int:round_seq>/', include([\n        # Overview\n        path('',\n            views.AvailabilityIndexView.as_view(),\n            name='availability-index'),\n        # Bulk Updates\n        path('all/update/', views.CheckInAllInRoundView.as_view(),\n            name='availability-checkin-all'),\n        path('previous/update/', views.CheckInAllFromPreviousRoundView.as_view(),",
        "detail": "tabbycat.availability.urls",
        "documentation": {}
    },
    {
        "label": "annotate_availability",
        "kind": 2,
        "importPath": "tabbycat.availability.utils",
        "description": "tabbycat.availability.utils",
        "peekOfCode": "def annotate_availability(queryset, round):\n    \"\"\"Annotates each instance the queryset with attribute:\n        'available', True if there is a RoundAvailability for the instance in the given round,\n    and if `round.prev` exists:\n        'prev_available', True if there is a RoundAvailability for the instance in the previous round.\n    \"\"\"\n    queryset = queryset.prefetch_related(Prefetch('round_availabilities',\n            queryset=RoundAvailability.objects.filter(round=round), to_attr='availability'))\n    if round.prev:\n        queryset = queryset.prefetch_related(Prefetch('round_availabilities',",
        "detail": "tabbycat.availability.utils",
        "documentation": {}
    },
    {
        "label": "set_availability",
        "kind": 2,
        "importPath": "tabbycat.availability.utils",
        "description": "tabbycat.availability.utils",
        "peekOfCode": "def set_availability(queryset, round):\n    \"\"\"Sets the availabilities for the given round to those instances in the\n    queryset.\"\"\"\n    ids = [x['id'] for x in queryset.values('id')]\n    set_availability_by_id(queryset.model, ids, round)\ndef set_availability_by_id(model, ids, round):\n    \"\"\"Sets the availabilities for the given round to those IDs in the given list `ids`,\n    those being ids of the model (e.g. Adjudicator).\"\"\"\n    if model not in [Adjudicator, Team, Venue]:\n        logger.error(\"Bad model in set_availability_by_id: %s\", model.__class__.__name__, stack_info=True)",
        "detail": "tabbycat.availability.utils",
        "documentation": {}
    },
    {
        "label": "set_availability_by_id",
        "kind": 2,
        "importPath": "tabbycat.availability.utils",
        "description": "tabbycat.availability.utils",
        "peekOfCode": "def set_availability_by_id(model, ids, round):\n    \"\"\"Sets the availabilities for the given round to those IDs in the given list `ids`,\n    those being ids of the model (e.g. Adjudicator).\"\"\"\n    if model not in [Adjudicator, Team, Venue]:\n        logger.error(\"Bad model in set_availability_by_id: %s\", model.__class__.__name__, stack_info=True)\n        return  # do nothing\n    contenttype = ContentType.objects.get_for_model(model)\n    ids = set(map(int, ids))\n    existing = set(a['object_id'] for a in\n        RoundAvailability.objects.filter(",
        "detail": "tabbycat.availability.utils",
        "documentation": {}
    },
    {
        "label": "activate_all",
        "kind": 2,
        "importPath": "tabbycat.availability.utils",
        "description": "tabbycat.availability.utils",
        "peekOfCode": "def activate_all(round):\n    set_availability(round.tournament.team_set, round)\n    set_availability(round.tournament.relevant_adjudicators, round)\n    set_availability(round.tournament.relevant_venues, round)",
        "detail": "tabbycat.availability.utils",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "tabbycat.availability.utils",
        "description": "tabbycat.availability.utils",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef annotate_availability(queryset, round):\n    \"\"\"Annotates each instance the queryset with attribute:\n        'available', True if there is a RoundAvailability for the instance in the given round,\n    and if `round.prev` exists:\n        'prev_available', True if there is a RoundAvailability for the instance in the previous round.\n    \"\"\"\n    queryset = queryset.prefetch_related(Prefetch('round_availabilities',\n            queryset=RoundAvailability.objects.filter(round=round), to_attr='availability'))\n    if round.prev:",
        "detail": "tabbycat.availability.utils",
        "documentation": {}
    },
    {
        "label": "AvailabilityIndexView",
        "kind": 6,
        "importPath": "tabbycat.availability.views",
        "description": "tabbycat.availability.views",
        "peekOfCode": "class AvailabilityIndexView(RoundMixin, AdministratorMixin, TemplateView):\n    template_name = 'availability_index.html'\n    page_title = gettext_lazy(\"Availability\")\n    page_emoji = '📍'\n    view_permission = Permission.VIEW_ROUNDAVAILABILITIES\n    def get_context_data(self, **kwargs):\n        if self.round.prev:\n            kwargs['previous_unconfirmed'] = self.round.prev.debate_set.filter(\n                result_status__in=[Debate.STATUS_NONE, Debate.STATUS_DRAFT]).count()\n            kwargs['new_adjs'] = Adjudicator.objects.filter(",
        "detail": "tabbycat.availability.views",
        "documentation": {}
    },
    {
        "label": "AvailabilityTypeBase",
        "kind": 6,
        "importPath": "tabbycat.availability.views",
        "description": "tabbycat.availability.views",
        "peekOfCode": "class AvailabilityTypeBase(RoundMixin, AdministratorMixin, VueTableTemplateView):\n    template_name = \"base_availability.html\"\n    def get_context_data(self, **kwargs):\n        kwargs['model'] = self.model._meta.label  # does not get translated\n        kwargs['saveURL'] = reverse_round(self.update_view, self.round)\n        return super().get_context_data(**kwargs)\n    def get_queryset(self):\n        return self.model.objects.filter(tournament=self.tournament)\n    def get_table(self):\n        table = TabbycatTableBuilder(view=self, sort_key=self.sort_key)",
        "detail": "tabbycat.availability.views",
        "documentation": {}
    },
    {
        "label": "AvailabilityTypeTeamView",
        "kind": 6,
        "importPath": "tabbycat.availability.views",
        "description": "tabbycat.availability.views",
        "peekOfCode": "class AvailabilityTypeTeamView(AvailabilityTypeBase):\n    view_permission = Permission.VIEW_ROUNDAVAILABILITIES_TEAM\n    edit_permission = Permission.EDIT_ROUNDAVAILABILITIES_TEAM\n    page_title = gettext_lazy(\"Team Availability\")\n    page_emoji = '👂'\n    model = Team\n    sort_key = 'team'\n    update_view = 'availability-update-teams'\n    def get_queryset(self):\n        return super().get_queryset().prefetch_related('speaker_set').prefetch_related('speaker_set__checkin_identifier')",
        "detail": "tabbycat.availability.views",
        "documentation": {}
    },
    {
        "label": "AvailabilityTypeAdjudicatorView",
        "kind": 6,
        "importPath": "tabbycat.availability.views",
        "description": "tabbycat.availability.views",
        "peekOfCode": "class AvailabilityTypeAdjudicatorView(AvailabilityTypeBase):\n    view_permission = Permission.VIEW_ROUNDAVAILABILITIES_ADJ\n    edit_permission = Permission.EDIT_ROUNDAVAILABILITIES_ADJ\n    page_title = gettext_lazy(\"Adjudicator Availability\")\n    page_emoji = '👂'\n    model = Adjudicator\n    sort_key = 'name'\n    update_view = 'availability-update-adjudicators'\n    def get_queryset(self):\n        return super().get_queryset().select_related('checkin_identifier')",
        "detail": "tabbycat.availability.views",
        "documentation": {}
    },
    {
        "label": "AvailabilityTypeVenueView",
        "kind": 6,
        "importPath": "tabbycat.availability.views",
        "description": "tabbycat.availability.views",
        "peekOfCode": "class AvailabilityTypeVenueView(AvailabilityTypeBase):\n    view_permission = Permission.VIEW_ROUNDAVAILABILITIES_VENUE\n    edit_permission = Permission.EDIT_ROUNDAVAILABILITIES_VENUE\n    page_title = gettext_lazy(\"Room Availability\")\n    page_emoji = '🎪'\n    model = Venue\n    sort_key = 'venue'\n    update_view = 'availability-update-venues'\n    def get_queryset(self):\n        return super().get_queryset().select_related('checkin_identifier').prefetch_related('venuecategory_set')",
        "detail": "tabbycat.availability.views",
        "documentation": {}
    },
    {
        "label": "BaseBulkActivationView",
        "kind": 6,
        "importPath": "tabbycat.availability.views",
        "description": "tabbycat.availability.views",
        "peekOfCode": "class BaseBulkActivationView(RoundMixin, AdministratorMixin, PostOnlyRedirectView):\n    round_redirect_pattern_name = 'availability-index'\n    edit_permission = Permission.EDIT_ROUNDAVAILABILITIES\n    def post(self, request, *args, **kwargs):\n        try:\n            self.activate_function()\n            messages.success(self.request, self.activation_msg)\n        except IntegrityError:\n            messages.error(self.request, _(\"Failed to update some or all \"\n                                           \"availabilities due to an integrity\"",
        "detail": "tabbycat.availability.views",
        "documentation": {}
    },
    {
        "label": "CheckInAllInRoundView",
        "kind": 6,
        "importPath": "tabbycat.availability.views",
        "description": "tabbycat.availability.views",
        "peekOfCode": "class CheckInAllInRoundView(BaseBulkActivationView):\n    activation_msg = gettext_lazy(\"Checked in all teams, adjudicators and rooms.\")\n    def activate_function(self):\n        utils.activate_all(self.round)\nclass CheckInAllBreakingAdjudicatorsView(BaseBulkActivationView):\n    activation_msg = gettext_lazy(\"Checked in all breaking adjudicators.\")\n    def activate_function(self):\n        utils.set_availability(self.tournament.relevant_adjudicators.filter(breaking=True),\n                self.round)\nclass CheckInAllFromPreviousRoundView(BaseBulkActivationView):",
        "detail": "tabbycat.availability.views",
        "documentation": {}
    },
    {
        "label": "CheckInAllBreakingAdjudicatorsView",
        "kind": 6,
        "importPath": "tabbycat.availability.views",
        "description": "tabbycat.availability.views",
        "peekOfCode": "class CheckInAllBreakingAdjudicatorsView(BaseBulkActivationView):\n    activation_msg = gettext_lazy(\"Checked in all breaking adjudicators.\")\n    def activate_function(self):\n        utils.set_availability(self.tournament.relevant_adjudicators.filter(breaking=True),\n                self.round)\nclass CheckInAllFromPreviousRoundView(BaseBulkActivationView):\n    activation_msg = gettext_lazy(\"Checked in all teams, adjudicators and rooms from previous round.\")\n    def activate_function(self):\n        t = self.tournament\n        items = [(Team, t.team_set), (Adjudicator, t.relevant_adjudicators), (Venue, t.relevant_venues)]",
        "detail": "tabbycat.availability.views",
        "documentation": {}
    },
    {
        "label": "CheckInAllFromPreviousRoundView",
        "kind": 6,
        "importPath": "tabbycat.availability.views",
        "description": "tabbycat.availability.views",
        "peekOfCode": "class CheckInAllFromPreviousRoundView(BaseBulkActivationView):\n    activation_msg = gettext_lazy(\"Checked in all teams, adjudicators and rooms from previous round.\")\n    def activate_function(self):\n        t = self.tournament\n        items = [(Team, t.team_set), (Adjudicator, t.relevant_adjudicators), (Venue, t.relevant_venues)]\n        for model, relevant_instances in items:\n            contenttype = ContentType.objects.get_for_model(model)\n            previous_ids = set(a['object_id'] for a in\n                RoundAvailability.objects.filter(content_type=contenttype, round=self.round.prev).values('object_id'))\n            logger.debug(\"Previous IDs for %s: %s\", model._meta.verbose_name_plural, previous_ids)",
        "detail": "tabbycat.availability.views",
        "documentation": {}
    },
    {
        "label": "BaseAvailabilityUpdateView",
        "kind": 6,
        "importPath": "tabbycat.availability.views",
        "description": "tabbycat.availability.views",
        "peekOfCode": "class BaseAvailabilityUpdateView(RoundMixin, AdministratorMixin, LogActionMixin, View):\n    edit_permission = Permission.EDIT_ROUNDAVAILABILITIES\n    def post(self, request, *args, **kwargs):\n        body = self.request.body.decode('utf-8')\n        posted_info = json.loads(body)\n        active_ids = [] # Unlike other checks; we just pass IDs on not the bool\n        for key, value in posted_info.items():\n            if value['checked']:\n                active_ids.append(key)\n        try:",
        "detail": "tabbycat.availability.views",
        "documentation": {}
    },
    {
        "label": "UpdateAdjudicatorsAvailabilityView",
        "kind": 6,
        "importPath": "tabbycat.availability.views",
        "description": "tabbycat.availability.views",
        "peekOfCode": "class UpdateAdjudicatorsAvailabilityView(BaseAvailabilityUpdateView):\n    action_log_type = ActionLogEntry.ActionType.AVAIL_ADJUDICATORS_SAVE\n    model = Adjudicator\nclass UpdateTeamsAvailabilityView(BaseAvailabilityUpdateView):\n    action_log_type = ActionLogEntry.ActionType.AVAIL_TEAMS_SAVE\n    model = Team\nclass UpdateVenuesAvailabilityView(BaseAvailabilityUpdateView):\n    action_log_type = ActionLogEntry.ActionType.AVAIL_VENUES_SAVE\n    model = Venue",
        "detail": "tabbycat.availability.views",
        "documentation": {}
    },
    {
        "label": "UpdateTeamsAvailabilityView",
        "kind": 6,
        "importPath": "tabbycat.availability.views",
        "description": "tabbycat.availability.views",
        "peekOfCode": "class UpdateTeamsAvailabilityView(BaseAvailabilityUpdateView):\n    action_log_type = ActionLogEntry.ActionType.AVAIL_TEAMS_SAVE\n    model = Team\nclass UpdateVenuesAvailabilityView(BaseAvailabilityUpdateView):\n    action_log_type = ActionLogEntry.ActionType.AVAIL_VENUES_SAVE\n    model = Venue",
        "detail": "tabbycat.availability.views",
        "documentation": {}
    },
    {
        "label": "UpdateVenuesAvailabilityView",
        "kind": 6,
        "importPath": "tabbycat.availability.views",
        "description": "tabbycat.availability.views",
        "peekOfCode": "class UpdateVenuesAvailabilityView(BaseAvailabilityUpdateView):\n    action_log_type = ActionLogEntry.ActionType.AVAIL_VENUES_SAVE\n    model = Venue",
        "detail": "tabbycat.availability.views",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "tabbycat.availability.views",
        "description": "tabbycat.availability.views",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass AvailabilityIndexView(RoundMixin, AdministratorMixin, TemplateView):\n    template_name = 'availability_index.html'\n    page_title = gettext_lazy(\"Availability\")\n    page_emoji = '📍'\n    view_permission = Permission.VIEW_ROUNDAVAILABILITIES\n    def get_context_data(self, **kwargs):\n        if self.round.prev:\n            kwargs['previous_unconfirmed'] = self.round.prev.debate_set.filter(\n                result_status__in=[Debate.STATUS_NONE, Debate.STATUS_DRAFT]).count()",
        "detail": "tabbycat.availability.views",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "tabbycat.breakqual.management.commands.breakcategoryteamsdump",
        "description": "tabbycat.breakqual.management.commands.breakcategoryteamsdump",
        "peekOfCode": "class Command(TournamentCommand):\n    help = \"Prints the teams eligible for a break category, their code names, \" \\\n           \"and how many points they're on.\"\n    def add_arguments(self, parser):\n        super(Command, self).add_arguments(parser)\n        parser.add_argument(\"slug\", type=str, nargs='+',\n            help=\"Slug of break category to dump\")\n    def handle_tournament(self, tournament, **options):\n        for slug in options[\"slug\"]:\n            try:",
        "detail": "tabbycat.breakqual.management.commands.breakcategoryteamsdump",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "tabbycat.breakqual.management.commands.fixbreakeligibility",
        "description": "tabbycat.breakqual.management.commands.fixbreakeligibility",
        "peekOfCode": "class Command(TournamentCommand):\n    help = \"Modifies the break category eligibility of every team to match the \" \\\n           \"speaker category eligibility of their speakers, that is, the team \" \\\n           \"is eligible for the break category if and only if all speakers in the \" \\\n           \"team are eligible for the speaker category. Requires the slugs\" \\\n           \"of both categories to be the same.\"\n    def add_arguments(self, parser):\n        super(Command, self).add_arguments(parser)\n        parser.add_argument(\"slug\", type=str, nargs='+',\n            help=\"Slug of break category to modify and speaker category to check\")",
        "detail": "tabbycat.breakqual.management.commands.fixbreakeligibility",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.breakqual.migrations.0001_initial",
        "description": "tabbycat.breakqual.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='BreakCategory',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(help_text='Name to be displayed, e.g., \"ESL\"', max_length=50, verbose_name='name')),",
        "detail": "tabbycat.breakqual.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.breakqual.migrations.0002_auto_20171110_0905",
        "description": "tabbycat.breakqual.migrations.0002_auto_20171110_0905",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('participants', '0001_initial'),\n        ('breakqual', '0001_initial'),\n        ('tournaments', '0001_initial'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='breakingteam',",
        "detail": "tabbycat.breakqual.migrations.0002_auto_20171110_0905",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.breakqual.migrations.0003_breakcategory_limit",
        "description": "tabbycat.breakqual.migrations.0003_breakcategory_limit",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('breakqual', '0002_auto_20171110_0905'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='breakcategory',\n            name='limit',\n            field=models.IntegerField(default=0, help_text='At most this many teams will be shown on the public tab for this category, or use 0 for no limit', verbose_name='limit'),\n        ),",
        "detail": "tabbycat.breakqual.migrations.0003_breakcategory_limit",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.breakqual.migrations.0004_auto_20190530_2257",
        "description": "tabbycat.breakqual.migrations.0004_auto_20190530_2257",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('breakqual', '0003_breakcategory_limit'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='breakcategory',\n            name='rule',\n            field=models.CharField(choices=[('standard', 'Standard'), ('aida-1996', 'AIDA 1996'), ('aida-2016-easters', 'AIDA 2016 (Easters)'), ('aida-2016-australs', 'AIDA 2016 (Australs)'), ('aida-2019-australs-open', 'AIDA 2019 (Australs, Dynamic Cap)'), ('wadl-div-first', 'WADL division winners first'), ('wadl-div-guaranteed', 'WADL division winners guaranteed')], default='standard', help_text='Rule for how the break is calculated (most tournaments should use \"Standard\")', max_length=25, verbose_name='rule'),\n        ),",
        "detail": "tabbycat.breakqual.migrations.0004_auto_20190530_2257",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.breakqual.migrations.0005_remove_league_fields",
        "description": "tabbycat.breakqual.migrations.0005_remove_league_fields",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('breakqual', '0004_auto_20190530_2257'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='breakcategory',\n            name='rule',\n            field=models.CharField(choices=[('standard', 'Standard'), ('aida-1996', 'AIDA 1996'), ('aida-2016-easters', 'AIDA 2016 (Easters)'), ('aida-2016-australs', 'AIDA 2016 (Australs)'), ('aida-2019-australs-open', 'AIDA 2019 (Australs, Dynamic Cap)')], default='standard', help_text='Rule for how the break is calculated (most tournaments should use \"Standard\")', max_length=25, verbose_name='rule'),\n        ),",
        "detail": "tabbycat.breakqual.migrations.0005_remove_league_fields",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.breakqual.migrations.0006_alter_breakcategory_unique_together_and_more",
        "description": "tabbycat.breakqual.migrations.0006_alter_breakcategory_unique_together_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('breakqual', '0005_remove_league_fields'),\n        ('participants', '0021_team_seed'),\n        ('tournaments', '0010_alter_round_draw_type'),\n    ]\n    operations = [\n        migrations.AlterUniqueTogether(\n            name='breakcategory',\n            unique_together=set(),",
        "detail": "tabbycat.breakqual.migrations.0006_alter_breakcategory_unique_together_and_more",
        "documentation": {}
    },
    {
        "label": "TestLiveness",
        "kind": 6,
        "importPath": "tabbycat.breakqual.tests.test_liveness",
        "description": "tabbycat.breakqual.tests.test_liveness",
        "peekOfCode": "class TestLiveness(TestCase):\n    \"\"\" Params are:\n    is_general, current round, break size, total_teams, total_rounds, scores\n    \"\"\"\n    # 2vs2\n    def test_case_australs_2017_open_penultimate(self):\n        safe, dead = liveness_twoteam(True, 7, 16, 79, 8, [])\n        self.assertGreaterEqual(safe, 6) # All on 6 broke\n        self.assertLessEqual(dead, 2) # Some on 5 broke\n    def test_case_australs_2017_open(self):",
        "detail": "tabbycat.breakqual.tests.test_liveness",
        "documentation": {}
    },
    {
        "label": "BreakingTeamsViewTestMixin",
        "kind": 6,
        "importPath": "tabbycat.breakqual.tests.test_views",
        "description": "tabbycat.breakqual.tests.test_views",
        "peekOfCode": "class BreakingTeamsViewTestMixin(ConditionalTableViewTestsMixin):\n    view_name = 'breakqual-public-teams'\n    view_toggle_preference = 'public_features__public_breaking_teams'\n    def get_view_reverse_kwargs(self):\n        kwargs = super().get_view_reverse_kwargs()\n        kwargs['category'] = self.break_category_slug\n        return kwargs\n    def expected_row_counts(self):\n        category = self.tournament.breakcategory_set.get(slug=self.break_category_slug)\n        return [category.breaking_teams.count()]",
        "detail": "tabbycat.breakqual.tests.test_views",
        "documentation": {}
    },
    {
        "label": "PublicOpenBreakingTeamsViewTest",
        "kind": 6,
        "importPath": "tabbycat.breakqual.tests.test_views",
        "description": "tabbycat.breakqual.tests.test_views",
        "peekOfCode": "class PublicOpenBreakingTeamsViewTest(BreakingTeamsViewTestMixin, TestCase):\n    break_category_slug = 'open'\nclass PublicESLBreakingTeamsViewTest(BreakingTeamsViewTestMixin, TestCase):\n    break_category_slug = 'esl'\nclass PublicNoviceBreakingTeamsViewTest(BreakingTeamsViewTestMixin, TestCase):\n    break_category_slug = 'novice'\nclass PublicBreakingAdjudicatorsViewTest(ConditionalTableViewTestsMixin, TestCase):\n    view_name = 'breakqual-public-adjs'\n    view_toggle_preference = 'public_features__public_breaking_adjs'\n    def expected_row_counts(self):",
        "detail": "tabbycat.breakqual.tests.test_views",
        "documentation": {}
    },
    {
        "label": "PublicESLBreakingTeamsViewTest",
        "kind": 6,
        "importPath": "tabbycat.breakqual.tests.test_views",
        "description": "tabbycat.breakqual.tests.test_views",
        "peekOfCode": "class PublicESLBreakingTeamsViewTest(BreakingTeamsViewTestMixin, TestCase):\n    break_category_slug = 'esl'\nclass PublicNoviceBreakingTeamsViewTest(BreakingTeamsViewTestMixin, TestCase):\n    break_category_slug = 'novice'\nclass PublicBreakingAdjudicatorsViewTest(ConditionalTableViewTestsMixin, TestCase):\n    view_name = 'breakqual-public-adjs'\n    view_toggle_preference = 'public_features__public_breaking_adjs'\n    def expected_row_counts(self):\n        return [self.tournament.adjudicator_set.filter(breaking=True).count()]",
        "detail": "tabbycat.breakqual.tests.test_views",
        "documentation": {}
    },
    {
        "label": "PublicNoviceBreakingTeamsViewTest",
        "kind": 6,
        "importPath": "tabbycat.breakqual.tests.test_views",
        "description": "tabbycat.breakqual.tests.test_views",
        "peekOfCode": "class PublicNoviceBreakingTeamsViewTest(BreakingTeamsViewTestMixin, TestCase):\n    break_category_slug = 'novice'\nclass PublicBreakingAdjudicatorsViewTest(ConditionalTableViewTestsMixin, TestCase):\n    view_name = 'breakqual-public-adjs'\n    view_toggle_preference = 'public_features__public_breaking_adjs'\n    def expected_row_counts(self):\n        return [self.tournament.adjudicator_set.filter(breaking=True).count()]",
        "detail": "tabbycat.breakqual.tests.test_views",
        "documentation": {}
    },
    {
        "label": "PublicBreakingAdjudicatorsViewTest",
        "kind": 6,
        "importPath": "tabbycat.breakqual.tests.test_views",
        "description": "tabbycat.breakqual.tests.test_views",
        "peekOfCode": "class PublicBreakingAdjudicatorsViewTest(ConditionalTableViewTestsMixin, TestCase):\n    view_name = 'breakqual-public-adjs'\n    view_toggle_preference = 'public_features__public_breaking_adjs'\n    def expected_row_counts(self):\n        return [self.tournament.adjudicator_set.filter(breaking=True).count()]",
        "detail": "tabbycat.breakqual.tests.test_views",
        "documentation": {}
    },
    {
        "label": "BreakCategoryAdmin",
        "kind": 6,
        "importPath": "tabbycat.breakqual.admin",
        "description": "tabbycat.breakqual.admin",
        "peekOfCode": "class BreakCategoryAdmin(ModelAdmin):\n    list_display = ('name', 'slug', 'seq', 'tournament', 'break_size',\n                    'priority', 'is_general', 'rule')\n    list_filter = ('tournament', )\n    ordering = ('tournament', 'seq')\n# ==============================================================================\n# Breaking Teams\n# ==============================================================================\n@admin.register(BreakingTeam)\nclass BreakingTeamAdmin(ModelAdmin):",
        "detail": "tabbycat.breakqual.admin",
        "documentation": {}
    },
    {
        "label": "BreakingTeamAdmin",
        "kind": 6,
        "importPath": "tabbycat.breakqual.admin",
        "description": "tabbycat.breakqual.admin",
        "peekOfCode": "class BreakingTeamAdmin(ModelAdmin):\n    list_display = ('break_category', 'team', 'rank', 'break_rank', 'remark')\n    list_filter = ('break_category__tournament', 'break_category')\n    search_fields = ('team__short_name', 'team__long_name',\n                     'team__institution__name', 'team__institution__code')\n    ordering = ('break_category', )",
        "detail": "tabbycat.breakqual.admin",
        "documentation": {}
    },
    {
        "label": "BaseAidaBreakGenerator",
        "kind": 6,
        "importPath": "tabbycat.breakqual.aida",
        "description": "tabbycat.breakqual.aida",
        "peekOfCode": "class BaseAidaBreakGenerator(StandardBreakGenerator):\n    key = None\n    rankings = ('rank', 'institution_rank')\n    institution_cap = 3\n    def compute_break(self):\n        self.exclude_capped_teams()\n        super().compute_break()\n    def exclude_capped_teams(self):\n        \"\"\"Excludes teams that are subject to the institution cap.\"\"\"\n        raise NotImplementedError",
        "detail": "tabbycat.breakqual.aida",
        "documentation": {}
    },
    {
        "label": "Aida1996BreakGenerator",
        "kind": 6,
        "importPath": "tabbycat.breakqual.aida",
        "description": "tabbycat.breakqual.aida",
        "peekOfCode": "class Aida1996BreakGenerator(BaseAidaBreakGenerator):\n    key = \"aida-1996\"\n    def compute_break(self):\n        self.exclude_capped_teams()\n        super().compute_break()\n    def exclude_capped_teams(self):\n        \"\"\"Excludes teams that are subject to the institution cap.\"\"\"\n        self.capped_teams = []\n        for tsi in self.eligible_teams:\n            institution_rank = tsi.get_ranking(\"institution_rank\")",
        "detail": "tabbycat.breakqual.aida",
        "documentation": {}
    },
    {
        "label": "BaseAida2016BreakGenerator",
        "kind": 6,
        "importPath": "tabbycat.breakqual.aida",
        "description": "tabbycat.breakqual.aida",
        "peekOfCode": "class BaseAida2016BreakGenerator(BaseAidaBreakGenerator):\n    required_metrics = ('wins',)\n    def exclude_capped_teams(self):\n        \"\"\"Excludes teams that are subject to the institution cap.\"\"\"\n        if len(self.eligible_teams) < self.break_size:\n            return\n        # ii. Discard teams with fewer wins than the nth ranked team\n        min_wins = self.eligible_teams[self.break_size-1].metrics[\"wins\"]\n        self.eligible_teams = [tsi for tsi in self.eligible_teams if tsi.metrics[\"wins\"] >= min_wins]\n        # natural_break_cutoff is the (true) rank of the last breaking team,",
        "detail": "tabbycat.breakqual.aida",
        "documentation": {}
    },
    {
        "label": "BaseAida2016AustralsBreakGenerator",
        "kind": 6,
        "importPath": "tabbycat.breakqual.aida",
        "description": "tabbycat.breakqual.aida",
        "peekOfCode": "class BaseAida2016AustralsBreakGenerator(BaseAida2016BreakGenerator):\n    def reinsert_capped_teams(self):\n        self._reinsert_capped_teams(self.capped_teams)\n@register\nclass Aida2016EastersBreakGenerator(BaseAida2016BreakGenerator):\n    key = \"aida-2016-easters\"\n    def reinsert_capped_teams(self):\n        # Easters rules give teams capped out post-cutoff priority\n        post_cutoff_capped_teams = [tsi for tsi in self.capped_teams\n            if tsi.get_ranking(\"institution_rank\") <= self.institution_cap]",
        "detail": "tabbycat.breakqual.aida",
        "documentation": {}
    },
    {
        "label": "Aida2016EastersBreakGenerator",
        "kind": 6,
        "importPath": "tabbycat.breakqual.aida",
        "description": "tabbycat.breakqual.aida",
        "peekOfCode": "class Aida2016EastersBreakGenerator(BaseAida2016BreakGenerator):\n    key = \"aida-2016-easters\"\n    def reinsert_capped_teams(self):\n        # Easters rules give teams capped out post-cutoff priority\n        post_cutoff_capped_teams = [tsi for tsi in self.capped_teams\n            if tsi.get_ranking(\"institution_rank\") <= self.institution_cap]\n        self._reinsert_capped_teams(post_cutoff_capped_teams)\n        self._reinsert_capped_teams(self.capped_teams)\n@register\nclass Aida2016AustralsBreakGenerator(BaseAida2016AustralsBreakGenerator):",
        "detail": "tabbycat.breakqual.aida",
        "documentation": {}
    },
    {
        "label": "Aida2016AustralsBreakGenerator",
        "kind": 6,
        "importPath": "tabbycat.breakqual.aida",
        "description": "tabbycat.breakqual.aida",
        "peekOfCode": "class Aida2016AustralsBreakGenerator(BaseAida2016AustralsBreakGenerator):\n    key = \"aida-2016-australs\"\n@register\nclass Aida2019AustralsBreakGenerator(BaseAida2016AustralsBreakGenerator):\n    \"\"\"Calculates the number of teams by which the break exceeds the base of 16\n    teams. Then expands the institutional cap by 1 team for every 8 additional\n    teams.\"\"\"\n    key = \"aida-2019-australs-open\"\n    def compute_break(self):\n        self.calculate_cap()",
        "detail": "tabbycat.breakqual.aida",
        "documentation": {}
    },
    {
        "label": "Aida2019AustralsBreakGenerator",
        "kind": 6,
        "importPath": "tabbycat.breakqual.aida",
        "description": "tabbycat.breakqual.aida",
        "peekOfCode": "class Aida2019AustralsBreakGenerator(BaseAida2016AustralsBreakGenerator):\n    \"\"\"Calculates the number of teams by which the break exceeds the base of 16\n    teams. Then expands the institutional cap by 1 team for every 8 additional\n    teams.\"\"\"\n    key = \"aida-2019-australs-open\"\n    def compute_break(self):\n        self.calculate_cap()\n        super().compute_break()\n    def calculate_cap(self):\n        additional_teams = self.break_size - 16 if self.break_size >= 16 else 0",
        "detail": "tabbycat.breakqual.aida",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "tabbycat.breakqual.aida",
        "description": "tabbycat.breakqual.aida",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass BaseAidaBreakGenerator(StandardBreakGenerator):\n    key = None\n    rankings = ('rank', 'institution_rank')\n    institution_cap = 3\n    def compute_break(self):\n        self.exclude_capped_teams()\n        super().compute_break()\n    def exclude_capped_teams(self):\n        \"\"\"Excludes teams that are subject to the institution cap.\"\"\"",
        "detail": "tabbycat.breakqual.aida",
        "documentation": {}
    },
    {
        "label": "BreakQualConfig",
        "kind": 6,
        "importPath": "tabbycat.breakqual.apps",
        "description": "tabbycat.breakqual.apps",
        "peekOfCode": "class BreakQualConfig(AppConfig):\n    name = 'breakqual'\n    verbose_name = _(\"Break Qualification\")",
        "detail": "tabbycat.breakqual.apps",
        "documentation": {}
    },
    {
        "label": "BreakGeneratorError",
        "kind": 6,
        "importPath": "tabbycat.breakqual.base",
        "description": "tabbycat.breakqual.base",
        "peekOfCode": "class BreakGeneratorError(RuntimeError):\n    pass\nclass BaseBreakGenerator:\n    \"\"\"Base class for break generators.\n    A break generator is responsible for populating the database with the\n    list of breaking teams.\n    The main method is `generate()`, which runs five steps:\n    1. `set_team_queryset()`, which sets `self.team_queryset` to a QuerySet that\n       queries all teams relevant to this break category. In the default\n       implementation, this is all teams in the tournament if the break category",
        "detail": "tabbycat.breakqual.base",
        "documentation": {}
    },
    {
        "label": "BaseBreakGenerator",
        "kind": 6,
        "importPath": "tabbycat.breakqual.base",
        "description": "tabbycat.breakqual.base",
        "peekOfCode": "class BaseBreakGenerator:\n    \"\"\"Base class for break generators.\n    A break generator is responsible for populating the database with the\n    list of breaking teams.\n    The main method is `generate()`, which runs five steps:\n    1. `set_team_queryset()`, which sets `self.team_queryset` to a QuerySet that\n       queries all teams relevant to this break category. In the default\n       implementation, this is all teams in the tournament if the break category\n       is a general break category, and all teams eligible for the break\n       category if it is not a general break category.",
        "detail": "tabbycat.breakqual.base",
        "documentation": {}
    },
    {
        "label": "StandardBreakGenerator",
        "kind": 6,
        "importPath": "tabbycat.breakqual.base",
        "description": "tabbycat.breakqual.base",
        "peekOfCode": "class StandardBreakGenerator(BaseBreakGenerator):\n    key = \"standard\"\n    rankings = ('rank',)\n    def compute_break(self):\n        self.breaking_teams = self.eligible_teams[:self.break_size]\n        # If the last spot is tied, add all tied teams\n        if len(self.eligible_teams) >= self.break_size:\n            last_rank = self.eligible_teams[self.break_size-1].get_ranking(\"rank\")\n            for tsi in self.eligible_teams[self.break_size:]:\n                if tsi.get_ranking(\"rank\") != last_rank:",
        "detail": "tabbycat.breakqual.base",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 2,
        "importPath": "tabbycat.breakqual.base",
        "description": "tabbycat.breakqual.base",
        "peekOfCode": "def register(cls):\n    registry[cls.key] = cls\n    return cls\nclass BreakGeneratorError(RuntimeError):\n    pass\nclass BaseBreakGenerator:\n    \"\"\"Base class for break generators.\n    A break generator is responsible for populating the database with the\n    list of breaking teams.\n    The main method is `generate()`, which runs five steps:",
        "detail": "tabbycat.breakqual.base",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "tabbycat.breakqual.base",
        "description": "tabbycat.breakqual.base",
        "peekOfCode": "logger = logging.getLogger(__name__)\nregistry = {}\ndef register(cls):\n    registry[cls.key] = cls\n    return cls\nclass BreakGeneratorError(RuntimeError):\n    pass\nclass BaseBreakGenerator:\n    \"\"\"Base class for break generators.\n    A break generator is responsible for populating the database with the",
        "detail": "tabbycat.breakqual.base",
        "documentation": {}
    },
    {
        "label": "registry",
        "kind": 5,
        "importPath": "tabbycat.breakqual.base",
        "description": "tabbycat.breakqual.base",
        "peekOfCode": "registry = {}\ndef register(cls):\n    registry[cls.key] = cls\n    return cls\nclass BreakGeneratorError(RuntimeError):\n    pass\nclass BaseBreakGenerator:\n    \"\"\"Base class for break generators.\n    A break generator is responsible for populating the database with the\n    list of breaking teams.",
        "detail": "tabbycat.breakqual.base",
        "documentation": {}
    },
    {
        "label": "BreakingTeamsForm",
        "kind": 6,
        "importPath": "tabbycat.breakqual.forms",
        "description": "tabbycat.breakqual.forms",
        "peekOfCode": "class BreakingTeamsForm(forms.Form):\n    \"\"\"Updates the remarks on breaking teams and regenerates the break.\"\"\"\n    def __init__(self, category, *args, **kwargs):\n        super(BreakingTeamsForm, self).__init__(*args, **kwargs)\n        self.category = category\n        self._prefetch_breakingteams()\n        self._create_and_initialise_fields()\n    @staticmethod\n    def _fieldname_remark(team):  # Team not BreakingTeam\n        return 'remark_%(team)d' % {'team': team.id}",
        "detail": "tabbycat.breakqual.forms",
        "documentation": {}
    },
    {
        "label": "BreakGenerator",
        "kind": 2,
        "importPath": "tabbycat.breakqual.generator",
        "description": "tabbycat.breakqual.generator",
        "peekOfCode": "def BreakGenerator(category, **kwargs):  # noqa: N802\n    klass = base.registry[category.rule]\n    return klass(category, **kwargs)\n# Verify that the available generators match the choices in the BreakCategory model\ngenerator_keys = set(base.registry.keys())\nmodel_choices = set(key for key, _ in BreakCategory.BREAK_QUALIFICATION_CHOICES)\nif generator_keys != model_choices:\n    logger.error(\"The generators in the registry don't match the choices for the \"\n                 \"'rule' field of the BreakCategory model.\")\n    logger.error(\"In the registry, we have: \" + str(generator_keys))",
        "detail": "tabbycat.breakqual.generator",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "tabbycat.breakqual.generator",
        "description": "tabbycat.breakqual.generator",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef BreakGenerator(category, **kwargs):  # noqa: N802\n    klass = base.registry[category.rule]\n    return klass(category, **kwargs)\n# Verify that the available generators match the choices in the BreakCategory model\ngenerator_keys = set(base.registry.keys())\nmodel_choices = set(key for key, _ in BreakCategory.BREAK_QUALIFICATION_CHOICES)\nif generator_keys != model_choices:\n    logger.error(\"The generators in the registry don't match the choices for the \"\n                 \"'rule' field of the BreakCategory model.\")",
        "detail": "tabbycat.breakqual.generator",
        "documentation": {}
    },
    {
        "label": "generator_keys",
        "kind": 5,
        "importPath": "tabbycat.breakqual.generator",
        "description": "tabbycat.breakqual.generator",
        "peekOfCode": "generator_keys = set(base.registry.keys())\nmodel_choices = set(key for key, _ in BreakCategory.BREAK_QUALIFICATION_CHOICES)\nif generator_keys != model_choices:\n    logger.error(\"The generators in the registry don't match the choices for the \"\n                 \"'rule' field of the BreakCategory model.\")\n    logger.error(\"In the registry, we have: \" + str(generator_keys))\n    logger.error(\"In the model, we have: \" + str(model_choices))",
        "detail": "tabbycat.breakqual.generator",
        "documentation": {}
    },
    {
        "label": "model_choices",
        "kind": 5,
        "importPath": "tabbycat.breakqual.generator",
        "description": "tabbycat.breakqual.generator",
        "peekOfCode": "model_choices = set(key for key, _ in BreakCategory.BREAK_QUALIFICATION_CHOICES)\nif generator_keys != model_choices:\n    logger.error(\"The generators in the registry don't match the choices for the \"\n                 \"'rule' field of the BreakCategory model.\")\n    logger.error(\"In the registry, we have: \" + str(generator_keys))\n    logger.error(\"In the model, we have: \" + str(model_choices))",
        "detail": "tabbycat.breakqual.generator",
        "documentation": {}
    },
    {
        "label": "get_bp_coefficients",
        "kind": 2,
        "importPath": "tabbycat.breakqual.liveness",
        "description": "tabbycat.breakqual.liveness",
        "peekOfCode": "def get_bp_coefficients(nrounds):\n    \"\"\"Get row of the number of rounds from the quadrinomial coefficients\n    triangle (similar to Pascal's triangle). Only calculate half the row and mirror.\n    See: https://oeis.org/A008287\"\"\"\n    def get_coefficient(m, k):\n        return sum(comb(m, i) * comb(m, k - 2 * i) for i in range(k // 2 + 1))\n    half_row = [get_coefficient(nrounds, k) for k in range(ceil((3 * nrounds + 1) / 2))]\n    if nrounds == 0:\n        return half_row\n    if nrounds % 2 == 1:",
        "detail": "tabbycat.breakqual.liveness",
        "documentation": {}
    },
    {
        "label": "liveness_twoteam",
        "kind": 2,
        "importPath": "tabbycat.breakqual.liveness",
        "description": "tabbycat.breakqual.liveness",
        "peekOfCode": "def liveness_twoteam(is_general, current_round, break_size, total_teams, total_rounds, team_scores=[]):\n    if total_teams < break_size or (not is_general and len(team_scores) <= break_size):\n        return 0, -1  # special case, everyone is safe\n    coefficients = [comb(total_rounds, i) for i in range(total_rounds+1)]\n    originals = [total_teams / (2**total_rounds) * coeff for coeff in coefficients]\n    ceilings = [ceil(x) for x in originals]\n    floors = [floor(x) for x in originals]\n    sum_u = list(accumulate(ceilings))  # most teams that can be on i wins\n    sum_d = list(accumulate(floors))    # fewest teams that can be on i wins\n    rounds_to_go = total_rounds - current_round + 1",
        "detail": "tabbycat.breakqual.liveness",
        "documentation": {}
    },
    {
        "label": "liveness_bp",
        "kind": 2,
        "importPath": "tabbycat.breakqual.liveness",
        "description": "tabbycat.breakqual.liveness",
        "peekOfCode": "def liveness_bp(is_general, current_round, break_size, total_teams, total_rounds, team_scores=[]):\n    if total_teams < break_size or (not is_general and len(team_scores) <= break_size):\n        return -1, -1  # special case, everyone is safe\n    originals = [total_teams / (4**total_rounds) * coeff for coeff in get_bp_coefficients(total_rounds)]\n    ceilings = [ceil(x) for x in originals]\n    floors = [floor(x) for x in originals]\n    sum_u = list(accumulate(ceilings))  # most teams that can be on i wins\n    sum_d = list(accumulate(floors))    # fewest teams that can be on i wins\n    max_points = total_rounds * 3\n    points_to_go = (total_rounds - current_round + 1) * 3",
        "detail": "tabbycat.breakqual.liveness",
        "documentation": {}
    },
    {
        "label": "BreakCategory",
        "kind": 6,
        "importPath": "tabbycat.breakqual.models",
        "description": "tabbycat.breakqual.models",
        "peekOfCode": "class BreakCategory(models.Model):\n    tournament = models.ForeignKey('tournaments.Tournament', models.CASCADE,\n        verbose_name=_(\"tournament\"))\n    name = models.CharField(max_length=50,\n        verbose_name=_(\"name\"),\n        help_text=_(\"Name to be displayed, e.g., \\\"ESL\\\"\"))\n    slug = models.SlugField(\n        verbose_name=_(\"slug\"),\n        help_text=_(\"Slug for URLs, e.g., \\\"esl\\\"\"))\n    seq = models.IntegerField(",
        "detail": "tabbycat.breakqual.models",
        "documentation": {}
    },
    {
        "label": "BreakingTeam",
        "kind": 6,
        "importPath": "tabbycat.breakqual.models",
        "description": "tabbycat.breakqual.models",
        "peekOfCode": "class BreakingTeam(models.Model):\n    break_category = models.ForeignKey(BreakCategory, models.CASCADE,\n        verbose_name=_(\"break category\"))\n    team = models.ForeignKey('participants.Team', models.CASCADE,\n        verbose_name=_(\"team\"))\n    rank = models.IntegerField(\n        verbose_name=_(\"rank\"))\n    break_rank = models.IntegerField(blank=True, null=True,\n        verbose_name=_(\"break rank\"))\n    REMARK_CAPPED = 'C'",
        "detail": "tabbycat.breakqual.models",
        "documentation": {}
    },
    {
        "label": "BreakCategorySerializer",
        "kind": 6,
        "importPath": "tabbycat.breakqual.serializers",
        "description": "tabbycat.breakqual.serializers",
        "peekOfCode": "class BreakCategorySerializer(serializers.ModelSerializer):\n    class Meta:\n        model = BreakCategory\n        fields = ('id', 'name', 'seq')",
        "detail": "tabbycat.breakqual.serializers",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "tabbycat.breakqual.urls_admin",
        "description": "tabbycat.breakqual.urls_admin",
        "peekOfCode": "urlpatterns = [\n    # Display\n    path('',\n        views.AdminBreakIndexView.as_view(),\n        name='breakqual-index'),\n    path('teams/<slug:category>/',\n        views.BreakingTeamsFormView.as_view(),\n        name='breakqual-teams'),\n    path('adjudicators/',\n        views.AdminBreakingAdjudicatorsView.as_view(),",
        "detail": "tabbycat.breakqual.urls_admin",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "tabbycat.breakqual.urls_public",
        "description": "tabbycat.breakqual.urls_public",
        "peekOfCode": "urlpatterns = [\n    path('',\n        views.PublicBreakIndexView.as_view(),\n        name='breakqual-public-index'),\n    path('teams/<slug:category>/',\n        views.PublicBreakingTeamsView.as_view(),\n        name='breakqual-public-teams'),\n    path('adjudicators/',\n        views.PublicBreakingAdjudicatorsView.as_view(),\n        name='breakqual-public-adjs'),",
        "detail": "tabbycat.breakqual.urls_public",
        "documentation": {}
    },
    {
        "label": "get_breaking_teams",
        "kind": 2,
        "importPath": "tabbycat.breakqual.utils",
        "description": "tabbycat.breakqual.utils",
        "peekOfCode": "def get_breaking_teams(category, prefetch=(), rankings=('rank',)):\n    \"\"\"Returns a list of StandingInfo objects, one for each team, with one\n    additional attribute populated: for each StandingInfo `tsi`,\n    `tsi.break_rank` is the rank of the team out of those that are in the break.\n    `prefetch` is passed to `prefetch_related()` in the Team query.\n    `rankings` is passed to `rankings` in the TeamStandingsGenerator.\n    \"\"\"\n    teams = category.breaking_teams.all().prefetch_related(*prefetch)\n    metrics = category.tournament.pref('team_standings_precedence')\n    generator = TeamStandingsGenerator(metrics, rankings)",
        "detail": "tabbycat.breakqual.utils",
        "documentation": {}
    },
    {
        "label": "breakcategories_with_counts",
        "kind": 2,
        "importPath": "tabbycat.breakqual.utils",
        "description": "tabbycat.breakqual.utils",
        "peekOfCode": "def breakcategories_with_counts(tournament):\n    categories = tournament.breakcategory_set.annotate(\n        eligible=Count('team', distinct=True),\n        breaking=Count('breakingteam', filter=Q(breakingteam__break_rank__isnull=False), distinct=True),\n        excluded=Count('breakingteam', filter=Q(breakingteam__break_rank__isnull=True), distinct=True),\n    )\n    for category in categories:\n        category.nonbreaking = category.eligible - category.breaking\n    return categories\ndef liveness(self, team, teams_count, prelims, current_round):",
        "detail": "tabbycat.breakqual.utils",
        "documentation": {}
    },
    {
        "label": "liveness",
        "kind": 2,
        "importPath": "tabbycat.breakqual.utils",
        "description": "tabbycat.breakqual.utils",
        "peekOfCode": "def liveness(self, team, teams_count, prelims, current_round):\n    live_info = {'text': team.wins_count, 'tooltip': ''}\n    # The actual calculation should be shifted to be a cached method on\n    # the relevant break category\n    highest_liveness = 3\n    for bc in team.break_categories.all():\n        import random\n        status = random.choice([1, 2, 3])\n        highest_liveness = 3\n        if status == 1:",
        "detail": "tabbycat.breakqual.utils",
        "documentation": {}
    },
    {
        "label": "determine_liveness",
        "kind": 2,
        "importPath": "tabbycat.breakqual.utils",
        "description": "tabbycat.breakqual.utils",
        "peekOfCode": "def determine_liveness(thresholds, points):\n    \"\"\" Thresholds should be calculated using calculate_live_thresholds.\"\"\"\n    safe, dead = thresholds\n    if points is None:\n        points = 0 # For when a results-less team (i.e. swings) is subbing in\n    if safe is None and dead is None:\n        return '?'\n    elif points >= safe:\n        return 'safe'\n    elif points <= dead:",
        "detail": "tabbycat.breakqual.utils",
        "documentation": {}
    },
    {
        "label": "calculate_live_thresholds",
        "kind": 2,
        "importPath": "tabbycat.breakqual.utils",
        "description": "tabbycat.breakqual.utils",
        "peekOfCode": "def calculate_live_thresholds(bc, tournament, round):\n    total_teams = tournament.team_set.count()\n    total_rounds = tournament.prelim_rounds().count()\n    if not bc.is_general:\n        team_scores = bc.team_set.filter(\n            debateteam__debate__round__seq__lt=round.seq,\n            debateteam__teamscore__ballot_submission__confirmed=True,\n            debateteam__teamscore__points__isnull=False,\n        ).annotate(score=Sum('debateteam__teamscore__points')).order_by('-score').values_list('score', flat=True)\n        team_scores = list(team_scores)",
        "detail": "tabbycat.breakqual.utils",
        "documentation": {}
    },
    {
        "label": "get_break_category_round_names",
        "kind": 2,
        "importPath": "tabbycat.breakqual.utils",
        "description": "tabbycat.breakqual.utils",
        "peekOfCode": "def get_break_category_round_names(bc):\n    return [\n        # Translators: abbreviation for \"finals\" - first character of category name\n        (_(\"%s Finals\") % bc.name, _(\"%sF\") % (bc.name[:1])),\n        # Translators: abbreviation for \"semifinals\" - first character of category name\n        (_(\"%s Semifinals\") % bc.name, _(\"%sSF\") % (bc.name[:1])),\n        # Translators: abbreviation for \"quarterfinals\" - first character of category name\n        (_(\"%s Quarterfinals\") % bc.name, _(\"%sQF\") % (bc.name[:1])),\n        # Translators: abbreviation for \"octofinals\" - first character of category name\n        (_(\"%s Octofinals\") % bc.name, _(\"%sOF\") % (bc.name[:1])),",
        "detail": "tabbycat.breakqual.utils",
        "documentation": {}
    },
    {
        "label": "auto_make_break_rounds",
        "kind": 2,
        "importPath": "tabbycat.breakqual.utils",
        "description": "tabbycat.breakqual.utils",
        "peekOfCode": "def auto_make_break_rounds(bc, tournament=None, prefix=False):\n    if tournament is None:\n        tournament = bc.tournament\n    num_rounds = tournament.round_set.all().aggregate(Max('seq'))['seq__max']\n    round_names = get_break_category_round_names(bc) if prefix else BREAK_ROUND_NAMES\n    # Translators: \"UBR\" stands for \"unknown break round\" (used as a fallback when we don't know what it's called)\n    unknown_round = (_(\"Unknown %s break round\") % bc.name, _(\"U%sBR\") % (bc.name[:1])) if prefix \\\n        else (_(\"Unknown break round\"), _(\"UBR\"))\n    break_rounds = itertools.chain(round_names, itertools.repeat(unknown_round))\n    for i, (name, abbr) in zip(range(bc.num_break_rounds), break_rounds):",
        "detail": "tabbycat.breakqual.utils",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "tabbycat.breakqual.utils",
        "description": "tabbycat.breakqual.utils",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef get_breaking_teams(category, prefetch=(), rankings=('rank',)):\n    \"\"\"Returns a list of StandingInfo objects, one for each team, with one\n    additional attribute populated: for each StandingInfo `tsi`,\n    `tsi.break_rank` is the rank of the team out of those that are in the break.\n    `prefetch` is passed to `prefetch_related()` in the Team query.\n    `rankings` is passed to `rankings` in the TeamStandingsGenerator.\n    \"\"\"\n    teams = category.breaking_teams.all().prefetch_related(*prefetch)\n    metrics = category.tournament.pref('team_standings_precedence')",
        "detail": "tabbycat.breakqual.utils",
        "documentation": {}
    },
    {
        "label": "BREAK_ROUND_NAMES",
        "kind": 5,
        "importPath": "tabbycat.breakqual.utils",
        "description": "tabbycat.breakqual.utils",
        "peekOfCode": "BREAK_ROUND_NAMES = [\n    # Translators: abbreviation for \"grand final\"\n    (_(\"Grand Final\"), _(\"GF\")),\n    # Translators: abbreviation for \"semifinals\"\n    (_(\"Semifinals\"), _(\"SF\")),\n    # Translators: abbreviation for \"quarterfinals\"\n    (_(\"Quarterfinals\"), _(\"QF\")),\n    # Translators: abbreviation for \"octofinals\"\n    (_(\"Octofinals\"), _(\"OF\")),\n    # Translators: abbreviation for \"double-octofinals\"",
        "detail": "tabbycat.breakqual.utils",
        "documentation": {}
    },
    {
        "label": "PublicBreakIndexView",
        "kind": 6,
        "importPath": "tabbycat.breakqual.views",
        "description": "tabbycat.breakqual.views",
        "peekOfCode": "class PublicBreakIndexView(PublicTournamentPageMixin, TemplateView):\n    public_page_preference = 'public_results'\n    template_name = 'public_break_index.html'\n    cache_timeout = settings.PUBLIC_SLOW_CACHE_TIMEOUT\nclass AdminBreakIndexView(AdministratorMixin, TournamentMixin, TemplateView):\n    template_name = 'breaking_index.html'\n    view_permission = Permission.VIEW_BREAK_OVERVIEW\n    def get_context_data(self, **kwargs):\n        tournament = self.tournament\n        kwargs['categories'] = breakcategories_with_counts(tournament)",
        "detail": "tabbycat.breakqual.views",
        "documentation": {}
    },
    {
        "label": "AdminBreakIndexView",
        "kind": 6,
        "importPath": "tabbycat.breakqual.views",
        "description": "tabbycat.breakqual.views",
        "peekOfCode": "class AdminBreakIndexView(AdministratorMixin, TournamentMixin, TemplateView):\n    template_name = 'breaking_index.html'\n    view_permission = Permission.VIEW_BREAK_OVERVIEW\n    def get_context_data(self, **kwargs):\n        tournament = self.tournament\n        kwargs['categories'] = breakcategories_with_counts(tournament)\n        kwargs['no_teams_eligible'] = not BreakCategory.team_set.through.objects.filter(breakcategory__tournament=tournament).exists()\n        kwargs['break_not_generated'] = not BreakingTeam.objects.filter(break_category__tournament=tournament).exists()\n        return super().get_context_data(**kwargs)\n# ==============================================================================",
        "detail": "tabbycat.breakqual.views",
        "documentation": {}
    },
    {
        "label": "BaseBreakingTeamsView",
        "kind": 6,
        "importPath": "tabbycat.breakqual.views",
        "description": "tabbycat.breakqual.views",
        "peekOfCode": "class BaseBreakingTeamsView(SingleObjectFromTournamentMixin, VueTableTemplateView):\n    model = BreakCategory\n    slug_url_kwarg = 'category'\n    page_emoji = '👑'\n    def get_standings(self):\n        return get_breaking_teams(self.object, prefetch=('speaker_set',))\n    def get_table(self):\n        self.standings = self.get_standings()\n        table = TabbycatTableBuilder(view=self, title=escape(self.object.name), sort_key='Rk')\n        table.add_ranking_columns(self.standings)",
        "detail": "tabbycat.breakqual.views",
        "documentation": {}
    },
    {
        "label": "PublicBreakingTeamsView",
        "kind": 6,
        "importPath": "tabbycat.breakqual.views",
        "description": "tabbycat.breakqual.views",
        "peekOfCode": "class PublicBreakingTeamsView(PublicTournamentPageMixin, BaseBreakingTeamsView):\n    public_page_preference = 'public_breaking_teams'\n    cache_timeout = settings.PUBLIC_SLOW_CACHE_TIMEOUT\nclass GenerateBreakMixin:\n    def generate_break(self, categories):\n        \"\"\"Generates the break for the given categories. Adds a messages error\n        for each category where break generation failed; returns a string\n        containing a list of names of categories where breaks were successfully\n        generated.\"\"\"\n        successes = []",
        "detail": "tabbycat.breakqual.views",
        "documentation": {}
    },
    {
        "label": "GenerateBreakMixin",
        "kind": 6,
        "importPath": "tabbycat.breakqual.views",
        "description": "tabbycat.breakqual.views",
        "peekOfCode": "class GenerateBreakMixin:\n    def generate_break(self, categories):\n        \"\"\"Generates the break for the given categories. Adds a messages error\n        for each category where break generation failed; returns a string\n        containing a list of names of categories where breaks were successfully\n        generated.\"\"\"\n        successes = []\n        for category in categories:\n            try:\n                BreakGenerator(category).generate()",
        "detail": "tabbycat.breakqual.views",
        "documentation": {}
    },
    {
        "label": "BreakingTeamsFormView",
        "kind": 6,
        "importPath": "tabbycat.breakqual.views",
        "description": "tabbycat.breakqual.views",
        "peekOfCode": "class BreakingTeamsFormView(GenerateBreakMixin, LogActionMixin, AdministratorMixin, BaseBreakingTeamsView, FormView):\n    # inherit from two views, not best practice but works in this scenario\n    form_class = forms.BreakingTeamsForm\n    template_name = 'breaking_teams.html'\n    action_log_content_object_attr = 'object'\n    view_permission = Permission.VIEW_BREAK\n    edit_permission = Permission.GENERATE_BREAK\n    def get_action_log_type(self):\n        if 'save_update_all' in self.request.POST:\n            return ActionLogEntry.ActionType.BREAK_UPDATE_ALL",
        "detail": "tabbycat.breakqual.views",
        "documentation": {}
    },
    {
        "label": "GenerateAllBreaksView",
        "kind": 6,
        "importPath": "tabbycat.breakqual.views",
        "description": "tabbycat.breakqual.views",
        "peekOfCode": "class GenerateAllBreaksView(GenerateBreakMixin, LogActionMixin, TournamentMixin, AdministratorMixin, PostOnlyRedirectView):\n    action_log_type = ActionLogEntry.ActionType.BREAK_GENERATE_ALL\n    tournament_redirect_pattern_name = 'breakqual-teams'\n    edit_permission = Permission.GENERATE_BREAK\n    def post(self, request, *args, **kwargs):\n        BreakingTeam.objects.filter(break_category__tournament=self.tournament).delete()\n        tournament = self.tournament\n        successes = self.generate_break(tournament.breakcategory_set.order_by('-priority'))\n        if successes:\n            messages.success(request, _(\"Teams break generated for the following break categories: \"",
        "detail": "tabbycat.breakqual.views",
        "documentation": {}
    },
    {
        "label": "BaseBreakingAdjudicatorsView",
        "kind": 6,
        "importPath": "tabbycat.breakqual.views",
        "description": "tabbycat.breakqual.views",
        "peekOfCode": "class BaseBreakingAdjudicatorsView(TournamentMixin, VueTableTemplateView):\n    page_title = _(\"Breaking Adjudicators\")\n    page_emoji = '🎉'\n    def get_table(self):\n        table = TabbycatTableBuilder(view=self, sort_key='name')\n        table.add_adjudicator_columns(self.tournament.adjudicator_set.filter(breaking=True))\n        return table\nclass AdminBreakingAdjudicatorsView(AdministratorMixin, BaseBreakingAdjudicatorsView):\n    template_name = 'breaking_adjs.html'\n    view_permission = Permission.VIEW_ADJ_BREAK",
        "detail": "tabbycat.breakqual.views",
        "documentation": {}
    },
    {
        "label": "AdminBreakingAdjudicatorsView",
        "kind": 6,
        "importPath": "tabbycat.breakqual.views",
        "description": "tabbycat.breakqual.views",
        "peekOfCode": "class AdminBreakingAdjudicatorsView(AdministratorMixin, BaseBreakingAdjudicatorsView):\n    template_name = 'breaking_adjs.html'\n    view_permission = Permission.VIEW_ADJ_BREAK\nclass PublicBreakingAdjudicatorsView(PublicTournamentPageMixin, BaseBreakingAdjudicatorsView):\n    public_page_preference = 'public_breaking_adjs'\n    cache_timeout = settings.PUBLIC_SLOW_CACHE_TIMEOUT\n# ==============================================================================\n# Eligibility and categories\n# ==============================================================================\nclass BreakCategoryModelForm(ModelForm):",
        "detail": "tabbycat.breakqual.views",
        "documentation": {}
    },
    {
        "label": "PublicBreakingAdjudicatorsView",
        "kind": 6,
        "importPath": "tabbycat.breakqual.views",
        "description": "tabbycat.breakqual.views",
        "peekOfCode": "class PublicBreakingAdjudicatorsView(PublicTournamentPageMixin, BaseBreakingAdjudicatorsView):\n    public_page_preference = 'public_breaking_adjs'\n    cache_timeout = settings.PUBLIC_SLOW_CACHE_TIMEOUT\n# ==============================================================================\n# Eligibility and categories\n# ==============================================================================\nclass BreakCategoryModelForm(ModelForm):\n    \"\"\"Class to handle validating the break size, as can't add validator\"\"\"\n    def __init__(self, *args, **kwargs):\n        self.tournament = kwargs.pop('tournament')",
        "detail": "tabbycat.breakqual.views",
        "documentation": {}
    },
    {
        "label": "BreakCategoryModelForm",
        "kind": 6,
        "importPath": "tabbycat.breakqual.views",
        "description": "tabbycat.breakqual.views",
        "peekOfCode": "class BreakCategoryModelForm(ModelForm):\n    \"\"\"Class to handle validating the break size, as can't add validator\"\"\"\n    def __init__(self, *args, **kwargs):\n        self.tournament = kwargs.pop('tournament')\n        super().__init__(*args, **kwargs)\n    def clean_break_size(self):\n        bs = self.cleaned_data['break_size']\n        if self.tournament.pref('teams_in_debate') == 4 and not ((bs % 6 == 0 and ispow2(bs // 6)) or (bs >= 4 and ispow2(bs))):\n            raise ValidationError(_(\"Four-team formats require the break size to be either six times or four times a power of two.\"))\n        return bs",
        "detail": "tabbycat.breakqual.views",
        "documentation": {}
    },
    {
        "label": "EditBreakCategoriesView",
        "kind": 6,
        "importPath": "tabbycat.breakqual.views",
        "description": "tabbycat.breakqual.views",
        "peekOfCode": "class EditBreakCategoriesView(EditSpeakerCategoriesView):\n    # The tournament is included in the form as a hidden input so that\n    # uniqueness checks will work. Since this is a superuser form, they can\n    # access all tournaments anyway, so tournament forgery wouldn't be a\n    # security risk.\n    template_name = 'break_categories_edit.html'\n    formset_model = BreakCategory\n    view_permission = Permission.VIEW_BREAK_CATEGORIES\n    edit_permission = Permission.EDIT_BREAK_CATEGORIES\n    action_log_type = ActionLogEntry.ActionType.BREAK_CATEGORIES_EDIT",
        "detail": "tabbycat.breakqual.views",
        "documentation": {}
    },
    {
        "label": "EditTeamEligibilityView",
        "kind": 6,
        "importPath": "tabbycat.breakqual.views",
        "description": "tabbycat.breakqual.views",
        "peekOfCode": "class EditTeamEligibilityView(AdministratorMixin, TournamentMixin, VueTableTemplateView):\n    template_name = 'edit_break_eligibility.html'\n    page_title = _(\"Break Eligibility\")\n    page_emoji = '🍯'\n    view_permission = Permission.VIEW_BREAK_ELIGIBILITY\n    edit_permission = Permission.EDIT_BREAK_ELIGIBILITY\n    def get_table(self):\n        t = self.tournament\n        table = TabbycatTableBuilder(view=self, sort_key='team')\n        teams = t.team_set.all().select_related(",
        "detail": "tabbycat.breakqual.views",
        "documentation": {}
    },
    {
        "label": "UpdateEligibilityEditView",
        "kind": 6,
        "importPath": "tabbycat.breakqual.views",
        "description": "tabbycat.breakqual.views",
        "peekOfCode": "class UpdateEligibilityEditView(BaseUpdateEligibilityEditView):\n    action_log_type = ActionLogEntry.ActionType.BREAK_ELIGIBILITY_EDIT\n    participant_model = Team\n    many_to_many_field = 'break_categories'\n    edit_permission = Permission.EDIT_BREAK_ELIGIBILITY",
        "detail": "tabbycat.breakqual.views",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "tabbycat.breakqual.views",
        "description": "tabbycat.breakqual.views",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass PublicBreakIndexView(PublicTournamentPageMixin, TemplateView):\n    public_page_preference = 'public_results'\n    template_name = 'public_break_index.html'\n    cache_timeout = settings.PUBLIC_SLOW_CACHE_TIMEOUT\nclass AdminBreakIndexView(AdministratorMixin, TournamentMixin, TemplateView):\n    template_name = 'breaking_index.html'\n    view_permission = Permission.VIEW_BREAK_OVERVIEW\n    def get_context_data(self, **kwargs):\n        tournament = self.tournament",
        "detail": "tabbycat.breakqual.views",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "tabbycat.checkins.management.commands.manageidentifiers",
        "description": "tabbycat.checkins.management.commands.manageidentifiers",
        "peekOfCode": "class Command(TournamentCommand):\n    help = \"Generates or deletes check-in identifiers\"\n    def add_arguments(self, parser):\n        parent = ArgumentParser(add_help=False)\n        parent.add_argument('-m', '--model', type=str, choices=['person', 'venue'], default='person',\n            help=\"Which model to use to create identifiers\")\n        subparsers = parser.add_subparsers(dest=\"subcommand\", parser_class=ArgumentParser)\n        subparsers.required = True\n        generate = subparsers.add_parser(\"generate\", parents=[parent])\n        super().add_arguments(generate)",
        "detail": "tabbycat.checkins.management.commands.manageidentifiers",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.checkins.migrations.0001_initial_squashed_0007_auto_20180316_1750",
        "description": "tabbycat.checkins.migrations.0001_initial_squashed_0007_auto_20180316_1750",
        "peekOfCode": "class Migration(migrations.Migration):\n    replaces = [('checkins', '0001_initial'), ('checkins', '0002_auto_20180302_1125'), ('checkins', '0003_auto_20180302_1232'), ('checkins', '0004_auto_20180304_2218'), ('checkins', '0005_event_tournament'), ('checkins', '0006_auto_20180316_1722'), ('checkins', '0007_auto_20180316_1750')]\n    dependencies = [\n        ('venues', '0002_auto_20180218_1311'),\n        ('draw', '0002_auto_20171110_0905'),\n        ('participants', '0002_auto_20171201_1130'),\n        ('contenttypes', '0002_remove_content_type_name'),\n        ('tournaments', '0002_remove_tournament_welcome_msg'),\n    ]\n    operations = [",
        "detail": "tabbycat.checkins.migrations.0001_initial_squashed_0007_auto_20180316_1750",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.checkins.migrations.0002_auto_20180420_2044",
        "description": "tabbycat.checkins.migrations.0002_auto_20180420_2044",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('checkins', '0001_initial_squashed_0007_auto_20180316_1750'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='identifier',\n            name='barcode',\n            field=models.CharField(default=checkins.models.generate_identifier, max_length=20, unique=True, validators=[django.core.validators.RegexValidator('^[0-9]{4,20}$', message='The barcode must contain between 4 and 20 digits.')], verbose_name='barcode'),\n        ),",
        "detail": "tabbycat.checkins.migrations.0002_auto_20180420_2044",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.checkins.migrations.0003_auto_20181224_1549",
        "description": "tabbycat.checkins.migrations.0003_auto_20181224_1549",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('contenttypes', '0002_remove_content_type_name'),\n        ('checkins', '0002_auto_20180420_2044'),\n    ]\n    operations = [\n        migrations.AlterModelOptions(\n            name='identifier',\n            options={'base_manager_name': 'objects'},\n        ),",
        "detail": "tabbycat.checkins.migrations.0003_auto_20181224_1549",
        "documentation": {}
    },
    {
        "label": "create_migration_sql_query",
        "kind": 2,
        "importPath": "tabbycat.checkins.migrations.0003_auto_20181224_1549",
        "description": "tabbycat.checkins.migrations.0003_auto_20181224_1549",
        "peekOfCode": "def create_migration_sql_query(model):\n    return migrations.RunSQL(\n        \"UPDATE checkins_identifier ci SET polymorphic_ctype_id=(SELECT id FROM django_content_type WHERE app_label='checkins' AND model='%s' LIMIT 1) FROM checkins_%s c WHERE c.identifier_ptr_id=ci.id AND ci.polymorphic_ctype_id IS NULL;\" % (model, model),\n        migrations.RunSQL.noop,\n    )\nclass Migration(migrations.Migration):\n    dependencies = [\n        ('contenttypes', '0002_remove_content_type_name'),\n        ('checkins', '0002_auto_20180420_2044'),\n    ]",
        "detail": "tabbycat.checkins.migrations.0003_auto_20181224_1549",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.checkins.migrations.0004_auto_20200613_2006",
        "description": "tabbycat.checkins.migrations.0004_auto_20200613_2006",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('checkins', '0003_auto_20181224_1549'),\n    ]\n    operations = [\n        migrations.AlterModelOptions(\n            name='venueidentifier',\n            options={'verbose_name': 'room identifier', 'verbose_name_plural': 'room identifiers'},\n        ),\n    ]",
        "detail": "tabbycat.checkins.migrations.0004_auto_20200613_2006",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.checkins.migrations.0005_alter_identifier_polymorphic_ctype",
        "description": "tabbycat.checkins.migrations.0005_alter_identifier_polymorphic_ctype",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('contenttypes', '0002_remove_content_type_name'),\n        ('checkins', '0004_auto_20200613_2006'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='identifier',\n            name='polymorphic_ctype',\n            field=models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_%(app_label)s.%(class)s_set+', to='contenttypes.contenttype'),",
        "detail": "tabbycat.checkins.migrations.0005_alter_identifier_polymorphic_ctype",
        "documentation": {}
    },
    {
        "label": "AdminCheckInPreScanView",
        "kind": 6,
        "importPath": "tabbycat.checkins.tests.test_views",
        "description": "tabbycat.checkins.tests.test_views",
        "peekOfCode": "class AdminCheckInPreScanView(AdminTournamentViewSimpleLoadTestMixin, TestCase):\n    view_name = 'admin-checkin-prescan'\nclass AssistantCheckInPreScanView(AssistantTournamentViewSimpleLoadTestMixin, TestCase):\n    view_name = 'assistant-checkin-prescan'\nclass AdminCheckInPeopleStatusView(AdminTournamentViewSimpleLoadTestMixin, TestCase):\n    view_name = 'admin-people-statuses'\nclass AssistantCheckInPeopleStatusView(AssistantTournamentViewSimpleLoadTestMixin, TestCase):\n    view_name = 'assistant-people-statuses'\nclass AdminCheckInVenuesStatusView(AdminTournamentViewSimpleLoadTestMixin, TestCase):\n    view_name = 'admin-venues-statuses'",
        "detail": "tabbycat.checkins.tests.test_views",
        "documentation": {}
    },
    {
        "label": "AssistantCheckInPreScanView",
        "kind": 6,
        "importPath": "tabbycat.checkins.tests.test_views",
        "description": "tabbycat.checkins.tests.test_views",
        "peekOfCode": "class AssistantCheckInPreScanView(AssistantTournamentViewSimpleLoadTestMixin, TestCase):\n    view_name = 'assistant-checkin-prescan'\nclass AdminCheckInPeopleStatusView(AdminTournamentViewSimpleLoadTestMixin, TestCase):\n    view_name = 'admin-people-statuses'\nclass AssistantCheckInPeopleStatusView(AssistantTournamentViewSimpleLoadTestMixin, TestCase):\n    view_name = 'assistant-people-statuses'\nclass AdminCheckInVenuesStatusView(AdminTournamentViewSimpleLoadTestMixin, TestCase):\n    view_name = 'admin-venues-statuses'\nclass AssistantCheckInVenuesStatusView(AssistantTournamentViewSimpleLoadTestMixin, TestCase):\n    view_name = 'assistant-venues-statuses'",
        "detail": "tabbycat.checkins.tests.test_views",
        "documentation": {}
    },
    {
        "label": "AdminCheckInPeopleStatusView",
        "kind": 6,
        "importPath": "tabbycat.checkins.tests.test_views",
        "description": "tabbycat.checkins.tests.test_views",
        "peekOfCode": "class AdminCheckInPeopleStatusView(AdminTournamentViewSimpleLoadTestMixin, TestCase):\n    view_name = 'admin-people-statuses'\nclass AssistantCheckInPeopleStatusView(AssistantTournamentViewSimpleLoadTestMixin, TestCase):\n    view_name = 'assistant-people-statuses'\nclass AdminCheckInVenuesStatusView(AdminTournamentViewSimpleLoadTestMixin, TestCase):\n    view_name = 'admin-venues-statuses'\nclass AssistantCheckInVenuesStatusView(AssistantTournamentViewSimpleLoadTestMixin, TestCase):\n    view_name = 'assistant-venues-statuses'\nclass AdminCheckInIdentifiersView(AdminTournamentViewSimpleLoadTestMixin, TestCase):\n    view_name = 'admin-checkin-identifiers'",
        "detail": "tabbycat.checkins.tests.test_views",
        "documentation": {}
    },
    {
        "label": "AssistantCheckInPeopleStatusView",
        "kind": 6,
        "importPath": "tabbycat.checkins.tests.test_views",
        "description": "tabbycat.checkins.tests.test_views",
        "peekOfCode": "class AssistantCheckInPeopleStatusView(AssistantTournamentViewSimpleLoadTestMixin, TestCase):\n    view_name = 'assistant-people-statuses'\nclass AdminCheckInVenuesStatusView(AdminTournamentViewSimpleLoadTestMixin, TestCase):\n    view_name = 'admin-venues-statuses'\nclass AssistantCheckInVenuesStatusView(AssistantTournamentViewSimpleLoadTestMixin, TestCase):\n    view_name = 'assistant-venues-statuses'\nclass AdminCheckInIdentifiersView(AdminTournamentViewSimpleLoadTestMixin, TestCase):\n    view_name = 'admin-checkin-identifiers'\nclass AssistantCheckInIdentifiersView(AssistantTournamentViewSimpleLoadTestMixin, TestCase):\n    view_name = 'assistant-checkin-identifiers'",
        "detail": "tabbycat.checkins.tests.test_views",
        "documentation": {}
    },
    {
        "label": "AdminCheckInVenuesStatusView",
        "kind": 6,
        "importPath": "tabbycat.checkins.tests.test_views",
        "description": "tabbycat.checkins.tests.test_views",
        "peekOfCode": "class AdminCheckInVenuesStatusView(AdminTournamentViewSimpleLoadTestMixin, TestCase):\n    view_name = 'admin-venues-statuses'\nclass AssistantCheckInVenuesStatusView(AssistantTournamentViewSimpleLoadTestMixin, TestCase):\n    view_name = 'assistant-venues-statuses'\nclass AdminCheckInIdentifiersView(AdminTournamentViewSimpleLoadTestMixin, TestCase):\n    view_name = 'admin-checkin-identifiers'\nclass AssistantCheckInIdentifiersView(AssistantTournamentViewSimpleLoadTestMixin, TestCase):\n    view_name = 'assistant-checkin-identifiers'\nclass AdminCheckInSpeakersPrintablesView(AdminTournamentViewSimpleLoadTestMixin, TestCase):\n    view_name = 'admin-checkin-print'",
        "detail": "tabbycat.checkins.tests.test_views",
        "documentation": {}
    },
    {
        "label": "AssistantCheckInVenuesStatusView",
        "kind": 6,
        "importPath": "tabbycat.checkins.tests.test_views",
        "description": "tabbycat.checkins.tests.test_views",
        "peekOfCode": "class AssistantCheckInVenuesStatusView(AssistantTournamentViewSimpleLoadTestMixin, TestCase):\n    view_name = 'assistant-venues-statuses'\nclass AdminCheckInIdentifiersView(AdminTournamentViewSimpleLoadTestMixin, TestCase):\n    view_name = 'admin-checkin-identifiers'\nclass AssistantCheckInIdentifiersView(AssistantTournamentViewSimpleLoadTestMixin, TestCase):\n    view_name = 'assistant-checkin-identifiers'\nclass AdminCheckInSpeakersPrintablesView(AdminTournamentViewSimpleLoadTestMixin, TestCase):\n    view_name = 'admin-checkin-print'\n    view_reverse_kwargs = {'kind': 'speakers'}\nclass AssistantCheckInSpeakersPrintablesView(AssistantTournamentViewSimpleLoadTestMixin, TestCase):",
        "detail": "tabbycat.checkins.tests.test_views",
        "documentation": {}
    },
    {
        "label": "AdminCheckInIdentifiersView",
        "kind": 6,
        "importPath": "tabbycat.checkins.tests.test_views",
        "description": "tabbycat.checkins.tests.test_views",
        "peekOfCode": "class AdminCheckInIdentifiersView(AdminTournamentViewSimpleLoadTestMixin, TestCase):\n    view_name = 'admin-checkin-identifiers'\nclass AssistantCheckInIdentifiersView(AssistantTournamentViewSimpleLoadTestMixin, TestCase):\n    view_name = 'assistant-checkin-identifiers'\nclass AdminCheckInSpeakersPrintablesView(AdminTournamentViewSimpleLoadTestMixin, TestCase):\n    view_name = 'admin-checkin-print'\n    view_reverse_kwargs = {'kind': 'speakers'}\nclass AssistantCheckInSpeakersPrintablesView(AssistantTournamentViewSimpleLoadTestMixin, TestCase):\n    view_name = 'assistant-checkin-print'\n    view_reverse_kwargs = {'kind': 'speakers'}",
        "detail": "tabbycat.checkins.tests.test_views",
        "documentation": {}
    },
    {
        "label": "AssistantCheckInIdentifiersView",
        "kind": 6,
        "importPath": "tabbycat.checkins.tests.test_views",
        "description": "tabbycat.checkins.tests.test_views",
        "peekOfCode": "class AssistantCheckInIdentifiersView(AssistantTournamentViewSimpleLoadTestMixin, TestCase):\n    view_name = 'assistant-checkin-identifiers'\nclass AdminCheckInSpeakersPrintablesView(AdminTournamentViewSimpleLoadTestMixin, TestCase):\n    view_name = 'admin-checkin-print'\n    view_reverse_kwargs = {'kind': 'speakers'}\nclass AssistantCheckInSpeakersPrintablesView(AssistantTournamentViewSimpleLoadTestMixin, TestCase):\n    view_name = 'assistant-checkin-print'\n    view_reverse_kwargs = {'kind': 'speakers'}\nclass AdminCheckInAdjudicatorsPrintablesView(AdminTournamentViewSimpleLoadTestMixin, TestCase):\n    view_name = 'admin-checkin-print'",
        "detail": "tabbycat.checkins.tests.test_views",
        "documentation": {}
    },
    {
        "label": "AdminCheckInSpeakersPrintablesView",
        "kind": 6,
        "importPath": "tabbycat.checkins.tests.test_views",
        "description": "tabbycat.checkins.tests.test_views",
        "peekOfCode": "class AdminCheckInSpeakersPrintablesView(AdminTournamentViewSimpleLoadTestMixin, TestCase):\n    view_name = 'admin-checkin-print'\n    view_reverse_kwargs = {'kind': 'speakers'}\nclass AssistantCheckInSpeakersPrintablesView(AssistantTournamentViewSimpleLoadTestMixin, TestCase):\n    view_name = 'assistant-checkin-print'\n    view_reverse_kwargs = {'kind': 'speakers'}\nclass AdminCheckInAdjudicatorsPrintablesView(AdminTournamentViewSimpleLoadTestMixin, TestCase):\n    view_name = 'admin-checkin-print'\n    view_reverse_kwargs = {'kind': 'adjudicators'}\nclass AssistantCheckInAdjudicatorsPrintablesView(AssistantTournamentViewSimpleLoadTestMixin, TestCase):",
        "detail": "tabbycat.checkins.tests.test_views",
        "documentation": {}
    },
    {
        "label": "AssistantCheckInSpeakersPrintablesView",
        "kind": 6,
        "importPath": "tabbycat.checkins.tests.test_views",
        "description": "tabbycat.checkins.tests.test_views",
        "peekOfCode": "class AssistantCheckInSpeakersPrintablesView(AssistantTournamentViewSimpleLoadTestMixin, TestCase):\n    view_name = 'assistant-checkin-print'\n    view_reverse_kwargs = {'kind': 'speakers'}\nclass AdminCheckInAdjudicatorsPrintablesView(AdminTournamentViewSimpleLoadTestMixin, TestCase):\n    view_name = 'admin-checkin-print'\n    view_reverse_kwargs = {'kind': 'adjudicators'}\nclass AssistantCheckInAdjudicatorsPrintablesView(AssistantTournamentViewSimpleLoadTestMixin, TestCase):\n    view_name = 'assistant-checkin-print'\n    view_reverse_kwargs = {'kind': 'adjudicators'}\nclass AdminCheckInVenuesPrintablesView(AdminTournamentViewSimpleLoadTestMixin, TestCase):",
        "detail": "tabbycat.checkins.tests.test_views",
        "documentation": {}
    },
    {
        "label": "AdminCheckInAdjudicatorsPrintablesView",
        "kind": 6,
        "importPath": "tabbycat.checkins.tests.test_views",
        "description": "tabbycat.checkins.tests.test_views",
        "peekOfCode": "class AdminCheckInAdjudicatorsPrintablesView(AdminTournamentViewSimpleLoadTestMixin, TestCase):\n    view_name = 'admin-checkin-print'\n    view_reverse_kwargs = {'kind': 'adjudicators'}\nclass AssistantCheckInAdjudicatorsPrintablesView(AssistantTournamentViewSimpleLoadTestMixin, TestCase):\n    view_name = 'assistant-checkin-print'\n    view_reverse_kwargs = {'kind': 'adjudicators'}\nclass AdminCheckInVenuesPrintablesView(AdminTournamentViewSimpleLoadTestMixin, TestCase):\n    view_name = 'admin-checkin-print'\n    view_reverse_kwargs = {'kind': 'venues'}\nclass AssistantCheckInVenuesPrintablesView(AssistantTournamentViewSimpleLoadTestMixin, TestCase):",
        "detail": "tabbycat.checkins.tests.test_views",
        "documentation": {}
    },
    {
        "label": "AssistantCheckInAdjudicatorsPrintablesView",
        "kind": 6,
        "importPath": "tabbycat.checkins.tests.test_views",
        "description": "tabbycat.checkins.tests.test_views",
        "peekOfCode": "class AssistantCheckInAdjudicatorsPrintablesView(AssistantTournamentViewSimpleLoadTestMixin, TestCase):\n    view_name = 'assistant-checkin-print'\n    view_reverse_kwargs = {'kind': 'adjudicators'}\nclass AdminCheckInVenuesPrintablesView(AdminTournamentViewSimpleLoadTestMixin, TestCase):\n    view_name = 'admin-checkin-print'\n    view_reverse_kwargs = {'kind': 'venues'}\nclass AssistantCheckInVenuesPrintablesView(AssistantTournamentViewSimpleLoadTestMixin, TestCase):\n    view_name = 'assistant-checkin-print'\n    view_reverse_kwargs = {'kind': 'venues'}\nclass PublicCheckInStatusViewTest(ConditionalTournamentViewSimpleLoadTestMixin, TestCase):",
        "detail": "tabbycat.checkins.tests.test_views",
        "documentation": {}
    },
    {
        "label": "AdminCheckInVenuesPrintablesView",
        "kind": 6,
        "importPath": "tabbycat.checkins.tests.test_views",
        "description": "tabbycat.checkins.tests.test_views",
        "peekOfCode": "class AdminCheckInVenuesPrintablesView(AdminTournamentViewSimpleLoadTestMixin, TestCase):\n    view_name = 'admin-checkin-print'\n    view_reverse_kwargs = {'kind': 'venues'}\nclass AssistantCheckInVenuesPrintablesView(AssistantTournamentViewSimpleLoadTestMixin, TestCase):\n    view_name = 'assistant-checkin-print'\n    view_reverse_kwargs = {'kind': 'venues'}\nclass PublicCheckInStatusViewTest(ConditionalTournamentViewSimpleLoadTestMixin, TestCase):\n    view_name = 'checkins-public-status'\n    view_toggle_preference = 'public_features__public_checkins'\n# These require the ability to test POST views",
        "detail": "tabbycat.checkins.tests.test_views",
        "documentation": {}
    },
    {
        "label": "AssistantCheckInVenuesPrintablesView",
        "kind": 6,
        "importPath": "tabbycat.checkins.tests.test_views",
        "description": "tabbycat.checkins.tests.test_views",
        "peekOfCode": "class AssistantCheckInVenuesPrintablesView(AssistantTournamentViewSimpleLoadTestMixin, TestCase):\n    view_name = 'assistant-checkin-print'\n    view_reverse_kwargs = {'kind': 'venues'}\nclass PublicCheckInStatusViewTest(ConditionalTournamentViewSimpleLoadTestMixin, TestCase):\n    view_name = 'checkins-public-status'\n    view_toggle_preference = 'public_features__public_checkins'\n# These require the ability to test POST views\n# class AdminCheckInSpeakersGenerateView(AdminTournamentViewSimpleLoadTestMixin, TestCase):\n#     view_name = 'admin-checkin-generate'\n#     view_reverse_kwargs = {'kind': 'speakers'}",
        "detail": "tabbycat.checkins.tests.test_views",
        "documentation": {}
    },
    {
        "label": "PublicCheckInStatusViewTest",
        "kind": 6,
        "importPath": "tabbycat.checkins.tests.test_views",
        "description": "tabbycat.checkins.tests.test_views",
        "peekOfCode": "class PublicCheckInStatusViewTest(ConditionalTournamentViewSimpleLoadTestMixin, TestCase):\n    view_name = 'checkins-public-status'\n    view_toggle_preference = 'public_features__public_checkins'\n# These require the ability to test POST views\n# class AdminCheckInSpeakersGenerateView(AdminTournamentViewSimpleLoadTestMixin, TestCase):\n#     view_name = 'admin-checkin-generate'\n#     view_reverse_kwargs = {'kind': 'speakers'}\n#\n# class AdminCheckInAdjudicatorsGenerateView(AdminTournamentViewSimpleLoadTestMixin, TestCase):\n#     view_name = 'admin-checkin-generate'",
        "detail": "tabbycat.checkins.tests.test_views",
        "documentation": {}
    },
    {
        "label": "PersonIdentifierAdmin",
        "kind": 6,
        "importPath": "tabbycat.checkins.admin",
        "description": "tabbycat.checkins.admin",
        "peekOfCode": "class PersonIdentifierAdmin(ModelAdmin):\n    base_model = PersonIdentifier\n    list_display = ('person', 'barcode')\n    list_filter = ('person__adjudicator__institution', 'person__speaker__team__institution')\n    search_fields = ('person__name', 'person__adjudicator__institution__name',\n        'person__speaker__team__institution__name')\n@admin.register(DebateIdentifier)\nclass DebateIdentifierAdmin(ModelAdmin):\n    base_model = DebateIdentifier\n    list_display = ('debate', 'barcode')",
        "detail": "tabbycat.checkins.admin",
        "documentation": {}
    },
    {
        "label": "DebateIdentifierAdmin",
        "kind": 6,
        "importPath": "tabbycat.checkins.admin",
        "description": "tabbycat.checkins.admin",
        "peekOfCode": "class DebateIdentifierAdmin(ModelAdmin):\n    base_model = DebateIdentifier\n    list_display = ('debate', 'barcode')\n    list_filter = ('debate__round',)\n    search_fields = ('debate__debateteam__team__short_name', 'debate__debateteam__team__long_name')\n@admin.register(VenueIdentifier)\nclass VenueIdentifierAdmin(ModelAdmin):\n    base_model = VenueIdentifier\n    list_display = ('venue', 'barcode')\n    list_filter = ('venue__venuecategory',)",
        "detail": "tabbycat.checkins.admin",
        "documentation": {}
    },
    {
        "label": "VenueIdentifierAdmin",
        "kind": 6,
        "importPath": "tabbycat.checkins.admin",
        "description": "tabbycat.checkins.admin",
        "peekOfCode": "class VenueIdentifierAdmin(ModelAdmin):\n    base_model = VenueIdentifier\n    list_display = ('venue', 'barcode')\n    list_filter = ('venue__venuecategory',)\n    search_fields = ('venue__name', 'venue__venuecategory__name')\n@admin.register(Event)\nclass CheckinEventAdmin(ModelAdmin):\n    list_display = ('identifier', 'checkin_type', 'checkin_time')\n    list_filter = ('identifier', 'identifier__polymorphic_ctype')\n    @admin.display(description=_(\"Type\"))",
        "detail": "tabbycat.checkins.admin",
        "documentation": {}
    },
    {
        "label": "CheckinEventAdmin",
        "kind": 6,
        "importPath": "tabbycat.checkins.admin",
        "description": "tabbycat.checkins.admin",
        "peekOfCode": "class CheckinEventAdmin(ModelAdmin):\n    list_display = ('identifier', 'checkin_type', 'checkin_time')\n    list_filter = ('identifier', 'identifier__polymorphic_ctype')\n    @admin.display(description=_(\"Type\"))\n    def checkin_type(self, obj):\n        klass = obj.identifier.polymorphic_ctype.model_class()\n        return klass._meta.get_field(klass.instance_attr).remote_field.model._meta.verbose_name\n    def get_queryset(self, request):\n        return super().get_queryset(request).select_related(None).prefetch_related('identifier__polymorphic_ctype')\n    @admin.display(description=_(\"Checkin time\"))",
        "detail": "tabbycat.checkins.admin",
        "documentation": {}
    },
    {
        "label": "CheckinsConfig",
        "kind": 6,
        "importPath": "tabbycat.checkins.apps",
        "description": "tabbycat.checkins.apps",
        "peekOfCode": "class CheckinsConfig(AppConfig):\n    name = 'checkins'\n    verbose_name = _(\"Check-Ins\")",
        "detail": "tabbycat.checkins.apps",
        "documentation": {}
    },
    {
        "label": "CheckInEventConsumer",
        "kind": 6,
        "importPath": "tabbycat.checkins.consumers",
        "description": "tabbycat.checkins.consumers",
        "peekOfCode": "class CheckInEventConsumer(TournamentWebsocketMixin, JsonWebsocketConsumer):\n    group_prefix = 'checkins'\n    edit_permission = Permission.EDIT_PARTICIPANT_CHECKIN\n    def receive_json(self, content):\n        # Because the public can receive but not send checkins we need to\n        # re-authenticate here:\n        if not has_permission(self.scope[\"user\"], self.edit_permission, self.tournament):\n            return\n        # Send message to room group about the new checkin\n        async_to_sync(self.channel_layer.group_send)(",
        "detail": "tabbycat.checkins.consumers",
        "documentation": {}
    },
    {
        "label": "Identifier",
        "kind": 6,
        "importPath": "tabbycat.checkins.models",
        "description": "tabbycat.checkins.models",
        "peekOfCode": "class Identifier(PolymorphicModel):\n    \"\"\"A unique string that will be matched to either a Person, Debate,\n    or Venue (of which only Person is supported at present)\"\"\"\n    instance_attr = None\n    validate_alphanumeric = RegexValidator(r'^[0-9]{6}$',\n        message=_(\"The barcode must contain exactly six digits.\"))\n    barcode = models.CharField(unique=True, max_length=20,\n        validators=[validate_alphanumeric], default=generate_identifier,\n        verbose_name=_(\"barcode\"))\n    @property",
        "detail": "tabbycat.checkins.models",
        "documentation": {}
    },
    {
        "label": "PersonIdentifier",
        "kind": 6,
        "importPath": "tabbycat.checkins.models",
        "description": "tabbycat.checkins.models",
        "peekOfCode": "class PersonIdentifier(Identifier):\n    instance_attr = 'person'\n    person = models.OneToOneField('participants.Person', models.CASCADE,\n        verbose_name=_(\"person\"), related_name='checkin_identifier')\n    class Meta:\n        verbose_name = _(\"person identifier\")\n        verbose_name_plural = _(\"person identifiers\")\nclass DebateIdentifier(Identifier):\n    instance_attr = 'debate'\n    debate = models.OneToOneField('draw.Debate', models.CASCADE,",
        "detail": "tabbycat.checkins.models",
        "documentation": {}
    },
    {
        "label": "DebateIdentifier",
        "kind": 6,
        "importPath": "tabbycat.checkins.models",
        "description": "tabbycat.checkins.models",
        "peekOfCode": "class DebateIdentifier(Identifier):\n    instance_attr = 'debate'\n    debate = models.OneToOneField('draw.Debate', models.CASCADE,\n        verbose_name=_(\"debate\"), related_name='checkin_identifier')\n    class Meta:\n        verbose_name = _(\"debate identifier\")\n        verbose_name_plural = _(\"debate identifiers\")\nclass VenueIdentifier(Identifier):\n    instance_attr = 'venue'\n    venue = models.OneToOneField('venues.Venue', models.CASCADE,",
        "detail": "tabbycat.checkins.models",
        "documentation": {}
    },
    {
        "label": "VenueIdentifier",
        "kind": 6,
        "importPath": "tabbycat.checkins.models",
        "description": "tabbycat.checkins.models",
        "peekOfCode": "class VenueIdentifier(Identifier):\n    instance_attr = 'venue'\n    venue = models.OneToOneField('venues.Venue', models.CASCADE,\n        verbose_name=(\"venue\"), related_name='checkin_identifier')\n    class Meta:\n        verbose_name = _(\"room identifier\")\n        verbose_name_plural = _(\"room identifiers\")\nclass Event(models.Model):\n    \"\"\"A timestamped record caused by an identifier being scanned, etc.\"\"\"\n    identifier = models.ForeignKey(Identifier, models.CASCADE,",
        "detail": "tabbycat.checkins.models",
        "documentation": {}
    },
    {
        "label": "Event",
        "kind": 6,
        "importPath": "tabbycat.checkins.models",
        "description": "tabbycat.checkins.models",
        "peekOfCode": "class Event(models.Model):\n    \"\"\"A timestamped record caused by an identifier being scanned, etc.\"\"\"\n    identifier = models.ForeignKey(Identifier, models.CASCADE,\n                                   verbose_name=_(\"identifier\"))\n    # timezone.now used over auto_add so times are visible/editable in admin\n    time = models.DateTimeField(db_index=True, default=timezone.now,\n                                verbose_name=_(\"check-in time\"))\n    tournament = models.ForeignKey('tournaments.Tournament', models.CASCADE,\n                                   verbose_name=_(\"tournament\"))\n    class Meta:",
        "detail": "tabbycat.checkins.models",
        "documentation": {}
    },
    {
        "label": "generate_identifier",
        "kind": 2,
        "importPath": "tabbycat.checkins.models",
        "description": "tabbycat.checkins.models",
        "peekOfCode": "def generate_identifier():\n    # First number should not be 0 so that it is easier import into Excel etc\n    new_id = str(random.choice([1, 2, 3, 4, 5, 6, 7, 8, 9])) + generate_identifier_string(digits, 5)\n    if Identifier.objects.filter(barcode=new_id).count() == 0:\n        return new_id\n    else:\n        return generate_identifier()\nclass Identifier(PolymorphicModel):\n    \"\"\"A unique string that will be matched to either a Person, Debate,\n    or Venue (of which only Person is supported at present)\"\"\"",
        "detail": "tabbycat.checkins.models",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "tabbycat.checkins.urls_admin",
        "description": "tabbycat.checkins.urls_admin",
        "peekOfCode": "urlpatterns = [\n    path('prescan/',\n        views.AdminCheckInPreScanView.as_view(),\n        name='admin-checkin-prescan'),\n    path('status/people/',\n        views.AdminCheckInPeopleStatusView.as_view(),\n        name='admin-people-statuses'),\n    path('status/venues/',\n        views.AdminCheckInVenuesStatusView.as_view(),\n        name='admin-venues-statuses'),",
        "detail": "tabbycat.checkins.urls_admin",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "tabbycat.checkins.urls_assistant",
        "description": "tabbycat.checkins.urls_assistant",
        "peekOfCode": "urlpatterns = [\n    path('prescan/',\n        views.AssistantCheckInPreScanView.as_view(),\n        name='assistant-checkin-prescan'),\n    path('status/people/',\n        views.AssistantCheckInPeopleStatusView.as_view(),\n        name='assistant-people-statuses'),\n    path('status/venues/',\n        views.AssistantCheckInVenuesStatusView.as_view(),\n        name='assistant-venues-statuses'),",
        "detail": "tabbycat.checkins.urls_assistant",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "tabbycat.checkins.urls_public",
        "description": "tabbycat.checkins.urls_public",
        "peekOfCode": "urlpatterns = [\n    path('status/people/',\n        views.PublicCheckInPeopleStatusView.as_view(),\n        name='checkins-public-status'),\n    path('submit/<slug:url_key>/',\n        views.ParticipantCheckinView.as_view(),\n        name='checkins-public-submit'),\n]",
        "detail": "tabbycat.checkins.urls_public",
        "documentation": {}
    },
    {
        "label": "generate_identifier",
        "kind": 2,
        "importPath": "tabbycat.checkins.utils",
        "description": "tabbycat.checkins.utils",
        "peekOfCode": "def generate_identifier(length=6):\n    \"\"\"Generates a random identifier and saves it to the database.\"\"\"\n    chars = string.ascii_uppercase + string.digits\n    return ''.join(random.SystemRandom().choice(chars) for _ in range(length))\nIDENTIFIER_CLASSES = {\n    'participants.Person': PersonIdentifier,\n    'draw.Debate': DebateIdentifier,\n    'venues.Venue': VenueIdentifier,\n}\ndef delete_identifiers(queryset):",
        "detail": "tabbycat.checkins.utils",
        "documentation": {}
    },
    {
        "label": "delete_identifiers",
        "kind": 2,
        "importPath": "tabbycat.checkins.utils",
        "description": "tabbycat.checkins.utils",
        "peekOfCode": "def delete_identifiers(queryset):\n    klass = IDENTIFIER_CLASSES[queryset.model._meta.label]\n    attr = klass.instance_attr\n    return klass.objects.filter(**{attr + '__in': queryset}).delete()\ndef get_unexpired_checkins(tournament, window_preference_type):\n    filters = Q(tournament=tournament)\n    if window_preference_type:\n        start = datetime.timedelta(hours=tournament.pref(window_preference_type))\n        time_window = timezone.now() - start\n        filters &= Q(time__gte=time_window)",
        "detail": "tabbycat.checkins.utils",
        "documentation": {}
    },
    {
        "label": "get_unexpired_checkins",
        "kind": 2,
        "importPath": "tabbycat.checkins.utils",
        "description": "tabbycat.checkins.utils",
        "peekOfCode": "def get_unexpired_checkins(tournament, window_preference_type):\n    filters = Q(tournament=tournament)\n    if window_preference_type:\n        start = datetime.timedelta(hours=tournament.pref(window_preference_type))\n        time_window = timezone.now() - start\n        filters &= Q(time__gte=time_window)\n    return Event.objects.filter(filters).select_related('identifier').order_by('time')\ndef create_identifiers(model_to_make, items_to_check):\n    kind = model_to_make.instance_attr\n    identifiers_to_make = items_to_check.filter(checkin_identifier__isnull=True)",
        "detail": "tabbycat.checkins.utils",
        "documentation": {}
    },
    {
        "label": "create_identifiers",
        "kind": 2,
        "importPath": "tabbycat.checkins.utils",
        "description": "tabbycat.checkins.utils",
        "peekOfCode": "def create_identifiers(model_to_make, items_to_check):\n    kind = model_to_make.instance_attr\n    identifiers_to_make = items_to_check.filter(checkin_identifier__isnull=True)\n    for item in identifiers_to_make:\n        model_to_make.objects.create(**{kind: item})\n    return\ndef single_checkin(instance, events):\n    instance.checked_icon = ''\n    instance.checked_in = False\n    try:",
        "detail": "tabbycat.checkins.utils",
        "documentation": {}
    },
    {
        "label": "single_checkin",
        "kind": 2,
        "importPath": "tabbycat.checkins.utils",
        "description": "tabbycat.checkins.utils",
        "peekOfCode": "def single_checkin(instance, events):\n    instance.checked_icon = ''\n    instance.checked_in = False\n    try:\n        identifier = instance.checkin_identifier\n        instance.barcode = identifier.barcode\n        instance.checked_tooltip = _(\"Not checked in (barcode %(barcode)s)\") % {'barcode': identifier.barcode}\n    except ObjectDoesNotExist:\n        identifier = None\n        instance.barcode = None",
        "detail": "tabbycat.checkins.utils",
        "documentation": {}
    },
    {
        "label": "multi_checkin",
        "kind": 2,
        "importPath": "tabbycat.checkins.utils",
        "description": "tabbycat.checkins.utils",
        "peekOfCode": "def multi_checkin(team, events, t):\n    team.checked_icon = ''\n    team.checked_in = False\n    tooltips = []\n    for speaker in team.speaker_set.all():\n        speaker = single_checkin(speaker, events)\n        if speaker.checked_in:\n            tooltip = _(\"%(speaker)s checked in at %(time)s.\") % {'speaker': speaker.get_public_name(t), 'time': speaker.time.strftime('%H:%M')}\n        else:\n            tooltip = _(\"%(speaker)s is missing.\") % {'speaker': speaker.get_public_name(t)}",
        "detail": "tabbycat.checkins.utils",
        "documentation": {}
    },
    {
        "label": "get_checkins",
        "kind": 2,
        "importPath": "tabbycat.checkins.utils",
        "description": "tabbycat.checkins.utils",
        "peekOfCode": "def get_checkins(queryset, t, window_preference_type):\n    events = get_unexpired_checkins(t, window_preference_type).values(\n        'time', 'identifier__barcode')\n    for instance in queryset:\n        if hasattr(instance, 'use_institution_prefix'):\n            instance = multi_checkin(instance, events, t)\n        else:\n            instance = single_checkin(instance, events)\n    return queryset",
        "detail": "tabbycat.checkins.utils",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "tabbycat.checkins.utils",
        "description": "tabbycat.checkins.utils",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef generate_identifier(length=6):\n    \"\"\"Generates a random identifier and saves it to the database.\"\"\"\n    chars = string.ascii_uppercase + string.digits\n    return ''.join(random.SystemRandom().choice(chars) for _ in range(length))\nIDENTIFIER_CLASSES = {\n    'participants.Person': PersonIdentifier,\n    'draw.Debate': DebateIdentifier,\n    'venues.Venue': VenueIdentifier,\n}",
        "detail": "tabbycat.checkins.utils",
        "documentation": {}
    },
    {
        "label": "IDENTIFIER_CLASSES",
        "kind": 5,
        "importPath": "tabbycat.checkins.utils",
        "description": "tabbycat.checkins.utils",
        "peekOfCode": "IDENTIFIER_CLASSES = {\n    'participants.Person': PersonIdentifier,\n    'draw.Debate': DebateIdentifier,\n    'venues.Venue': VenueIdentifier,\n}\ndef delete_identifiers(queryset):\n    klass = IDENTIFIER_CLASSES[queryset.model._meta.label]\n    attr = klass.instance_attr\n    return klass.objects.filter(**{attr + '__in': queryset}).delete()\ndef get_unexpired_checkins(tournament, window_preference_type):",
        "detail": "tabbycat.checkins.utils",
        "documentation": {}
    },
    {
        "label": "CheckInPreScanView",
        "kind": 6,
        "importPath": "tabbycat.checkins.views",
        "description": "tabbycat.checkins.views",
        "peekOfCode": "class CheckInPreScanView(TournamentMixin, TemplateView):\n    template_name = 'checkin_scan.html'\n    page_title = _('Scan Identifiers')\n    page_emoji = '📷'\n    def get_context_data(self, **kwargs):\n        kwargs[\"scan_url\"] = self.tournament.slug + '/checkins/'\n        return super().get_context_data(**kwargs)\nclass AdminCheckInPreScanView(AdministratorMixin, CheckInPreScanView):\n    scan_view = 'admin-checkin-scan'\n    edit_permission = Permission.EDIT_PARTICIPANT_CHECKIN",
        "detail": "tabbycat.checkins.views",
        "documentation": {}
    },
    {
        "label": "AdminCheckInPreScanView",
        "kind": 6,
        "importPath": "tabbycat.checkins.views",
        "description": "tabbycat.checkins.views",
        "peekOfCode": "class AdminCheckInPreScanView(AdministratorMixin, CheckInPreScanView):\n    scan_view = 'admin-checkin-scan'\n    edit_permission = Permission.EDIT_PARTICIPANT_CHECKIN\nclass AssistantCheckInPreScanView(AssistantMixin, CheckInPreScanView):\n    scan_view = 'assistant-checkin-scan'\nclass BaseCheckInStatusView(TournamentMixin, TemplateView):\n    template_name = 'checkin_status.html'\n    scan_view = False\n    for_admin = True\n    def get_context_data(self, **kwargs):",
        "detail": "tabbycat.checkins.views",
        "documentation": {}
    },
    {
        "label": "AssistantCheckInPreScanView",
        "kind": 6,
        "importPath": "tabbycat.checkins.views",
        "description": "tabbycat.checkins.views",
        "peekOfCode": "class AssistantCheckInPreScanView(AssistantMixin, CheckInPreScanView):\n    scan_view = 'assistant-checkin-scan'\nclass BaseCheckInStatusView(TournamentMixin, TemplateView):\n    template_name = 'checkin_status.html'\n    scan_view = False\n    for_admin = True\n    def get_context_data(self, **kwargs):\n        events = get_unexpired_checkins(self.tournament, self.window_preference)\n        kwargs[\"events\"] = json.dumps([e.serialize() for e in events])\n        if self.scan_view:",
        "detail": "tabbycat.checkins.views",
        "documentation": {}
    },
    {
        "label": "BaseCheckInStatusView",
        "kind": 6,
        "importPath": "tabbycat.checkins.views",
        "description": "tabbycat.checkins.views",
        "peekOfCode": "class BaseCheckInStatusView(TournamentMixin, TemplateView):\n    template_name = 'checkin_status.html'\n    scan_view = False\n    for_admin = True\n    def get_context_data(self, **kwargs):\n        events = get_unexpired_checkins(self.tournament, self.window_preference)\n        kwargs[\"events\"] = json.dumps([e.serialize() for e in events])\n        if self.scan_view:\n            kwargs[\"scan_url\"] = self.tournament.slug + '/checkins/'\n        kwargs[\"for_admin\"] = self.for_admin",
        "detail": "tabbycat.checkins.views",
        "documentation": {}
    },
    {
        "label": "CheckInPeopleStatusView",
        "kind": 6,
        "importPath": "tabbycat.checkins.views",
        "description": "tabbycat.checkins.views",
        "peekOfCode": "class CheckInPeopleStatusView(BaseCheckInStatusView):\n    page_emoji = '⌚️'\n    page_title = _(\"People's Check-In Statuses\")\n    window_preference = 'checkin_window_people'\n    edit_permission = Permission.EDIT_PARTICIPANT_CHECKIN\n    def get_context_data(self, **kwargs):\n        team_codes = use_team_code_names(self.tournament, admin=self.for_admin, user=self.request.user)\n        kwargs[\"team_codes\"] = json.dumps(team_codes)\n        adjudicators = []\n        for adj in self.tournament.relevant_adjudicators.all().select_related('institution', 'checkin_identifier'):",
        "detail": "tabbycat.checkins.views",
        "documentation": {}
    },
    {
        "label": "AdminCheckInPeopleStatusView",
        "kind": 6,
        "importPath": "tabbycat.checkins.views",
        "description": "tabbycat.checkins.views",
        "peekOfCode": "class AdminCheckInPeopleStatusView(AdministratorMixin, CheckInPeopleStatusView):\n    scan_view = 'admin-checkin-scan'\n    view_permission = Permission.VIEW_CHECKIN\n    edit_permission = Permission.EDIT_PARTICIPANT_CHECKIN\nclass AssistantCheckInPeopleStatusView(AssistantMixin, CheckInPeopleStatusView):\n    scan_view = 'assistant-checkin-scan'\nclass PublicCheckInPeopleStatusView(PublicTournamentPageMixin, CheckInPeopleStatusView):\n    for_admin = False\n    public_page_preference = 'public_checkins'\nclass CheckInVenuesStatusView(BaseCheckInStatusView):",
        "detail": "tabbycat.checkins.views",
        "documentation": {}
    },
    {
        "label": "AssistantCheckInPeopleStatusView",
        "kind": 6,
        "importPath": "tabbycat.checkins.views",
        "description": "tabbycat.checkins.views",
        "peekOfCode": "class AssistantCheckInPeopleStatusView(AssistantMixin, CheckInPeopleStatusView):\n    scan_view = 'assistant-checkin-scan'\nclass PublicCheckInPeopleStatusView(PublicTournamentPageMixin, CheckInPeopleStatusView):\n    for_admin = False\n    public_page_preference = 'public_checkins'\nclass CheckInVenuesStatusView(BaseCheckInStatusView):\n    page_emoji = '👜'\n    page_title = _(\"Rooms' Check-In Statuses\")\n    window_preference = 'checkin_window_venues'\n    def get_context_data(self, **kwargs):",
        "detail": "tabbycat.checkins.views",
        "documentation": {}
    },
    {
        "label": "PublicCheckInPeopleStatusView",
        "kind": 6,
        "importPath": "tabbycat.checkins.views",
        "description": "tabbycat.checkins.views",
        "peekOfCode": "class PublicCheckInPeopleStatusView(PublicTournamentPageMixin, CheckInPeopleStatusView):\n    for_admin = False\n    public_page_preference = 'public_checkins'\nclass CheckInVenuesStatusView(BaseCheckInStatusView):\n    page_emoji = '👜'\n    page_title = _(\"Rooms' Check-In Statuses\")\n    window_preference = 'checkin_window_venues'\n    def get_context_data(self, **kwargs):\n        venues = []\n        for venue in self.tournament.relevant_venues.select_related('checkin_identifier').prefetch_related('venuecategory_set').all():",
        "detail": "tabbycat.checkins.views",
        "documentation": {}
    },
    {
        "label": "CheckInVenuesStatusView",
        "kind": 6,
        "importPath": "tabbycat.checkins.views",
        "description": "tabbycat.checkins.views",
        "peekOfCode": "class CheckInVenuesStatusView(BaseCheckInStatusView):\n    page_emoji = '👜'\n    page_title = _(\"Rooms' Check-In Statuses\")\n    window_preference = 'checkin_window_venues'\n    def get_context_data(self, **kwargs):\n        venues = []\n        for venue in self.tournament.relevant_venues.select_related('checkin_identifier').prefetch_related('venuecategory_set').all():\n            item = VenueSerializer(venue).data\n            item['locked'] = False\n            try:",
        "detail": "tabbycat.checkins.views",
        "documentation": {}
    },
    {
        "label": "AdminCheckInVenuesStatusView",
        "kind": 6,
        "importPath": "tabbycat.checkins.views",
        "description": "tabbycat.checkins.views",
        "peekOfCode": "class AdminCheckInVenuesStatusView(AdministratorMixin, CheckInVenuesStatusView):\n    scan_view = 'admin-checkin-scan'\n    view_permission = Permission.VIEW_CHECKIN\n    edit_permission = Permission.EDIT_ROOM_CHECKIN\nclass AssistantCheckInVenuesStatusView(AssistantMixin, CheckInVenuesStatusView):\n    scan_view = 'assistant-checkin-scan'\nclass SegregatedCheckinsMixin(TournamentMixin):\n    def t_speakers(self):\n        return Speaker.objects.filter(\n            team__tournament=self.tournament).values_list(",
        "detail": "tabbycat.checkins.views",
        "documentation": {}
    },
    {
        "label": "AssistantCheckInVenuesStatusView",
        "kind": 6,
        "importPath": "tabbycat.checkins.views",
        "description": "tabbycat.checkins.views",
        "peekOfCode": "class AssistantCheckInVenuesStatusView(AssistantMixin, CheckInVenuesStatusView):\n    scan_view = 'assistant-checkin-scan'\nclass SegregatedCheckinsMixin(TournamentMixin):\n    def t_speakers(self):\n        return Speaker.objects.filter(\n            team__tournament=self.tournament).values_list(\n            'person_ptr_id', flat=True)\n    def speakers_with_barcodes(self):\n        identifiers = PersonIdentifier.objects.all()\n        return identifiers.filter(person_id__in=self.t_speakers())",
        "detail": "tabbycat.checkins.views",
        "documentation": {}
    },
    {
        "label": "SegregatedCheckinsMixin",
        "kind": 6,
        "importPath": "tabbycat.checkins.views",
        "description": "tabbycat.checkins.views",
        "peekOfCode": "class SegregatedCheckinsMixin(TournamentMixin):\n    def t_speakers(self):\n        return Speaker.objects.filter(\n            team__tournament=self.tournament).values_list(\n            'person_ptr_id', flat=True)\n    def speakers_with_barcodes(self):\n        identifiers = PersonIdentifier.objects.all()\n        return identifiers.filter(person_id__in=self.t_speakers())\n    def t_adjs(self):\n        return self.tournament.adjudicator_set.values_list(",
        "detail": "tabbycat.checkins.views",
        "documentation": {}
    },
    {
        "label": "CheckInIdentifiersView",
        "kind": 6,
        "importPath": "tabbycat.checkins.views",
        "description": "tabbycat.checkins.views",
        "peekOfCode": "class CheckInIdentifiersView(SegregatedCheckinsMixin, TemplateView):\n    template_name = 'checkin_ids.html'\n    page_title = _('Make Identifiers')\n    page_emoji = '📛'\n    def get_context_data(self, **kwargs):\n        t = self.tournament\n        kwargs[\"check_in_info\"] = {\n            \"speakers\": {\n                \"title\": _(\"Speakers\"),\n                \"total\": self.t_speakers().count(),",
        "detail": "tabbycat.checkins.views",
        "documentation": {}
    },
    {
        "label": "AdminCheckInIdentifiersView",
        "kind": 6,
        "importPath": "tabbycat.checkins.views",
        "description": "tabbycat.checkins.views",
        "peekOfCode": "class AdminCheckInIdentifiersView(AdministratorMixin, CheckInIdentifiersView):\n    view_permission = Permission.VIEW_CHECKIN\nclass AssistantCheckInIdentifiersView(AssistantMixin, CheckInIdentifiersView):\n    pass\nclass AdminCheckInGenerateView(AdministratorMixin, LogActionMixin,\n                               TournamentMixin, PostOnlyRedirectView):\n    edit_permission = Permission.VIEW_CHECKIN\n    def get_action_log_type(self):\n        if self.kwargs[\"kind\"] == \"speakers\":\n            return ActionLogEntry.ActionType.CHECKIN_SPEAK_GENERATE",
        "detail": "tabbycat.checkins.views",
        "documentation": {}
    },
    {
        "label": "AssistantCheckInIdentifiersView",
        "kind": 6,
        "importPath": "tabbycat.checkins.views",
        "description": "tabbycat.checkins.views",
        "peekOfCode": "class AssistantCheckInIdentifiersView(AssistantMixin, CheckInIdentifiersView):\n    pass\nclass AdminCheckInGenerateView(AdministratorMixin, LogActionMixin,\n                               TournamentMixin, PostOnlyRedirectView):\n    edit_permission = Permission.VIEW_CHECKIN\n    def get_action_log_type(self):\n        if self.kwargs[\"kind\"] == \"speakers\":\n            return ActionLogEntry.ActionType.CHECKIN_SPEAK_GENERATE\n        elif self.kwargs[\"kind\"] == \"adjudicators\":\n            return ActionLogEntry.ActionType.CHECKIN_ADJ_GENERATE",
        "detail": "tabbycat.checkins.views",
        "documentation": {}
    },
    {
        "label": "AdminCheckInGenerateView",
        "kind": 6,
        "importPath": "tabbycat.checkins.views",
        "description": "tabbycat.checkins.views",
        "peekOfCode": "class AdminCheckInGenerateView(AdministratorMixin, LogActionMixin,\n                               TournamentMixin, PostOnlyRedirectView):\n    edit_permission = Permission.VIEW_CHECKIN\n    def get_action_log_type(self):\n        if self.kwargs[\"kind\"] == \"speakers\":\n            return ActionLogEntry.ActionType.CHECKIN_SPEAK_GENERATE\n        elif self.kwargs[\"kind\"] == \"adjudicators\":\n            return ActionLogEntry.ActionType.CHECKIN_ADJ_GENERATE\n        elif self.kwargs[\"kind\"] == \"venues\":\n            return ActionLogEntry.ActionType.CHECKIN_VENUES_GENERATE",
        "detail": "tabbycat.checkins.views",
        "documentation": {}
    },
    {
        "label": "CheckInPrintablesView",
        "kind": 6,
        "importPath": "tabbycat.checkins.views",
        "description": "tabbycat.checkins.views",
        "peekOfCode": "class CheckInPrintablesView(SegregatedCheckinsMixin, TemplateView):\n    template_name = 'checkin_printables.html'\n    page_title = _('Identifiers')\n    page_emoji = '📛'\n    def get_context_data(self, **kwargs):\n        if self.kwargs[\"kind\"] == \"speakers\":\n            kwargs[\"identifiers\"] = self.speakers_with_barcodes().order_by('person__name')\n        elif self.kwargs[\"kind\"] == \"adjudicators\":\n            kwargs[\"identifiers\"] = self.adjs_with_barcodes().order_by('person__name')\n        elif self.kwargs[\"kind\"] == \"venues\":",
        "detail": "tabbycat.checkins.views",
        "documentation": {}
    },
    {
        "label": "AdminCheckInPrintablesView",
        "kind": 6,
        "importPath": "tabbycat.checkins.views",
        "description": "tabbycat.checkins.views",
        "peekOfCode": "class AdminCheckInPrintablesView(AdministratorMixin, CheckInPrintablesView):\n    view_permission = Permission.VIEW_CHECKIN\nclass AssistantCheckInPrintablesView(AssistantMixin, CheckInPrintablesView):\n    pass\nclass ParticipantCheckinView(PublicTournamentPageMixin, PostOnlyRedirectView):\n    public_page_preference = 'public_checkins_submit'\n    def post(self, request, *args, **kwargs):\n        t = self.tournament\n        try:\n            person = Person.objects.get(url_key=kwargs['url_key'])",
        "detail": "tabbycat.checkins.views",
        "documentation": {}
    },
    {
        "label": "AssistantCheckInPrintablesView",
        "kind": 6,
        "importPath": "tabbycat.checkins.views",
        "description": "tabbycat.checkins.views",
        "peekOfCode": "class AssistantCheckInPrintablesView(AssistantMixin, CheckInPrintablesView):\n    pass\nclass ParticipantCheckinView(PublicTournamentPageMixin, PostOnlyRedirectView):\n    public_page_preference = 'public_checkins_submit'\n    def post(self, request, *args, **kwargs):\n        t = self.tournament\n        try:\n            person = Person.objects.get(url_key=kwargs['url_key'])\n            identifier = person.checkin_identifier\n        except Person.DoesNotExist:",
        "detail": "tabbycat.checkins.views",
        "documentation": {}
    },
    {
        "label": "ParticipantCheckinView",
        "kind": 6,
        "importPath": "tabbycat.checkins.views",
        "description": "tabbycat.checkins.views",
        "peekOfCode": "class ParticipantCheckinView(PublicTournamentPageMixin, PostOnlyRedirectView):\n    public_page_preference = 'public_checkins_submit'\n    def post(self, request, *args, **kwargs):\n        t = self.tournament\n        try:\n            person = Person.objects.get(url_key=kwargs['url_key'])\n            identifier = person.checkin_identifier\n        except Person.DoesNotExist:\n            raise Http404(\"Person does not exist\")\n        except PersonIdentifier.DoesNotExist:",
        "detail": "tabbycat.checkins.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.divisions.migrations.0001_initial",
        "description": "tabbycat.divisions.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('tournaments', '0001_initial'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Division',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "tabbycat.divisions.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.divisions.migrations.0002_auto_20171110_0905",
        "description": "tabbycat.divisions.migrations.0002_auto_20171110_0905",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('venues', '0001_initial'),\n        ('divisions', '0001_initial'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='division',\n            name='venue_category',",
        "detail": "tabbycat.divisions.migrations.0002_auto_20171110_0905",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.divisions.migrations.0003_remove_league_fields",
        "description": "tabbycat.divisions.migrations.0003_remove_league_fields",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('motions', '0004_remove_league_fields'),\n        ('draw', '0004_remove_league_fields'),\n        ('participants', '0011_remove_league_fields'),\n        ('divisions', '0002_auto_20171110_0905'),\n    ]\n    operations = [\n        migrations.AlterUniqueTogether(\n            name='division',",
        "detail": "tabbycat.divisions.migrations.0003_remove_league_fields",
        "documentation": {}
    },
    {
        "label": "BaseBPEliminationDrawGenerator",
        "kind": 6,
        "importPath": "tabbycat.draw.generator.bpelimination",
        "description": "tabbycat.draw.generator.bpelimination",
        "peekOfCode": "class BaseBPEliminationDrawGenerator(EliminationDrawMixin, BaseBPDrawGenerator):\n    requires_even_teams = False\n    DEFAULT_OPTIONS = {}\n    def _four_way_fold(self, teams, start_rank=0):\n        \"\"\"Returns pairings folded four-way, with room ranks numbered from\n        start_rank+1.\"\"\"\n        if len(teams) % 4 != 0:\n            raise DrawFatalError(\"Tried to do a four-way fold with non-multiple of four: %d\" % len(teams))\n        n = len(teams) // 4  # number of debates\n        pools = (teams[0:n], teams[n:2*n][::-1], teams[2*n:3*n], teams[3*n:4*n][::-1])  # Reverse 1 & 3",
        "detail": "tabbycat.draw.generator.bpelimination",
        "documentation": {}
    },
    {
        "label": "PartialBPEliminationDrawGenerator",
        "kind": 6,
        "importPath": "tabbycat.draw.generator.bpelimination",
        "description": "tabbycat.draw.generator.bpelimination",
        "peekOfCode": "class PartialBPEliminationDrawGenerator(BaseBPEliminationDrawGenerator):\n    \"\"\"For a partial elimination round, i.e., the first elimination round where\n    the break is 6*2^n.\"\"\"\n    def make_pairings(self):\n        nteams = len(self.teams)\n        if nteams % 6 != 0 or not ispow2(nteams // 6):\n            # This should have been caught by the draw manager\n            raise DrawFatalError(\"Tried to do a partial elimination draw with invalid break size: %d\" % nteams)\n        # Take the non-bypassing teams and fold four-way\n        # Convention is to label room ranks after the highest ranked team in the",
        "detail": "tabbycat.draw.generator.bpelimination",
        "documentation": {}
    },
    {
        "label": "AfterPartialBPEliminationDrawGenerator",
        "kind": 6,
        "importPath": "tabbycat.draw.generator.bpelimination",
        "description": "tabbycat.draw.generator.bpelimination",
        "peekOfCode": "class AfterPartialBPEliminationDrawGenerator(BaseBPEliminationDrawGenerator):\n    \"\"\"For the round immediately following a partial elimination round, i.e.,\n    the second elimination round where the break size is 6*2^n.\"\"\"\n    requires_prev_results = True\n    def make_pairings(self):\n        # e.g. if lowest room rank was 9, then 8 teams should bypass\n        nbypassing = min([pairing.room_rank for pairing in self.results]) - 1\n        if nbypassing % 2 != 0:\n            raise DrawUserError(_(\"The room ranks of the partial elimination round indicate that \"\n                \"an odd number of teams (%(nbypassing)d) bypassed it.\") % {'nbypassing': nbypassing})",
        "detail": "tabbycat.draw.generator.bpelimination",
        "documentation": {}
    },
    {
        "label": "FirstBPEliminationDrawGenerator",
        "kind": 6,
        "importPath": "tabbycat.draw.generator.bpelimination",
        "description": "tabbycat.draw.generator.bpelimination",
        "peekOfCode": "class FirstBPEliminationDrawGenerator(BaseBPEliminationDrawGenerator):\n    \"\"\"For the first elimination round where the break size is 4*2^n.\"\"\"\n    def make_pairings(self):\n        nteams = len(self.teams)\n        if nteams % 4 != 0 or not ispow2(nteams // 4):\n            # This should have been caught by the draw manager\n            raise DrawFatalError(\"Tried to do a first elimination draw with invalid break size: %d\" % nteams)\n        return self._four_way_fold(self.teams)\nclass SubsequentBPEliminationDrawGenerator(BaseBPEliminationDrawGenerator):\n    \"\"\"For all elimination rounds after the first one if the break size is",
        "detail": "tabbycat.draw.generator.bpelimination",
        "documentation": {}
    },
    {
        "label": "SubsequentBPEliminationDrawGenerator",
        "kind": 6,
        "importPath": "tabbycat.draw.generator.bpelimination",
        "description": "tabbycat.draw.generator.bpelimination",
        "peekOfCode": "class SubsequentBPEliminationDrawGenerator(BaseBPEliminationDrawGenerator):\n    \"\"\"For all elimination rounds after the first one if the break size is\n    4*2^n, or after the second one if the break size is 6*2^n.\"\"\"\n    requires_prev_results = True\n    def make_pairings(self):\n        advancing = self._get_advancing_teams()\n        if not (len(advancing) >= 2 and ispow2(len(advancing))):\n            raise DrawUserError(_(\"The number of debates (%d) in the last round is not a \"\n                \"power of two.\") % (2 * len(advancing)))\n        # Fold the pairs of advancing teams",
        "detail": "tabbycat.draw.generator.bpelimination",
        "documentation": {}
    },
    {
        "label": "BPHungarianDrawGenerator",
        "kind": 6,
        "importPath": "tabbycat.draw.generator.bphungarian",
        "description": "tabbycat.draw.generator.bphungarian",
        "peekOfCode": "class BPHungarianDrawGenerator(BaseBPDrawGenerator):\n    \"\"\"Power-paired draw for BP based on the Hungarian algorithm.\n    With default options, this is WUDC-compliant.\n    Options:\n        \"pullup\" - How pull-ups are distributed. Permitted values:\n            \"anywhere\" - Pull-up teams may be paired into any room in the entire\n                         bracket.\n            \"one_room\" - All pull-up teams must be paired into the same room.\n                         This room is then the lowest room in the bracket, sort\n                         of functioning as an intermediate bracket, except that",
        "detail": "tabbycat.draw.generator.bphungarian",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "tabbycat.draw.generator.bphungarian",
        "description": "tabbycat.draw.generator.bphungarian",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass BPHungarianDrawGenerator(BaseBPDrawGenerator):\n    \"\"\"Power-paired draw for BP based on the Hungarian algorithm.\n    With default options, this is WUDC-compliant.\n    Options:\n        \"pullup\" - How pull-ups are distributed. Permitted values:\n            \"anywhere\" - Pull-up teams may be paired into any room in the entire\n                         bracket.\n            \"one_room\" - All pull-up teams must be paired into the same room.\n                         This room is then the lowest room in the bracket, sort",
        "detail": "tabbycat.draw.generator.bphungarian",
        "documentation": {}
    },
    {
        "label": "BaseDrawError",
        "kind": 6,
        "importPath": "tabbycat.draw.generator.common",
        "description": "tabbycat.draw.generator.common",
        "peekOfCode": "class BaseDrawError(Exception):\n    pass\nclass DrawUserError(BaseDrawError):\n    \"\"\"DrawUserError is raised by any DrawGenerator class when a problem that\n    would appear to be user error prevents a draw from being produced.\n    DrawUserErrors are caught by the view class and shown to the user as an\n    error message.\n    Because DrawUserErrors expected and rectifier, the strings that go into them\n    should be internationalised (marked for translation).\"\"\"\n    pass",
        "detail": "tabbycat.draw.generator.common",
        "documentation": {}
    },
    {
        "label": "DrawUserError",
        "kind": 6,
        "importPath": "tabbycat.draw.generator.common",
        "description": "tabbycat.draw.generator.common",
        "peekOfCode": "class DrawUserError(BaseDrawError):\n    \"\"\"DrawUserError is raised by any DrawGenerator class when a problem that\n    would appear to be user error prevents a draw from being produced.\n    DrawUserErrors are caught by the view class and shown to the user as an\n    error message.\n    Because DrawUserErrors expected and rectifier, the strings that go into them\n    should be internationalised (marked for translation).\"\"\"\n    pass\nclass DrawFatalError(BaseDrawError):\n    \"\"\"DrawAlgorithmError is raised by any DrawGenerator class when a problem",
        "detail": "tabbycat.draw.generator.common",
        "documentation": {}
    },
    {
        "label": "DrawFatalError",
        "kind": 6,
        "importPath": "tabbycat.draw.generator.common",
        "description": "tabbycat.draw.generator.common",
        "peekOfCode": "class DrawFatalError(BaseDrawError):\n    \"\"\"DrawAlgorithmError is raised by any DrawGenerator class when a problem\n    that is an error condition that should never (ever) happen prevents a draw\n    from being produced. DrawAlgorithmError are also caught by the view class\n    and shown to the user as an error message. However, because they should\n    never happen, their messages are not internationalised, since that just\n    creates unnecessary work for translators.\"\"\"\n    pass\nclass BaseDrawGenerator:\n    \"\"\"Base class for generators for all draw types, for both two-team and BP.",
        "detail": "tabbycat.draw.generator.common",
        "documentation": {}
    },
    {
        "label": "BaseDrawGenerator",
        "kind": 6,
        "importPath": "tabbycat.draw.generator.common",
        "description": "tabbycat.draw.generator.common",
        "peekOfCode": "class BaseDrawGenerator:\n    \"\"\"Base class for generators for all draw types, for both two-team and BP.\n    \"\"\"\n    # Subclasses must define BASE_DEFAULT_OPTIONS\n    requires_even_teams = True\n    requires_prev_results = False\n    requires_rrseq = False\n    def __init__(self, teams, results=None, rrseq=None, **kwargs):\n        self.teams = teams\n        self.team_flags = dict()",
        "detail": "tabbycat.draw.generator.common",
        "documentation": {}
    },
    {
        "label": "BasePairDrawGenerator",
        "kind": 6,
        "importPath": "tabbycat.draw.generator.common",
        "description": "tabbycat.draw.generator.common",
        "peekOfCode": "class BasePairDrawGenerator(BaseDrawGenerator):\n    \"\"\"Base class for generators for all draw types.\n    Options:\n        \"side_allocations\" - Side allocation method, one of:\n            \"balance\" - the team that has affirmed less in prior rounds affirms,\n                or randomly if both teams have affirmed the same number of times.\n                If used, team objects must have an `side_history` attribute.\n            \"preallocated\" - teams were pre-allocated sides. If used, teams must\n                have an 'allocated_side' attribute.\n            \"none\" - leave sides as they were when the pairings were drawn.",
        "detail": "tabbycat.draw.generator.common",
        "documentation": {}
    },
    {
        "label": "BaseBPDrawGenerator",
        "kind": 6,
        "importPath": "tabbycat.draw.generator.common",
        "description": "tabbycat.draw.generator.common",
        "peekOfCode": "class BaseBPDrawGenerator(BaseDrawGenerator):\n    BASE_DEFAULT_OPTIONS = {}\n    TEAMS_IN_DEBATE = 4\nclass EliminationDrawMixin:\n    \"\"\"Mixin for elimination draws.\"\"\"\n    def generate(self):\n        pairings = self.make_pairings()\n        self.shuffle_sides(pairings)\n        return pairings\n    def shuffle_sides(self, pairings):",
        "detail": "tabbycat.draw.generator.common",
        "documentation": {}
    },
    {
        "label": "EliminationDrawMixin",
        "kind": 6,
        "importPath": "tabbycat.draw.generator.common",
        "description": "tabbycat.draw.generator.common",
        "peekOfCode": "class EliminationDrawMixin:\n    \"\"\"Mixin for elimination draws.\"\"\"\n    def generate(self):\n        pairings = self.make_pairings()\n        self.shuffle_sides(pairings)\n        return pairings\n    def shuffle_sides(self, pairings):\n        for pairing in pairings:\n            pairing.shuffle_sides()\n    def make_pairings(self):",
        "detail": "tabbycat.draw.generator.common",
        "documentation": {}
    },
    {
        "label": "ManualDrawGenerator",
        "kind": 6,
        "importPath": "tabbycat.draw.generator.common",
        "description": "tabbycat.draw.generator.common",
        "peekOfCode": "class ManualDrawGenerator(BaseDrawGenerator):\n    \"\"\"Returns an empty draw.\n    Since this doesn't really do anything, it works for both two-team and BP.\n    \"\"\"\n    DEFAULT_OPTIONS = {}\n    BASE_DEFAULT_OPTIONS = {}\n    requires_even_teams = False\n    requires_prev_results = False\n    def generate(self):\n        return []",
        "detail": "tabbycat.draw.generator.common",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "tabbycat.draw.generator.common",
        "description": "tabbycat.draw.generator.common",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass BaseDrawError(Exception):\n    pass\nclass DrawUserError(BaseDrawError):\n    \"\"\"DrawUserError is raised by any DrawGenerator class when a problem that\n    would appear to be user error prevents a draw from being produced.\n    DrawUserErrors are caught by the view class and shown to the user as an\n    error message.\n    Because DrawUserErrors expected and rectifier, the strings that go into them\n    should be internationalised (marked for translation).\"\"\"",
        "detail": "tabbycat.draw.generator.common",
        "documentation": {}
    },
    {
        "label": "BaseEliminationDrawGenerator",
        "kind": 6,
        "importPath": "tabbycat.draw.generator.elimination",
        "description": "tabbycat.draw.generator.elimination",
        "peekOfCode": "class BaseEliminationDrawGenerator(EliminationDrawMixin, BasePairDrawGenerator):\n    requires_even_teams = False\n    DEFAULT_OPTIONS = {}\n    def _make_pairings(self, teams, num_bye_rooms):\n        \"\"\"Folds the teams in `teams`, assigning consecutive room ranks starting\n        from `num_bye_rooms+1`.  Subclasses can use this method to generate\n        pairings from a list of teams.\"\"\"\n        debates = len(teams) // 2\n        top = teams[:debates]\n        bottom = teams[debates:]",
        "detail": "tabbycat.draw.generator.elimination",
        "documentation": {}
    },
    {
        "label": "FirstEliminationDrawGenerator",
        "kind": 6,
        "importPath": "tabbycat.draw.generator.elimination",
        "description": "tabbycat.draw.generator.elimination",
        "peekOfCode": "class FirstEliminationDrawGenerator(BaseEliminationDrawGenerator):\n    \"\"\"Class for draw for a round that is a first elimination round, with\n    a number of teams breaking that is not a power of two.\"\"\"\n    requires_prev_results = False\n    def make_pairings(self):\n        if len(self.teams) < 2:\n            raise DrawUserError(_(\"There are only %d teams breaking in this category; \"\n                    \"there need to be at least two to generate an elimination round draw.\") % len(self.teams))\n        try:\n            debates, bypassing = partial_break_round_split(len(self.teams))",
        "detail": "tabbycat.draw.generator.elimination",
        "documentation": {}
    },
    {
        "label": "SubsequentEliminationDrawGenerator",
        "kind": 6,
        "importPath": "tabbycat.draw.generator.elimination",
        "description": "tabbycat.draw.generator.elimination",
        "peekOfCode": "class SubsequentEliminationDrawGenerator(BaseEliminationDrawGenerator):\n    \"\"\"Class for second or subsequent elimination round.\n    For this draw type, 'teams' should be the teams that automatically\n    advanced to this round (i.e., bypassed the previous break round).\n    'results' should be a list of Pairings with winners indicated.\"\"\"\n    requires_prev_results = True\n    def make_pairings(self):\n        self.results.sort(key=lambda x: x.room_rank)\n        winners = [pairing.winner for pairing in self.results]\n        if winners.count(None) > 0:",
        "detail": "tabbycat.draw.generator.elimination",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "tabbycat.draw.generator.elimination",
        "description": "tabbycat.draw.generator.elimination",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass BaseEliminationDrawGenerator(EliminationDrawMixin, BasePairDrawGenerator):\n    requires_even_teams = False\n    DEFAULT_OPTIONS = {}\n    def _make_pairings(self, teams, num_bye_rooms):\n        \"\"\"Folds the teams in `teams`, assigning consecutive room ranks starting\n        from `num_bye_rooms+1`.  Subclasses can use this method to generate\n        pairings from a list of teams.\"\"\"\n        debates = len(teams) // 2\n        top = teams[:debates]",
        "detail": "tabbycat.draw.generator.elimination",
        "documentation": {}
    },
    {
        "label": "GraphGeneratorMixin",
        "kind": 6,
        "importPath": "tabbycat.draw.generator.graph",
        "description": "tabbycat.draw.generator.graph",
        "peekOfCode": "class GraphGeneratorMixin:\n    def avoid_conflicts(self, pairings):\n        \"\"\"Graph optimisation avoids conflicts, so method is extraneous.\"\"\"\n        pass\n    def assignment_cost(self, t1, t2, size, bracket=None):\n        if t1 is t2:  # Same team\n            return\n        penalty = 0\n        if self.options[\"avoid_history\"]:\n            penalty += t1.seen(t2) * self.options[\"history_penalty\"]",
        "detail": "tabbycat.draw.generator.graph",
        "documentation": {}
    },
    {
        "label": "GraphAllocatedSidesMixin",
        "kind": 6,
        "importPath": "tabbycat.draw.generator.graph",
        "description": "tabbycat.draw.generator.graph",
        "peekOfCode": "class GraphAllocatedSidesMixin(GraphGeneratorMixin):\n    \"\"\"Use Hungarian algorithm rather than Bloom.\n    This is possible as assigning the sides creates a bipartite graph rather than\n    a more complete graph.\"\"\"\n    def assignment_cost(self, t1, t2, size):\n        penalty = super().assignment_cost(t1, t2, size)\n        if penalty is None:\n            return munkres.DISALLOWED\n        return penalty\n    def generate_pairings(self, brackets):",
        "detail": "tabbycat.draw.generator.graph",
        "documentation": {}
    },
    {
        "label": "sign",
        "kind": 2,
        "importPath": "tabbycat.draw.generator.graph",
        "description": "tabbycat.draw.generator.graph",
        "peekOfCode": "def sign(n: int) -> int:\n    \"\"\"Sign function for integers, -1, 0, or 1\"\"\"\n    try:\n        return n // abs(n)\n    except ZeroDivisionError:\n        return 0\nclass GraphGeneratorMixin:\n    def avoid_conflicts(self, pairings):\n        \"\"\"Graph optimisation avoids conflicts, so method is extraneous.\"\"\"\n        pass",
        "detail": "tabbycat.draw.generator.graph",
        "documentation": {}
    },
    {
        "label": "OneUpOneDownSwapper",
        "kind": 6,
        "importPath": "tabbycat.draw.generator.one_up_one_down",
        "description": "tabbycat.draw.generator.one_up_one_down",
        "peekOfCode": "class OneUpOneDownSwapper(object):\n    DEFAULT_OPTIONS = {\n        \"exclude_penalty\"    : -1e10,\n        \"avoid_history\"      : True,\n        \"avoid_institution\"  : True,\n        \"history_penalty\"    : 1e3,\n        \"institution_penalty\": 1,\n    }\n    def __init__(self, **kwargs):\n        for key, value in self.DEFAULT_OPTIONS.items():",
        "detail": "tabbycat.draw.generator.one_up_one_down",
        "documentation": {}
    },
    {
        "label": "BasePairing",
        "kind": 6,
        "importPath": "tabbycat.draw.generator.pairing",
        "description": "tabbycat.draw.generator.pairing",
        "peekOfCode": "class BasePairing:\n    \"\"\"The Pairing classes hold basic information about pairings for\n    communication with other modules. Draw generators always return a list of\n    them.\n    This is a base class for functionality common to both two-team pairings and\n    BP pairings.\"\"\"\n    def __init__(self, teams, bracket, room_rank, flags=[], team_flags={}):\n        \"\"\"'teams' must be a list of two teams, or four teams if it's for BP.\n        'bracket' and 'room_rank' are both integers.\n        'flags' is a list of strings.\"\"\"",
        "detail": "tabbycat.draw.generator.pairing",
        "documentation": {}
    },
    {
        "label": "Pairing",
        "kind": 6,
        "importPath": "tabbycat.draw.generator.pairing",
        "description": "tabbycat.draw.generator.pairing",
        "peekOfCode": "class Pairing(BasePairing):\n    \"\"\"Pairing class for two-team formats.\"\"\"\n    sides = [DebateSide.AFF, DebateSide.NEG]\n    def __init__(self, teams, bracket, room_rank, num_sides=2, flags=[], team_flags={}):\n        super().__init__(teams, bracket, room_rank, flags, team_flags)\n        assert len(self.teams) == 2, \"There must be two teams in a Pairing\"\n    def __repr__(self):\n        return (\"<{p.__class__.__name__}: {p.teams[0]} vs {p.teams[1]} \"\n            \"({p.bracket}/{p.room_rank})>\").format(p=self)\n    def balance_sides(self):",
        "detail": "tabbycat.draw.generator.pairing",
        "documentation": {}
    },
    {
        "label": "ResultPairing",
        "kind": 6,
        "importPath": "tabbycat.draw.generator.pairing",
        "description": "tabbycat.draw.generator.pairing",
        "peekOfCode": "class ResultPairing(Pairing):\n    \"\"\"Adds functionality for storing information about the winning team.\n    This class is the data structure expected by DrawGenerator classes, when\n    taking information about the results of the previous round.\"\"\"\n    def __init__(self, teams, bracket, room_rank, flags=[], team_flags={}, winner=None):\n        super().__init__(teams, bracket, room_rank, flags, team_flags)\n        self.set_winner(winner)\n    @classmethod\n    def from_debate(cls, debate, tournament=None):\n        instance = super().from_debate(debate, tournament)",
        "detail": "tabbycat.draw.generator.pairing",
        "documentation": {}
    },
    {
        "label": "PolyPairing",
        "kind": 6,
        "importPath": "tabbycat.draw.generator.pairing",
        "description": "tabbycat.draw.generator.pairing",
        "peekOfCode": "class PolyPairing(BasePairing):\n    \"\"\"Pairing class for British Parliamentary and Public Speaking.\"\"\"\n    def __init__(self, teams, bracket, room_rank, num_sides=4, flags=[], team_flags={}):\n        super().__init__(teams, bracket, room_rank, flags, team_flags)\n    def __repr__(self):\n        return \"<{p.__class__.__name__}: {teams} ({p.bracket}/{p.room_rank})>\".format(\n            teams=\", \".join(map(str, self.teams)), p=self)\nclass BPEliminationResultPairing(PolyPairing):\n    \"\"\"Adds functionality for storing information about the advancing teams.\n    This class is the data structure expected by DrawGenerator classes, when",
        "detail": "tabbycat.draw.generator.pairing",
        "documentation": {}
    },
    {
        "label": "BPEliminationResultPairing",
        "kind": 6,
        "importPath": "tabbycat.draw.generator.pairing",
        "description": "tabbycat.draw.generator.pairing",
        "peekOfCode": "class BPEliminationResultPairing(PolyPairing):\n    \"\"\"Adds functionality for storing information about the advancing teams.\n    This class is the data structure expected by DrawGenerator classes, when\n    taking information about the results of the previous round.\"\"\"\n    sides = [DebateSide.OG, DebateSide.OO, DebateSide.CG, DebateSide.CO]\n    def __init__(self, teams, bracket, room_rank, flags=[], team_flags={}, advancing=[]):\n        super().__init__(teams, bracket, room_rank, 4, flags, team_flags)\n        self.set_advancing(advancing)\n    @classmethod\n    def from_debate(cls, debate, tournament=None):",
        "detail": "tabbycat.draw.generator.pairing",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "tabbycat.draw.generator.pairing",
        "description": "tabbycat.draw.generator.pairing",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass BasePairing:\n    \"\"\"The Pairing classes hold basic information about pairings for\n    communication with other modules. Draw generators always return a list of\n    them.\n    This is a base class for functionality common to both two-team pairings and\n    BP pairings.\"\"\"\n    def __init__(self, teams, bracket, room_rank, flags=[], team_flags={}):\n        \"\"\"'teams' must be a list of two teams, or four teams if it's for BP.\n        'bracket' and 'room_rank' are both integers.",
        "detail": "tabbycat.draw.generator.pairing",
        "documentation": {}
    },
    {
        "label": "BasePowerPairedDrawGenerator",
        "kind": 6,
        "importPath": "tabbycat.draw.generator.powerpair",
        "description": "tabbycat.draw.generator.powerpair",
        "peekOfCode": "class BasePowerPairedDrawGenerator(BasePairDrawGenerator):\n    \"\"\"Power-paired draw.\n    If there are allocated sides, use BasePowerPairedWithAllocatedSidesDrawGenerator\n    instead.\n    Options:\n        \"odd_bracket\" - Odd bracket resolution method. Permitted values:\n            \"pullup_top\"    - Pull up the top team from the next bracket down.\n            \"pullup_bottom\" - Pull up the bottom team from the next bracket down.\n            \"pullup_random\" - Pull up a random team from the next bracket down.\n            \"intermediate\"  - The bottom team from the odd bracket and the top",
        "detail": "tabbycat.draw.generator.powerpair",
        "documentation": {}
    },
    {
        "label": "GraphCostMixin",
        "kind": 6,
        "importPath": "tabbycat.draw.generator.powerpair",
        "description": "tabbycat.draw.generator.powerpair",
        "peekOfCode": "class GraphCostMixin:\n    def assignment_cost(self, t1, t2, size, bracket=None):\n        penalty = super().assignment_cost(t1, t2, size)\n        if penalty is None:\n            return None\n        # Add penalty for seeing the pullup again\n        has_pullup = 'pullup' in self.team_flags.get(t1, []) or 'pullup' in self.team_flags.get(t2, [])\n        if self.options[\"pullup_debates_penalty\"] and has_pullup:\n            penalty += max(t1.pullup_debates, t2.pullup_debates) * self.options[\"pullup_debates_penalty\"]\n        if self.options[\"pairing_method\"] != \"random\":",
        "detail": "tabbycat.draw.generator.powerpair",
        "documentation": {}
    },
    {
        "label": "AustralsPairingMixin",
        "kind": 6,
        "importPath": "tabbycat.draw.generator.powerpair",
        "description": "tabbycat.draw.generator.powerpair",
        "peekOfCode": "class AustralsPairingMixin:\n    def generate_pairings(self, brackets):\n        \"\"\"Returns a function taking an OrderedDict as returned by\n        resolve_odd_brackets(), and returning a list of Debates.\"\"\"\n        function = self.get_option_function(\"pairing_method\", self.PAIRING_FUNCTIONS)\n        return function(brackets)\n    @staticmethod\n    def _pairings(brackets, subpool_func):\n        pairings = OrderedDict()\n        i = 1",
        "detail": "tabbycat.draw.generator.powerpair",
        "documentation": {}
    },
    {
        "label": "GraphPowerPairedDrawGenerator",
        "kind": 6,
        "importPath": "tabbycat.draw.generator.powerpair",
        "description": "tabbycat.draw.generator.powerpair",
        "peekOfCode": "class GraphPowerPairedDrawGenerator(GraphCostMixin, GraphGeneratorMixin, BasePowerPairedDrawGenerator):\n    pass\nclass AustralsPowerPairedDrawGenerator(AustralsPairingMixin, BasePowerPairedDrawGenerator):\n    pass\nclass PowerPairedWithAllocatedSidesDrawGenerator(BasePowerPairedDrawGenerator):\n    \"\"\"Power-paired draw with allocated sides.\n    Override functions of PowerPairedDrawGenerator where sides need to be constrained.\n    All teams must have an 'allocated_side' attribute which must be either\n    'aff' or 'neg' (case-sensitive).\n    Options are as for PowerPairedDrawGenerator, except that the allowable values",
        "detail": "tabbycat.draw.generator.powerpair",
        "documentation": {}
    },
    {
        "label": "AustralsPowerPairedDrawGenerator",
        "kind": 6,
        "importPath": "tabbycat.draw.generator.powerpair",
        "description": "tabbycat.draw.generator.powerpair",
        "peekOfCode": "class AustralsPowerPairedDrawGenerator(AustralsPairingMixin, BasePowerPairedDrawGenerator):\n    pass\nclass PowerPairedWithAllocatedSidesDrawGenerator(BasePowerPairedDrawGenerator):\n    \"\"\"Power-paired draw with allocated sides.\n    Override functions of PowerPairedDrawGenerator where sides need to be constrained.\n    All teams must have an 'allocated_side' attribute which must be either\n    'aff' or 'neg' (case-sensitive).\n    Options are as for PowerPairedDrawGenerator, except that the allowable values\n    for \"odd_bracket\" are:\n        \"pullup_top\"",
        "detail": "tabbycat.draw.generator.powerpair",
        "documentation": {}
    },
    {
        "label": "PowerPairedWithAllocatedSidesDrawGenerator",
        "kind": 6,
        "importPath": "tabbycat.draw.generator.powerpair",
        "description": "tabbycat.draw.generator.powerpair",
        "peekOfCode": "class PowerPairedWithAllocatedSidesDrawGenerator(BasePowerPairedDrawGenerator):\n    \"\"\"Power-paired draw with allocated sides.\n    Override functions of PowerPairedDrawGenerator where sides need to be constrained.\n    All teams must have an 'allocated_side' attribute which must be either\n    'aff' or 'neg' (case-sensitive).\n    Options are as for PowerPairedDrawGenerator, except that the allowable values\n    for \"odd_bracket\" are:\n        \"pullup_top\"\n        \"pullup_bottom\"\n        \"pullup_random\"",
        "detail": "tabbycat.draw.generator.powerpair",
        "documentation": {}
    },
    {
        "label": "GraphPowerPairedWithAllocatedSidesDrawGenerator",
        "kind": 6,
        "importPath": "tabbycat.draw.generator.powerpair",
        "description": "tabbycat.draw.generator.powerpair",
        "peekOfCode": "class GraphPowerPairedWithAllocatedSidesDrawGenerator(GraphCostMixin, GraphAllocatedSidesMixin, PowerPairedWithAllocatedSidesDrawGenerator):\n    pass\nclass AustralsPowerPairedWithAllocatedSidesDrawGenerator(AustralsPairingMixin, PowerPairedWithAllocatedSidesDrawGenerator):\n    @staticmethod\n    def _pairings(brackets, presort_func):\n        pairings = OrderedDict()\n        i = 1\n        for points, pool in brackets.items():\n            assert len(pool[DebateSide.AFF]) == len(pool[DebateSide.NEG])\n            bracket = list()",
        "detail": "tabbycat.draw.generator.powerpair",
        "documentation": {}
    },
    {
        "label": "AustralsPowerPairedWithAllocatedSidesDrawGenerator",
        "kind": 6,
        "importPath": "tabbycat.draw.generator.powerpair",
        "description": "tabbycat.draw.generator.powerpair",
        "peekOfCode": "class AustralsPowerPairedWithAllocatedSidesDrawGenerator(AustralsPairingMixin, PowerPairedWithAllocatedSidesDrawGenerator):\n    @staticmethod\n    def _pairings(brackets, presort_func):\n        pairings = OrderedDict()\n        i = 1\n        for points, pool in brackets.items():\n            assert len(pool[DebateSide.AFF]) == len(pool[DebateSide.NEG])\n            bracket = list()\n            presort_func(pool)\n            for teams in zip(pool[DebateSide.AFF], pool[DebateSide.NEG]):",
        "detail": "tabbycat.draw.generator.powerpair",
        "documentation": {}
    },
    {
        "label": "RandomPairingsMixin",
        "kind": 6,
        "importPath": "tabbycat.draw.generator.random",
        "description": "tabbycat.draw.generator.random",
        "peekOfCode": "class RandomPairingsMixin:\n    \"\"\"Provides actual random part of it, generic to pair, BP, and PS draws.\n    Classes using this mixin must define teams_in_debate.\n    \"\"\"\n    def make_random_pairings(self, teams_in_debate):\n        teams = list(self.teams)  # Make a copy\n        random.shuffle(teams)\n        pairings = [self.pairing_class(teams=t, bracket=0, room_rank=0, num_sides=len(t)) for t in batched(teams, teams_in_debate)]\n        return pairings\nclass BaseRandomDrawGenerator(RandomPairingsMixin, BasePairDrawGenerator):",
        "detail": "tabbycat.draw.generator.random",
        "documentation": {}
    },
    {
        "label": "BaseRandomDrawGenerator",
        "kind": 6,
        "importPath": "tabbycat.draw.generator.random",
        "description": "tabbycat.draw.generator.random",
        "peekOfCode": "class BaseRandomDrawGenerator(RandomPairingsMixin, BasePairDrawGenerator):\n    \"\"\"Random draw.\n    If there are allocated sides, use RandomDrawWithSideConstraints instead.\n    Options:\n        \"max_swap_attempts\": Maximum number of times to attempt to swap to\n            avoid conflict before giving up.\n        \"avoid_conflicts\": Whether to avoid conflicts, should be a string (for\n            compatibility with other types of DrawGenerator).  Turned off if\n            this values is \"off\", turned on if anything else.\n    \"\"\"",
        "detail": "tabbycat.draw.generator.random",
        "documentation": {}
    },
    {
        "label": "GraphRandomDrawMixin",
        "kind": 6,
        "importPath": "tabbycat.draw.generator.random",
        "description": "tabbycat.draw.generator.random",
        "peekOfCode": "class GraphRandomDrawMixin:\n    def make_random_pairings(self, teams_in_debate):\n        return self.generate_pairings({0: self._get_pools()})[0]\nclass SwapRandomDrawMixin:\n    def avoid_conflicts(self, pairings):\n        # Don't swap sides! The child class RandomDrawWithSideConstraints assumes\n        # that in this algorithm, affs will stay affs and negs will stay negs.\n        if not (self.options[\"avoid_history\"] or self.options[\"avoid_institution\"]):\n            return\n        if self.options[\"avoid_conflicts\"] == \"off\":",
        "detail": "tabbycat.draw.generator.random",
        "documentation": {}
    },
    {
        "label": "SwapRandomDrawMixin",
        "kind": 6,
        "importPath": "tabbycat.draw.generator.random",
        "description": "tabbycat.draw.generator.random",
        "peekOfCode": "class SwapRandomDrawMixin:\n    def avoid_conflicts(self, pairings):\n        # Don't swap sides! The child class RandomDrawWithSideConstraints assumes\n        # that in this algorithm, affs will stay affs and negs will stay negs.\n        if not (self.options[\"avoid_history\"] or self.options[\"avoid_institution\"]):\n            return\n        if self.options[\"avoid_conflicts\"] == \"off\":\n            return\n        for pairing in pairings:\n            if self._badness(pairing) > 0:",
        "detail": "tabbycat.draw.generator.random",
        "documentation": {}
    },
    {
        "label": "GraphRandomDrawGenerator",
        "kind": 6,
        "importPath": "tabbycat.draw.generator.random",
        "description": "tabbycat.draw.generator.random",
        "peekOfCode": "class GraphRandomDrawGenerator(GraphGeneratorMixin, GraphRandomDrawMixin, BaseRandomDrawGenerator):\n    pass\nclass SwapRandomDrawGenerator(SwapRandomDrawMixin, BaseRandomDrawGenerator):\n    pass\nclass BaseRandomWithAllocatedSidesDrawGenerator(BaseRandomDrawGenerator):\n    \"\"\"Random draw with allocated sides.\n    Override functions of RandomDrawGenerator where sides need to be constrained.\n    All teams must have an 'allocated_side' attribute which must be either\n    'aff' or 'neg' (case-sensitive).\"\"\"\n    def __init__(self, *args, **kwargs):",
        "detail": "tabbycat.draw.generator.random",
        "documentation": {}
    },
    {
        "label": "SwapRandomDrawGenerator",
        "kind": 6,
        "importPath": "tabbycat.draw.generator.random",
        "description": "tabbycat.draw.generator.random",
        "peekOfCode": "class SwapRandomDrawGenerator(SwapRandomDrawMixin, BaseRandomDrawGenerator):\n    pass\nclass BaseRandomWithAllocatedSidesDrawGenerator(BaseRandomDrawGenerator):\n    \"\"\"Random draw with allocated sides.\n    Override functions of RandomDrawGenerator where sides need to be constrained.\n    All teams must have an 'allocated_side' attribute which must be either\n    'aff' or 'neg' (case-sensitive).\"\"\"\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.check_teams_for_attribute(\"allocated_side\", choices=[DebateSide.AFF, DebateSide.NEG])",
        "detail": "tabbycat.draw.generator.random",
        "documentation": {}
    },
    {
        "label": "BaseRandomWithAllocatedSidesDrawGenerator",
        "kind": 6,
        "importPath": "tabbycat.draw.generator.random",
        "description": "tabbycat.draw.generator.random",
        "peekOfCode": "class BaseRandomWithAllocatedSidesDrawGenerator(BaseRandomDrawGenerator):\n    \"\"\"Random draw with allocated sides.\n    Override functions of RandomDrawGenerator where sides need to be constrained.\n    All teams must have an 'allocated_side' attribute which must be either\n    'aff' or 'neg' (case-sensitive).\"\"\"\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.check_teams_for_attribute(\"allocated_side\", choices=[DebateSide.AFF, DebateSide.NEG])\n    def _get_pools(self):\n        return [[t for t in self.teams if t.allocated_side == side] for side in [DebateSide.AFF, DebateSide.NEG]]",
        "detail": "tabbycat.draw.generator.random",
        "documentation": {}
    },
    {
        "label": "GraphRandomWithAllocatedSidesDrawGenerator",
        "kind": 6,
        "importPath": "tabbycat.draw.generator.random",
        "description": "tabbycat.draw.generator.random",
        "peekOfCode": "class GraphRandomWithAllocatedSidesDrawGenerator(GraphAllocatedSidesMixin, GraphRandomDrawMixin, BaseRandomWithAllocatedSidesDrawGenerator):\n    pass\nclass SwapRandomWithAllocatedSidesDrawGenerator(SwapRandomDrawMixin, BaseRandomWithAllocatedSidesDrawGenerator):\n    def make_random_pairings(self, teams_in_debate):\n        aff_teams = [t for t in self.teams if t.allocated_side == DebateSide.AFF]\n        neg_teams = [t for t in self.teams if t.allocated_side == DebateSide.NEG]\n        if len(aff_teams) != len(neg_teams):\n            raise DrawUserError(_(\"There were %(aff_count)d affirmative teams but %(neg_count)d negative \"\n                    \"teams.\") % {'aff_count': len(aff_teams), 'neg_count': len(neg_teams)})\n        if len(aff_teams) + len(neg_teams) != len(self.teams):",
        "detail": "tabbycat.draw.generator.random",
        "documentation": {}
    },
    {
        "label": "SwapRandomWithAllocatedSidesDrawGenerator",
        "kind": 6,
        "importPath": "tabbycat.draw.generator.random",
        "description": "tabbycat.draw.generator.random",
        "peekOfCode": "class SwapRandomWithAllocatedSidesDrawGenerator(SwapRandomDrawMixin, BaseRandomWithAllocatedSidesDrawGenerator):\n    def make_random_pairings(self, teams_in_debate):\n        aff_teams = [t for t in self.teams if t.allocated_side == DebateSide.AFF]\n        neg_teams = [t for t in self.teams if t.allocated_side == DebateSide.NEG]\n        if len(aff_teams) != len(neg_teams):\n            raise DrawUserError(_(\"There were %(aff_count)d affirmative teams but %(neg_count)d negative \"\n                    \"teams.\") % {'aff_count': len(aff_teams), 'neg_count': len(neg_teams)})\n        if len(aff_teams) + len(neg_teams) != len(self.teams):\n            raise DrawUserError(_(\"One or more teams had an allocated side that wasn't affirmative or negative.\"))\n        random.shuffle(aff_teams)",
        "detail": "tabbycat.draw.generator.random",
        "documentation": {}
    },
    {
        "label": "RandomBPDrawGenerator",
        "kind": 6,
        "importPath": "tabbycat.draw.generator.random",
        "description": "tabbycat.draw.generator.random",
        "peekOfCode": "class RandomBPDrawGenerator(RandomPairingsMixin, BaseBPDrawGenerator):\n    requires_even_teams = True\n    requires_prev_result = False\n    pairing_class = PolyPairing\n    DEFAULT_OPTIONS = {}\n    def generate(self):\n        self._draw = self.make_random_pairings(self.TEAMS_IN_DEBATE)\n        return self._draw\nclass RandomPolyDrawGenerator(RandomPairingsMixin, BaseDrawGenerator):\n    requires_even_teams = False",
        "detail": "tabbycat.draw.generator.random",
        "documentation": {}
    },
    {
        "label": "RandomPolyDrawGenerator",
        "kind": 6,
        "importPath": "tabbycat.draw.generator.random",
        "description": "tabbycat.draw.generator.random",
        "peekOfCode": "class RandomPolyDrawGenerator(RandomPairingsMixin, BaseDrawGenerator):\n    requires_even_teams = False\n    requires_prev_result = False\n    pairing_class = PolyPairing\n    BASE_DEFAULT_OPTIONS = {}\n    DEFAULT_OPTIONS = {}\n    def __init__(self, *args, teams_in_debate: int, **kwargs):\n        self.teams_in_debate = teams_in_debate\n        super().__init__(*args, **kwargs)\n    def generate(self):",
        "detail": "tabbycat.draw.generator.random",
        "documentation": {}
    },
    {
        "label": "batched",
        "kind": 2,
        "importPath": "tabbycat.draw.generator.random",
        "description": "tabbycat.draw.generator.random",
        "peekOfCode": "def batched(iterable, n):\n    # Polyfill for Python 3.12\n    if n < 1:\n        raise ValueError('n must be at least one')\n    iterator = iter(iterable)\n    while batch := tuple(islice(iterator, n)):\n        yield batch\nclass RandomPairingsMixin:\n    \"\"\"Provides actual random part of it, generic to pair, BP, and PS draws.\n    Classes using this mixin must define teams_in_debate.",
        "detail": "tabbycat.draw.generator.random",
        "documentation": {}
    },
    {
        "label": "ispow2",
        "kind": 2,
        "importPath": "tabbycat.draw.generator.utils",
        "description": "tabbycat.draw.generator.utils",
        "peekOfCode": "def ispow2(n):\n    \"\"\"Returns True if n is a power of 2. Works for positive integers only.\"\"\"\n    return n & (n - 1) == 0\ndef nextpow2(n):\n    return 1 << (n-1).bit_length()\ndef partial_break_round_split(break_size):\n    \"\"\"Returns a tuple `(debates, bypassing)`, where `debating` is how many\n    debates there is in the first break round, and `bypassing` is how many\n    teams will bypass the first break round, qualifying directly for the\n    second.\"\"\"",
        "detail": "tabbycat.draw.generator.utils",
        "documentation": {}
    },
    {
        "label": "nextpow2",
        "kind": 2,
        "importPath": "tabbycat.draw.generator.utils",
        "description": "tabbycat.draw.generator.utils",
        "peekOfCode": "def nextpow2(n):\n    return 1 << (n-1).bit_length()\ndef partial_break_round_split(break_size):\n    \"\"\"Returns a tuple `(debates, bypassing)`, where `debating` is how many\n    debates there is in the first break round, and `bypassing` is how many\n    teams will bypass the first break round, qualifying directly for the\n    second.\"\"\"\n    assert break_size > 1, \"break rounds only make sense for break_size > 1 (found %d)\" % (break_size,)\n    teams_in_second_break_round = nextpow2(break_size) // 2\n    debates = break_size - teams_in_second_break_round",
        "detail": "tabbycat.draw.generator.utils",
        "documentation": {}
    },
    {
        "label": "partial_break_round_split",
        "kind": 2,
        "importPath": "tabbycat.draw.generator.utils",
        "description": "tabbycat.draw.generator.utils",
        "peekOfCode": "def partial_break_round_split(break_size):\n    \"\"\"Returns a tuple `(debates, bypassing)`, where `debating` is how many\n    debates there is in the first break round, and `bypassing` is how many\n    teams will bypass the first break round, qualifying directly for the\n    second.\"\"\"\n    assert break_size > 1, \"break rounds only make sense for break_size > 1 (found %d)\" % (break_size,)\n    teams_in_second_break_round = nextpow2(break_size) // 2\n    debates = break_size - teams_in_second_break_round\n    bypassing = teams_in_second_break_round - debates\n    assert 2*debates + bypassing == break_size, \"2 * %d teams debating + %d teams bypassing doesn't add to break size %d\" % (debates, bypassing, break_size)",
        "detail": "tabbycat.draw.generator.utils",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "tabbycat.draw.management.commands.deletedraw",
        "description": "tabbycat.draw.management.commands.deletedraw",
        "peekOfCode": "class Command(RoundCommand):\n    help = \"Deletes all debates in a round (or rounds).\"\n    confirm_round_destruction = \"delete ALL DEBATES\"\n    def handle_round(self, round, **options):\n        self.stdout.write(\"Deleting all debates in round '{}'...\".format(round.name))\n        delete_round_draw(round)",
        "detail": "tabbycat.draw.management.commands.deletedraw",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "tabbycat.draw.management.commands.generatesideallocations",
        "description": "tabbycat.draw.management.commands.generatesideallocations",
        "peekOfCode": "class Command(RoundCommand):\n    help = \"Adds randomly generated side allocations to teams for all preliminary rounds.\"\n    def add_arguments(self, parser):\n        super(Command, self).add_arguments(parser)\n        parser.add_argument(\"--delete\", action=\"store_true\", help=\"Delete allocations, don't create any.\")\n        parser.add_argument(\"-q\", \"--quiet\", action=\"store_true\", help=\"Don't print the allocations.\")\n    def handle_round(self, round, **options):\n        teams = list(round.tournament.team_set.all())\n        if len(teams) % 2 != 0:\n            raise CommandError(\"There aren't an even number of teams ({0})\".format(len(teams)))",
        "detail": "tabbycat.draw.management.commands.generatesideallocations",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.draw.migrations.0001_initial",
        "description": "tabbycat.draw.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('participants', '0001_initial'),\n        ('tournaments', '0001_initial'),\n        ('divisions', '0001_initial'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Debate',",
        "detail": "tabbycat.draw.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.draw.migrations.0002_auto_20171110_0905",
        "description": "tabbycat.draw.migrations.0002_auto_20171110_0905",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('venues', '0001_initial'),\n        ('draw', '0001_initial'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='debate',\n            name='venue',",
        "detail": "tabbycat.draw.migrations.0002_auto_20171110_0905",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.draw.migrations.0003_remove_debate_ballot_in",
        "description": "tabbycat.draw.migrations.0003_remove_debate_ballot_in",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('draw', '0002_auto_20171110_0905'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='debate',\n            name='ballot_in',\n        ),\n    ]",
        "detail": "tabbycat.draw.migrations.0003_remove_debate_ballot_in",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.draw.migrations.0004_remove_league_fields",
        "description": "tabbycat.draw.migrations.0004_remove_league_fields",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('draw', '0003_remove_debate_ballot_in'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='debate',\n            name='division',\n        ),\n        migrations.RemoveField(",
        "detail": "tabbycat.draw.migrations.0004_remove_league_fields",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.draw.migrations.0005_auto_20200613_0952",
        "description": "tabbycat.draw.migrations.0005_auto_20200613_0952",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('draw', '0004_remove_league_fields'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='debate',\n            name='flags_temp',\n            field=django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=15), choices=[('max_swapped', 'Too many swaps'), ('1u1d_hist', 'One-up-one-down (history)'), ('1u1d_inst', 'One-up-one-down (institution)'), ('1u1d_other', 'One-up-one-down (to accommodate)'), ('bub_up_hist', 'Bubble up (history)'), ('bub_dn_hist', 'Bubble down (history)'), ('bub_up_inst', 'Bubble up (institution)'), ('bub_dn_inst', 'Bubble down (institution)'), ('bub_up_accom', 'Bubble up (to accommodate)'), ('bub_dn_accom', 'Bubble down (to accommodate)'), ('no_bub_updn', \"Can't bubble up/down\"), ('pullup', 'Pull-up team')], blank=True, size=None, default=list),\n        ),",
        "detail": "tabbycat.draw.migrations.0005_auto_20200613_0952",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.draw.migrations.0005_auto_20200705_1525",
        "description": "tabbycat.draw.migrations.0005_auto_20200705_1525",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('venues', '0008_auto_20200705_1525'),\n        ('draw', '0004_remove_league_fields'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='debate',\n            name='venue',\n            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='venues.Venue', verbose_name='room'),",
        "detail": "tabbycat.draw.migrations.0005_auto_20200705_1525",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.draw.migrations.0006_merge_20200904_1639",
        "description": "tabbycat.draw.migrations.0006_merge_20200904_1639",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('draw', '0005_auto_20200613_0952'),\n        ('draw', '0005_auto_20200705_1525'),\n    ]\n    operations = [\n    ]",
        "detail": "tabbycat.draw.migrations.0006_merge_20200904_1639",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.draw.migrations.0007_auto_20201003_0205",
        "description": "tabbycat.draw.migrations.0007_auto_20201003_0205",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('draw', '0006_merge_20200904_1639'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='debate',\n            name='flags',\n            field=utils.fields.ChoiceArrayField(base_field=models.CharField(choices=[('max_swapped', 'Too many swaps'), ('1u1d_hist', 'One-up-one-down (history)'), ('1u1d_inst', 'One-up-one-down (institution)'), ('1u1d_other', 'One-up-one-down (to accommodate)'), ('bub_up_hist', 'Bubble up (history)'), ('bub_dn_hist', 'Bubble down (history)'), ('bub_up_inst', 'Bubble up (institution)'), ('bub_dn_inst', 'Bubble down (institution)'), ('bub_up_accom', 'Bubble up (to accommodate)'), ('bub_dn_accom', 'Bubble down (to accommodate)'), ('no_bub_updn', \"Can't bubble up/down\"), ('pullup', 'Pull-up team')], max_length=15), blank=True, default=list, size=None),\n        ),",
        "detail": "tabbycat.draw.migrations.0007_auto_20201003_0205",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.draw.migrations.0008_alter_debateteam_side_alter_teamsideallocation_side",
        "description": "tabbycat.draw.migrations.0008_alter_debateteam_side_alter_teamsideallocation_side",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"draw\", \"0007_auto_20201003_0205\"),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name=\"debateteam\",\n            name=\"side\",\n            field=models.CharField(\n                choices=[",
        "detail": "tabbycat.draw.migrations.0008_alter_debateteam_side_alter_teamsideallocation_side",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.draw.migrations.0009_alter_teamsideallocation_unique_together_and_more",
        "description": "tabbycat.draw.migrations.0009_alter_teamsideallocation_unique_together_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('draw', '0008_alter_debateteam_side_alter_teamsideallocation_side'),\n        ('participants', '0022_rename_team_tournament_institution_short_reference_participant_tournam_160efa_idx_and_more'),\n        ('tournaments', '0012_alter_round_unique_together_and_more'),\n    ]\n    operations = [\n        migrations.AlterUniqueTogether(\n            name='teamsideallocation',\n            unique_together=set(),",
        "detail": "tabbycat.draw.migrations.0009_alter_teamsideallocation_unique_together_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.draw.migrations.0010_alter_debateteam_side_alter_teamsideallocation_side",
        "description": "tabbycat.draw.migrations.0010_alter_debateteam_side_alter_teamsideallocation_side",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"draw\", \"0009_alter_teamsideallocation_unique_together_and_more\"),\n    ]\n    operations = list(chain(*[\n        [\n            migrations.AddField(\n                model_name=table,\n                name=\"side_\",\n                field=models.IntegerField(verbose_name=\"side sequence\", null=True),",
        "detail": "tabbycat.draw.migrations.0010_alter_debateteam_side_alter_teamsideallocation_side",
        "documentation": {}
    },
    {
        "label": "draw_dir",
        "kind": 5,
        "importPath": "tabbycat.draw.tests.generate_standings",
        "description": "tabbycat.draw.tests.generate_standings",
        "peekOfCode": "draw_dir = os.path.abspath(os.path.join(\"..\", \"..\"))\nif draw_dir not in sys.path:\n    sys.path.append(draw_dir)\nprint(draw_dir)\ndel draw_dir\nfrom draw.generator import DrawGenerator  # noqa: E402 (has to come after path modification above)\nfrom draw.tests.utils import TestTeam     # noqa: E402 (has to come after path modification above)\nparser = argparse.ArgumentParser(description=__doc__)\nparser.add_argument(\"rounds\", type=int, help=\"Number of rounds\")\nparser.add_argument(\"teams\", type=int, help=\"Number of teams\")",
        "detail": "tabbycat.draw.tests.generate_standings",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "tabbycat.draw.tests.generate_standings",
        "description": "tabbycat.draw.tests.generate_standings",
        "peekOfCode": "parser = argparse.ArgumentParser(description=__doc__)\nparser.add_argument(\"rounds\", type=int, help=\"Number of rounds\")\nparser.add_argument(\"teams\", type=int, help=\"Number of teams\")\nparser.add_argument(\"insts\", type=int, help=\"Number of institutions\")\nargs = parser.parse_args()\nR = args.rounds\nT = args.teams\nK = args.insts\nassert T % 2 == 0\nteams = list()",
        "detail": "tabbycat.draw.tests.generate_standings",
        "documentation": {}
    },
    {
        "label": "args",
        "kind": 5,
        "importPath": "tabbycat.draw.tests.generate_standings",
        "description": "tabbycat.draw.tests.generate_standings",
        "peekOfCode": "args = parser.parse_args()\nR = args.rounds\nT = args.teams\nK = args.insts\nassert T % 2 == 0\nteams = list()\nfor i in range(1, T+1):\n    team = TestTeam(i, random.choice(string.ascii_uppercase[:K]), 0, list(), side_history=[0, 0])\n    teams.append(team)\nbrackets = dict()",
        "detail": "tabbycat.draw.tests.generate_standings",
        "documentation": {}
    },
    {
        "label": "R",
        "kind": 5,
        "importPath": "tabbycat.draw.tests.generate_standings",
        "description": "tabbycat.draw.tests.generate_standings",
        "peekOfCode": "R = args.rounds\nT = args.teams\nK = args.insts\nassert T % 2 == 0\nteams = list()\nfor i in range(1, T+1):\n    team = TestTeam(i, random.choice(string.ascii_uppercase[:K]), 0, list(), side_history=[0, 0])\n    teams.append(team)\nbrackets = dict()\nfor i in range(R):",
        "detail": "tabbycat.draw.tests.generate_standings",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "tabbycat.draw.tests.generate_standings",
        "description": "tabbycat.draw.tests.generate_standings",
        "peekOfCode": "T = args.teams\nK = args.insts\nassert T % 2 == 0\nteams = list()\nfor i in range(1, T+1):\n    team = TestTeam(i, random.choice(string.ascii_uppercase[:K]), 0, list(), side_history=[0, 0])\n    teams.append(team)\nbrackets = dict()\nfor i in range(R):\n    wins_set = set([team.points for team in teams])",
        "detail": "tabbycat.draw.tests.generate_standings",
        "documentation": {}
    },
    {
        "label": "K",
        "kind": 5,
        "importPath": "tabbycat.draw.tests.generate_standings",
        "description": "tabbycat.draw.tests.generate_standings",
        "peekOfCode": "K = args.insts\nassert T % 2 == 0\nteams = list()\nfor i in range(1, T+1):\n    team = TestTeam(i, random.choice(string.ascii_uppercase[:K]), 0, list(), side_history=[0, 0])\n    teams.append(team)\nbrackets = dict()\nfor i in range(R):\n    wins_set = set([team.points for team in teams])\n    brackets.clear()",
        "detail": "tabbycat.draw.tests.generate_standings",
        "documentation": {}
    },
    {
        "label": "teams",
        "kind": 5,
        "importPath": "tabbycat.draw.tests.generate_standings",
        "description": "tabbycat.draw.tests.generate_standings",
        "peekOfCode": "teams = list()\nfor i in range(1, T+1):\n    team = TestTeam(i, random.choice(string.ascii_uppercase[:K]), 0, list(), side_history=[0, 0])\n    teams.append(team)\nbrackets = dict()\nfor i in range(R):\n    wins_set = set([team.points for team in teams])\n    brackets.clear()\n    for wins in wins_set:\n        brackets[wins] = [t for t in teams if t.points == wins]",
        "detail": "tabbycat.draw.tests.generate_standings",
        "documentation": {}
    },
    {
        "label": "brackets",
        "kind": 5,
        "importPath": "tabbycat.draw.tests.generate_standings",
        "description": "tabbycat.draw.tests.generate_standings",
        "peekOfCode": "brackets = dict()\nfor i in range(R):\n    wins_set = set([team.points for team in teams])\n    brackets.clear()\n    for wins in wins_set:\n        brackets[wins] = [t for t in teams if t.points == wins]\n    ppdg = DrawGenerator(2, \"power_paired\", teams)\n    ppdg._pullup_top(brackets)\n    for wins, bracket_teams in brackets.items():\n        random.shuffle(bracket_teams)",
        "detail": "tabbycat.draw.tests.generate_standings",
        "documentation": {}
    },
    {
        "label": "TestDefineRooms",
        "kind": 6,
        "importPath": "tabbycat.draw.tests.test_bphungarian_parts",
        "description": "tabbycat.draw.tests.test_bphungarian_parts",
        "peekOfCode": "class TestDefineRooms(unittest.TestCase):\n    \"\"\"Tests the `_define_rooms_*` functions of BPHungarianDrawGenerator.\"\"\"\n    testdata = dict()\n    anywhere = dict()\n    one_room = dict()\n    testdata[1] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n    anywhere[1] = [(11, {8, 9, 10, 11}), (7, {4, 5, 6, 7}), (3, {0, 1, 2, 3})]\n    one_room[1] = [(11, {8, 9, 10, 11}), (7, {4, 5, 6, 7}), (3, {0, 1, 2, 3})]\n    testdata[2] = [3, 3, 2, 2, 2, 2, 1, 1, 1, 1, 0, 0]\n    anywhere[2] = [(3, {3, 2}), (2, {2, 1}), (1, {1, 0})]",
        "detail": "tabbycat.draw.tests.test_bphungarian_parts",
        "documentation": {}
    },
    {
        "label": "DUMMY_TEAMS",
        "kind": 5,
        "importPath": "tabbycat.draw.tests.test_bphungarian_parts",
        "description": "tabbycat.draw.tests.test_bphungarian_parts",
        "peekOfCode": "DUMMY_TEAMS = [TestTeam(1, 'A', side_history=[0, 0, 0, 0]),\n               TestTeam(2, 'B', side_history=[0, 0, 0, 0]),\n               TestTeam(3, 'C', side_history=[0, 0, 0, 0]),\n               TestTeam(4, 'D', side_history=[0, 0, 0, 0])]\nclass TestDefineRooms(unittest.TestCase):\n    \"\"\"Tests the `_define_rooms_*` functions of BPHungarianDrawGenerator.\"\"\"\n    testdata = dict()\n    anywhere = dict()\n    one_room = dict()\n    testdata[1] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]",
        "detail": "tabbycat.draw.tests.test_bphungarian_parts",
        "documentation": {}
    },
    {
        "label": "TestCreateDrawViewErrors",
        "kind": 6,
        "importPath": "tabbycat.draw.tests.test_draw_errors",
        "description": "tabbycat.draw.tests.test_draw_errors",
        "peekOfCode": "class TestCreateDrawViewErrors(TournamentTestCase):\n    fixtures = ['after_round_1.json']\n    round_seq = 2\n    def setUp(self):\n        super().setUp()\n        self.client.login(username=\"admin\", password=\"admin\")\n        self.round = self.tournament.round_set.get(seq=self.round_seq)\n        self.tournament.preferences['standings__team_standings_precedence'] = ['wins', 'speaks_sum']\n    def run_test_for_error_response(self, expected_loglevel, error_type):\n        url = self.reverse_round('draw-create')",
        "detail": "tabbycat.draw.tests.test_draw_errors",
        "documentation": {}
    },
    {
        "label": "TestRandomDrawGenerator",
        "kind": 6,
        "importPath": "tabbycat.draw.tests.test_generator",
        "description": "tabbycat.draw.tests.test_generator",
        "peekOfCode": "class TestRandomDrawGenerator(unittest.TestCase):\n    \"\"\"Basic unit test for random draws.\n    Because it's random, you can't really do much to test it.\"\"\"\n    teams = [(1, 'A'), (2, 'B'), (3, 'A'), (4, 'B'), (5, 'C'), (6, 'D'),\n             (7, 'E'), (8, 'A'), (9, 'D'), (10, 'E'), (11, 'D'), (12, 'A')]\n    def test_invalid_option(self):\n        teams = [TestTeam(*args, side_history=[0, 0]) for args in self.teams]\n        def go():\n            self.rd = DrawGenerator(2, \"random\", teams, None, random=True)\n        self.assertRaises(ValueError, go)",
        "detail": "tabbycat.draw.tests.test_generator",
        "documentation": {}
    },
    {
        "label": "TestPowerPairedDrawGeneratorParts",
        "kind": 6,
        "importPath": "tabbycat.draw.tests.test_generator",
        "description": "tabbycat.draw.tests.test_generator",
        "peekOfCode": "class TestPowerPairedDrawGeneratorParts(unittest.TestCase):\n    \"\"\"Basic unit test for core functionality of power-paired draws.\n    Nowhere near comprehensive.\"\"\"\n    brackets = OrderedDict([\n        (4, [1, 2, 3, 4, 5]),\n        (3, [6, 7, 8, 9]),\n        (2, [10, 11, 12, 13, 14]),\n        (1, [15, 16]),\n    ])\n    def setUp(self):",
        "detail": "tabbycat.draw.tests.test_generator",
        "documentation": {}
    },
    {
        "label": "TestPowerPairedDrawGenerator",
        "kind": 6,
        "importPath": "tabbycat.draw.tests.test_generator",
        "description": "tabbycat.draw.tests.test_generator",
        "peekOfCode": "class TestPowerPairedDrawGenerator(unittest.TestCase):\n    \"\"\"Test the entire draw functions as a black box.\"\"\"\n    # Yep, I spent a lot of time constructing this realistic hypothetical\n    # situation with lots of swaps and manually figuring out the anticipated\n    # result.\n    standings = dict()\n    standings[1] = [((12, 'B', 4, [26, 11, 15, 14]), {\"side_history\": [2, 2], \"allocated_side\": DebateSide.AFF}),\n                    ((2,  'D', 3, [22, 16, 20, 10]), {\"side_history\": [2, 2], \"allocated_side\": DebateSide.AFF}),\n                    ((3,  'E', 3, [23, 20, 25,  4]), {\"side_history\": [2, 2], \"allocated_side\": DebateSide.AFF}),\n                    ((11, 'B', 3, [1,  12, 23, 22]), {\"side_history\": [2, 2], \"allocated_side\": DebateSide.NEG}),",
        "detail": "tabbycat.draw.tests.test_generator",
        "documentation": {}
    },
    {
        "label": "TestPowerPairedWithAllocatedSidesDrawGeneratorPartOddBrackets",
        "kind": 6,
        "importPath": "tabbycat.draw.tests.test_generator",
        "description": "tabbycat.draw.tests.test_generator",
        "peekOfCode": "class TestPowerPairedWithAllocatedSidesDrawGeneratorPartOddBrackets(unittest.TestCase):\n    \"\"\"Basic unit test for core functionality of power-paired draws with allocated\n    sides. Not comprehensive.\"\"\"\n    # Input dictionaries, groups that may have odd brackets.\n    brackets = dict()\n    brackets[1] = OrderedDict([\n        (5, [[1], [14]]),\n        (4, [[2, 3], [15]]),\n        (3, [[4, 5, 6, 7, 8], [16, 17, 18]]),\n        (2, [[9, 10], [19, 20, 21]]),",
        "detail": "tabbycat.draw.tests.test_generator",
        "documentation": {}
    },
    {
        "label": "TestPartialBreakRoundSplit",
        "kind": 6,
        "importPath": "tabbycat.draw.tests.test_generator",
        "description": "tabbycat.draw.tests.test_generator",
        "peekOfCode": "class TestPartialBreakRoundSplit(unittest.TestCase):\n    def test_split(self):\n        self.assertRaises(AssertionError, partial_break_round_split, -1)\n        self.assertRaises(AssertionError, partial_break_round_split, 0)\n        self.assertRaises(AssertionError, partial_break_round_split, 1)\n        self.assertEqual(partial_break_round_split(2),  (1, 0))\n        self.assertEqual(partial_break_round_split(3),  (1, 1))\n        self.assertEqual(partial_break_round_split(4),  (2, 0))\n        self.assertEqual(partial_break_round_split(5),  (1, 3))\n        self.assertEqual(partial_break_round_split(6),  (2, 2))",
        "detail": "tabbycat.draw.tests.test_generator",
        "documentation": {}
    },
    {
        "label": "BaseTestEliminationDrawGenerator",
        "kind": 6,
        "importPath": "tabbycat.draw.tests.test_generator",
        "description": "tabbycat.draw.tests.test_generator",
        "peekOfCode": "class BaseTestEliminationDrawGenerator(unittest.TestCase):\n    # (Team Name, Team Institution)\n    team_data = [(1, 'A'), (2, 'B'), (3, 'A'), (4, 'B'), (5, 'C'), (6, 'D'),\n             (7, 'E'), (8, 'A'), (9, 'D'), (10, 'E'), (11, 'D'), (12, 'A')]\n    def assertPairingsEqual(self, actual, expected):  # noqa: N802\n        \"\"\"Checks pairings without regard to sides.\"\"\"\n        for a, p in zip(actual, expected):\n            self.assertCountEqual([team.id for team in a.teams], p)\nclass TestPartialEliminationDrawGenerator(BaseTestEliminationDrawGenerator):\n    def test_even_numbers(self):",
        "detail": "tabbycat.draw.tests.test_generator",
        "documentation": {}
    },
    {
        "label": "TestPartialEliminationDrawGenerator",
        "kind": 6,
        "importPath": "tabbycat.draw.tests.test_generator",
        "description": "tabbycat.draw.tests.test_generator",
        "peekOfCode": "class TestPartialEliminationDrawGenerator(BaseTestEliminationDrawGenerator):\n    def test_even_numbers(self):\n        # Run a draw with break size of 2; expect each team's ID to be paired up as follows\n        self.run_draw(2, [(1, 2)])\n        self.run_draw(4, [(1, 4), (2, 3)])\n        self.run_draw(8, [(1, 8), (2, 7), (3, 6), (4, 5)])\n    def test_weird_numbers(self):\n        self.run_draw(3, [(2, 3)])\n        self.run_draw(5, [(4, 5)])\n        self.run_draw(6, [(3, 6), (4, 5)])",
        "detail": "tabbycat.draw.tests.test_generator",
        "documentation": {}
    },
    {
        "label": "TestEliminationDrawGenerator",
        "kind": 6,
        "importPath": "tabbycat.draw.tests.test_generator",
        "description": "tabbycat.draw.tests.test_generator",
        "peekOfCode": "class TestEliminationDrawGenerator(BaseTestEliminationDrawGenerator):\n    def setUp(self):\n        self.teams = [TestTeam(*args) for args in self.team_data]\n    def t(self, teams):\n        return lambda id: teams[id-1]\n    def p(self, t):\n        return lambda ids: list(map(t, ids))\n    def _results(self, start_rank, *args):\n        _t = self.t(self.teams)\n        _p = self.p(_t)",
        "detail": "tabbycat.draw.tests.test_generator",
        "documentation": {}
    },
    {
        "label": "DUMMY_TEAMS",
        "kind": 5,
        "importPath": "tabbycat.draw.tests.test_generator",
        "description": "tabbycat.draw.tests.test_generator",
        "peekOfCode": "DUMMY_TEAMS = [TestTeam(1, 'A', allocated_side=DebateSide.AFF), TestTeam(2, 'B', allocated_side=DebateSide.NEG)]\nclass TestRandomDrawGenerator(unittest.TestCase):\n    \"\"\"Basic unit test for random draws.\n    Because it's random, you can't really do much to test it.\"\"\"\n    teams = [(1, 'A'), (2, 'B'), (3, 'A'), (4, 'B'), (5, 'C'), (6, 'D'),\n             (7, 'E'), (8, 'A'), (9, 'D'), (10, 'E'), (11, 'D'), (12, 'A')]\n    def test_invalid_option(self):\n        teams = [TestTeam(*args, side_history=[0, 0]) for args in self.teams]\n        def go():\n            self.rd = DrawGenerator(2, \"random\", teams, None, random=True)",
        "detail": "tabbycat.draw.tests.test_generator",
        "documentation": {}
    },
    {
        "label": "TestPowerPairedDrawGeneratorParts",
        "kind": 6,
        "importPath": "tabbycat.draw.tests.test_graph_allocations",
        "description": "tabbycat.draw.tests.test_graph_allocations",
        "peekOfCode": "class TestPowerPairedDrawGeneratorParts(unittest.TestCase):\n    def test_pairings_slide_deviation_top(self):\n        teams = [TestTeam(i+1, chr(ord('A') + i), subrank=i+1) for i in range(8)]\n        for i, team in enumerate(teams):\n            \"\"\"Expected:\n            (A-A): 4\n            A - B: 3\n            A - C: 2\n            A - D: 1\n            A - E: 0",
        "detail": "tabbycat.draw.tests.test_graph_allocations",
        "documentation": {}
    },
    {
        "label": "DUMMY_TEAMS",
        "kind": 5,
        "importPath": "tabbycat.draw.tests.test_graph_allocations",
        "description": "tabbycat.draw.tests.test_graph_allocations",
        "peekOfCode": "DUMMY_TEAMS = [TestTeam(1, 'A', allocated_side=DebateSide.AFF), TestTeam(2, 'B', allocated_side=DebateSide.NEG)]\nclass TestPowerPairedDrawGeneratorParts(unittest.TestCase):\n    def test_pairings_slide_deviation_top(self):\n        teams = [TestTeam(i+1, chr(ord('A') + i), subrank=i+1) for i in range(8)]\n        for i, team in enumerate(teams):\n            \"\"\"Expected:\n            (A-A): 4\n            A - B: 3\n            A - C: 2\n            A - D: 1",
        "detail": "tabbycat.draw.tests.test_graph_allocations",
        "documentation": {}
    },
    {
        "label": "TestOneUpOneDown",
        "kind": 6,
        "importPath": "tabbycat.draw.tests.test_one_up_one_down",
        "description": "tabbycat.draw.tests.test_one_up_one_down",
        "peekOfCode": "class TestOneUpOneDown(unittest.TestCase):\n    @staticmethod\n    def _1u1d_no_change(data):\n        return [(t1[0], t2[0]) for t1, t2 in data]\n    def test_no_swap(self):\n        data = (((1, 'A'), (5, 'B')),\n                ((2, 'C'), (6, 'A')),\n                ((3, 'B'), (7, 'D')),\n                ((4, 'C'), (8, 'A')))\n        result = self._1u1d_no_change(data)",
        "detail": "tabbycat.draw.tests.test_one_up_one_down",
        "documentation": {}
    },
    {
        "label": "RandomDrawTests",
        "kind": 6,
        "importPath": "tabbycat.draw.tests.test_random",
        "description": "tabbycat.draw.tests.test_random",
        "peekOfCode": "class RandomDrawTests(BaseMinimalTournamentTestCase):\n    def setUp(self):\n        super(RandomDrawTests, self).setUp()\n        self.round = Round(tournament=self.tournament, seq=2, draw_type=Round.DrawType.RANDOM)\n        self.round.save()\n        activate_all(self.round)\n    def test_std(self):\n        DrawManager(self.round).create()\n        self.assertEqual(6, self.round.debate_set.count())\n        self.assertEqual(12, DebateTeam.objects.filter(debate__round=self.round).count())",
        "detail": "tabbycat.draw.tests.test_random",
        "documentation": {}
    },
    {
        "label": "PublicDrawForSpecificRoundViewPermissionTest",
        "kind": 6,
        "importPath": "tabbycat.draw.tests.test_views",
        "description": "tabbycat.draw.tests.test_views",
        "peekOfCode": "class PublicDrawForSpecificRoundViewPermissionTest(ConditionalTableViewTestsMixin, TestCase):\n    \"\"\"Checks the preference enabling/disabling showing round by specific\"\"\"\n    view_name = 'draw-public-for-round'\n    view_toggle_preference = 'public_features__public_draw'\n    view_toggle_on_value = 'all-released'\n    view_toggle_off_values = ['current', 'off']\n    round_seq = 2\n    def expected_row_counts(self):\n        return [self.round.debate_set.count()]\nclass PublicDrawForCurrentRoundViewPermissionTest(ConditionalTableViewTestsMixin, TestCase):",
        "detail": "tabbycat.draw.tests.test_views",
        "documentation": {}
    },
    {
        "label": "PublicDrawForCurrentRoundViewPermissionTest",
        "kind": 6,
        "importPath": "tabbycat.draw.tests.test_views",
        "description": "tabbycat.draw.tests.test_views",
        "peekOfCode": "class PublicDrawForCurrentRoundViewPermissionTest(ConditionalTableViewTestsMixin, TestCase):\n    \"\"\" Check that the current round can have its draw seen if enabled\"\"\"\n    view_name = 'draw-public-current-rounds'\n    view_toggle_preference = 'public_features__public_draw'\n    view_toggle_on_value = 'current'\n    view_toggle_off_values = ['all-released', 'off']\n    def setUp(self):\n        super().setUp()\n        seq = 3\n        self.tournament.round_set.filter(seq__lt=seq).update(completed=True)",
        "detail": "tabbycat.draw.tests.test_views",
        "documentation": {}
    },
    {
        "label": "PublicDrawSpecificRoundTest",
        "kind": 6,
        "importPath": "tabbycat.draw.tests.test_views",
        "description": "tabbycat.draw.tests.test_views",
        "peekOfCode": "class PublicDrawSpecificRoundTest(CompletedTournamentTestMixin, TableViewTestsMixin, TestCase):\n    \"\"\"Tests that the specific-round draw page responds to draw release.\"\"\"\n    round_seq = 2\n    def setUp(self):\n        super().setUp()\n        self.tournament.preferences['public_features__public_draw'] = 'all-released'\n    def test_unreleased(self):\n        self.round.draw_status = Round.Status.CONFIRMED\n        self.round.save()\n        response = self.get_response('draw-public-for-round')",
        "detail": "tabbycat.draw.tests.test_views",
        "documentation": {}
    },
    {
        "label": "PublicDrawPreliminaryCurrentRoundTest",
        "kind": 6,
        "importPath": "tabbycat.draw.tests.test_views",
        "description": "tabbycat.draw.tests.test_views",
        "peekOfCode": "class PublicDrawPreliminaryCurrentRoundTest(CompletedTournamentTestMixin, TableViewTestsMixin, TestCase):\n    \"\"\"Tests the single-round current round page, which appears during the\n    preliminary rounds, and how it responds to draw release.\"\"\"\n    def setUp(self):\n        super().setUp()\n        self.tournament.preferences['public_features__public_draw'] = 'current'\n        seq = 3\n        self.tournament.round_set.filter(seq__lt=seq).update(completed=True)\n        self.tournament.round_set.filter(seq__gte=seq).update(completed=False)\n        self.round = self.tournament.round_set.get(seq=seq)",
        "detail": "tabbycat.draw.tests.test_views",
        "documentation": {}
    },
    {
        "label": "PublicDrawEliminationCurrentRoundTest",
        "kind": 6,
        "importPath": "tabbycat.draw.tests.test_views",
        "description": "tabbycat.draw.tests.test_views",
        "peekOfCode": "class PublicDrawEliminationCurrentRoundTest(CompletedTournamentTestMixin, TableViewTestsMixin, TestCase):\n    \"\"\"Tests the multi-round current round page, which appears when there are\n    simultaneous elimination rounds, and how it responds to draw release.\"\"\"\n    fixtures = ['before_oqf_ssf.json']\n    def setUp(self):\n        super().setUp()\n        self.tournament.preferences['public_features__public_draw'] = 'current'\n        self.tournament.prelim_rounds().update(completed=True)\n        self.tournament.break_rounds().update(completed=False)\n        self.oqf = self.tournament.round_set.get(abbreviation='OQF')",
        "detail": "tabbycat.draw.tests.test_views",
        "documentation": {}
    },
    {
        "label": "EditDebateTeamsViewTest",
        "kind": 6,
        "importPath": "tabbycat.draw.tests.test_views",
        "description": "tabbycat.draw.tests.test_views",
        "peekOfCode": "class EditDebateTeamsViewTest(AdminTournamentViewSimpleLoadTestMixin, TestCase):\n    view_name = 'edit-debate-teams'\n    round_seq = 1",
        "detail": "tabbycat.draw.tests.test_views",
        "documentation": {}
    },
    {
        "label": "TestTeam",
        "kind": 6,
        "importPath": "tabbycat.draw.tests.utils",
        "description": "tabbycat.draw.tests.utils",
        "peekOfCode": "class TestTeam(object):\n    \"\"\"Basic implementation of team interface\"\"\"\n    def __init__(self, id, inst, points=0, hist=list(), **kwargs):\n        self.id = id\n        self.institution = inst\n        self.points = points\n        try:\n            self.hist = list(hist)\n        except TypeError:\n            self.hist = (hist,)",
        "detail": "tabbycat.draw.tests.utils",
        "documentation": {}
    },
    {
        "label": "DebateTeamAdmin",
        "kind": 6,
        "importPath": "tabbycat.draw.admin",
        "description": "tabbycat.draw.admin",
        "peekOfCode": "class DebateTeamAdmin(TabbycatModelAdminFieldsMixin, ModelAdmin):\n    list_display = ('team', 'side', 'debate', 'get_tournament', 'get_round')\n    search_fields = ('team__long_name', 'team__short_name', 'team__institution__name', 'team__institution__code', 'flags')\n    raw_id_fields = ('debate', 'team')\n    def get_queryset(self, request):\n        return super().get_queryset(request).select_related(\n            'debate__round__tournament',\n            'team__tournament',\n        ).prefetch_related(\n            Prefetch('debate__debateteam_set', queryset=DebateTeam.objects.select_related('team')),",
        "detail": "tabbycat.draw.admin",
        "documentation": {}
    },
    {
        "label": "DebateTeamInline",
        "kind": 6,
        "importPath": "tabbycat.draw.admin",
        "description": "tabbycat.draw.admin",
        "peekOfCode": "class DebateTeamInline(admin.TabularInline):\n    model = DebateTeam\n    extra = 1\n    raw_id_fields = ('team', )\nclass DebateAdjudicatorInline(admin.TabularInline):\n    model = DebateAdjudicator\n    extra = 1\n@admin.register(Debate)\nclass DebateAdmin(ModelAdmin):\n    list_display = ('id', 'round', 'bracket', 'matchup', 'result_status', 'sides_confirmed')",
        "detail": "tabbycat.draw.admin",
        "documentation": {}
    },
    {
        "label": "DebateAdjudicatorInline",
        "kind": 6,
        "importPath": "tabbycat.draw.admin",
        "description": "tabbycat.draw.admin",
        "peekOfCode": "class DebateAdjudicatorInline(admin.TabularInline):\n    model = DebateAdjudicator\n    extra = 1\n@admin.register(Debate)\nclass DebateAdmin(ModelAdmin):\n    list_display = ('id', 'round', 'bracket', 'matchup', 'result_status', 'sides_confirmed')\n    list_filter = ('round__tournament', 'round')\n    list_editable = ('result_status', 'sides_confirmed')\n    inlines = (DebateTeamInline, DebateAdjudicatorInline)\n    raw_id_fields = ('venue',)",
        "detail": "tabbycat.draw.admin",
        "documentation": {}
    },
    {
        "label": "DebateAdmin",
        "kind": 6,
        "importPath": "tabbycat.draw.admin",
        "description": "tabbycat.draw.admin",
        "peekOfCode": "class DebateAdmin(ModelAdmin):\n    list_display = ('id', 'round', 'bracket', 'matchup', 'result_status', 'sides_confirmed')\n    list_filter = ('round__tournament', 'round')\n    list_editable = ('result_status', 'sides_confirmed')\n    inlines = (DebateTeamInline, DebateAdjudicatorInline)\n    raw_id_fields = ('venue',)\n    actions = ('mark_as_sides_confirmed', 'mark_as_sides_not_confirmed')\n    def get_queryset(self, request):\n        return super().get_queryset(request).select_related(\n            'round__tournament',",
        "detail": "tabbycat.draw.admin",
        "documentation": {}
    },
    {
        "label": "DrawConfig",
        "kind": 6,
        "importPath": "tabbycat.draw.apps",
        "description": "tabbycat.draw.apps",
        "peekOfCode": "class DrawConfig(AppConfig):\n    name = 'draw'\n    verbose_name = _(\"Draw\")",
        "detail": "tabbycat.draw.apps",
        "documentation": {}
    },
    {
        "label": "BaseAdjudicatorContainerConsumer",
        "kind": 6,
        "importPath": "tabbycat.draw.consumers",
        "description": "tabbycat.draw.consumers",
        "peekOfCode": "class BaseAdjudicatorContainerConsumer(SuperuserRequiredWebsocketMixin, RoundWebsocketMixin, JsonWebsocketConsumer):\n    \"\"\"For receiving updates to either debates or preformed panels; making the\n    supplied modifications; and re-broadcasting them. The intent is that the\n    socket provides a dict of objects, which in turn have a dict of attributes\n    that can be updated directly and the original object returned. This avoids\n    having to serialise/re-serialise objects that creates many more queries\"\"\"\n    def receive_json(self, content):\n        \"\"\" Select the appropriate method given the indicated attribute in JSON\n        i.e. from { \"importance\": { \"73\" : \"1\" }, \"componentID\": 2885 } \"\"\"\n        for key in content.keys():",
        "detail": "tabbycat.draw.consumers",
        "documentation": {}
    },
    {
        "label": "DebateEditConsumer",
        "kind": 6,
        "importPath": "tabbycat.draw.consumers",
        "description": "tabbycat.draw.consumers",
        "peekOfCode": "class DebateEditConsumer(BaseAdjudicatorContainerConsumer):\n    group_prefix = 'debates'\n    model = Debate\n    importance_serializer = SimpleDebateImportanceSerializer\n    sides_status_serializer = SimpleDebateSideStatusSerializer\n    adjudicators_serializer = SimpleDebateAllocationSerializer\n    venues_serializer = SimpleDebateVenueSerializer\n    teams_serializer = EditDebateTeamsDebateSerializer\n    access_permission = Permission.EDIT_DEBATEADJUDICATORS\n    def receive_json(self, content):",
        "detail": "tabbycat.draw.consumers",
        "documentation": {}
    },
    {
        "label": "EditDebateOrPanelWorkerMixin",
        "kind": 6,
        "importPath": "tabbycat.draw.consumers",
        "description": "tabbycat.draw.consumers",
        "peekOfCode": "class EditDebateOrPanelWorkerMixin(SyncConsumer):\n    \"\"\" Mixin for consumers that are run by synchronous workers that perform\n    actions to edit and re-serialise debates/panels \"\"\"\n    def log_action(self, extra, round, type):\n        ActionLogEntry.objects.log(type=type, user_id=extra['user_id'],\n                round=round, tournament=round.tournament, content_object=round)\n    def reserialize_panels(self, serialiser, round, panels=None):\n        if not panels:\n            panels = round.preformedpanel_set.all() # TODO: prefetch\n        serialized_panels = serialiser(panels, many=True)",
        "detail": "tabbycat.draw.consumers",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "tabbycat.draw.consumers",
        "description": "tabbycat.draw.consumers",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass BaseAdjudicatorContainerConsumer(SuperuserRequiredWebsocketMixin, RoundWebsocketMixin, JsonWebsocketConsumer):\n    \"\"\"For receiving updates to either debates or preformed panels; making the\n    supplied modifications; and re-broadcasting them. The intent is that the\n    socket provides a dict of objects, which in turn have a dict of attributes\n    that can be updated directly and the original object returned. This avoids\n    having to serialise/re-serialise objects that creates many more queries\"\"\"\n    def receive_json(self, content):\n        \"\"\" Select the appropriate method given the indicated attribute in JSON\n        i.e. from { \"importance\": { \"73\" : \"1\" }, \"componentID\": 2885 } \"\"\"",
        "detail": "tabbycat.draw.consumers",
        "documentation": {}
    },
    {
        "label": "delete_round_draw",
        "kind": 2,
        "importPath": "tabbycat.draw.dbutils",
        "description": "tabbycat.draw.dbutils",
        "peekOfCode": "def delete_round_draw(round, **options):\n    Debate.objects.filter(round=round).delete()\n    round.draw_status = Round.Status.NONE\n    round.save()",
        "detail": "tabbycat.draw.dbutils",
        "documentation": {}
    },
    {
        "label": "BaseDrawManager",
        "kind": 6,
        "importPath": "tabbycat.draw.manager",
        "description": "tabbycat.draw.manager",
        "peekOfCode": "class BaseDrawManager:\n    \"\"\"Creates, modifies and retrieves relevant Debate objects relating to a draw.\"\"\"\n    generator_type = None\n    def __init__(self, round, active_only=True):\n        self.round = round\n        self.teams_in_debate = self.round.tournament.pref('teams_in_debate')\n        self.active_only = active_only\n    def get_relevant_options(self):\n        if self.teams_in_debate == 2:\n            return [",
        "detail": "tabbycat.draw.manager",
        "documentation": {}
    },
    {
        "label": "RandomDrawManager",
        "kind": 6,
        "importPath": "tabbycat.draw.manager",
        "description": "tabbycat.draw.manager",
        "peekOfCode": "class RandomDrawManager(BaseDrawManager):\n    generator_type = \"random\"\n    def get_relevant_options(self):\n        options = super().get_relevant_options()\n        if self.teams_in_debate == 2:\n            options.extend([\"avoid_conflicts\", \"side_allocations\"])\n        return options\nclass ManualDrawManager(BaseDrawManager):\n    generator_type = \"manual\"\n    def get_relevant_options(self):",
        "detail": "tabbycat.draw.manager",
        "documentation": {}
    },
    {
        "label": "ManualDrawManager",
        "kind": 6,
        "importPath": "tabbycat.draw.manager",
        "description": "tabbycat.draw.manager",
        "peekOfCode": "class ManualDrawManager(BaseDrawManager):\n    generator_type = \"manual\"\n    def get_relevant_options(self):\n        return []\nclass PowerPairedDrawManager(BaseDrawManager):\n    generator_type = \"power_paired\"\n    def get_relevant_options(self):\n        options = super().get_relevant_options()\n        if self.teams_in_debate == 2:\n            options.extend([",
        "detail": "tabbycat.draw.manager",
        "documentation": {}
    },
    {
        "label": "PowerPairedDrawManager",
        "kind": 6,
        "importPath": "tabbycat.draw.manager",
        "description": "tabbycat.draw.manager",
        "peekOfCode": "class PowerPairedDrawManager(BaseDrawManager):\n    generator_type = \"power_paired\"\n    def get_relevant_options(self):\n        options = super().get_relevant_options()\n        if self.teams_in_debate == 2:\n            options.extend([\n                \"avoid_conflicts\", \"odd_bracket\", \"pairing_method\",\n                \"pullup_restriction\", \"side_allocations\",\n            ])\n        elif self.teams_in_debate == 4:",
        "detail": "tabbycat.draw.manager",
        "documentation": {}
    },
    {
        "label": "SeededDrawManager",
        "kind": 6,
        "importPath": "tabbycat.draw.manager",
        "description": "tabbycat.draw.manager",
        "peekOfCode": "class SeededDrawManager(BaseDrawManager):\n    generator_type = \"power_paired\"\n    def get_relevant_options(self):\n        options = super().get_relevant_options()\n        if self.teams_in_debate == 2:\n            options.extend([\"avoid_conflicts\", \"pairing_method\", \"side_allocations\"])\n        elif self.teams_in_debate == 4:\n            options.extend([\"assignment_method\"])\n        return options\n    def get_teams(self) -> Tuple[List['Team'], List['Team']]:",
        "detail": "tabbycat.draw.manager",
        "documentation": {}
    },
    {
        "label": "RoundRobinDrawManager",
        "kind": 6,
        "importPath": "tabbycat.draw.manager",
        "description": "tabbycat.draw.manager",
        "peekOfCode": "class RoundRobinDrawManager(BaseDrawManager):\n    generator_type = \"round_robin\"\n    def get_rrseq(self):\n        prior_rrs = list(self.round.tournament.round_set.filter(draw_type=Round.DrawType.ROUNDROBIN).order_by('seq'))\n        try:\n            rr_seq = prior_rrs.index(self.round) + 1 # Dont 0-index\n        except ValueError:\n            raise RuntimeError(\"Tried to calculate an effective round robin seq but couldn't\")\n        return rr_seq\nclass BaseEliminationDrawManager(BaseDrawManager):",
        "detail": "tabbycat.draw.manager",
        "documentation": {}
    },
    {
        "label": "BaseEliminationDrawManager",
        "kind": 6,
        "importPath": "tabbycat.draw.manager",
        "description": "tabbycat.draw.manager",
        "peekOfCode": "class BaseEliminationDrawManager(BaseDrawManager):\n    result_pairing_class = None\n    def get_teams(self) -> Tuple[List['Team'], List['Team']]:\n        breaking_teams = self.round.break_category.breakingteam_set_competing.order_by(\n                'break_rank').select_related('team')\n        return [bt.team for bt in breaking_teams], []\n    def get_results(self):\n        if self.round.prev is not None and self.round.prev.is_break_round:\n            debates = self.round.prev.debate_set_with_prefetches(ordering=('room_rank',), results=True,\n                    adjudicators=False, speakers=False, venues=False)",
        "detail": "tabbycat.draw.manager",
        "documentation": {}
    },
    {
        "label": "EliminationDrawManager",
        "kind": 6,
        "importPath": "tabbycat.draw.manager",
        "description": "tabbycat.draw.manager",
        "peekOfCode": "class EliminationDrawManager(BaseEliminationDrawManager):\n    result_pairing_class = ResultPairing\n    def get_generator_type(self):\n        if self.round.prev is not None and self.round.prev.is_break_round:\n            return \"elimination\"\n        else:\n            return \"first_elimination\"\nclass BPEliminationDrawManager(BaseEliminationDrawManager):\n    result_pairing_class = BPEliminationResultPairing\n    def get_generator_type(self):",
        "detail": "tabbycat.draw.manager",
        "documentation": {}
    },
    {
        "label": "BPEliminationDrawManager",
        "kind": 6,
        "importPath": "tabbycat.draw.manager",
        "description": "tabbycat.draw.manager",
        "peekOfCode": "class BPEliminationDrawManager(BaseEliminationDrawManager):\n    result_pairing_class = BPEliminationResultPairing\n    def get_generator_type(self):\n        break_size = self.round.break_category.break_size\n        if break_size % 6 == 0 and ispow2(break_size // 6):\n            nprev_rounds = self.round.break_category.round_set.filter(seq__lt=self.round.seq).count()\n            if nprev_rounds == 0:\n                return \"partial_elimination\"\n            elif nprev_rounds == 1:\n                return \"after_partial_elimination\"",
        "detail": "tabbycat.draw.manager",
        "documentation": {}
    },
    {
        "label": "DrawManager",
        "kind": 2,
        "importPath": "tabbycat.draw.manager",
        "description": "tabbycat.draw.manager",
        "peekOfCode": "def DrawManager(round, active_only=True):  # noqa: N802 (factory function)\n    teams_in_debate = round.tournament.pref('teams_in_debate')\n    try:\n        if teams_in_debate in [2, 4]:\n            klass = DRAW_MANAGER_CLASSES[(teams_in_debate, round.draw_type)]\n        else:\n            klass = DRAW_MANAGER_CLASSES[(None, round.draw_type)]\n    except KeyError:\n        if teams_in_debate == 2:\n            raise DrawUserError(_(\"The draw type %(type)s can't be used with two-team formats.\") % {'type': round.get_draw_type_display()})",
        "detail": "tabbycat.draw.manager",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "tabbycat.draw.manager",
        "description": "tabbycat.draw.manager",
        "peekOfCode": "logger = logging.getLogger(__name__)\nOPTIONS_TO_CONFIG_MAPPING = {\n    \"avoid_institution\"     : \"draw_rules__avoid_same_institution\",\n    \"avoid_history\"         : \"draw_rules__avoid_team_history\",\n    \"history_penalty\"       : \"draw_rules__team_history_penalty\",\n    \"institution_penalty\"   : \"draw_rules__team_institution_penalty\",\n    \"pullup_debates_penalty\": \"draw_rules__pullup_debates_penalty\",\n    \"side_penalty\"          : \"draw_rules__side_penalty\",\n    \"pairing_penalty\"       : \"draw_rules__pairing_penalty\",\n    \"side_allocations\"      : \"draw_rules__draw_side_allocations\",",
        "detail": "tabbycat.draw.manager",
        "documentation": {}
    },
    {
        "label": "OPTIONS_TO_CONFIG_MAPPING",
        "kind": 5,
        "importPath": "tabbycat.draw.manager",
        "description": "tabbycat.draw.manager",
        "peekOfCode": "OPTIONS_TO_CONFIG_MAPPING = {\n    \"avoid_institution\"     : \"draw_rules__avoid_same_institution\",\n    \"avoid_history\"         : \"draw_rules__avoid_team_history\",\n    \"history_penalty\"       : \"draw_rules__team_history_penalty\",\n    \"institution_penalty\"   : \"draw_rules__team_institution_penalty\",\n    \"pullup_debates_penalty\": \"draw_rules__pullup_debates_penalty\",\n    \"side_penalty\"          : \"draw_rules__side_penalty\",\n    \"pairing_penalty\"       : \"draw_rules__pairing_penalty\",\n    \"side_allocations\"      : \"draw_rules__draw_side_allocations\",\n    \"avoid_conflicts\"       : \"draw_rules__draw_avoid_conflicts\",",
        "detail": "tabbycat.draw.manager",
        "documentation": {}
    },
    {
        "label": "DRAW_MANAGER_CLASSES",
        "kind": 5,
        "importPath": "tabbycat.draw.manager",
        "description": "tabbycat.draw.manager",
        "peekOfCode": "DRAW_MANAGER_CLASSES = {\n    (2, Round.DrawType.RANDOM): RandomDrawManager,\n    (2, Round.DrawType.POWERPAIRED): PowerPairedDrawManager,\n    (2, Round.DrawType.ROUNDROBIN): RoundRobinDrawManager,\n    (2, Round.DrawType.MANUAL): ManualDrawManager,\n    (2, Round.DrawType.ELIMINATION): EliminationDrawManager,\n    (2, Round.DrawType.SEEDED): SeededDrawManager,\n    (4, Round.DrawType.RANDOM): RandomDrawManager,\n    (4, Round.DrawType.MANUAL): ManualDrawManager,\n    (4, Round.DrawType.POWERPAIRED): PowerPairedDrawManager,",
        "detail": "tabbycat.draw.manager",
        "documentation": {}
    },
    {
        "label": "DebateManager",
        "kind": 6,
        "importPath": "tabbycat.draw.models",
        "description": "tabbycat.draw.models",
        "peekOfCode": "class DebateManager(models.Manager):\n    use_for_related_fields = True\n    def get_queryset(self):\n        return super().get_queryset().select_related('round')\nclass Debate(models.Model):\n    STATUS_NONE = 'N'\n    STATUS_POSTPONED = 'P'\n    STATUS_DRAFT = 'D'\n    STATUS_CONFIRMED = 'C'\n    STATUS_CHOICES = (",
        "detail": "tabbycat.draw.models",
        "documentation": {}
    },
    {
        "label": "Debate",
        "kind": 6,
        "importPath": "tabbycat.draw.models",
        "description": "tabbycat.draw.models",
        "peekOfCode": "class Debate(models.Model):\n    STATUS_NONE = 'N'\n    STATUS_POSTPONED = 'P'\n    STATUS_DRAFT = 'D'\n    STATUS_CONFIRMED = 'C'\n    STATUS_CHOICES = (\n        (STATUS_NONE, _(\"none\")),\n        (STATUS_POSTPONED, _(\"postponed\")),\n        (STATUS_DRAFT, _(\"draft\")),\n        (STATUS_CONFIRMED, _(\"confirmed\")),",
        "detail": "tabbycat.draw.models",
        "documentation": {}
    },
    {
        "label": "DebateTeamManager",
        "kind": 6,
        "importPath": "tabbycat.draw.models",
        "description": "tabbycat.draw.models",
        "peekOfCode": "class DebateTeamManager(models.Manager):\n    use_for_related_fields = True\n    def get_queryset(self):\n        return super().get_queryset().order_by('side').select_related('debate')\nclass DebateTeam(models.Model):\n    objects = DebateTeamManager()\n    debate = models.ForeignKey(Debate, models.CASCADE, db_index=True,\n        verbose_name=_(\"debate\"))\n    team = models.ForeignKey('participants.Team', models.PROTECT,\n        verbose_name=_(\"team\"))",
        "detail": "tabbycat.draw.models",
        "documentation": {}
    },
    {
        "label": "DebateTeam",
        "kind": 6,
        "importPath": "tabbycat.draw.models",
        "description": "tabbycat.draw.models",
        "peekOfCode": "class DebateTeam(models.Model):\n    objects = DebateTeamManager()\n    debate = models.ForeignKey(Debate, models.CASCADE, db_index=True,\n        verbose_name=_(\"debate\"))\n    team = models.ForeignKey('participants.Team', models.PROTECT,\n        verbose_name=_(\"team\"))\n    side = models.IntegerField(verbose_name=_(\"side sequence\"))\n    flags = ChoiceArrayField(base_field=models.CharField(max_length=15, choices=DRAW_FLAG_DESCRIPTIONS), blank=True, default=list)\n    class Meta:\n        verbose_name = _(\"debate team\")",
        "detail": "tabbycat.draw.models",
        "documentation": {}
    },
    {
        "label": "MultipleDebateTeamsError",
        "kind": 6,
        "importPath": "tabbycat.draw.models",
        "description": "tabbycat.draw.models",
        "peekOfCode": "class MultipleDebateTeamsError(DebateTeam.MultipleObjectsReturned):\n    pass\nclass NoDebateTeamFoundError(DebateTeam.DoesNotExist):\n    pass\nclass TeamSideAllocation(models.Model):\n    \"\"\"Model to store team side allocations for tournaments like Joynt\n    Scroll (New Zealand). Each team-round combination should have one of these.\n    In tournaments without team side allocations, just don't use this\n    model.\"\"\"\n    round = models.ForeignKey('tournaments.Round', models.CASCADE,",
        "detail": "tabbycat.draw.models",
        "documentation": {}
    },
    {
        "label": "NoDebateTeamFoundError",
        "kind": 6,
        "importPath": "tabbycat.draw.models",
        "description": "tabbycat.draw.models",
        "peekOfCode": "class NoDebateTeamFoundError(DebateTeam.DoesNotExist):\n    pass\nclass TeamSideAllocation(models.Model):\n    \"\"\"Model to store team side allocations for tournaments like Joynt\n    Scroll (New Zealand). Each team-round combination should have one of these.\n    In tournaments without team side allocations, just don't use this\n    model.\"\"\"\n    round = models.ForeignKey('tournaments.Round', models.CASCADE,\n        verbose_name=_(\"round\"))\n    team = models.ForeignKey('participants.Team', models.CASCADE,",
        "detail": "tabbycat.draw.models",
        "documentation": {}
    },
    {
        "label": "TeamSideAllocation",
        "kind": 6,
        "importPath": "tabbycat.draw.models",
        "description": "tabbycat.draw.models",
        "peekOfCode": "class TeamSideAllocation(models.Model):\n    \"\"\"Model to store team side allocations for tournaments like Joynt\n    Scroll (New Zealand). Each team-round combination should have one of these.\n    In tournaments without team side allocations, just don't use this\n    model.\"\"\"\n    round = models.ForeignKey('tournaments.Round', models.CASCADE,\n        verbose_name=_(\"round\"))\n    team = models.ForeignKey('participants.Team', models.CASCADE,\n        verbose_name=_(\"team\"))\n    side = models.IntegerField(verbose_name=_(\"side sequence\"))",
        "detail": "tabbycat.draw.models",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "tabbycat.draw.models",
        "description": "tabbycat.draw.models",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass DebateManager(models.Manager):\n    use_for_related_fields = True\n    def get_queryset(self):\n        return super().get_queryset().select_related('round')\nclass Debate(models.Model):\n    STATUS_NONE = 'N'\n    STATUS_POSTPONED = 'P'\n    STATUS_DRAFT = 'D'\n    STATUS_CONFIRMED = 'C'",
        "detail": "tabbycat.draw.models",
        "documentation": {}
    },
    {
        "label": "populate_opponents",
        "kind": 2,
        "importPath": "tabbycat.draw.prefetch",
        "description": "tabbycat.draw.prefetch",
        "peekOfCode": "def populate_opponents(debateteams, speakers=True):\n    \"\"\"Sets the attribute `_opponent` on each DebateTeam in debateteams, to\n    the DebateTeam representing their opponents.\n    If `speakers` is True, it also prefetches Speaker instances.\n    \"\"\"\n    ids = [dt.id for dt in debateteams]\n    opponent_subq = DebateTeam.objects.filter(\n        debate=OuterRef('debate')).exclude(id=OuterRef('id')).values('id')[:1]\n    debateteams_annotated = DebateTeam.objects.filter(id__in=ids).annotate(\n        opponent_id=Subquery(opponent_subq))",
        "detail": "tabbycat.draw.prefetch",
        "documentation": {}
    },
    {
        "label": "populate_history",
        "kind": 2,
        "importPath": "tabbycat.draw.prefetch",
        "description": "tabbycat.draw.prefetch",
        "peekOfCode": "def populate_history(debates):\n    \"\"\"Sets the attribute _history to the number of times the teams in the\n    debate have seen each other before the round of the debate.\"\"\"\n    debates_by_id = {debate.id: debate for debate in debates}\n    debates_annotated = Debate.objects.filter(id__in=debates_by_id.keys()).annotate(\n        past_debates=RawSQL(\"\"\"\n            SELECT DISTINCT COUNT(past_debate.id)\n            FROM draw_debate AS past_debate\n            JOIN draw_debateteam AS this_aff_dt ON this_aff_dt.debate_id = draw_debate.id\n            JOIN draw_debateteam AS this_neg_dt ON this_neg_dt.debate_id = draw_debate.id",
        "detail": "tabbycat.draw.prefetch",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "tabbycat.draw.prefetch",
        "description": "tabbycat.draw.prefetch",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef populate_opponents(debateteams, speakers=True):\n    \"\"\"Sets the attribute `_opponent` on each DebateTeam in debateteams, to\n    the DebateTeam representing their opponents.\n    If `speakers` is True, it also prefetches Speaker instances.\n    \"\"\"\n    ids = [dt.id for dt in debateteams]\n    opponent_subq = DebateTeam.objects.filter(\n        debate=OuterRef('debate')).exclude(id=OuterRef('id')).values('id')[:1]\n    debateteams_annotated = DebateTeam.objects.filter(id__in=ids).annotate(",
        "detail": "tabbycat.draw.prefetch",
        "documentation": {}
    },
    {
        "label": "EditDebateTeamsDebateSerializer",
        "kind": 6,
        "importPath": "tabbycat.draw.serializers",
        "description": "tabbycat.draw.serializers",
        "peekOfCode": "class EditDebateTeamsDebateSerializer(DebateSerializerMixin):\n    \"\"\" Returns debates for the Edit Debate Teams view\"\"\"\n    def team_representation(self, debate_team):\n        # Only need the PK of the teams as they are fetched separately\n        return debate_team.team.pk\nclass SimpleDebateSideStatusSerializer(DebateSerializerMixin):\n    class Meta:\n        model = DebateSerializerMixin.Meta.model\n        fields = ('id', 'sides_confirmed')\nclass EditDebateTeamsTeamSerializer(TeamSerializer, VueDraggableItemMixin):",
        "detail": "tabbycat.draw.serializers",
        "documentation": {}
    },
    {
        "label": "SimpleDebateSideStatusSerializer",
        "kind": 6,
        "importPath": "tabbycat.draw.serializers",
        "description": "tabbycat.draw.serializers",
        "peekOfCode": "class SimpleDebateSideStatusSerializer(DebateSerializerMixin):\n    class Meta:\n        model = DebateSerializerMixin.Meta.model\n        fields = ('id', 'sides_confirmed')\nclass EditDebateTeamsTeamSerializer(TeamSerializer, VueDraggableItemMixin):\n    \"\"\" Returns teams for use in the allocate Debate Teams view \"\"\"\n    class Meta:\n        model = TeamSerializer.Meta.model\n        fields = (*TeamSerializer.Meta.fields,\n                  *VueDraggableItemMixin.Meta.fields)",
        "detail": "tabbycat.draw.serializers",
        "documentation": {}
    },
    {
        "label": "EditDebateTeamsTeamSerializer",
        "kind": 6,
        "importPath": "tabbycat.draw.serializers",
        "description": "tabbycat.draw.serializers",
        "peekOfCode": "class EditDebateTeamsTeamSerializer(TeamSerializer, VueDraggableItemMixin):\n    \"\"\" Returns teams for use in the allocate Debate Teams view \"\"\"\n    class Meta:\n        model = TeamSerializer.Meta.model\n        fields = (*TeamSerializer.Meta.fields,\n                  *VueDraggableItemMixin.Meta.fields)",
        "detail": "tabbycat.draw.serializers",
        "documentation": {}
    },
    {
        "label": "BaseDrawTableBuilder",
        "kind": 6,
        "importPath": "tabbycat.draw.tables",
        "description": "tabbycat.draw.tables",
        "peekOfCode": "class BaseDrawTableBuilder(TabbycatTableBuilder):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.side_history_separator = \" \" if self.tournament.pref('teams_in_debate') == 4 else \" / \"\n    def highlight_rows_by_column_value(self, column):\n        highlighted_rows = [i for i in range(1, len(self.data))\n                if self.data[i][column] != self.data[i-1][column]]\n        for i in highlighted_rows:\n            self.data[i] = [self._convert_cell(cell) for cell in self.data[i]]\n            for cell in self.data[i]:",
        "detail": "tabbycat.draw.tables",
        "documentation": {}
    },
    {
        "label": "PublicDrawTableBuilder",
        "kind": 6,
        "importPath": "tabbycat.draw.tables",
        "description": "tabbycat.draw.tables",
        "peekOfCode": "class PublicDrawTableBuilder(BaseDrawTableBuilder):\n    def get_sides(self, debates: List['Debate']) -> int:\n        return max([dt.side for debate in debates for dt in debate.debateteams], default=self.tournament.pref('teams_in_debate') - 1) + 1\n    def add_debate_team_columns(self, debates, highlight=[]):\n        all_sides_confirmed = all(debate.sides_confirmed for debate in debates)  # should already be fetched\n        for side in range(self.get_sides(debates)):\n            # For BP team names are often longer than the full position label\n            if self.tournament.pref('teams_in_debate') > 2:\n                side_name = get_side_name(self.tournament, side, 'abbr')\n            else:",
        "detail": "tabbycat.draw.tables",
        "documentation": {}
    },
    {
        "label": "AdminDrawTableBuilder",
        "kind": 6,
        "importPath": "tabbycat.draw.tables",
        "description": "tabbycat.draw.tables",
        "peekOfCode": "class AdminDrawTableBuilder(PublicDrawTableBuilder):\n    \"\"\"This just builds on the public draw table builder, so just extend it.\"\"\"\n    def add_room_rank_columns(self, debates):\n        header = {\n            'key': \"room-rank\",\n            'icon': 'bar-chart-2',\n            'tooltip': _(\"Room rank of this debate\"),\n        }\n        self.add_column(header, [debate.room_rank for debate in debates])\n    def add_debate_bracket_columns(self, debates):",
        "detail": "tabbycat.draw.tables",
        "documentation": {}
    },
    {
        "label": "BasePositionBalanceReportTableBuilder",
        "kind": 6,
        "importPath": "tabbycat.draw.tables",
        "description": "tabbycat.draw.tables",
        "peekOfCode": "class BasePositionBalanceReportTableBuilder(BaseDrawTableBuilder):\n    \"\"\"Really more of a mixin than a builder, just adds some common\n    functionality.\"\"\"\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.exponent = self.tournament.pref('bp_position_cost_exponent')\n        cost_pref = self.tournament.pref('bp_position_cost')\n        α = self.tournament.pref('bp_renyi_order')  # noqa: N806\n        if cost_pref == \"entropy\":\n            self.position_cost_func = BPHungarianDrawGenerator.get_entropy_position_cost_function(α)",
        "detail": "tabbycat.draw.tables",
        "documentation": {}
    },
    {
        "label": "PositionBalanceReportSummaryTableBuilder",
        "kind": 6,
        "importPath": "tabbycat.draw.tables",
        "description": "tabbycat.draw.tables",
        "peekOfCode": "class PositionBalanceReportSummaryTableBuilder(BasePositionBalanceReportTableBuilder):\n    STATUSES = {\n        \"regression\": gettext_lazy(\"Went from balanced to imbalanced\"),\n        \"resolved\": gettext_lazy(\"Went from imbalanced to balanced\"),\n        \"improving\": gettext_lazy(\"Best improvement possible, still imbalanced\"),\n        \"still-bad\": gettext_lazy(\"Was imbalanced and still imbalanced\"),\n    }\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.sort_key = \"cost\"",
        "detail": "tabbycat.draw.tables",
        "documentation": {}
    },
    {
        "label": "PositionBalanceReportDrawTableBuilder",
        "kind": 6,
        "importPath": "tabbycat.draw.tables",
        "description": "tabbycat.draw.tables",
        "peekOfCode": "class PositionBalanceReportDrawTableBuilder(BasePositionBalanceReportTableBuilder):\n    def build(self, debates, teams, side_histories_before, side_histories_now, standings):\n        self.debates = debates\n        self.teams = teams\n        self.side_histories_before = side_histories_before\n        self.side_histories_now = side_histories_now\n        self.standings = standings\n        self.add_permitted_points_column()\n        # Just act as if all sides are confirmed (i.e. ignore the sides_confirmed field)\n        # If any sides aren't confirmed, there will be a warning on the page.",
        "detail": "tabbycat.draw.tables",
        "documentation": {}
    },
    {
        "label": "DebateSide",
        "kind": 6,
        "importPath": "tabbycat.draw.types",
        "description": "tabbycat.draw.types",
        "peekOfCode": "class DebateSide(IntEnum):\n    AFF = 0\n    NEG = 1\n    OG = 0\n    OO = 1\n    CG = 2\n    CO = 3\n    BYE = -1",
        "detail": "tabbycat.draw.types",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "tabbycat.draw.urls_admin",
        "description": "tabbycat.draw.urls_admin",
        "peekOfCode": "urlpatterns = [\n    path('round/<int:round_seq>/', include([\n        # Creation/Release\n        path('',\n            views.AdminDrawView.as_view(),\n            name='draw'),\n        path('create/',\n            views.CreateDrawView.as_view(),\n            name='draw-create'),\n        path('details/',",
        "detail": "tabbycat.draw.urls_admin",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "tabbycat.draw.urls_assistant",
        "description": "tabbycat.draw.urls_assistant",
        "peekOfCode": "urlpatterns = [\n    # Display\n    path('display/',\n        views.AssistantDrawDisplayView.as_view(),\n        name='draw-assistant-display'),\n    path('round/current/display-by-venue/',\n        views.AssistantDrawDisplayForCurrentRoundsByVenueView.as_view(),\n        name='draw-assistant-display-current-rounds-by-venue'),\n    path('round/current/display-by-team/',\n        views.AssistantDrawDisplayForCurrentRoundsByTeamView.as_view(),",
        "detail": "tabbycat.draw.urls_assistant",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "tabbycat.draw.urls_public",
        "description": "tabbycat.draw.urls_public",
        "peekOfCode": "urlpatterns = [\n    path('',\n        views.PublicDrawForCurrentRoundsView.as_view(),\n        name='draw-public-current-rounds'),\n    path('round/<int:round_seq>/',\n        views.PublicDrawForRoundView.as_view(),\n        name='draw-public-for-round'),\n    path('sides/',\n        views.PublicSideAllocationsView.as_view(),\n        name='draw-public-side-allocations'),",
        "detail": "tabbycat.draw.urls_public",
        "documentation": {}
    },
    {
        "label": "BaseDisplayDrawTableView",
        "kind": 6,
        "importPath": "tabbycat.draw.views",
        "description": "tabbycat.draw.views",
        "peekOfCode": "class BaseDisplayDrawTableView(TournamentMixin, VueTableTemplateView):\n    \"\"\"Base class for views showing a draw table to the public in some way.\n    Subclasses are *not* necessarily public views; they may be admin/assistant\n    views intended to facilitate displaying the draw in the general assembly\n    room. Since, whether a public, assistant or admin view, the content on it\n    is intended for consumption by the public, the table is always built as if\n    it were a public view.\"\"\"\n    template_name = 'draw_display_by.html'\n    sort_key = 'venue'\n    page_emoji = '👏'",
        "detail": "tabbycat.draw.views",
        "documentation": {}
    },
    {
        "label": "BaseDisplayDrawForSpecificRoundTableView",
        "kind": 6,
        "importPath": "tabbycat.draw.views",
        "description": "tabbycat.draw.views",
        "peekOfCode": "class BaseDisplayDrawForSpecificRoundTableView(RoundMixin, BaseDisplayDrawTableView):\n    @property\n    def rounds(self):\n        return [self.round]\n    def get_page_subtitle(self):\n        # Skip the RoundMixin implementation\n        return BaseDisplayDrawTableView.get_page_subtitle(self)\n    def get_context_data(self, **kwargs):\n        kwargs[\"round\"] = self.round\n        return super().get_context_data(**kwargs)",
        "detail": "tabbycat.draw.views",
        "documentation": {}
    },
    {
        "label": "BaseDisplayDrawForCurrentRoundsTableView",
        "kind": 6,
        "importPath": "tabbycat.draw.views",
        "description": "tabbycat.draw.views",
        "peekOfCode": "class BaseDisplayDrawForCurrentRoundsTableView(BaseDisplayDrawTableView):\n    tables_orientation = 'rows'\n    @property\n    def rounds(self):\n        return self.tournament.current_rounds\n# ==============================================================================\n# Viewing Draw (Public)\n# ==============================================================================\nclass PublicDrawMixin(PublicTournamentPageMixin):\n    \"\"\"Governs permissions, particularly those relating to draw release.\"\"\"",
        "detail": "tabbycat.draw.views",
        "documentation": {}
    },
    {
        "label": "PublicDrawMixin",
        "kind": 6,
        "importPath": "tabbycat.draw.views",
        "description": "tabbycat.draw.views",
        "peekOfCode": "class PublicDrawMixin(PublicTournamentPageMixin):\n    \"\"\"Governs permissions, particularly those relating to draw release.\"\"\"\n    empty_table_title = gettext_lazy(\"The draw for this round hasn't been released.\")\n    @cached_property\n    def draws_available(self):\n        return any(r.draw_status == Round.Status.RELEASED for r in self.rounds)\n    @classmethod\n    def get_debates_for_round(cls, round):\n        if round.draw_status != Round.Status.RELEASED:\n            return Debate.objects.none()",
        "detail": "tabbycat.draw.views",
        "documentation": {}
    },
    {
        "label": "PublicDrawForRoundView",
        "kind": 6,
        "importPath": "tabbycat.draw.views",
        "description": "tabbycat.draw.views",
        "peekOfCode": "class PublicDrawForRoundView(PublicDrawMixin, BaseDisplayDrawForSpecificRoundTableView):\n    def is_page_enabled(self, tournament):\n        return tournament.pref('public_draw') == 'all-released'\nclass PublicDrawForCurrentRoundsView(PublicDrawMixin, BaseDisplayDrawForCurrentRoundsTableView):\n    def is_page_enabled(self, tournament):\n        return tournament.pref('public_draw') == 'current'\nclass PublicAllDrawsAllTournamentsView(PublicTournamentPageMixin, BaseDisplayDrawTableView):\n    public_page_preference = 'enable_mass_draws'\n    @property\n    def rounds(self):",
        "detail": "tabbycat.draw.views",
        "documentation": {}
    },
    {
        "label": "PublicDrawForCurrentRoundsView",
        "kind": 6,
        "importPath": "tabbycat.draw.views",
        "description": "tabbycat.draw.views",
        "peekOfCode": "class PublicDrawForCurrentRoundsView(PublicDrawMixin, BaseDisplayDrawForCurrentRoundsTableView):\n    def is_page_enabled(self, tournament):\n        return tournament.pref('public_draw') == 'current'\nclass PublicAllDrawsAllTournamentsView(PublicTournamentPageMixin, BaseDisplayDrawTableView):\n    public_page_preference = 'enable_mass_draws'\n    @property\n    def rounds(self):\n        return []\n    def get_page_title(self):\n        return _(\"All Debates for All Rounds of %(tournament)s\") % {'tournament': self.tournament.name}",
        "detail": "tabbycat.draw.views",
        "documentation": {}
    },
    {
        "label": "PublicAllDrawsAllTournamentsView",
        "kind": 6,
        "importPath": "tabbycat.draw.views",
        "description": "tabbycat.draw.views",
        "peekOfCode": "class PublicAllDrawsAllTournamentsView(PublicTournamentPageMixin, BaseDisplayDrawTableView):\n    public_page_preference = 'enable_mass_draws'\n    @property\n    def rounds(self):\n        return []\n    def get_page_title(self):\n        return _(\"All Debates for All Rounds of %(tournament)s\") % {'tournament': self.tournament.name}\n    def get_page_subtitle(self):\n        return None\n    def get_page_emoji(self):",
        "detail": "tabbycat.draw.views",
        "documentation": {}
    },
    {
        "label": "BriefingRoomDrawTableMixin",
        "kind": 6,
        "importPath": "tabbycat.draw.views",
        "description": "tabbycat.draw.views",
        "peekOfCode": "class BriefingRoomDrawTableMixin:\n    \"\"\"Mixin for views that get projected in the briefing room, to be accessed\n    only by admins and assistants.\"\"\"\n    def get_context_data(self, **kwargs):\n        kwargs['no_popovers'] = True\n        return super().get_context_data(**kwargs)\nclass BriefingRoomDrawByVenueTableMixin(BriefingRoomDrawTableMixin):\n    # inherit everything, this class is kept in code for ease of reading\n    pass\nclass BriefingRoomDrawByTeamTableMixin(BriefingRoomDrawTableMixin):",
        "detail": "tabbycat.draw.views",
        "documentation": {}
    },
    {
        "label": "BriefingRoomDrawByVenueTableMixin",
        "kind": 6,
        "importPath": "tabbycat.draw.views",
        "description": "tabbycat.draw.views",
        "peekOfCode": "class BriefingRoomDrawByVenueTableMixin(BriefingRoomDrawTableMixin):\n    # inherit everything, this class is kept in code for ease of reading\n    pass\nclass BriefingRoomDrawByTeamTableMixin(BriefingRoomDrawTableMixin):\n    sort_key = '' # Leave with default sort order\n    def populate_table(self, debates, table):\n        # unicodedata.normalize gets accented characters (e.g. \"Éothéod\") to sort correctly\n        byes = [d for d in debates if d.is_bye]\n        debates = [d for d in debates if not d.is_bye]\n        draw_by_team = [(debate, debate.get_team(side)) for debate, side in product(debates, self.tournament.sides)]",
        "detail": "tabbycat.draw.views",
        "documentation": {}
    },
    {
        "label": "BriefingRoomDrawByTeamTableMixin",
        "kind": 6,
        "importPath": "tabbycat.draw.views",
        "description": "tabbycat.draw.views",
        "peekOfCode": "class BriefingRoomDrawByTeamTableMixin(BriefingRoomDrawTableMixin):\n    sort_key = '' # Leave with default sort order\n    def populate_table(self, debates, table):\n        # unicodedata.normalize gets accented characters (e.g. \"Éothéod\") to sort correctly\n        byes = [d for d in debates if d.is_bye]\n        debates = [d for d in debates if not d.is_bye]\n        draw_by_team = [(debate, debate.get_team(side)) for debate, side in product(debates, self.tournament.sides)]\n        draw_by_team.extend([(debate, debate.get_team('bye')) for debate in byes])\n        draw_by_team.sort(key=lambda x: unicodedata.normalize('NFKD', table._team_short_name(x[1])))\n        if len(draw_by_team) == 0:",
        "detail": "tabbycat.draw.views",
        "documentation": {}
    },
    {
        "label": "AdminDrawDisplayForSpecificRoundByVenueView",
        "kind": 6,
        "importPath": "tabbycat.draw.views",
        "description": "tabbycat.draw.views",
        "peekOfCode": "class AdminDrawDisplayForSpecificRoundByVenueView(AdministratorMixin,\n        BriefingRoomDrawByVenueTableMixin, BaseDisplayDrawForSpecificRoundTableView):\n    view_permission = Permission.VIEW_BRIEFING_DRAW\nclass AdminDrawDisplayForSpecificRoundByTeamView(AdministratorMixin,\n        BriefingRoomDrawByTeamTableMixin, BaseDisplayDrawForSpecificRoundTableView):\n    view_permission = Permission.VIEW_BRIEFING_DRAW\nclass AdminDrawDisplayForCurrentRoundsByVenueView(AdministratorMixin,\n        BriefingRoomDrawByVenueTableMixin, BaseDisplayDrawForCurrentRoundsTableView):\n    view_permission = Permission.VIEW_BRIEFING_DRAW\nclass AdminDrawDisplayForCurrentRoundsByTeamView(AdministratorMixin,",
        "detail": "tabbycat.draw.views",
        "documentation": {}
    },
    {
        "label": "AdminDrawDisplayForSpecificRoundByTeamView",
        "kind": 6,
        "importPath": "tabbycat.draw.views",
        "description": "tabbycat.draw.views",
        "peekOfCode": "class AdminDrawDisplayForSpecificRoundByTeamView(AdministratorMixin,\n        BriefingRoomDrawByTeamTableMixin, BaseDisplayDrawForSpecificRoundTableView):\n    view_permission = Permission.VIEW_BRIEFING_DRAW\nclass AdminDrawDisplayForCurrentRoundsByVenueView(AdministratorMixin,\n        BriefingRoomDrawByVenueTableMixin, BaseDisplayDrawForCurrentRoundsTableView):\n    view_permission = Permission.VIEW_BRIEFING_DRAW\nclass AdminDrawDisplayForCurrentRoundsByTeamView(AdministratorMixin,\n        BriefingRoomDrawByTeamTableMixin, BaseDisplayDrawForCurrentRoundsTableView):\n    view_permission = Permission.VIEW_BRIEFING_DRAW\nclass AssistantDrawDisplayForSpecificRoundByVenueView(OptionalAssistantTournamentPageMixin,",
        "detail": "tabbycat.draw.views",
        "documentation": {}
    },
    {
        "label": "AdminDrawDisplayForCurrentRoundsByVenueView",
        "kind": 6,
        "importPath": "tabbycat.draw.views",
        "description": "tabbycat.draw.views",
        "peekOfCode": "class AdminDrawDisplayForCurrentRoundsByVenueView(AdministratorMixin,\n        BriefingRoomDrawByVenueTableMixin, BaseDisplayDrawForCurrentRoundsTableView):\n    view_permission = Permission.VIEW_BRIEFING_DRAW\nclass AdminDrawDisplayForCurrentRoundsByTeamView(AdministratorMixin,\n        BriefingRoomDrawByTeamTableMixin, BaseDisplayDrawForCurrentRoundsTableView):\n    view_permission = Permission.VIEW_BRIEFING_DRAW\nclass AssistantDrawDisplayForSpecificRoundByVenueView(OptionalAssistantTournamentPageMixin,\n        BriefingRoomDrawByVenueTableMixin, BaseDisplayDrawForSpecificRoundTableView):\n    assistant_page_permissions = ['all_areas', 'results_draw']\n    def is_page_enabled(self, tournament):",
        "detail": "tabbycat.draw.views",
        "documentation": {}
    },
    {
        "label": "AdminDrawDisplayForCurrentRoundsByTeamView",
        "kind": 6,
        "importPath": "tabbycat.draw.views",
        "description": "tabbycat.draw.views",
        "peekOfCode": "class AdminDrawDisplayForCurrentRoundsByTeamView(AdministratorMixin,\n        BriefingRoomDrawByTeamTableMixin, BaseDisplayDrawForCurrentRoundsTableView):\n    view_permission = Permission.VIEW_BRIEFING_DRAW\nclass AssistantDrawDisplayForSpecificRoundByVenueView(OptionalAssistantTournamentPageMixin,\n        BriefingRoomDrawByVenueTableMixin, BaseDisplayDrawForSpecificRoundTableView):\n    assistant_page_permissions = ['all_areas', 'results_draw']\n    def is_page_enabled(self, tournament):\n        return self.round.is_current and super().is_page_enabled(tournament)\nclass AssistantDrawDisplayForSpecificRoundByTeamView(OptionalAssistantTournamentPageMixin,\n        BriefingRoomDrawByTeamTableMixin, BaseDisplayDrawForSpecificRoundTableView):",
        "detail": "tabbycat.draw.views",
        "documentation": {}
    },
    {
        "label": "AssistantDrawDisplayForSpecificRoundByVenueView",
        "kind": 6,
        "importPath": "tabbycat.draw.views",
        "description": "tabbycat.draw.views",
        "peekOfCode": "class AssistantDrawDisplayForSpecificRoundByVenueView(OptionalAssistantTournamentPageMixin,\n        BriefingRoomDrawByVenueTableMixin, BaseDisplayDrawForSpecificRoundTableView):\n    assistant_page_permissions = ['all_areas', 'results_draw']\n    def is_page_enabled(self, tournament):\n        return self.round.is_current and super().is_page_enabled(tournament)\nclass AssistantDrawDisplayForSpecificRoundByTeamView(OptionalAssistantTournamentPageMixin,\n        BriefingRoomDrawByTeamTableMixin, BaseDisplayDrawForSpecificRoundTableView):\n    assistant_page_permissions = ['all_areas', 'results_draw']\n    def is_page_enabled(self, tournament):\n        return self.round.is_current and super().is_page_enabled(tournament)",
        "detail": "tabbycat.draw.views",
        "documentation": {}
    },
    {
        "label": "AssistantDrawDisplayForSpecificRoundByTeamView",
        "kind": 6,
        "importPath": "tabbycat.draw.views",
        "description": "tabbycat.draw.views",
        "peekOfCode": "class AssistantDrawDisplayForSpecificRoundByTeamView(OptionalAssistantTournamentPageMixin,\n        BriefingRoomDrawByTeamTableMixin, BaseDisplayDrawForSpecificRoundTableView):\n    assistant_page_permissions = ['all_areas', 'results_draw']\n    def is_page_enabled(self, tournament):\n        return self.round.is_current and super().is_page_enabled(tournament)\nclass AssistantDrawDisplayForCurrentRoundsByVenueView(OptionalAssistantTournamentPageMixin,\n        BriefingRoomDrawByVenueTableMixin, BaseDisplayDrawForCurrentRoundsTableView):\n    assistant_page_permissions = ['all_areas', 'results_draw']\nclass AssistantDrawDisplayForCurrentRoundsByTeamView(OptionalAssistantTournamentPageMixin,\n        BriefingRoomDrawByTeamTableMixin, BaseDisplayDrawForCurrentRoundsTableView):",
        "detail": "tabbycat.draw.views",
        "documentation": {}
    },
    {
        "label": "AssistantDrawDisplayForCurrentRoundsByVenueView",
        "kind": 6,
        "importPath": "tabbycat.draw.views",
        "description": "tabbycat.draw.views",
        "peekOfCode": "class AssistantDrawDisplayForCurrentRoundsByVenueView(OptionalAssistantTournamentPageMixin,\n        BriefingRoomDrawByVenueTableMixin, BaseDisplayDrawForCurrentRoundsTableView):\n    assistant_page_permissions = ['all_areas', 'results_draw']\nclass AssistantDrawDisplayForCurrentRoundsByTeamView(OptionalAssistantTournamentPageMixin,\n        BriefingRoomDrawByTeamTableMixin, BaseDisplayDrawForCurrentRoundsTableView):\n    assistant_page_permissions = ['all_areas', 'results_draw']\n# ==============================================================================\n# Draw Alerts Utilities (Admin)\n# ==============================================================================\nclass AdminDrawUtilitiesMixin:",
        "detail": "tabbycat.draw.views",
        "documentation": {}
    },
    {
        "label": "AssistantDrawDisplayForCurrentRoundsByTeamView",
        "kind": 6,
        "importPath": "tabbycat.draw.views",
        "description": "tabbycat.draw.views",
        "peekOfCode": "class AssistantDrawDisplayForCurrentRoundsByTeamView(OptionalAssistantTournamentPageMixin,\n        BriefingRoomDrawByTeamTableMixin, BaseDisplayDrawForCurrentRoundsTableView):\n    assistant_page_permissions = ['all_areas', 'results_draw']\n# ==============================================================================\n# Draw Alerts Utilities (Admin)\n# ==============================================================================\nclass AdminDrawUtilitiesMixin:\n    \"\"\"Shared between the admin draw and admin display pages.\"\"\"\n    def get_draw(self):\n        if not hasattr(self, '_draw'):",
        "detail": "tabbycat.draw.views",
        "documentation": {}
    },
    {
        "label": "AdminDrawUtilitiesMixin",
        "kind": 6,
        "importPath": "tabbycat.draw.views",
        "description": "tabbycat.draw.views",
        "peekOfCode": "class AdminDrawUtilitiesMixin:\n    \"\"\"Shared between the admin draw and admin display pages.\"\"\"\n    def get_draw(self):\n        if not hasattr(self, '_draw'):\n            self._draw = self.round.debate_set_with_prefetches(ordering=('room_rank',),\n                    institutions=True, venues=True)\n        return self._draw\n    @cached_property\n    def adjudicator_conflicts(self):\n        return adjudicator_conflicts_display(self.get_draw())",
        "detail": "tabbycat.draw.views",
        "documentation": {}
    },
    {
        "label": "BaseDrawDisplayIndexView",
        "kind": 6,
        "importPath": "tabbycat.draw.views",
        "description": "tabbycat.draw.views",
        "peekOfCode": "class BaseDrawDisplayIndexView(AdminDrawUtilitiesMixin, RoundMixin, TemplateView):\n    pass\nclass AdminDrawDisplayView(AdministratorMixin, BaseDrawDisplayIndexView):\n    template_name = 'draw_display_admin.html'\n    view_permission = True\nclass AssistantDrawDisplayView(CurrentRoundMixin, OptionalAssistantTournamentPageMixin, BaseDrawDisplayIndexView):\n    template_name = 'draw_display_assistant.html'\n    assistant_page_permissions = ['all_areas', 'results_draw']\nclass EmailAdjudicatorAssignmentsView(RoundTemplateEmailCreateView):\n    page_subtitle = _(\"Adjudicator Assignments\")",
        "detail": "tabbycat.draw.views",
        "documentation": {}
    },
    {
        "label": "AdminDrawDisplayView",
        "kind": 6,
        "importPath": "tabbycat.draw.views",
        "description": "tabbycat.draw.views",
        "peekOfCode": "class AdminDrawDisplayView(AdministratorMixin, BaseDrawDisplayIndexView):\n    template_name = 'draw_display_admin.html'\n    view_permission = True\nclass AssistantDrawDisplayView(CurrentRoundMixin, OptionalAssistantTournamentPageMixin, BaseDrawDisplayIndexView):\n    template_name = 'draw_display_assistant.html'\n    assistant_page_permissions = ['all_areas', 'results_draw']\nclass EmailAdjudicatorAssignmentsView(RoundTemplateEmailCreateView):\n    page_subtitle = _(\"Adjudicator Assignments\")\n    event = BulkNotification.EventType.ADJ_DRAW\n    subject_template = 'adj_email_subject'",
        "detail": "tabbycat.draw.views",
        "documentation": {}
    },
    {
        "label": "AssistantDrawDisplayView",
        "kind": 6,
        "importPath": "tabbycat.draw.views",
        "description": "tabbycat.draw.views",
        "peekOfCode": "class AssistantDrawDisplayView(CurrentRoundMixin, OptionalAssistantTournamentPageMixin, BaseDrawDisplayIndexView):\n    template_name = 'draw_display_assistant.html'\n    assistant_page_permissions = ['all_areas', 'results_draw']\nclass EmailAdjudicatorAssignmentsView(RoundTemplateEmailCreateView):\n    page_subtitle = _(\"Adjudicator Assignments\")\n    event = BulkNotification.EventType.ADJ_DRAW\n    subject_template = 'adj_email_subject'\n    message_template = 'adj_email_message'\n    round_redirect_pattern_name = 'draw-display'\n    dadj_type_display = dict(DebateAdjudicator.TYPE_CHOICES)",
        "detail": "tabbycat.draw.views",
        "documentation": {}
    },
    {
        "label": "EmailAdjudicatorAssignmentsView",
        "kind": 6,
        "importPath": "tabbycat.draw.views",
        "description": "tabbycat.draw.views",
        "peekOfCode": "class EmailAdjudicatorAssignmentsView(RoundTemplateEmailCreateView):\n    page_subtitle = _(\"Adjudicator Assignments\")\n    event = BulkNotification.EventType.ADJ_DRAW\n    subject_template = 'adj_email_subject'\n    message_template = 'adj_email_message'\n    round_redirect_pattern_name = 'draw-display'\n    dadj_type_display = dict(DebateAdjudicator.TYPE_CHOICES)\n    def get_extra(self):\n        extra = super().get_extra()\n        extra['url'] = self.request.build_absolute_uri(",
        "detail": "tabbycat.draw.views",
        "documentation": {}
    },
    {
        "label": "EmailTeamAssignmentsView",
        "kind": 6,
        "importPath": "tabbycat.draw.views",
        "description": "tabbycat.draw.views",
        "peekOfCode": "class EmailTeamAssignmentsView(RoundTemplateEmailCreateView):\n    page_subtitle = _(\"Team Pairings\")\n    event = BulkNotification.EventType.TEAM_DRAW\n    subject_template = 'team_draw_email_subject'\n    message_template = 'team_draw_email_message'\n    round_redirect_pattern_name = 'draw-display'\n    def get_queryset(self):\n        return Speaker.objects.filter(team__debateteam__debate__round=self.round).select_related('team')\n# ==============================================================================\n# Draw Creation (Admin)",
        "detail": "tabbycat.draw.views",
        "documentation": {}
    },
    {
        "label": "AdminDrawView",
        "kind": 6,
        "importPath": "tabbycat.draw.views",
        "description": "tabbycat.draw.views",
        "peekOfCode": "class AdminDrawView(RoundMixin, AdministratorMixin, AdminDrawUtilitiesMixin, VueTableTemplateView):\n    detailed = False\n    view_permission = Permission.VIEW_ADMIN_DRAW\n    def get_page_title(self):\n        round = self.round\n        self.page_emoji = '👀'\n        if round.draw_status == Round.Status.NONE:\n            title = _(\"No Draw\")\n        elif round.draw_status == Round.Status.DRAFT:\n            title = _(\"Draft Draw\")",
        "detail": "tabbycat.draw.views",
        "documentation": {}
    },
    {
        "label": "AdminDrawWithDetailsView",
        "kind": 6,
        "importPath": "tabbycat.draw.views",
        "description": "tabbycat.draw.views",
        "peekOfCode": "class AdminDrawWithDetailsView(AdminDrawView):\n    detailed = True\n    page_emoji = '👀'\n    use_template_subtitle = False  # Use the \"for Round n\" subtitle\n    def get_page_title(self):\n        return _(\"Draw with Details\")\n    def get_template_names(self):\n        return [\"draw_subpage.html\"]\nclass PositionBalanceReportView(RoundMixin, AdministratorMixin, VueTableTemplateView):\n    page_emoji = \"⚖\"",
        "detail": "tabbycat.draw.views",
        "documentation": {}
    },
    {
        "label": "PositionBalanceReportView",
        "kind": 6,
        "importPath": "tabbycat.draw.views",
        "description": "tabbycat.draw.views",
        "peekOfCode": "class PositionBalanceReportView(RoundMixin, AdministratorMixin, VueTableTemplateView):\n    page_emoji = \"⚖\"\n    page_title = _(\"Position Balance Report\")\n    tables_orientation = 'rows'\n    def get_context_data(self, **kwargs):\n        kwargs['cost_func'] = self.get_position_cost_function_str()\n        return super().get_context_data(**kwargs)\n    def get_position_cost_function_str(self):\n        cost_func = self.tournament.pref('bp_position_cost')\n        if cost_func == 'entropy':",
        "detail": "tabbycat.draw.views",
        "documentation": {}
    },
    {
        "label": "DrawStatusEdit",
        "kind": 6,
        "importPath": "tabbycat.draw.views",
        "description": "tabbycat.draw.views",
        "peekOfCode": "class DrawStatusEdit(LogActionMixin, AdministratorMixin, RoundMixin, PostOnlyRedirectView):\n    round_redirect_pattern_name = 'draw'\n    view_permission = Permission.GENERATE_DEBATE\nclass CreateDrawView(DrawStatusEdit):\n    edit_permission = Permission.GENERATE_DEBATE\n    action_log_type = ActionLogEntry.ActionType.DRAW_CREATE\n    def post(self, request, *args, **kwargs):\n        if self.round.draw_status != Round.Status.NONE:\n            messages.error(request, _(\"Could not create draw for %(round)s, there was already a draw!\") % {'round': self.round.name})\n            return super().post(request, *args, **kwargs)",
        "detail": "tabbycat.draw.views",
        "documentation": {}
    },
    {
        "label": "CreateDrawView",
        "kind": 6,
        "importPath": "tabbycat.draw.views",
        "description": "tabbycat.draw.views",
        "peekOfCode": "class CreateDrawView(DrawStatusEdit):\n    edit_permission = Permission.GENERATE_DEBATE\n    action_log_type = ActionLogEntry.ActionType.DRAW_CREATE\n    def post(self, request, *args, **kwargs):\n        if self.round.draw_status != Round.Status.NONE:\n            messages.error(request, _(\"Could not create draw for %(round)s, there was already a draw!\") % {'round': self.round.name})\n            return super().post(request, *args, **kwargs)\n        try:\n            manager = DrawManager(self.round)\n            manager.create()",
        "detail": "tabbycat.draw.views",
        "documentation": {}
    },
    {
        "label": "ConfirmDrawCreationView",
        "kind": 6,
        "importPath": "tabbycat.draw.views",
        "description": "tabbycat.draw.views",
        "peekOfCode": "class ConfirmDrawCreationView(DrawStatusEdit):\n    action_log_type = ActionLogEntry.ActionType.DRAW_CONFIRM\n    def post(self, request, *args, **kwargs):\n        if self.round.draw_status != Round.Status.DRAFT:\n            if self.round.draw_status == Round.Status.NONE:\n                messages.error(request, _(\"There is no draw.\"))\n            else:\n                messages.info(request, _(\"The draw had already been confirmed.\"))\n            return HttpResponseRedirect(reverse_round('draw', self.round))\n        self.round.draw_status = Round.Status.CONFIRMED",
        "detail": "tabbycat.draw.views",
        "documentation": {}
    },
    {
        "label": "DrawRegenerateView",
        "kind": 6,
        "importPath": "tabbycat.draw.views",
        "description": "tabbycat.draw.views",
        "peekOfCode": "class DrawRegenerateView(DrawStatusEdit):\n    action_log_type = ActionLogEntry.ActionType.DRAW_REGENERATE\n    round_redirect_pattern_name = 'availability-index'\n    def post(self, request, *args, **kwargs):\n        delete_round_draw(self.round)\n        self.log_action()\n        messages.success(request, _(\"Deleted the draw. You can now recreate it as normal.\"))\n        return super().post(request, *args, **kwargs)\nclass ConfirmDrawRegenerationView(AdministratorMixin, TemplateView):\n    template_name = \"draw_confirm_regeneration.html\"",
        "detail": "tabbycat.draw.views",
        "documentation": {}
    },
    {
        "label": "ConfirmDrawRegenerationView",
        "kind": 6,
        "importPath": "tabbycat.draw.views",
        "description": "tabbycat.draw.views",
        "peekOfCode": "class ConfirmDrawRegenerationView(AdministratorMixin, TemplateView):\n    template_name = \"draw_confirm_regeneration.html\"\n    view_permission = Permission.GENERATE_DEBATE\nclass DrawReleaseView(DrawStatusEdit):\n    edit_permission = Permission.RELEASE_DRAW\n    action_log_type = ActionLogEntry.ActionType.DRAW_RELEASE\n    round_redirect_pattern_name = 'draw-display'\n    def post(self, request, *args, **kwargs):\n        if self.round.draw_status != Round.Status.CONFIRMED:\n            if self.round.draw_status == Round.Status.RELEASED:",
        "detail": "tabbycat.draw.views",
        "documentation": {}
    },
    {
        "label": "DrawReleaseView",
        "kind": 6,
        "importPath": "tabbycat.draw.views",
        "description": "tabbycat.draw.views",
        "peekOfCode": "class DrawReleaseView(DrawStatusEdit):\n    edit_permission = Permission.RELEASE_DRAW\n    action_log_type = ActionLogEntry.ActionType.DRAW_RELEASE\n    round_redirect_pattern_name = 'draw-display'\n    def post(self, request, *args, **kwargs):\n        if self.round.draw_status != Round.Status.CONFIRMED:\n            if self.round.draw_status == Round.Status.RELEASED:\n                messages.info(request, _(\"The draw has already been released.\"))\n            else:\n                messages.error(request, _(\"The draw must be confirmed before being released.\"))",
        "detail": "tabbycat.draw.views",
        "documentation": {}
    },
    {
        "label": "DrawUnreleaseView",
        "kind": 6,
        "importPath": "tabbycat.draw.views",
        "description": "tabbycat.draw.views",
        "peekOfCode": "class DrawUnreleaseView(DrawStatusEdit):\n    edit_permission = Permission.UNRELEASE_DRAW\n    action_log_type = ActionLogEntry.ActionType.DRAW_UNRELEASE\n    round_redirect_pattern_name = 'draw-display'\n    def post(self, request, *args, **kwargs):\n        if self.round.draw_status != Round.Status.RELEASED:\n            messages.info(request, _(\"The draw had been unreleased.\"))\n            return HttpResponseRedirect(reverse_round('draw', self.round))\n        self.round.draw_status = Round.Status.CONFIRMED\n        self.round.save()",
        "detail": "tabbycat.draw.views",
        "documentation": {}
    },
    {
        "label": "SetRoundStartTimeView",
        "kind": 6,
        "importPath": "tabbycat.draw.views",
        "description": "tabbycat.draw.views",
        "peekOfCode": "class SetRoundStartTimeView(DrawStatusEdit):\n    edit_permission = Permission.EDIT_STARTTIME\n    action_log_type = ActionLogEntry.ActionType.ROUND_START_TIME_SET\n    round_redirect_pattern_name = 'draw-display'\n    def post(self, request, *args, **kwargs):\n        time_text = request.POST[\"start_time\"]\n        try:\n            time = timezone.make_aware(datetime.datetime.strptime(time_text, \"%Y-%m-%dT%H:%M\"))\n        except ValueError:\n            messages.error(request, _(\"Sorry, \\\"%(input)s\\\" isn't a valid time. It must \"",
        "detail": "tabbycat.draw.views",
        "documentation": {}
    },
    {
        "label": "BaseSideAllocationsView",
        "kind": 6,
        "importPath": "tabbycat.draw.views",
        "description": "tabbycat.draw.views",
        "peekOfCode": "class BaseSideAllocationsView(TournamentMixin, VueTableTemplateView):\n    page_title = gettext_lazy(\"Side Pre-Allocations\")\n    def get_table(self):\n        teams = self.tournament.team_set.all()\n        rounds = self.tournament.prelim_rounds()\n        tsas = dict()\n        for tsa in TeamSideAllocation.objects.filter(round__in=rounds):\n            try:\n                tsas[(tsa.team.id, tsa.round.seq)] = get_side_name(self.tournament, tsa.side, 'abbr')\n            except ValueError:",
        "detail": "tabbycat.draw.views",
        "documentation": {}
    },
    {
        "label": "SideAllocationsView",
        "kind": 6,
        "importPath": "tabbycat.draw.views",
        "description": "tabbycat.draw.views",
        "peekOfCode": "class SideAllocationsView(AdministratorMixin, BaseSideAllocationsView):\n    view_permission = Permission.EDIT_ALLOCATESIDES\nclass PublicSideAllocationsView(PublicTournamentPageMixin, BaseSideAllocationsView):\n    public_page_preference = 'public_side_allocations'\nclass EditDebateTeamsView(DebateDragAndDropMixin, AdministratorMixin, TemplateView):\n    template_name = \"edit_debate_teams.html\"\n    page_title = gettext_lazy(\"Edit Matchups\")\n    prefetch_teams = False # Fetched in full as get_serialised\n    edit_permission = Permission.EDIT_DEBATETEAMS\n    def get_serialised_allocatable_items(self):",
        "detail": "tabbycat.draw.views",
        "documentation": {}
    },
    {
        "label": "PublicSideAllocationsView",
        "kind": 6,
        "importPath": "tabbycat.draw.views",
        "description": "tabbycat.draw.views",
        "peekOfCode": "class PublicSideAllocationsView(PublicTournamentPageMixin, BaseSideAllocationsView):\n    public_page_preference = 'public_side_allocations'\nclass EditDebateTeamsView(DebateDragAndDropMixin, AdministratorMixin, TemplateView):\n    template_name = \"edit_debate_teams.html\"\n    page_title = gettext_lazy(\"Edit Matchups\")\n    prefetch_teams = False # Fetched in full as get_serialised\n    edit_permission = Permission.EDIT_DEBATETEAMS\n    def get_serialised_allocatable_items(self):\n        # TODO: account for shared teams\n        teams = Team.objects.filter(tournament=self.tournament).prefetch_related('speaker_set')",
        "detail": "tabbycat.draw.views",
        "documentation": {}
    },
    {
        "label": "EditDebateTeamsView",
        "kind": 6,
        "importPath": "tabbycat.draw.views",
        "description": "tabbycat.draw.views",
        "peekOfCode": "class EditDebateTeamsView(DebateDragAndDropMixin, AdministratorMixin, TemplateView):\n    template_name = \"edit_debate_teams.html\"\n    page_title = gettext_lazy(\"Edit Matchups\")\n    prefetch_teams = False # Fetched in full as get_serialised\n    edit_permission = Permission.EDIT_DEBATETEAMS\n    def get_serialised_allocatable_items(self):\n        # TODO: account for shared teams\n        teams = Team.objects.filter(tournament=self.tournament).prefetch_related('speaker_set')\n        teams = annotate_availability(teams, self.round)\n        populate_win_counts(teams)",
        "detail": "tabbycat.draw.views",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "tabbycat.draw.views",
        "description": "tabbycat.draw.views",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass BaseDisplayDrawTableView(TournamentMixin, VueTableTemplateView):\n    \"\"\"Base class for views showing a draw table to the public in some way.\n    Subclasses are *not* necessarily public views; they may be admin/assistant\n    views intended to facilitate displaying the draw in the general assembly\n    room. Since, whether a public, assistant or admin view, the content on it\n    is intended for consumption by the public, the table is always built as if\n    it were a public view.\"\"\"\n    template_name = 'draw_display_by.html'\n    sort_key = 'venue'",
        "detail": "tabbycat.draw.views",
        "documentation": {}
    },
    {
        "label": "AnorakTournamentDataImporter",
        "kind": 6,
        "importPath": "tabbycat.importer.importers.anorak",
        "description": "tabbycat.importer.importers.anorak",
        "peekOfCode": "class AnorakTournamentDataImporter(BaseTournamentDataImporter):\n    \"\"\"Anorak: The original tournament data format.\"\"\"\n    order = [\n        'venue_categories',\n        'venues',\n        'regions',\n        'institutions',\n        'break_categories',\n        'teams',\n        'speakers',",
        "detail": "tabbycat.importer.importers.anorak",
        "documentation": {}
    },
    {
        "label": "TournamentDataImporterFatalError",
        "kind": 6,
        "importPath": "tabbycat.importer.importers.base",
        "description": "tabbycat.importer.importers.base",
        "peekOfCode": "class TournamentDataImporterFatalError(Exception):\n    pass\nclass TournamentDataImporterError(Exception):\n    \"\"\"Inspired by Django's ValidationError, but adapted for the importer's\n    needs. This keeps track of multiple errors and is initialized blank.\n    Before raising, check whether there is anything in it:\n        errors = TournamentDataImporterError()\n        ...\n        if errors:\n            raise errors",
        "detail": "tabbycat.importer.importers.base",
        "documentation": {}
    },
    {
        "label": "TournamentDataImporterError",
        "kind": 6,
        "importPath": "tabbycat.importer.importers.base",
        "description": "tabbycat.importer.importers.base",
        "peekOfCode": "class TournamentDataImporterError(Exception):\n    \"\"\"Inspired by Django's ValidationError, but adapted for the importer's\n    needs. This keeps track of multiple errors and is initialized blank.\n    Before raising, check whether there is anything in it:\n        errors = TournamentDataImporterError()\n        ...\n        if errors:\n            raise errors\n    \"\"\"\n    class Entry(object):",
        "detail": "tabbycat.importer.importers.base",
        "documentation": {}
    },
    {
        "label": "BaseTournamentDataImporter",
        "kind": 6,
        "importPath": "tabbycat.importer.importers.base",
        "description": "tabbycat.importer.importers.base",
        "peekOfCode": "class BaseTournamentDataImporter(object):\n    \"\"\"Base class for tournament data importers.\n    Subclasses should have a number of import_* arguments, each of which should\n    call self._import one or more times. The simplest import_* function would\n    look like this:\n    def import_things(self, f):\n        interpreter = make_interpreter(\n            institution=lambda x: participants.models.Institution.objects.get(name=x),\n        )\n        self._import(f, participants.models.Speaker, interpreter)",
        "detail": "tabbycat.importer.importers.base",
        "documentation": {}
    },
    {
        "label": "convert_bool",
        "kind": 2,
        "importPath": "tabbycat.importer.importers.base",
        "description": "tabbycat.importer.importers.base",
        "peekOfCode": "def convert_bool(value):\n    if value.lower() in TRUE_VALUES:\n        return True\n    elif value.lower() in FALSE_VALUES:\n        return False\n    else:\n        raise ValueError('Invalid boolean value: %s' % (value,))\ndef make_interpreter(DELETE=[], **kwargs):  # noqa: N803\n    \"\"\"Convenience function for building an interpreter. The default interpreter\n    (i.e. the one returned if no arguments are passed to this function) just",
        "detail": "tabbycat.importer.importers.base",
        "documentation": {}
    },
    {
        "label": "make_interpreter",
        "kind": 2,
        "importPath": "tabbycat.importer.importers.base",
        "description": "tabbycat.importer.importers.base",
        "peekOfCode": "def make_interpreter(DELETE=[], **kwargs):  # noqa: N803\n    \"\"\"Convenience function for building an interpreter. The default interpreter\n    (i.e. the one returned if no arguments are passed to this function) just\n    removes blank values.\"\"\"\n    def interpreter(lineno, line):\n        # remove blank and unwanted values\n        line = {\n            fieldname: value for fieldname, value in line.items() if (\n                value != '' and\n                value is not None and",
        "detail": "tabbycat.importer.importers.base",
        "documentation": {}
    },
    {
        "label": "make_lookup",
        "kind": 2,
        "importPath": "tabbycat.importer.importers.base",
        "description": "tabbycat.importer.importers.base",
        "peekOfCode": "def make_lookup(name, choices):\n    \"\"\"Convenience function for building a lookup function, which maps valid\n    user input values to a standardized string. Lookups are case-insensitive.\n    `name` is a string used in an error message if lookup fails.\n    `choices` should be a dict mapping a tuple of valid choices to a value. All\n    choices must be specified as lower-case. For example, one entry in the\n    choices dict might be: {('female', 'f'): 'F'}\n    \"\"\"\n    def lookup(val):\n        if not val:",
        "detail": "tabbycat.importer.importers.base",
        "documentation": {}
    },
    {
        "label": "NON_FIELD_ERRORS",
        "kind": 5,
        "importPath": "tabbycat.importer.importers.base",
        "description": "tabbycat.importer.importers.base",
        "peekOfCode": "NON_FIELD_ERRORS = '__all__'\nDUPLICATE_INFO = 19  # Logging level just below INFO\nlogging.addLevelName(DUPLICATE_INFO, 'DUPLICATE_INFO')\nTRUE_VALUES = ('true', 'yes', 't', 'y', '1')\nFALSE_VALUES = ('false', 'no', 'f', 'n', '0')\ndef convert_bool(value):\n    if value.lower() in TRUE_VALUES:\n        return True\n    elif value.lower() in FALSE_VALUES:\n        return False",
        "detail": "tabbycat.importer.importers.base",
        "documentation": {}
    },
    {
        "label": "DUPLICATE_INFO",
        "kind": 5,
        "importPath": "tabbycat.importer.importers.base",
        "description": "tabbycat.importer.importers.base",
        "peekOfCode": "DUPLICATE_INFO = 19  # Logging level just below INFO\nlogging.addLevelName(DUPLICATE_INFO, 'DUPLICATE_INFO')\nTRUE_VALUES = ('true', 'yes', 't', 'y', '1')\nFALSE_VALUES = ('false', 'no', 'f', 'n', '0')\ndef convert_bool(value):\n    if value.lower() in TRUE_VALUES:\n        return True\n    elif value.lower() in FALSE_VALUES:\n        return False\n    else:",
        "detail": "tabbycat.importer.importers.base",
        "documentation": {}
    },
    {
        "label": "TRUE_VALUES",
        "kind": 5,
        "importPath": "tabbycat.importer.importers.base",
        "description": "tabbycat.importer.importers.base",
        "peekOfCode": "TRUE_VALUES = ('true', 'yes', 't', 'y', '1')\nFALSE_VALUES = ('false', 'no', 'f', 'n', '0')\ndef convert_bool(value):\n    if value.lower() in TRUE_VALUES:\n        return True\n    elif value.lower() in FALSE_VALUES:\n        return False\n    else:\n        raise ValueError('Invalid boolean value: %s' % (value,))\ndef make_interpreter(DELETE=[], **kwargs):  # noqa: N803",
        "detail": "tabbycat.importer.importers.base",
        "documentation": {}
    },
    {
        "label": "FALSE_VALUES",
        "kind": 5,
        "importPath": "tabbycat.importer.importers.base",
        "description": "tabbycat.importer.importers.base",
        "peekOfCode": "FALSE_VALUES = ('false', 'no', 'f', 'n', '0')\ndef convert_bool(value):\n    if value.lower() in TRUE_VALUES:\n        return True\n    elif value.lower() in FALSE_VALUES:\n        return False\n    else:\n        raise ValueError('Invalid boolean value: %s' % (value,))\ndef make_interpreter(DELETE=[], **kwargs):  # noqa: N803\n    \"\"\"Convenience function for building an interpreter. The default interpreter",
        "detail": "tabbycat.importer.importers.base",
        "documentation": {}
    },
    {
        "label": "BootsTournamentDataImporter",
        "kind": 6,
        "importPath": "tabbycat.importer.importers.boots",
        "description": "tabbycat.importer.importers.boots",
        "peekOfCode": "class BootsTournamentDataImporter(BaseTournamentDataImporter):\n    \"\"\"Boots: Added for British Parliamentary convenience.\"\"\"\n    order = [\n        'break_categories',\n        'rounds',\n        'institutions',\n        'speaker_categories',\n        'adjudicators',\n        'scores',\n        'teams',",
        "detail": "tabbycat.importer.importers.boots",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "tabbycat.importer.management.commands.importarchive",
        "description": "tabbycat.importer.management.commands.importarchive",
        "peekOfCode": "class Command(BaseCommand):\n    help = 'Import a non-existant tournament from an XML archive file.'\n    def add_arguments(self, parser):\n        parser.add_argument('file', help=\"File to import tournament data from\")\n    def handle(self, *args, **options):\n        self.options = options\n        self.filepath = self.get_data_path(options['file'])\n        self.create_tournament()\n    def get_data_path(self, arg):\n        \"\"\"Returns the file for the given command-line argument. If the",
        "detail": "tabbycat.importer.management.commands.importarchive",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "tabbycat.importer.management.commands.importtournament",
        "description": "tabbycat.importer.management.commands.importtournament",
        "peekOfCode": "class Command(BaseCommand):\n    help = 'Delete all data for a tournament and import from specified directory.'\n    def add_arguments(self, parser):\n        parser.add_argument('path', help=\"Directory to import tournament data from\")\n        parser.add_argument('items', help=\"Items to import (default: import all)\", nargs=\"*\", default=[])\n        parser.add_argument('-e', '--encoding', type=str, default='utf-8',\n                            help=\"Encoding used in the CSV files (default: utf-8)\")\n        parser.add_argument('-i', '--importer', type=str, default=None, choices=importer_registry,\n                            help=\"Which importer to use (default: read from .importer file)\")\n        parser.add_argument('-r', '--auto-rounds', type=int, metavar='N', default=None,",
        "detail": "tabbycat.importer.management.commands.importtournament",
        "documentation": {}
    },
    {
        "label": "TestImporterAnorak",
        "kind": 6,
        "importPath": "tabbycat.importer.tests.test_anorak",
        "description": "tabbycat.importer.tests.test_anorak",
        "peekOfCode": "class TestImporterAnorak(TestCase):\n    # BASE_DIR is /tabbycat this allows tests to run from there or project root\n    TESTDIR = os.path.join(BASE_DIR, '../data/test/standard')\n    TESTDIR_CHOICES = os.path.join(BASE_DIR, '../data/test/choices')\n    TESTDIR_ERRORS = os.path.join(BASE_DIR, '../data/test/errors')\n    def setUp(self):\n        super(TestImporterAnorak, self).setUp()\n        # create tournament\n        self.maxDiff = None\n        self.tournament = tm.Tournament(slug=\"import-test\")",
        "detail": "tabbycat.importer.tests.test_anorak",
        "documentation": {}
    },
    {
        "label": "Exporter",
        "kind": 6,
        "importPath": "tabbycat.importer.archive",
        "description": "tabbycat.importer.archive",
        "peekOfCode": "class Exporter:\n    def __init__(self, tournament):\n        self.t = tournament\n        self.root = Element('tournament', {'name': tournament.name, 'short': tournament.short_name})\n        if tournament.pref('teams_in_debate') == 4:\n            self.root.set('style', 'bp')\n    def create_all(self):\n        self.add_rounds()\n        self.add_participants()\n        self.add_break_categories()",
        "detail": "tabbycat.importer.archive",
        "documentation": {}
    },
    {
        "label": "Importer",
        "kind": 6,
        "importPath": "tabbycat.importer.archive",
        "description": "tabbycat.importer.archive",
        "peekOfCode": "class Importer:\n    def __init__(self, tournament):\n        self.root = tournament\n    def import_tournament(self):\n        self.tournament = Tournament(name=self.root.get('name'))\n        if self.root.get('short') is not None:\n            self.tournament.short_name = self.root.get('short')\n            self.tournament.slug = slugify(self.root.get('short'))\n        else:\n            self.tournament.short_name = self.root.get('name')[:25]",
        "detail": "tabbycat.importer.archive",
        "documentation": {}
    },
    {
        "label": "ADJ_PREFIX",
        "kind": 5,
        "importPath": "tabbycat.importer.archive",
        "description": "tabbycat.importer.archive",
        "peekOfCode": "ADJ_PREFIX = \"A\"\nMOTION_PREFIX = \"M\"\nDEBATE_PREFIX = \"D\"\nTEAM_PREFIX = \"T\"\nSPEAKER_PREFIX = \"S\"\nSPEAKER_CATEGORY_PREFIX = \"SC\"\nBREAK_CATEGORY_PREFIX = \"BC\"\nVENUE_PREFIX = \"V\"\nINST_PREFIX = \"I\"\nQUESTION_PREFIX = \"Q\"",
        "detail": "tabbycat.importer.archive",
        "documentation": {}
    },
    {
        "label": "MOTION_PREFIX",
        "kind": 5,
        "importPath": "tabbycat.importer.archive",
        "description": "tabbycat.importer.archive",
        "peekOfCode": "MOTION_PREFIX = \"M\"\nDEBATE_PREFIX = \"D\"\nTEAM_PREFIX = \"T\"\nSPEAKER_PREFIX = \"S\"\nSPEAKER_CATEGORY_PREFIX = \"SC\"\nBREAK_CATEGORY_PREFIX = \"BC\"\nVENUE_PREFIX = \"V\"\nINST_PREFIX = \"I\"\nQUESTION_PREFIX = \"Q\"\nclass Exporter:",
        "detail": "tabbycat.importer.archive",
        "documentation": {}
    },
    {
        "label": "DEBATE_PREFIX",
        "kind": 5,
        "importPath": "tabbycat.importer.archive",
        "description": "tabbycat.importer.archive",
        "peekOfCode": "DEBATE_PREFIX = \"D\"\nTEAM_PREFIX = \"T\"\nSPEAKER_PREFIX = \"S\"\nSPEAKER_CATEGORY_PREFIX = \"SC\"\nBREAK_CATEGORY_PREFIX = \"BC\"\nVENUE_PREFIX = \"V\"\nINST_PREFIX = \"I\"\nQUESTION_PREFIX = \"Q\"\nclass Exporter:\n    def __init__(self, tournament):",
        "detail": "tabbycat.importer.archive",
        "documentation": {}
    },
    {
        "label": "TEAM_PREFIX",
        "kind": 5,
        "importPath": "tabbycat.importer.archive",
        "description": "tabbycat.importer.archive",
        "peekOfCode": "TEAM_PREFIX = \"T\"\nSPEAKER_PREFIX = \"S\"\nSPEAKER_CATEGORY_PREFIX = \"SC\"\nBREAK_CATEGORY_PREFIX = \"BC\"\nVENUE_PREFIX = \"V\"\nINST_PREFIX = \"I\"\nQUESTION_PREFIX = \"Q\"\nclass Exporter:\n    def __init__(self, tournament):\n        self.t = tournament",
        "detail": "tabbycat.importer.archive",
        "documentation": {}
    },
    {
        "label": "SPEAKER_PREFIX",
        "kind": 5,
        "importPath": "tabbycat.importer.archive",
        "description": "tabbycat.importer.archive",
        "peekOfCode": "SPEAKER_PREFIX = \"S\"\nSPEAKER_CATEGORY_PREFIX = \"SC\"\nBREAK_CATEGORY_PREFIX = \"BC\"\nVENUE_PREFIX = \"V\"\nINST_PREFIX = \"I\"\nQUESTION_PREFIX = \"Q\"\nclass Exporter:\n    def __init__(self, tournament):\n        self.t = tournament\n        self.root = Element('tournament', {'name': tournament.name, 'short': tournament.short_name})",
        "detail": "tabbycat.importer.archive",
        "documentation": {}
    },
    {
        "label": "SPEAKER_CATEGORY_PREFIX",
        "kind": 5,
        "importPath": "tabbycat.importer.archive",
        "description": "tabbycat.importer.archive",
        "peekOfCode": "SPEAKER_CATEGORY_PREFIX = \"SC\"\nBREAK_CATEGORY_PREFIX = \"BC\"\nVENUE_PREFIX = \"V\"\nINST_PREFIX = \"I\"\nQUESTION_PREFIX = \"Q\"\nclass Exporter:\n    def __init__(self, tournament):\n        self.t = tournament\n        self.root = Element('tournament', {'name': tournament.name, 'short': tournament.short_name})\n        if tournament.pref('teams_in_debate') == 4:",
        "detail": "tabbycat.importer.archive",
        "documentation": {}
    },
    {
        "label": "BREAK_CATEGORY_PREFIX",
        "kind": 5,
        "importPath": "tabbycat.importer.archive",
        "description": "tabbycat.importer.archive",
        "peekOfCode": "BREAK_CATEGORY_PREFIX = \"BC\"\nVENUE_PREFIX = \"V\"\nINST_PREFIX = \"I\"\nQUESTION_PREFIX = \"Q\"\nclass Exporter:\n    def __init__(self, tournament):\n        self.t = tournament\n        self.root = Element('tournament', {'name': tournament.name, 'short': tournament.short_name})\n        if tournament.pref('teams_in_debate') == 4:\n            self.root.set('style', 'bp')",
        "detail": "tabbycat.importer.archive",
        "documentation": {}
    },
    {
        "label": "VENUE_PREFIX",
        "kind": 5,
        "importPath": "tabbycat.importer.archive",
        "description": "tabbycat.importer.archive",
        "peekOfCode": "VENUE_PREFIX = \"V\"\nINST_PREFIX = \"I\"\nQUESTION_PREFIX = \"Q\"\nclass Exporter:\n    def __init__(self, tournament):\n        self.t = tournament\n        self.root = Element('tournament', {'name': tournament.name, 'short': tournament.short_name})\n        if tournament.pref('teams_in_debate') == 4:\n            self.root.set('style', 'bp')\n    def create_all(self):",
        "detail": "tabbycat.importer.archive",
        "documentation": {}
    },
    {
        "label": "INST_PREFIX",
        "kind": 5,
        "importPath": "tabbycat.importer.archive",
        "description": "tabbycat.importer.archive",
        "peekOfCode": "INST_PREFIX = \"I\"\nQUESTION_PREFIX = \"Q\"\nclass Exporter:\n    def __init__(self, tournament):\n        self.t = tournament\n        self.root = Element('tournament', {'name': tournament.name, 'short': tournament.short_name})\n        if tournament.pref('teams_in_debate') == 4:\n            self.root.set('style', 'bp')\n    def create_all(self):\n        self.add_rounds()",
        "detail": "tabbycat.importer.archive",
        "documentation": {}
    },
    {
        "label": "QUESTION_PREFIX",
        "kind": 5,
        "importPath": "tabbycat.importer.archive",
        "description": "tabbycat.importer.archive",
        "peekOfCode": "QUESTION_PREFIX = \"Q\"\nclass Exporter:\n    def __init__(self, tournament):\n        self.t = tournament\n        self.root = Element('tournament', {'name': tournament.name, 'short': tournament.short_name})\n        if tournament.pref('teams_in_debate') == 4:\n            self.root.set('style', 'bp')\n    def create_all(self):\n        self.add_rounds()\n        self.add_participants()",
        "detail": "tabbycat.importer.archive",
        "documentation": {}
    },
    {
        "label": "ImportValidationError",
        "kind": 6,
        "importPath": "tabbycat.importer.forms",
        "description": "tabbycat.importer.forms",
        "peekOfCode": "class ImportValidationError(ValidationError):\n    def __init__(self, lineno, message, *args, **kwargs):\n        message = _(\"line %(lineno)d: %(message)s\") % {\n            'lineno': lineno,\n            'message': message,\n        }\n        super().__init__(message, *args, **kwargs)\n# ==============================================================================\n# Raw forms (CSV-style import)\n# ==============================================================================",
        "detail": "tabbycat.importer.forms",
        "documentation": {}
    },
    {
        "label": "ImportInstitutionsRawForm",
        "kind": 6,
        "importPath": "tabbycat.importer.forms",
        "description": "tabbycat.importer.forms",
        "peekOfCode": "class ImportInstitutionsRawForm(forms.Form):\n    \"\"\"Form that takes in a CSV-style list of institutions, splits it and stores\n    the split data.\"\"\"\n    institutions_raw = forms.CharField(widget=forms.Textarea(attrs={'rows': 20}))\n    def clean_institutions_raw(self):\n        lines = self.cleaned_data['institutions_raw'].split('\\n')\n        errors = []\n        institutions = []\n        for i, line in enumerate(csv.reader(lines), start=1):\n            if len(line) < 1:",
        "detail": "tabbycat.importer.forms",
        "documentation": {}
    },
    {
        "label": "ImportVenuesRawForm",
        "kind": 6,
        "importPath": "tabbycat.importer.forms",
        "description": "tabbycat.importer.forms",
        "peekOfCode": "class ImportVenuesRawForm(forms.Form):\n    \"\"\"Form that takes in a CSV-style list of venues, splits it and stores the\n    split data.\"\"\"\n    venues_raw = forms.CharField(widget=forms.Textarea(attrs={'rows': 20}))\n    def clean_venues_raw(self):\n        lines = self.cleaned_data['venues_raw'].split('\\n')\n        venues = []\n        for i, line in enumerate(csv.reader(lines), start=1):\n            if len(line) < 1:\n                continue # skip blank lines",
        "detail": "tabbycat.importer.forms",
        "documentation": {}
    },
    {
        "label": "BaseTournamentObjectDetailsForm",
        "kind": 6,
        "importPath": "tabbycat.importer.forms",
        "description": "tabbycat.importer.forms",
        "peekOfCode": "class BaseTournamentObjectDetailsForm(forms.ModelForm):\n    \"\"\"Form for the formset used in the second step of the simple importer. As\n    well as the usual functions for managing an instance, this model also\n    manages the tournament separately.\n    This doesn't do everything. Subclasses must override save() to populate the\n    tournament field, if applicable.\n    \"\"\"\n    def __init__(self, tournament, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.tournament = tournament",
        "detail": "tabbycat.importer.forms",
        "documentation": {}
    },
    {
        "label": "VenueDetailsForm",
        "kind": 6,
        "importPath": "tabbycat.importer.forms",
        "description": "tabbycat.importer.forms",
        "peekOfCode": "class VenueDetailsForm(BaseTournamentObjectDetailsForm):\n    class Meta:\n        model = Venue\n        fields = ('name', 'priority')\n    def save(self, commit=True):\n        venue = super().save(commit=commit)\n        if commit:\n            VenueIdentifier.objects.create(venue=venue)\n        return venue\nclass BaseInstitutionObjectDetailsForm(BaseTournamentObjectDetailsForm):",
        "detail": "tabbycat.importer.forms",
        "documentation": {}
    },
    {
        "label": "BaseInstitutionObjectDetailsForm",
        "kind": 6,
        "importPath": "tabbycat.importer.forms",
        "description": "tabbycat.importer.forms",
        "peekOfCode": "class BaseInstitutionObjectDetailsForm(BaseTournamentObjectDetailsForm):\n    \"\"\"Adds a hidden input for the institution and automatic detection of the\n    institution from initial or data.\n    Subclasses must ensure that `'institution'` is in the `fields` attribute\n    of the Meta class.\n    \"\"\"\n    # This field protects against changes to the form between rendering and\n    # submission, for example, if the user reloads the team details step in a\n    # different tab with different numbers of teams/adjudicators. Putting the\n    # institution ID in a hidden field makes the client send it with the form,",
        "detail": "tabbycat.importer.forms",
        "documentation": {}
    },
    {
        "label": "TeamDetailsForm",
        "kind": 6,
        "importPath": "tabbycat.importer.forms",
        "description": "tabbycat.importer.forms",
        "peekOfCode": "class TeamDetailsForm(BaseInstitutionObjectDetailsForm):\n    \"\"\"Adds provision for a textarea input for speakers.\"\"\"\n    # widgets are set in form constructor\n    speakers = forms.CharField(required=True, label=_(\"Speakers' names\"), help_text=_(\"Can be separated by newlines, tabs or commas\"))\n    emails = forms.CharField(required=False, label=_(\"Speakers' email addresses\"),\n        help_text=_(\"Optional, useful to include if distributing private URLs, list in same order as speakers' names\"))\n    short_reference = forms.CharField(widget=forms.HiddenInput, required=False) # doesn't actually do anything, just placeholder to avoid validation failure\n    field_order = ['reference', 'use_institution_prefix', 'speakers', 'emails', 'seed']\n    class Meta:\n        model = Team",
        "detail": "tabbycat.importer.forms",
        "documentation": {}
    },
    {
        "label": "TeamDetailsFormSet",
        "kind": 6,
        "importPath": "tabbycat.importer.forms",
        "description": "tabbycat.importer.forms",
        "peekOfCode": "class TeamDetailsFormSet(forms.BaseModelFormSet):\n    def get_unique_error_message(self, unique_check):\n        # Overrides the base implementation\n        if unique_check == ('reference', 'institution', 'tournament'):\n            return _(\"Every team in a single tournament from the same institution must \"\n                \"have a different name. Please correct the duplicate data.\")\n        else:\n            return super().get_unique_error_message(unique_check)\nclass AdjudicatorDetailsForm(BaseInstitutionObjectDetailsForm):\n    class Meta:",
        "detail": "tabbycat.importer.forms",
        "documentation": {}
    },
    {
        "label": "AdjudicatorDetailsForm",
        "kind": 6,
        "importPath": "tabbycat.importer.forms",
        "description": "tabbycat.importer.forms",
        "peekOfCode": "class AdjudicatorDetailsForm(BaseInstitutionObjectDetailsForm):\n    class Meta:\n        model = Adjudicator\n        fields = ('name', 'base_score', 'institution', 'email')\n        labels = {\n            'base_score': _(\"Rating\"),\n        }\n    def clean_base_score(self):\n        base_score = self.cleaned_data['base_score']\n        min_score = self.tournament.pref('adj_min_score')",
        "detail": "tabbycat.importer.forms",
        "documentation": {}
    },
    {
        "label": "BaseNumberForEachInstitutionForm",
        "kind": 6,
        "importPath": "tabbycat.importer.forms",
        "description": "tabbycat.importer.forms",
        "peekOfCode": "class BaseNumberForEachInstitutionForm(forms.Form):\n    \"\"\"Form that presents one numeric field for each institution, for the user\n    to indicate how many objects to create from that institution. This is used\n    for importing teams and adjudicators.\"\"\"\n    number_unaffiliated = forms.IntegerField(min_value=0, required=False,\n        label=_(\"Unaffiliated (no institution)\"),\n        widget=forms.NumberInput(attrs={'placeholder': 0}))\n    def __init__(self, institutions, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.institutions = institutions",
        "detail": "tabbycat.importer.forms",
        "documentation": {}
    },
    {
        "label": "ImportTeamsNumbersForm",
        "kind": 6,
        "importPath": "tabbycat.importer.forms",
        "description": "tabbycat.importer.forms",
        "peekOfCode": "class ImportTeamsNumbersForm(BaseNumberForEachInstitutionForm):\n    num_detail_fields = len(TeamDetailsForm.base_fields) + 1\n    too_many_error_message = ngettext_lazy(\n        \"Sorry, you can only import up to %(max_allowed)d team at a time. \"\n        \"(These numbers currently add to %(given)d.) \"\n        \"Try splitting your import into smaller chunks.\",\n        \"Sorry, you can only import up to %(max_allowed)d teams at a time. \"\n        \"(These numbers currently add to %(given)d.) \"\n        \"Try splitting your import into smaller chunks.\",\n        'max_allowed')",
        "detail": "tabbycat.importer.forms",
        "documentation": {}
    },
    {
        "label": "ImportAdjudicatorsNumbersForm",
        "kind": 6,
        "importPath": "tabbycat.importer.forms",
        "description": "tabbycat.importer.forms",
        "peekOfCode": "class ImportAdjudicatorsNumbersForm(BaseNumberForEachInstitutionForm):\n    num_detail_fields = len(AdjudicatorDetailsForm.base_fields) + 1\n    too_many_error_message = ngettext_lazy(\n        \"Sorry, you can only import up to %(max_allowed)d adjudicator at a time. \"\n        \"(These numbers currently add to %(given)d.) \"\n        \"Try splitting your import into smaller chunks.\",\n        \"Sorry, you can only import up to %(max_allowed)d adjudicators at a time. \"\n        \"(These numbers currently add to %(given)d.) \"\n        \"Try splitting your import into smaller chunks.\",\n        'max_allowed')",
        "detail": "tabbycat.importer.forms",
        "documentation": {}
    },
    {
        "label": "ArchiveImportForm",
        "kind": 6,
        "importPath": "tabbycat.importer.forms",
        "description": "tabbycat.importer.forms",
        "peekOfCode": "class ArchiveImportForm(forms.Form):\n    xml = forms.CharField(required=True, label=_(\"XML\"),\n        widget=forms.Textarea(), help_text=_(\"The Debate XML archive to parse\")) # attrs={'rows': 20}",
        "detail": "tabbycat.importer.forms",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "tabbycat.importer.forms",
        "description": "tabbycat.importer.forms",
        "peekOfCode": "logger = logging.getLogger(__name__)\nTEAM_SHORT_REFERENCE_LENGTH = Team._meta.get_field('short_reference').max_length\n# There are 7 fields for formset/wizard management and CSRF detection\nMAX_FORM_DATA_FIELDS = settings.DATA_UPLOAD_MAX_NUMBER_FIELDS - 7\nclass ImportValidationError(ValidationError):\n    def __init__(self, lineno, message, *args, **kwargs):\n        message = _(\"line %(lineno)d: %(message)s\") % {\n            'lineno': lineno,\n            'message': message,\n        }",
        "detail": "tabbycat.importer.forms",
        "documentation": {}
    },
    {
        "label": "TEAM_SHORT_REFERENCE_LENGTH",
        "kind": 5,
        "importPath": "tabbycat.importer.forms",
        "description": "tabbycat.importer.forms",
        "peekOfCode": "TEAM_SHORT_REFERENCE_LENGTH = Team._meta.get_field('short_reference').max_length\n# There are 7 fields for formset/wizard management and CSRF detection\nMAX_FORM_DATA_FIELDS = settings.DATA_UPLOAD_MAX_NUMBER_FIELDS - 7\nclass ImportValidationError(ValidationError):\n    def __init__(self, lineno, message, *args, **kwargs):\n        message = _(\"line %(lineno)d: %(message)s\") % {\n            'lineno': lineno,\n            'message': message,\n        }\n        super().__init__(message, *args, **kwargs)",
        "detail": "tabbycat.importer.forms",
        "documentation": {}
    },
    {
        "label": "MAX_FORM_DATA_FIELDS",
        "kind": 5,
        "importPath": "tabbycat.importer.forms",
        "description": "tabbycat.importer.forms",
        "peekOfCode": "MAX_FORM_DATA_FIELDS = settings.DATA_UPLOAD_MAX_NUMBER_FIELDS - 7\nclass ImportValidationError(ValidationError):\n    def __init__(self, lineno, message, *args, **kwargs):\n        message = _(\"line %(lineno)d: %(message)s\") % {\n            'lineno': lineno,\n            'message': message,\n        }\n        super().__init__(message, *args, **kwargs)\n# ==============================================================================\n# Raw forms (CSV-style import)",
        "detail": "tabbycat.importer.forms",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "tabbycat.importer.urls",
        "description": "tabbycat.importer.urls",
        "peekOfCode": "urlpatterns = [\n    path('simple/',\n        views.ImporterSimpleIndexView.as_view(),\n        name='importer-simple-index'),\n    path('simple/institutions/',\n        views.ImportInstitutionsWizardView.as_view(),\n        name='importer-simple-institutions'),\n    path('simple/teams/',\n        views.ImportTeamsWizardView.as_view(),\n        name='importer-simple-teams'),",
        "detail": "tabbycat.importer.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "tabbycat.importer.urls_archive",
        "description": "tabbycat.importer.urls_archive",
        "peekOfCode": "urlpatterns = [\n    path('import/',\n        views.TournamentImportArchiveView.as_view(),\n        name='importer-archive'),\n]",
        "detail": "tabbycat.importer.urls_archive",
        "documentation": {}
    },
    {
        "label": "ImporterSimpleIndexView",
        "kind": 6,
        "importPath": "tabbycat.importer.views",
        "description": "tabbycat.importer.views",
        "peekOfCode": "class ImporterSimpleIndexView(AdministratorMixin, TournamentMixin, TemplateView):\n    template_name = 'simple_import_index.html'\n    view_permission = True\nclass BaseImportWizardView(AdministratorMixin, LogActionMixin, TournamentMixin, SessionWizardView):\n    \"\"\"Common functionality for the import wizard views. In particular, this\n    class implements functionality for a \"details\" step that is initialized\n    with data from the previous step. The details step shows a ModelFormSet\n    associated with a specified model.\"\"\"\n    DETAILS_STEP = 'details'\n    tournament_redirect_pattern_name = 'importer-simple-index'",
        "detail": "tabbycat.importer.views",
        "documentation": {}
    },
    {
        "label": "BaseImportWizardView",
        "kind": 6,
        "importPath": "tabbycat.importer.views",
        "description": "tabbycat.importer.views",
        "peekOfCode": "class BaseImportWizardView(AdministratorMixin, LogActionMixin, TournamentMixin, SessionWizardView):\n    \"\"\"Common functionality for the import wizard views. In particular, this\n    class implements functionality for a \"details\" step that is initialized\n    with data from the previous step. The details step shows a ModelFormSet\n    associated with a specified model.\"\"\"\n    DETAILS_STEP = 'details'\n    tournament_redirect_pattern_name = 'importer-simple-index'\n    model = None  # must be specified by subclass\n    def get_details_form_initial(self):\n        raise NotImplementedError",
        "detail": "tabbycat.importer.views",
        "documentation": {}
    },
    {
        "label": "ImportInstitutionsWizardView",
        "kind": 6,
        "importPath": "tabbycat.importer.views",
        "description": "tabbycat.importer.views",
        "peekOfCode": "class ImportInstitutionsWizardView(BaseImportWizardView):\n    model = Institution\n    edit_permission = Permission.ADD_INSTITUTIONS\n    form_list = [\n        ('raw', ImportInstitutionsRawForm),\n        ('details', modelformset_factory(Institution, fields=('name', 'code'), extra=0)),\n    ]\n    action_log_type = ActionLogEntry.ActionType.SIMPLE_IMPORT_INSTITUTIONS\n    def get_details_form_initial(self):\n        return self.get_cleaned_data_for_step('raw')['institutions_raw']",
        "detail": "tabbycat.importer.views",
        "documentation": {}
    },
    {
        "label": "ImportVenuesWizardView",
        "kind": 6,
        "importPath": "tabbycat.importer.views",
        "description": "tabbycat.importer.views",
        "peekOfCode": "class ImportVenuesWizardView(BaseImportWizardView):\n    model = Venue\n    edit_permission = Permission.ADD_ROOMS\n    form_list = [\n        ('raw', ImportVenuesRawForm),\n        ('details', modelformset_factory(Venue, form=VenueDetailsForm, extra=0)),\n    ]\n    action_log_type = ActionLogEntry.ActionType.SIMPLE_IMPORT_VENUES\n    def get_form_kwargs(self, step):\n        if step == 'details':",
        "detail": "tabbycat.importer.views",
        "documentation": {}
    },
    {
        "label": "BaseImportByInstitutionWizardView",
        "kind": 6,
        "importPath": "tabbycat.importer.views",
        "description": "tabbycat.importer.views",
        "peekOfCode": "class BaseImportByInstitutionWizardView(BaseImportWizardView):\n    \"\"\"Common functionality in teams and institutions wizards.\"\"\"\n    def get_form_kwargs(self, step):\n        if step == 'numbers':\n            return {\n                'institutions': Institution.objects.all(),\n            }\n        elif step == 'details':\n            return {'form_kwargs': {'tournament': self.tournament}}\n    def make_initial_data(self, number, institution_id):",
        "detail": "tabbycat.importer.views",
        "documentation": {}
    },
    {
        "label": "ImportTeamsWizardView",
        "kind": 6,
        "importPath": "tabbycat.importer.views",
        "description": "tabbycat.importer.views",
        "peekOfCode": "class ImportTeamsWizardView(BaseImportByInstitutionWizardView):\n    model = Team\n    edit_permission = Permission.ADD_TEAMS\n    form_list = [\n        ('numbers', ImportTeamsNumbersForm),\n        ('details', modelformset_factory(Team, form=TeamDetailsForm, formset=TeamDetailsFormSet, extra=0)),\n    ]\n    action_log_type = ActionLogEntry.ActionType.SIMPLE_IMPORT_TEAMS\n    def get_details_instance_initial(self, i):\n        return {'reference': str(i), 'use_institution_prefix': True}",
        "detail": "tabbycat.importer.views",
        "documentation": {}
    },
    {
        "label": "ImportAdjudicatorsWizardView",
        "kind": 6,
        "importPath": "tabbycat.importer.views",
        "description": "tabbycat.importer.views",
        "peekOfCode": "class ImportAdjudicatorsWizardView(BaseImportByInstitutionWizardView):\n    model = Adjudicator\n    edit_permission = Permission.ADD_ADJUDICATORS\n    form_list = [\n        ('numbers', ImportAdjudicatorsNumbersForm),\n        ('details', modelformset_factory(Adjudicator, form=AdjudicatorDetailsForm, extra=0)),\n    ]\n    action_log_type = ActionLogEntry.ActionType.SIMPLE_IMPORT_ADJUDICATORS\n    def get_default_base_score(self):\n        \"\"\"Returns the midpoint of the configured allowable score range.\"\"\"",
        "detail": "tabbycat.importer.views",
        "documentation": {}
    },
    {
        "label": "LoadDemoView",
        "kind": 6,
        "importPath": "tabbycat.importer.views",
        "description": "tabbycat.importer.views",
        "peekOfCode": "class LoadDemoView(AdministratorMixin, PostOnlyRedirectView):\n    def post(self, request, *args, **kwargs):\n        source = request.POST.get(\"source\", \"\")\n        if source not in ['minimal8team', 'australs24team', 'bp88team']:\n            return HttpResponseBadRequest(\"%s isn't a demo dataset\" % source)\n        try:\n            management.call_command(importtournament.Command(), source,\n                                    force=True, strict=False, encoding='utf-8')\n        except TournamentDataImporterError as e:\n            messages.error(self.request, mark_safe(_(",
        "detail": "tabbycat.importer.views",
        "documentation": {}
    },
    {
        "label": "TournamentImportArchiveView",
        "kind": 6,
        "importPath": "tabbycat.importer.views",
        "description": "tabbycat.importer.views",
        "peekOfCode": "class TournamentImportArchiveView(AdministratorMixin, FormView):\n    form_class = ArchiveImportForm\n    success_url = reverse_lazy('tabbycat-index')\n    template_name = 'archive_importer.html'\n    view_role = \"\"\n    def form_valid(self, form):\n        self.importer = Importer(fromstring(form.cleaned_data['xml']))\n        self.importer.import_tournament()\n        messages.success(self.request, _(\"Tournament archive has been imported.\"))\n        return super().form_valid(form)",
        "detail": "tabbycat.importer.views",
        "documentation": {}
    },
    {
        "label": "ExportArchiveIndexView",
        "kind": 6,
        "importPath": "tabbycat.importer.views",
        "description": "tabbycat.importer.views",
        "peekOfCode": "class ExportArchiveIndexView(AdministratorMixin, TournamentMixin, TemplateView):\n    template_name = 'archive_export_index.html'\n    view_permission = Permission.EXPORT_XML\nclass ExportArchiveAllView(AdministratorMixin, TournamentMixin, View):\n    view_permission = Permission.EXPORT_XML\n    def get(self, request, *args, **kwargs):\n        response = HttpResponse(self.get_xml(), content_type='text/xml; charset=utf-8')\n        response['Content-Disposition'] = 'attachment; filename=\"' + self.tournament.short_name + '.xml\"'\n        return response\n    def get_xml(self):",
        "detail": "tabbycat.importer.views",
        "documentation": {}
    },
    {
        "label": "ExportArchiveAllView",
        "kind": 6,
        "importPath": "tabbycat.importer.views",
        "description": "tabbycat.importer.views",
        "peekOfCode": "class ExportArchiveAllView(AdministratorMixin, TournamentMixin, View):\n    view_permission = Permission.EXPORT_XML\n    def get(self, request, *args, **kwargs):\n        response = HttpResponse(self.get_xml(), content_type='text/xml; charset=utf-8')\n        response['Content-Disposition'] = 'attachment; filename=\"' + self.tournament.short_name + '.xml\"'\n        return response\n    def get_xml(self):\n        return ElementTree.tostring(Exporter(self.tournament).create_all())",
        "detail": "tabbycat.importer.views",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "tabbycat.importer.views",
        "description": "tabbycat.importer.views",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass ImporterSimpleIndexView(AdministratorMixin, TournamentMixin, TemplateView):\n    template_name = 'simple_import_index.html'\n    view_permission = True\nclass BaseImportWizardView(AdministratorMixin, LogActionMixin, TournamentMixin, SessionWizardView):\n    \"\"\"Common functionality for the import wizard views. In particular, this\n    class implements functionality for a \"details\" step that is initialized\n    with data from the previous step. The details step shows a ModelFormSet\n    associated with a specified model.\"\"\"\n    DETAILS_STEP = 'details'",
        "detail": "tabbycat.importer.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.motions.migrations.0001_initial",
        "description": "tabbycat.motions.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('tournaments', '0001_initial'),\n        ('divisions', '0001_initial'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='DebateTeamMotionPreference',\n            fields=[",
        "detail": "tabbycat.motions.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.motions.migrations.0002_auto_20171110_0905",
        "description": "tabbycat.motions.migrations.0002_auto_20171110_0905",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('motions', '0001_initial'),\n        ('draw', '0001_initial'),\n        ('results', '0001_initial'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='debateteammotionpreference',",
        "detail": "tabbycat.motions.migrations.0002_auto_20171110_0905",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.motions.migrations.0003_auto_20180402_1620",
        "description": "tabbycat.motions.migrations.0003_auto_20180402_1620",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('motions', '0002_auto_20171110_0905'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='motion',\n            name='seq',\n            field=models.IntegerField(default=1, help_text='The order in which motions are displayed', verbose_name='sequence number'),\n        ),",
        "detail": "tabbycat.motions.migrations.0003_auto_20180402_1620",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.motions.migrations.0004_remove_league_fields",
        "description": "tabbycat.motions.migrations.0004_remove_league_fields",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('motions', '0003_auto_20180402_1620'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='motion',\n            name='divisions',\n        ),\n        migrations.RemoveField(",
        "detail": "tabbycat.motions.migrations.0004_remove_league_fields",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.motions.migrations.0005_motions_mtm",
        "description": "tabbycat.motions.migrations.0005_motions_mtm",
        "peekOfCode": "class Migration(migrations.Migration):\n    replaces = [\n        ('motions', '0005_round_motions'),\n        ('motions', '0006_auto_20201101_0138'),\n    ]\n    dependencies = [\n        ('tournaments', '0002_remove_tournament_welcome_msg'),\n        ('motions', '0004_remove_league_fields'),\n    ]\n    operations = [",
        "detail": "tabbycat.motions.migrations.0005_motions_mtm",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.motions.migrations.0006_alter_debateteammotionpreference_unique_together_and_more",
        "description": "tabbycat.motions.migrations.0006_alter_debateteammotionpreference_unique_together_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('draw', '0009_alter_teamsideallocation_unique_together_and_more'),\n        ('motions', '0005_motions_mtm'),\n        ('results', '0015_alter_ballotsubmission_submitter_type'),\n        ('tournaments', '0012_alter_round_unique_together_and_more'),\n    ]\n    operations = [\n        migrations.AlterUniqueTogether(\n            name='debateteammotionpreference',",
        "detail": "tabbycat.motions.migrations.0006_alter_debateteammotionpreference_unique_together_and_more",
        "documentation": {}
    },
    {
        "label": "TestMotionStatisticsTwoTeam",
        "kind": 6,
        "importPath": "tabbycat.motions.tests.test_statistics",
        "description": "tabbycat.motions.tests.test_statistics",
        "peekOfCode": "class TestMotionStatisticsTwoTeam(TestCase):\n    \"\"\"Very basic test for motion statistics for two-team formats, involving\n    just one debate and two motions.\"\"\"\n    def setUp(self):\n        self.tournament = Tournament.objects.create(slug=\"motions-twoteam\", name=\"Motion statistics two-team\")\n        self.tournament.preferences['debate_rules__teams_in_debate'] = 2\n        self.tournament.preferences['debate_rules__ballots_per_debate_prelim'] = 'per-adj'\n        team1 = Team.objects.create(tournament=self.tournament, reference=\"1\", use_institution_prefix=False)\n        team2 = Team.objects.create(tournament=self.tournament, reference=\"2\", use_institution_prefix=False)\n        rd = Round.objects.create(tournament=self.tournament, seq=1)",
        "detail": "tabbycat.motions.tests.test_statistics",
        "documentation": {}
    },
    {
        "label": "TestMotionStatisticsBP",
        "kind": 6,
        "importPath": "tabbycat.motions.tests.test_statistics",
        "description": "tabbycat.motions.tests.test_statistics",
        "peekOfCode": "class TestMotionStatisticsBP(TestCase):\n    \"\"\"Very basic test for motion statistics for two-team formats, involving\n    just one debate and two motions.\"\"\"\n    def setUp(self):\n        self.tournament = Tournament.objects.create(slug=\"motions-bp\", name=\"Motion statistics BP\")\n        self.tournament.preferences['debate_rules__teams_in_debate'] = 4\n        self.tournament.preferences['debate_rules__ballots_per_debate_prelim'] = 'per-debate'\n        self.teams = {side: Team.objects.create(tournament=self.tournament, reference=side,\n                use_institution_prefix=False) for side in self.tournament.sides}\n    def tearDown(self):",
        "detail": "tabbycat.motions.tests.test_statistics",
        "documentation": {}
    },
    {
        "label": "PublicMotionStatisticsViewTest",
        "kind": 6,
        "importPath": "tabbycat.motions.tests.test_views",
        "description": "tabbycat.motions.tests.test_views",
        "peekOfCode": "class PublicMotionStatisticsViewTest(ConditionalTournamentViewSimpleLoadTestMixin, TestCase):\n    view_name = 'motions-public-statistics'\n    view_toggle_preference = 'tab_release__motion_tab_released'",
        "detail": "tabbycat.motions.tests.test_views",
        "documentation": {}
    },
    {
        "label": "MotionAdmin",
        "kind": 6,
        "importPath": "tabbycat.motions.admin",
        "description": "tabbycat.motions.admin",
        "peekOfCode": "class MotionAdmin(TabbycatModelAdminFieldsMixin, ModelAdmin):\n    list_display = ('reference', 'text')\n    list_filter = ('rounds',)\n@admin.register(DebateTeamMotionPreference)\nclass DebateTeamMotionPreferenceAdmin(TabbycatModelAdminFieldsMixin, ModelAdmin):\n    list_display = ('ballot_submission', 'get_confirmed', 'get_team',\n                    'get_team_side', 'preference', 'get_motion_ref')\n    search_fields = ('motion__reference',)\n@admin.register(RoundMotion)\nclass RoundMotionAdmin(TabbycatModelAdminFieldsMixin, ModelAdmin):",
        "detail": "tabbycat.motions.admin",
        "documentation": {}
    },
    {
        "label": "DebateTeamMotionPreferenceAdmin",
        "kind": 6,
        "importPath": "tabbycat.motions.admin",
        "description": "tabbycat.motions.admin",
        "peekOfCode": "class DebateTeamMotionPreferenceAdmin(TabbycatModelAdminFieldsMixin, ModelAdmin):\n    list_display = ('ballot_submission', 'get_confirmed', 'get_team',\n                    'get_team_side', 'preference', 'get_motion_ref')\n    search_fields = ('motion__reference',)\n@admin.register(RoundMotion)\nclass RoundMotionAdmin(TabbycatModelAdminFieldsMixin, ModelAdmin):\n    list_display = ('seq', 'round', 'motion')\n    list_filter = ('round', 'motion')\n    ordering = ('round__seq', 'seq')",
        "detail": "tabbycat.motions.admin",
        "documentation": {}
    },
    {
        "label": "RoundMotionAdmin",
        "kind": 6,
        "importPath": "tabbycat.motions.admin",
        "description": "tabbycat.motions.admin",
        "peekOfCode": "class RoundMotionAdmin(TabbycatModelAdminFieldsMixin, ModelAdmin):\n    list_display = ('seq', 'round', 'motion')\n    list_filter = ('round', 'motion')\n    ordering = ('round__seq', 'seq')",
        "detail": "tabbycat.motions.admin",
        "documentation": {}
    },
    {
        "label": "MotionsConfig",
        "kind": 6,
        "importPath": "tabbycat.motions.apps",
        "description": "tabbycat.motions.apps",
        "peekOfCode": "class MotionsConfig(AppConfig):\n    name = 'motions'\n    verbose_name = _(\"Motions\")",
        "detail": "tabbycat.motions.apps",
        "documentation": {}
    },
    {
        "label": "Motion",
        "kind": 6,
        "importPath": "tabbycat.motions.models",
        "description": "tabbycat.motions.models",
        "peekOfCode": "class Motion(models.Model):\n    \"\"\"Represents a single motion (not a set of motions).\"\"\"\n    text = models.TextField(max_length=500,\n        verbose_name=_(\"text\"),\n        help_text=_(\"The full motion e.g., \\\"This House would straighten all bananas\\\"\"))\n    reference = models.CharField(max_length=100,\n        verbose_name=_(\"reference\"),\n        help_text=_(\"Shortcode for the motion, e.g., \\\"Bananas\\\"\"))\n    info_slide = models.TextField(\n        verbose_name=_(\"info slide\"), default=\"\", blank=True,",
        "detail": "tabbycat.motions.models",
        "documentation": {}
    },
    {
        "label": "DebateTeamMotionPreference",
        "kind": 6,
        "importPath": "tabbycat.motions.models",
        "description": "tabbycat.motions.models",
        "peekOfCode": "class DebateTeamMotionPreference(models.Model):\n    \"\"\"Represents a motion preference submitted by a debate team.\"\"\"\n    debate_team = models.ForeignKey('draw.DebateTeam', models.CASCADE,\n        verbose_name=_(\"debate team\"))\n    motion = models.ForeignKey(Motion, models.CASCADE, db_index=True,\n        verbose_name=_(\"motion\"))\n    preference = models.IntegerField(db_index=True,\n        verbose_name=_(\"preferences\"))\n    ballot_submission = models.ForeignKey('results.BallotSubmission', models.CASCADE,\n        verbose_name=_(\"ballot submission\"))",
        "detail": "tabbycat.motions.models",
        "documentation": {}
    },
    {
        "label": "RoundMotion",
        "kind": 6,
        "importPath": "tabbycat.motions.models",
        "description": "tabbycat.motions.models",
        "peekOfCode": "class RoundMotion(models.Model):\n    \"\"\"Represents the relation between rounds and motions\"\"\"\n    motion = models.ForeignKey(Motion, models.CASCADE,\n        verbose_name=_(\"motion\"))\n    round = models.ForeignKey('tournaments.Round', models.CASCADE,\n        verbose_name=_(\"round\"))\n    seq = models.IntegerField(default=1,\n        verbose_name=_(\"sequence number\"),\n        help_text=_(\"The order in which motions are displayed\"))\n    class Meta:",
        "detail": "tabbycat.motions.models",
        "documentation": {}
    },
    {
        "label": "MotionTwoTeamStatsCalculator",
        "kind": 6,
        "importPath": "tabbycat.motions.statistics",
        "description": "tabbycat.motions.statistics",
        "peekOfCode": "class MotionTwoTeamStatsCalculator:\n    def __init__(self, tournament):\n        self.tournament = tournament\n        self.by_motion = tournament.pref('enable_motions')\n        self.include_vetoes = tournament.pref('motion_vetoes_enabled')\n        self._prefetch_motions()\n        for pk, motion in self.dict_motions.items():\n            self._annotate_percentages(motion)\n            motion.χ2_label, motion.χ2_info = self._annotate_χsquared(motion.s0_wins, motion.s1_wins)\n            if self.include_vetoes:",
        "detail": "tabbycat.motions.statistics",
        "documentation": {}
    },
    {
        "label": "RoundMotionTwoTeamStatsCalculator",
        "kind": 6,
        "importPath": "tabbycat.motions.statistics",
        "description": "tabbycat.motions.statistics",
        "peekOfCode": "class RoundMotionTwoTeamStatsCalculator(MotionTwoTeamStatsCalculator):\n    def _prefetch_motions(self):\n        motions = RoundMotion.objects.filter(\n            round__tournament=self.tournament,\n            motion__ballotsubmission__confirmed=True,\n        ).annotate(\n            nrounds=Count('round'),\n            ndebates=Count('motion__ballotsubmission', filter=Q(\n                motion__ballotsubmission__debate__round=F('round'),\n                motion__ballotsubmission__confirmed=True),",
        "detail": "tabbycat.motions.statistics",
        "documentation": {}
    },
    {
        "label": "MotionBPStatsCalculator",
        "kind": 6,
        "importPath": "tabbycat.motions.statistics",
        "description": "tabbycat.motions.statistics",
        "peekOfCode": "class MotionBPStatsCalculator:\n    def __init__(self, tournament):\n        self.tournament = tournament\n        self._prefetch_prelim_motions()\n        self._collate_prelim_motion_annotations()\n        self._prefetch_elim_motions()\n        self._collate_elim_motion_annotations()\n        self.motions = itertools.chain(self.prelim_motions_dict.values(), self.elim_motions_dict.values())\n    def _prefetch_prelim_motions(self):\n        \"\"\"Constructs the database query for preliminary round motions.",
        "detail": "tabbycat.motions.statistics",
        "documentation": {}
    },
    {
        "label": "RoundMotionBPStatsCalculator",
        "kind": 6,
        "importPath": "tabbycat.motions.statistics",
        "description": "tabbycat.motions.statistics",
        "peekOfCode": "class RoundMotionBPStatsCalculator(MotionBPStatsCalculator):\n    def _prefetch_prelim_motions(self):\n        \"\"\"Constructs the database query for preliminary round motions.\n        The annotations are (1) the average team points by teams in each\n        position, and (2) the number of teams receiving n points from each\n        position for each n = 0, 1, 2, 3.\"\"\"\n        self.prelim_motions = RoundMotion.objects.filter(\n            round__tournament=self.tournament,\n            round__stage=Round.Stage.PRELIMINARY,\n            motion__ballotsubmission__confirmed=True,",
        "detail": "tabbycat.motions.statistics",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "tabbycat.motions.urls_admin",
        "description": "tabbycat.motions.urls_admin",
        "peekOfCode": "urlpatterns = [\n    path('round/<int:round_seq>/', include([\n        path('edit/',\n            views.EditMotionsView.as_view(),\n            name='motions-edit'),\n        path('copy/',\n            views.CopyMotionsView.as_view(),\n            name='motions-copy'),\n        path('previous/',\n            views.CopyPreviousMotionsView.as_view(),",
        "detail": "tabbycat.motions.urls_admin",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "tabbycat.motions.urls_assistant",
        "description": "tabbycat.motions.urls_assistant",
        "peekOfCode": "urlpatterns = [\n    path('display/',\n        views.AssistantDisplayMotionsView.as_view(),\n        name='motions-assistant-display'),\n]",
        "detail": "tabbycat.motions.urls_assistant",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "tabbycat.motions.urls_public",
        "description": "tabbycat.motions.urls_public",
        "peekOfCode": "urlpatterns = [\n    path('',\n        views.PublicMotionsView.as_view(),\n        name='motions-public'),\n    path('statistics/', include([\n        path('',\n            views.PublicRoundMotionStatisticsView.as_view(),\n            name='motions-public-statistics'),\n        path('global/',\n            views.PublicGlobalMotionStatisticsView.as_view(),",
        "detail": "tabbycat.motions.urls_public",
        "documentation": {}
    },
    {
        "label": "merge_motions",
        "kind": 2,
        "importPath": "tabbycat.motions.utils",
        "description": "tabbycat.motions.utils",
        "peekOfCode": "def merge_motions(new_bs, bses):\n    n_motions = bses.aggregate(n_motions=Count('motion', distinct=True))['n_motions']\n    if n_motions > 1:\n        raise ValidationError(_(\"Not all latest ballots have the same motion. The correct motion must be set manually.\"))\n    elif n_motions == 1:\n        new_bs.motion = bses[0].motion\ndef merge_motion_vetos(new_bs, bses):\n    vetos = {}\n    pref_lists = [tuple(bs.debateteammotionpreference_set.all().values_list(\n        'debate_team', 'debate_team__side', 'motion', 'preference')) for bs in bses]",
        "detail": "tabbycat.motions.utils",
        "documentation": {}
    },
    {
        "label": "merge_motion_vetos",
        "kind": 2,
        "importPath": "tabbycat.motions.utils",
        "description": "tabbycat.motions.utils",
        "peekOfCode": "def merge_motion_vetos(new_bs, bses):\n    vetos = {}\n    pref_lists = [tuple(bs.debateteammotionpreference_set.all().values_list(\n        'debate_team', 'debate_team__side', 'motion', 'preference')) for bs in bses]\n    preferences = {p for bs in pref_lists for p in bs}\n    rms = {}\n    for rm in RoundMotion.objects.filter(round_id=new_bs.debate.round_id):\n        rms[rm.motion_id] = rm\n    if len({p[0] for p in preferences}) != len(preferences):\n        # If a team is repeated, means different values were given and the length of both sets would",
        "detail": "tabbycat.motions.utils",
        "documentation": {}
    },
    {
        "label": "PublicMotionsView",
        "kind": 6,
        "importPath": "tabbycat.motions.views",
        "description": "tabbycat.motions.views",
        "peekOfCode": "class PublicMotionsView(PublicTournamentPageMixin, TemplateView):\n    public_page_preference = 'public_motions'\n    template_name = 'public_motions.html'\n    def get_context_data(self, **kwargs):\n        order_by = 'seq' if self.tournament.pref('public_motions_order') == 'forward' else '-seq'\n        # Include rounds whether *either* motions are released *or* it's this\n        # round or a previous round. The template checks motion_released again\n        # and displays a \"not released\" message if motions are not released.\n        filter_q = Q(motions_released=True) | Q(seq__lte=self.tournament.current_round.seq)\n        kwargs['rounds'] = self.tournament.round_set.filter(filter_q).order_by(",
        "detail": "tabbycat.motions.views",
        "documentation": {}
    },
    {
        "label": "EditMotionsView",
        "kind": 6,
        "importPath": "tabbycat.motions.views",
        "description": "tabbycat.motions.views",
        "peekOfCode": "class EditMotionsView(AdministratorMixin, LogActionMixin, RoundMixin, ModelFormSetView):\n    # Django doesn't have a class-based view for formsets, so this implements\n    # the form processing analogously to FormView, with less decomposition.\n    view_permission = Permission.VIEW_MOTION\n    edit_permission = Permission.EDIT_MOTION\n    template_name = 'motions_edit.html'\n    action_log_type = ActionLogEntry.ActionType.MOTION_EDIT\n    formset_model = Motion\n    def get_formset_factory_kwargs(self):\n        excludes = ['tournament', 'rounds', 'round', 'id']",
        "detail": "tabbycat.motions.views",
        "documentation": {}
    },
    {
        "label": "CopyMotionsView",
        "kind": 6,
        "importPath": "tabbycat.motions.views",
        "description": "tabbycat.motions.views",
        "peekOfCode": "class CopyMotionsView(EditMotionsView):\n    formset_model = RoundMotion\n    def get_formset_queryset(self):\n        return self.round.roundmotion_set.all()\n    def formset_valid(self, formset):\n        motions = formset.save(commit=False)\n        for i, motion in enumerate(motions, start=1):\n            if not self.tournament.pref('enable_motions'):\n                motion.seq = i\n            motion.round = self.round",
        "detail": "tabbycat.motions.views",
        "documentation": {}
    },
    {
        "label": "CopyPreviousMotionsView",
        "kind": 6,
        "importPath": "tabbycat.motions.views",
        "description": "tabbycat.motions.views",
        "peekOfCode": "class CopyPreviousMotionsView(AdministratorMixin, LogActionMixin, RoundMixin, PostOnlyRedirectView):\n    round_redirect_pattern_name = 'draw-display'\n    action_log_type = ActionLogEntry.ActionType.MOTION_EDIT\n    def post(self, request, *args, **kwargs):\n        self.round.roundmotion_set.all().delete()\n        if self.round.prev is None:\n            messages.error(self.request, _(\"Motions cannot be copied to the first round.\"))\n            return super().post(request, *args, **kwargs)\n        motions = self.round.prev.roundmotion_set.select_related('motion')\n        new_motions = []",
        "detail": "tabbycat.motions.views",
        "documentation": {}
    },
    {
        "label": "BaseReleaseMotionsView",
        "kind": 6,
        "importPath": "tabbycat.motions.views",
        "description": "tabbycat.motions.views",
        "peekOfCode": "class BaseReleaseMotionsView(AdministratorMixin, LogActionMixin, RoundMixin, PostOnlyRedirectView):\n    round_redirect_pattern_name = 'draw-display'\n    def post(self, request, *args, **kwargs):\n        round = self.round\n        round.motions_released = self.motions_released\n        round.save()\n        self.log_action()\n        messages.success(request, self.message_text)\n        return super().post(request, *args, **kwargs)\nclass ReleaseMotionsView(BaseReleaseMotionsView):",
        "detail": "tabbycat.motions.views",
        "documentation": {}
    },
    {
        "label": "ReleaseMotionsView",
        "kind": 6,
        "importPath": "tabbycat.motions.views",
        "description": "tabbycat.motions.views",
        "peekOfCode": "class ReleaseMotionsView(BaseReleaseMotionsView):\n    edit_permission = Permission.RELEASE_MOTION\n    action_log_type = ActionLogEntry.ActionType.MOTIONS_RELEASE\n    motions_released = True\n    @property\n    def message_text(self):\n        return ngettext(\"Released the motion.\", \"Released the motions.\", self.round.motion_set.count())\n    def post(self, request, *args, **kwargs):\n        preparation_time = self.tournament.pref('preparation_time')\n        if preparation_time > -1:",
        "detail": "tabbycat.motions.views",
        "documentation": {}
    },
    {
        "label": "UnreleaseMotionsView",
        "kind": 6,
        "importPath": "tabbycat.motions.views",
        "description": "tabbycat.motions.views",
        "peekOfCode": "class UnreleaseMotionsView(BaseReleaseMotionsView):\n    action_log_type = ActionLogEntry.ActionType.MOTIONS_UNRELEASE\n    motions_released = False\n    @property\n    def message_text(self):\n        return ngettext(\"Unreleased the motion.\", \"Unreleased the motions.\", self.round.motion_set.count())\nclass BaseDisplayMotionsView(RoundMixin, TemplateView):\n    template_name = 'show.html'\n    def get_context_data(self, **kwargs):\n        kwargs['motions'] = self.round.roundmotion_set.select_related('motion').order_by('seq')",
        "detail": "tabbycat.motions.views",
        "documentation": {}
    },
    {
        "label": "BaseDisplayMotionsView",
        "kind": 6,
        "importPath": "tabbycat.motions.views",
        "description": "tabbycat.motions.views",
        "peekOfCode": "class BaseDisplayMotionsView(RoundMixin, TemplateView):\n    template_name = 'show.html'\n    def get_context_data(self, **kwargs):\n        kwargs['motions'] = self.round.roundmotion_set.select_related('motion').order_by('seq')\n        kwargs['motions_length'] = sum(len(i.motion.text) for i in kwargs['motions'])\n        kwargs['infos'] = self.round.roundmotion_set.select_related('motion').exclude(motion__info_slide=\"\").order_by('seq')\n        kwargs['infos_length'] = sum(len(i.motion.info_slide) for i in kwargs['infos'])\n        return super().get_context_data(**kwargs)\nclass AdminDisplayMotionsView(AdministratorMixin, BaseDisplayMotionsView):\n    view_permission = Permission.DISPLAY_MOTION",
        "detail": "tabbycat.motions.views",
        "documentation": {}
    },
    {
        "label": "AdminDisplayMotionsView",
        "kind": 6,
        "importPath": "tabbycat.motions.views",
        "description": "tabbycat.motions.views",
        "peekOfCode": "class AdminDisplayMotionsView(AdministratorMixin, BaseDisplayMotionsView):\n    view_permission = Permission.DISPLAY_MOTION\nclass AssistantDisplayMotionsView(CurrentRoundMixin, OptionalAssistantTournamentPageMixin, BaseDisplayMotionsView):\n    assistant_page_permissions = ['all_areas']\nclass EmailMotionReleaseView(RoleColumnMixin, RoundTemplateEmailCreateView):\n    page_subtitle = _(\"Round Motions\")\n    event = BulkNotification.EventType.MOTIONS\n    subject_template = 'motion_email_subject'\n    message_template = 'motion_email_message'\n    round_redirect_pattern_name = 'draw-display'",
        "detail": "tabbycat.motions.views",
        "documentation": {}
    },
    {
        "label": "AssistantDisplayMotionsView",
        "kind": 6,
        "importPath": "tabbycat.motions.views",
        "description": "tabbycat.motions.views",
        "peekOfCode": "class AssistantDisplayMotionsView(CurrentRoundMixin, OptionalAssistantTournamentPageMixin, BaseDisplayMotionsView):\n    assistant_page_permissions = ['all_areas']\nclass EmailMotionReleaseView(RoleColumnMixin, RoundTemplateEmailCreateView):\n    page_subtitle = _(\"Round Motions\")\n    event = BulkNotification.EventType.MOTIONS\n    subject_template = 'motion_email_subject'\n    message_template = 'motion_email_message'\n    round_redirect_pattern_name = 'draw-display'\n    def get_default_send_queryset(self):\n        return Speaker.objects.filter(team__round_availabilities__round=self.round, email__isnull=False).exclude(email__exact=\"\")",
        "detail": "tabbycat.motions.views",
        "documentation": {}
    },
    {
        "label": "EmailMotionReleaseView",
        "kind": 6,
        "importPath": "tabbycat.motions.views",
        "description": "tabbycat.motions.views",
        "peekOfCode": "class EmailMotionReleaseView(RoleColumnMixin, RoundTemplateEmailCreateView):\n    page_subtitle = _(\"Round Motions\")\n    event = BulkNotification.EventType.MOTIONS\n    subject_template = 'motion_email_subject'\n    message_template = 'motion_email_message'\n    round_redirect_pattern_name = 'draw-display'\n    def get_default_send_queryset(self):\n        return Speaker.objects.filter(team__round_availabilities__round=self.round, email__isnull=False).exclude(email__exact=\"\")\nclass BaseMotionStatisticsView(TournamentMixin, TemplateView):\n    template_name = 'motion_statistics.html'",
        "detail": "tabbycat.motions.views",
        "documentation": {}
    },
    {
        "label": "BaseMotionStatisticsView",
        "kind": 6,
        "importPath": "tabbycat.motions.views",
        "description": "tabbycat.motions.views",
        "peekOfCode": "class BaseMotionStatisticsView(TournamentMixin, TemplateView):\n    template_name = 'motion_statistics.html'\n    page_title = gettext_lazy(\"Motion Statistics\")\n    page_emoji = '💭'\n    for_public = False\n    def get_context_data(self, **kwargs):\n        kwargs['statistics'] = self.get_statistics()\n        kwargs['type'] = self.stats_type\n        kwargs['for_public'] = self.for_public\n        kwargs['stage'] = {'PRELIM': Round.Stage.PRELIMINARY, 'ELIM': Round.Stage.ELIMINATION}",
        "detail": "tabbycat.motions.views",
        "documentation": {}
    },
    {
        "label": "RoundMotionStatisticsView",
        "kind": 6,
        "importPath": "tabbycat.motions.views",
        "description": "tabbycat.motions.views",
        "peekOfCode": "class RoundMotionStatisticsView(BaseMotionStatisticsView):\n    stats_type = \"round\"\n    two_team_statistics_generator = RoundMotionTwoTeamStatsCalculator\n    bp_statistics_generator = RoundMotionBPStatsCalculator\nclass GlobalMotionStatisticsView(BaseMotionStatisticsView):\n    stats_type = \"global\"\n    two_team_statistics_generator = MotionTwoTeamStatsCalculator\n    bp_statistics_generator = MotionBPStatsCalculator\nclass BasePublicMotionStatisticsView(PublicTournamentPageMixin):\n    \"\"\"Base class for public motion tabs",
        "detail": "tabbycat.motions.views",
        "documentation": {}
    },
    {
        "label": "GlobalMotionStatisticsView",
        "kind": 6,
        "importPath": "tabbycat.motions.views",
        "description": "tabbycat.motions.views",
        "peekOfCode": "class GlobalMotionStatisticsView(BaseMotionStatisticsView):\n    stats_type = \"global\"\n    two_team_statistics_generator = MotionTwoTeamStatsCalculator\n    bp_statistics_generator = MotionBPStatsCalculator\nclass BasePublicMotionStatisticsView(PublicTournamentPageMixin):\n    \"\"\"Base class for public motion tabs\n    Motion context provided in subclasses.\"\"\"\n    public_page_preference = 'motion_tab_released'\n    cache_timeout = settings.TAB_PAGES_CACHE_TIMEOUT\n    for_public = True",
        "detail": "tabbycat.motions.views",
        "documentation": {}
    },
    {
        "label": "BasePublicMotionStatisticsView",
        "kind": 6,
        "importPath": "tabbycat.motions.views",
        "description": "tabbycat.motions.views",
        "peekOfCode": "class BasePublicMotionStatisticsView(PublicTournamentPageMixin):\n    \"\"\"Base class for public motion tabs\n    Motion context provided in subclasses.\"\"\"\n    public_page_preference = 'motion_tab_released'\n    cache_timeout = settings.TAB_PAGES_CACHE_TIMEOUT\n    for_public = True\nclass AdminRoundMotionStatisticsView(AdministratorMixin, RoundMotionStatisticsView):\n    view_permission = Permission.VIEW_MOTIONSTAB\nclass AdminGlobalMotionStatisticsView(AdministratorMixin, GlobalMotionStatisticsView):\n    view_permission = Permission.VIEW_MOTIONSTAB",
        "detail": "tabbycat.motions.views",
        "documentation": {}
    },
    {
        "label": "AdminRoundMotionStatisticsView",
        "kind": 6,
        "importPath": "tabbycat.motions.views",
        "description": "tabbycat.motions.views",
        "peekOfCode": "class AdminRoundMotionStatisticsView(AdministratorMixin, RoundMotionStatisticsView):\n    view_permission = Permission.VIEW_MOTIONSTAB\nclass AdminGlobalMotionStatisticsView(AdministratorMixin, GlobalMotionStatisticsView):\n    view_permission = Permission.VIEW_MOTIONSTAB\nclass PublicRoundMotionStatisticsView(BasePublicMotionStatisticsView, RoundMotionStatisticsView):\n    pass\nclass PublicGlobalMotionStatisticsView(BasePublicMotionStatisticsView, GlobalMotionStatisticsView):\n    pass",
        "detail": "tabbycat.motions.views",
        "documentation": {}
    },
    {
        "label": "AdminGlobalMotionStatisticsView",
        "kind": 6,
        "importPath": "tabbycat.motions.views",
        "description": "tabbycat.motions.views",
        "peekOfCode": "class AdminGlobalMotionStatisticsView(AdministratorMixin, GlobalMotionStatisticsView):\n    view_permission = Permission.VIEW_MOTIONSTAB\nclass PublicRoundMotionStatisticsView(BasePublicMotionStatisticsView, RoundMotionStatisticsView):\n    pass\nclass PublicGlobalMotionStatisticsView(BasePublicMotionStatisticsView, GlobalMotionStatisticsView):\n    pass",
        "detail": "tabbycat.motions.views",
        "documentation": {}
    },
    {
        "label": "PublicRoundMotionStatisticsView",
        "kind": 6,
        "importPath": "tabbycat.motions.views",
        "description": "tabbycat.motions.views",
        "peekOfCode": "class PublicRoundMotionStatisticsView(BasePublicMotionStatisticsView, RoundMotionStatisticsView):\n    pass\nclass PublicGlobalMotionStatisticsView(BasePublicMotionStatisticsView, GlobalMotionStatisticsView):\n    pass",
        "detail": "tabbycat.motions.views",
        "documentation": {}
    },
    {
        "label": "PublicGlobalMotionStatisticsView",
        "kind": 6,
        "importPath": "tabbycat.motions.views",
        "description": "tabbycat.motions.views",
        "peekOfCode": "class PublicGlobalMotionStatisticsView(BasePublicMotionStatisticsView, GlobalMotionStatisticsView):\n    pass",
        "detail": "tabbycat.motions.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.notifications.migrations.0001_initial",
        "description": "tabbycat.notifications.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('participants', '0004_auto_20180420_2040'),\n        ('tournaments', '0002_remove_tournament_welcome_msg'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='MessageSentRecord',\n            fields=[",
        "detail": "tabbycat.notifications.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.notifications.migrations.0002_rename_recipient",
        "description": "tabbycat.notifications.migrations.0002_rename_recipient",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('participants', '0004_auto_20180420_2040'),\n        ('notifications', '0001_initial'),\n    ]\n    operations = [\n        migrations.RenameField(\n            model_name='messagesentrecord',\n            old_name='recepient',\n            new_name='recipient',",
        "detail": "tabbycat.notifications.migrations.0002_rename_recipient",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.notifications.migrations.0003_home_page_email",
        "description": "tabbycat.notifications.migrations.0003_home_page_email",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('notifications', '0002_rename_recipient'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='messagesentrecord',\n            name='event',\n            field=models.CharField(choices=[('p', 'team points'), ('c', 'ballot confirmed'), ('f', 'feedback URL'), ('b', 'ballot URL'), ('u', 'splash page URL')], max_length=1, verbose_name='event'),\n        ),",
        "detail": "tabbycat.notifications.migrations.0003_home_page_email",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.notifications.migrations.0004_expand_model",
        "description": "tabbycat.notifications.migrations.0004_expand_model",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('tournaments', '0002_remove_tournament_welcome_msg'),\n        ('participants', '0005_auto_20180717_0820'),\n        ('notifications', '0003_home_page_email'),\n    ]\n    operations = [\n        migrations.RenameModel(\n            old_name='MessageSentRecord',\n            new_name='SentMessageRecord',",
        "detail": "tabbycat.notifications.migrations.0004_expand_model",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.notifications.migrations.0005_auto_20180915_1152",
        "description": "tabbycat.notifications.migrations.0005_auto_20180915_1152",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('notifications', '0004_expand_model'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='sentmessagerecord',\n            name='event',\n            field=models.CharField(blank=True, choices=[('p', 'team points'), ('c', 'ballot confirmed'), ('f', 'feedback URL'), ('b', 'ballot URL'), ('u', 'landing page URL'), ('d', 'draw released'), ('t', 'team registration'), ('m', 'motion(s) released')], max_length=1, verbose_name='event'),\n        ),",
        "detail": "tabbycat.notifications.migrations.0005_auto_20180915_1152",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.notifications.migrations.0006_separate_tables",
        "description": "tabbycat.notifications.migrations.0006_separate_tables",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('tournaments', '0005_remove_tournament_current_round'),\n        ('notifications', '0005_auto_20180915_1152'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='BulkNotification',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "tabbycat.notifications.migrations.0006_separate_tables",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.notifications.migrations.0007_migrate_data",
        "description": "tabbycat.notifications.migrations.0007_migrate_data",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('notifications', '0006_separate_tables'),\n    ]\n    operations = [\n        migrations.RunPython(create_bulk_notifications),\n        migrations.RunPython(get_message_ids),\n    ]",
        "detail": "tabbycat.notifications.migrations.0007_migrate_data",
        "documentation": {}
    },
    {
        "label": "create_bulk_notifications",
        "kind": 2,
        "importPath": "tabbycat.notifications.migrations.0007_migrate_data",
        "description": "tabbycat.notifications.migrations.0007_migrate_data",
        "peekOfCode": "def create_bulk_notifications(apps, schema_editor):\n    SentMessageRecord = apps.get_model(\"notifications\", \"SentMessageRecord\")  # noqa: N806\n    BulkNotification = apps.get_model(\"notifications\", \"BulkNotification\")    # noqa: N806\n    message_queryset = SentMessageRecord.objects.order_by('event', 'round', 'tournament', 'timestamp')\n    key_getter = operator.attrgetter('event', 'round', 'tournament')\n    for (event, r, t), group in itertools.groupby(message_queryset, key_getter):\n        messages = list(group)\n        notification = BulkNotification.objects.create(event=event,\n                timestamp=messages[0].timestamp, round=r, tournament=t)\n        notification_id = notification.id",
        "detail": "tabbycat.notifications.migrations.0007_migrate_data",
        "documentation": {}
    },
    {
        "label": "get_message_ids",
        "kind": 2,
        "importPath": "tabbycat.notifications.migrations.0007_migrate_data",
        "description": "tabbycat.notifications.migrations.0007_migrate_data",
        "peekOfCode": "def get_message_ids(apps, schema_editor):\n    SentMessageRecord = apps.get_model(\"notifications\", \"SentMessageRecord\")  # noqa: N806\n    for m in SentMessageRecord.objects.all():\n        message = email.message_from_string(m.message)\n        m.message_id = message.get('Message-ID')\n        m.save()\nclass Migration(migrations.Migration):\n    dependencies = [\n        ('notifications', '0006_separate_tables'),\n    ]",
        "detail": "tabbycat.notifications.migrations.0007_migrate_data",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.notifications.migrations.0008_remove_deprecated",
        "description": "tabbycat.notifications.migrations.0008_remove_deprecated",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('notifications', '0007_migrate_data'),\n    ]\n    operations = [\n        migrations.AlterModelOptions(\n            name='sentmessagerecord',\n            options={'verbose_name': 'sent message', 'verbose_name_plural': 'sent messages'},\n        ),\n        migrations.AlterField(",
        "detail": "tabbycat.notifications.migrations.0008_remove_deprecated",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.notifications.migrations.0009_auto_20181126_1001",
        "description": "tabbycat.notifications.migrations.0009_auto_20181126_1001",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('notifications', '0008_remove_deprecated'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='bulknotification',\n            name='event',\n            field=models.CharField(blank=True, choices=[('p', 'team points'), ('c', 'ballot confirmed'), ('f', 'feedback URL'), ('b', 'ballot URL'), ('u', 'landing page URL'), ('d', 'adjudicator draw released'), ('t', 'team registration'), ('a', 'adjudicator registration'), ('m', 'motion(s) released'), ('r', 'team draw released')], max_length=1, verbose_name='event'),\n        ),",
        "detail": "tabbycat.notifications.migrations.0009_auto_20181126_1001",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.notifications.migrations.0010_auto_20190113_1952",
        "description": "tabbycat.notifications.migrations.0010_auto_20190113_1952",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('participants', '0008_auto_20181224_1719'),\n        ('notifications', '0009_auto_20181126_1001'),\n    ]\n    operations = [\n        migrations.RenameModel(\n            old_name='SentMessageRecord',\n            new_name='SentMessage',\n        ),",
        "detail": "tabbycat.notifications.migrations.0010_auto_20190113_1952",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.notifications.migrations.0011_auto_20200902_1208",
        "description": "tabbycat.notifications.migrations.0011_auto_20200902_1208",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('notifications', '0010_auto_20190113_1952'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='emailstatus',\n            name='data',\n            field=models.JSONField(blank=True, null=True, verbose_name='context'),\n        ),",
        "detail": "tabbycat.notifications.migrations.0011_auto_20200902_1208",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.notifications.migrations.0012_auto_20201018_2128",
        "description": "tabbycat.notifications.migrations.0012_auto_20201018_2128",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('notifications', '0011_auto_20200902_1208'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='sentmessage',\n            name='message',\n        ),\n        migrations.AddField(",
        "detail": "tabbycat.notifications.migrations.0012_auto_20201018_2128",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.notifications.migrations.0013_alter_bulknotification_event",
        "description": "tabbycat.notifications.migrations.0013_alter_bulknotification_event",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('notifications', '0012_auto_20201018_2128'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='bulknotification',\n            name='event',\n            field=models.CharField(choices=[('p', 'team points'), ('c', 'ballot confirmed'), ('f', 'feedback URL'), ('b', 'ballot URL'), ('u', 'landing page URL'), ('d', 'adjudicator draw released'), ('t', 'team registration'), ('a', 'adjudicator registration'), ('m', 'motion(s) released'), ('r', 'team draw released'), ('', 'custom message')], max_length=20, verbose_name='event'),\n        ),",
        "detail": "tabbycat.notifications.migrations.0013_alter_bulknotification_event",
        "documentation": {}
    },
    {
        "label": "SentMessageAdmin",
        "kind": 6,
        "importPath": "tabbycat.notifications.admin",
        "description": "tabbycat.notifications.admin",
        "peekOfCode": "class SentMessageAdmin(TabbycatModelAdminFieldsMixin, ModelAdmin):\n    list_display = ('recipient', 'email', 'precise_timestamp', 'notification')\n    list_filter = ('notification__round', 'method', 'notification__event')\n    search_fields = ('message_id', 'recipient__name', 'email', 'recipient__email')\n    ordering = ('-notification',)\n    def get_queryset(self, request: 'HttpRequest') -> 'QuerySet[SentMessage]':\n        return super().get_queryset(request).select_related('recipient', 'notification__tournament')\n    precise_timestamp = precise_timestamp_isoformat(SentMessage, 'timestamp')\n@admin.register(BulkNotification)\nclass BulkNotificationAdmin(TabbycatModelAdminFieldsMixin, ModelAdmin):",
        "detail": "tabbycat.notifications.admin",
        "documentation": {}
    },
    {
        "label": "BulkNotificationAdmin",
        "kind": 6,
        "importPath": "tabbycat.notifications.admin",
        "description": "tabbycat.notifications.admin",
        "peekOfCode": "class BulkNotificationAdmin(TabbycatModelAdminFieldsMixin, ModelAdmin):\n    list_display = ('precise_timestamp', 'event', 'round', 'tournament')\n    list_filter = ('tournament', 'round', 'event')\n    ordering = ('-timestamp',)\n    def get_queryset(self, request: 'HttpRequest') -> 'QuerySet[BulkNotification]':\n        return super().get_queryset(request).select_related('round__tournament', 'tournament')\n    precise_timestamp = precise_timestamp_isoformat(BulkNotification, 'timestamp')\n@admin.register(EmailStatus)\nclass EmailStatusAdmin(TabbycatModelAdminFieldsMixin, ModelAdmin):\n    list_display = ('email', 'event', 'precise_timestamp')",
        "detail": "tabbycat.notifications.admin",
        "documentation": {}
    },
    {
        "label": "EmailStatusAdmin",
        "kind": 6,
        "importPath": "tabbycat.notifications.admin",
        "description": "tabbycat.notifications.admin",
        "peekOfCode": "class EmailStatusAdmin(TabbycatModelAdminFieldsMixin, ModelAdmin):\n    list_display = ('email', 'event', 'precise_timestamp')\n    list_filter = ('event',)\n    ordering = ('-timestamp',)\n    search_fields = ('email__message_id', 'email__recipient__name', 'email__email', 'email__recipient__email')\n    precise_timestamp = precise_timestamp_isoformat(EmailStatus, 'timestamp')",
        "detail": "tabbycat.notifications.admin",
        "documentation": {}
    },
    {
        "label": "precise_timestamp_isoformat",
        "kind": 2,
        "importPath": "tabbycat.notifications.admin",
        "description": "tabbycat.notifications.admin",
        "peekOfCode": "def precise_timestamp_isoformat(model: Type['Model'], field_name: str) -> Callable[['Model'], str]:\n    @admin.display(description=model._meta.get_field(field_name).verbose_name)\n    def precise_timestamp(self, obj):\n        return timezone.localtime(getattr(obj, field_name)).isoformat()\n    return precise_timestamp\n@admin.register(SentMessage)\nclass SentMessageAdmin(TabbycatModelAdminFieldsMixin, ModelAdmin):\n    list_display = ('recipient', 'email', 'precise_timestamp', 'notification')\n    list_filter = ('notification__round', 'method', 'notification__event')\n    search_fields = ('message_id', 'recipient__name', 'email', 'recipient__email')",
        "detail": "tabbycat.notifications.admin",
        "documentation": {}
    },
    {
        "label": "NotificationsConfig",
        "kind": 6,
        "importPath": "tabbycat.notifications.apps",
        "description": "tabbycat.notifications.apps",
        "peekOfCode": "class NotificationsConfig(AppConfig):\n    name = 'notifications'\n    verbose_name = _(\"Notifications\")",
        "detail": "tabbycat.notifications.apps",
        "documentation": {}
    },
    {
        "label": "NotificationQueueConsumer",
        "kind": 6,
        "importPath": "tabbycat.notifications.consumers",
        "description": "tabbycat.notifications.consumers",
        "peekOfCode": "class NotificationQueueConsumer(SyncConsumer):\n    NOTIFICATION_GENERATORS: Dict[BulkNotification.EventType, Type[NotificationContextGenerator]] = {\n        BulkNotification.EventType.ADJ_DRAW: AdjudicatorAssignmentEmailGenerator,\n        BulkNotification.EventType.URL: RandomizedUrlEmailGenerator,\n        BulkNotification.EventType.BALLOTS_CONFIRMED: BallotsEmailGenerator,\n        BulkNotification.EventType.POINTS: StandingsEmailGenerator,\n        BulkNotification.EventType.MOTIONS: MotionReleaseEmailGenerator,\n        BulkNotification.EventType.TEAM_REG: TeamSpeakerEmailGenerator,\n        BulkNotification.EventType.TEAM_DRAW: TeamDrawEmailGenerator,\n        BulkNotification.EventType.CUSTOM: NotificationContextGenerator,",
        "detail": "tabbycat.notifications.consumers",
        "documentation": {}
    },
    {
        "label": "TestEmailForm",
        "kind": 6,
        "importPath": "tabbycat.notifications.forms",
        "description": "tabbycat.notifications.forms",
        "peekOfCode": "class TestEmailForm(forms.Form):\n    \"\"\"Simple form that just sends a test email.\"\"\"\n    recipient = forms.EmailField(label=gettext_lazy(\"Recipient email address\"), required=True)\n    def send_email(self, host: str) -> str:\n        send_mail(\n            _(\"Test email from %(host)s\") % {'host': host},\n            _(\"Congratulations! If you're reading this message, your email \"\n              \"backend on %(host)s looks all good to go!\") % {'host': host},\n            settings.DEFAULT_FROM_EMAIL,\n            [self.cleaned_data['recipient']],",
        "detail": "tabbycat.notifications.forms",
        "documentation": {}
    },
    {
        "label": "BasicEmailForm",
        "kind": 6,
        "importPath": "tabbycat.notifications.forms",
        "description": "tabbycat.notifications.forms",
        "peekOfCode": "class BasicEmailForm(forms.Form):\n    \"\"\"A base class for an email form with fields for subject/message\n    Note that the list of recipients is handled by Vue, bypassing this Form.\"\"\"\n    subject_line = forms.CharField(label=_(\"Subject\"), required=True, max_length=78)\n    message_body = forms.CharField(label=_(\"Message\"), required=True, widget=SummernoteWidget(\n        attrs={'height': 150, 'class': 'form-summernote'}))\n    def clean_as_template(self, field_name: str) -> str:\n        try:\n            Template(self.cleaned_data[field_name])\n        except TemplateSyntaxError as e:",
        "detail": "tabbycat.notifications.forms",
        "documentation": {}
    },
    {
        "label": "SentMessage",
        "kind": 6,
        "importPath": "tabbycat.notifications.models",
        "description": "tabbycat.notifications.models",
        "peekOfCode": "class SentMessage(models.Model):\n    METHOD_TYPE_EMAIL = 'e'\n    METHOD_TYPE_SMS = 's'\n    METHOD_TYPE_CHOICES = (\n        (METHOD_TYPE_EMAIL, _(\"email\")),\n        (METHOD_TYPE_SMS, _(\"SMS\")),\n    )\n    message_id = models.CharField(max_length=254, unique=True, null=True,\n        verbose_name=\"Message-ID\") # Technical, Untranslatable term\n    hook_id = models.CharField(max_length=16, unique=True, blank=True, null=True,",
        "detail": "tabbycat.notifications.models",
        "documentation": {}
    },
    {
        "label": "BulkNotification",
        "kind": 6,
        "importPath": "tabbycat.notifications.models",
        "description": "tabbycat.notifications.models",
        "peekOfCode": "class BulkNotification(models.Model):\n    class EventType(models.TextChoices):\n        POINTS = 'p', _(\"team points\")\n        BALLOTS_CONFIRMED = 'c', _(\"ballot confirmed\")\n        FEEDBACK_URL = 'f', _(\"feedback URL\")\n        BALLOT_URL = 'b', _(\"ballot URL\")\n        URL = 'u', _(\"landing page URL\")\n        ADJ_DRAW = 'd', _(\"adjudicator draw released\")\n        TEAM_REG = 't', _(\"team registration\")\n        ADJ_REG = 'a', _(\"adjudicator registration\")",
        "detail": "tabbycat.notifications.models",
        "documentation": {}
    },
    {
        "label": "EmailStatus",
        "kind": 6,
        "importPath": "tabbycat.notifications.models",
        "description": "tabbycat.notifications.models",
        "peekOfCode": "class EmailStatus(models.Model):\n    class EventType(models.TextChoices):\n        PROCESSED = 'processed', _(\"Processed\")\n        DROPPED = 'dropped', _(\"Dropped\")\n        DEFERRED = 'deferred', _(\"Deferred\")\n        DELIVERED = 'delivered', _(\"Delivered\")\n        BOUNCED = 'bounce', _(\"Bounced\")\n        OPENED = 'open', _(\"Opened\")\n        CLICKED = 'click', _(\"Clicked\")\n        UNSUBSCRIBED = 'unsubscribe', _(\"Unsubscribed\")",
        "detail": "tabbycat.notifications.models",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "tabbycat.notifications.urls",
        "description": "tabbycat.notifications.urls",
        "peekOfCode": "urlpatterns = [\n    path('send-test-email/',\n        views.TestEmailView.as_view(),\n        name='notifications-test-email'),\n]",
        "detail": "tabbycat.notifications.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "tabbycat.notifications.urls_admin",
        "description": "tabbycat.notifications.urls_admin",
        "peekOfCode": "urlpatterns = [\n    path('',\n        views.CustomEmailCreateView.as_view(),\n        name='notifications-email'),\n    path('event-webhook/<slug:key>',\n        views.EmailEventWebhookView.as_view(),\n        name='notifications-webhook'),\n    path('status/',\n        views.EmailStatusView.as_view(),\n        name='notifications-status'),",
        "detail": "tabbycat.notifications.urls_admin",
        "documentation": {}
    },
    {
        "label": "EmailContextData",
        "kind": 6,
        "importPath": "tabbycat.notifications.utils",
        "description": "tabbycat.notifications.utils",
        "peekOfCode": "class EmailContextData:\n    pass\ndef _assemble_panel(adjs: List[Tuple['Person', str]]) -> str:\n    adj_string = []\n    for adj, pos in adjs:\n        adj_string.append(\"%s (%s)\" % (adj.name, adj_position_names[pos]))\n    return \", \".join(adj_string)\ndef _check_in_to(pk: int, to_ids: Set[int]) -> bool:\n    try:\n        to_ids.remove(pk)",
        "detail": "tabbycat.notifications.utils",
        "documentation": {}
    },
    {
        "label": "NotificationContextGenerator",
        "kind": 6,
        "importPath": "tabbycat.notifications.utils",
        "description": "tabbycat.notifications.utils",
        "peekOfCode": "class NotificationContextGenerator:\n    context_class = EmailContextData\n    @classmethod\n    def generate(cls, to: 'QuerySet[Person]', **kwargs: Dict[str, Any]) -> List[Tuple[EmailContextData, 'Person']]:\n        return [(cls.context_class(), person) for person in to]\nclass AdjudicatorAssignmentEmailGenerator(NotificationContextGenerator):\n    @dataclass\n    class AdjudicatorAssignmentContext(EmailContextData):\n        ROUND: str\n        VENUE: str",
        "detail": "tabbycat.notifications.utils",
        "documentation": {}
    },
    {
        "label": "AdjudicatorAssignmentEmailGenerator",
        "kind": 6,
        "importPath": "tabbycat.notifications.utils",
        "description": "tabbycat.notifications.utils",
        "peekOfCode": "class AdjudicatorAssignmentEmailGenerator(NotificationContextGenerator):\n    @dataclass\n    class AdjudicatorAssignmentContext(EmailContextData):\n        ROUND: str\n        VENUE: str\n        PANEL: str\n        DRAW: str\n        POSITION: str\n        URL: str\n    context_class = AdjudicatorAssignmentContext",
        "detail": "tabbycat.notifications.utils",
        "documentation": {}
    },
    {
        "label": "RandomizedUrlEmailGenerator",
        "kind": 6,
        "importPath": "tabbycat.notifications.utils",
        "description": "tabbycat.notifications.utils",
        "peekOfCode": "class RandomizedUrlEmailGenerator(NotificationContextGenerator):\n    @dataclass\n    class RandomizedUrlContext(EmailContextData):\n        KEY: str\n        TOURN: str\n        URL: str\n    context_class = RandomizedUrlContext\n    @classmethod\n    def generate(cls, to: 'QuerySet[Person]', url: str, tournament: 'Tournament') -> List[Tuple[EmailContextData, 'Person']]:\n        return [(cls.context_class(URL=url + p.url_key + '/', KEY=p.url_key, TOURN=str(tournament)), p) for p in to]",
        "detail": "tabbycat.notifications.utils",
        "documentation": {}
    },
    {
        "label": "BallotsEmailGenerator",
        "kind": 6,
        "importPath": "tabbycat.notifications.utils",
        "description": "tabbycat.notifications.utils",
        "peekOfCode": "class BallotsEmailGenerator(NotificationContextGenerator):\n    @dataclass\n    class BallotsContext(EmailContextData):\n        DEBATE: str\n        SCORES: str\n    context_class = BallotsContext\n    @classmethod\n    def generate(cls, to: 'QuerySet[Person]', debate: 'Debate') -> List[Tuple[EmailContextData, 'Person']]:\n        emails = []\n        tournament = debate.round.tournament",
        "detail": "tabbycat.notifications.utils",
        "documentation": {}
    },
    {
        "label": "StandingsEmailGenerator",
        "kind": 6,
        "importPath": "tabbycat.notifications.utils",
        "description": "tabbycat.notifications.utils",
        "peekOfCode": "class StandingsEmailGenerator(NotificationContextGenerator):\n    @dataclass\n    class StandingsContext(EmailContextData):\n        TOURN: str\n        ROUND: str\n        URL: str\n        POINTS: str\n        TEAM: str\n    context_class = StandingsContext\n    @classmethod",
        "detail": "tabbycat.notifications.utils",
        "documentation": {}
    },
    {
        "label": "MotionReleaseEmailGenerator",
        "kind": 6,
        "importPath": "tabbycat.notifications.utils",
        "description": "tabbycat.notifications.utils",
        "peekOfCode": "class MotionReleaseEmailGenerator(NotificationContextGenerator):\n    @dataclass\n    class MotionReleaseContext(EmailContextData):\n        TOURN: str\n        ROUND: str\n        MOTIONS: str\n    context_class = MotionReleaseContext\n    @classmethod\n    def generate(cls, to: 'QuerySet[Person]', round: 'Round') -> List[Tuple[EmailContextData, 'Person']]:\n        def _create_motion_list():",
        "detail": "tabbycat.notifications.utils",
        "documentation": {}
    },
    {
        "label": "TeamSpeakerEmailGenerator",
        "kind": 6,
        "importPath": "tabbycat.notifications.utils",
        "description": "tabbycat.notifications.utils",
        "peekOfCode": "class TeamSpeakerEmailGenerator(NotificationContextGenerator):\n    @dataclass\n    class TeamSpeakerContext(EmailContextData):\n        TOURN: str\n        SHORT: str\n        LONG: str\n        CODE: str\n        BREAK: str\n        SPEAKERS: str\n        INSTITUTION: str",
        "detail": "tabbycat.notifications.utils",
        "documentation": {}
    },
    {
        "label": "TeamDrawEmailGenerator",
        "kind": 6,
        "importPath": "tabbycat.notifications.utils",
        "description": "tabbycat.notifications.utils",
        "peekOfCode": "class TeamDrawEmailGenerator(NotificationContextGenerator):\n    @dataclass\n    class TeamDrawContext(EmailContextData):\n        ROUND: str\n        VENUE: str\n        PANEL: str\n        DRAW: str\n        TEAM: str\n        SIDE: str\n    context_class = TeamDrawContext",
        "detail": "tabbycat.notifications.utils",
        "documentation": {}
    },
    {
        "label": "adj_position_names",
        "kind": 5,
        "importPath": "tabbycat.notifications.utils",
        "description": "tabbycat.notifications.utils",
        "peekOfCode": "adj_position_names = {\n    AdjudicatorAllocation.POSITION_CHAIR: _(\"the chair\"),\n    AdjudicatorAllocation.POSITION_ONLY: _(\"the only\"),\n    AdjudicatorAllocation.POSITION_PANELLIST: _(\"a panellist\"),\n    AdjudicatorAllocation.POSITION_TRAINEE: _(\"a trainee\"),\n}\n@dataclass\nclass EmailContextData:\n    pass\ndef _assemble_panel(adjs: List[Tuple['Person', str]]) -> str:",
        "detail": "tabbycat.notifications.utils",
        "documentation": {}
    },
    {
        "label": "TestEmailView",
        "kind": 6,
        "importPath": "tabbycat.notifications.views",
        "description": "tabbycat.notifications.views",
        "peekOfCode": "class TestEmailView(WarnAboutLegacySendgridConfigVarsMixin, AdministratorMixin, FormView):\n    form_class = TestEmailForm\n    template_name = 'test_email.html'\n    success_url = reverse_lazy('notifications-test-email')\n    view_role = \"\"\n    def form_valid(self, form: TestEmailForm) -> 'HttpResponseRedirect':\n        host = self.request.get_host()\n        try:\n            recipient = form.send_email(host)\n        except SMTPResponseException as e:",
        "detail": "tabbycat.notifications.views",
        "documentation": {}
    },
    {
        "label": "EmailStatusView",
        "kind": 6,
        "importPath": "tabbycat.notifications.views",
        "description": "tabbycat.notifications.views",
        "peekOfCode": "class EmailStatusView(AdministratorMixin, TournamentMixin, VueTableTemplateView):\n    page_title = gettext_lazy(\"Email Statuses\")\n    page_emoji = '📤'\n    template_name = 'email_statuses.html'\n    view_permission = Permission.VIEW_EMAIL_STATUSES\n    tables_orientation = 'rows'\n    NA_CELL = {'text': _(\"N/A\"), 'class': 'text-muted'}\n    UNKNOWN_RECIPIENT_CELL = {'text': _(\"Not known\"), 'class': 'text-muted'}\n    def _create_status_timeline(self, status: List[EmailStatus]) -> List[Dict[str, str]]:\n        statuses = []",
        "detail": "tabbycat.notifications.views",
        "documentation": {}
    },
    {
        "label": "EmailEventWebhookView",
        "kind": 6,
        "importPath": "tabbycat.notifications.views",
        "description": "tabbycat.notifications.views",
        "peekOfCode": "class EmailEventWebhookView(TournamentMixin, View):\n    def post(self, request: 'HttpRequest', *args, **kwargs) -> HttpResponse:\n        if not self.tournament.pref('email_hook_key'):\n            return HttpResponse(status=403) # 403: Forbidden\n        if kwargs['key'] != self.tournament.pref('email_hook_key'):\n            return HttpResponse(status=403) # 403: Forbidden\n        data = json.loads(request.body)\n        # Ignore all objects without a Tabbycat-specified hook ID\n        data = [obj for obj in data if 'hook-id' in obj and obj['hook-id'] is not None]\n        records = SentMessage.objects.filter(hook_id__in=[obj['hook-id'] for obj in data])",
        "detail": "tabbycat.notifications.views",
        "documentation": {}
    },
    {
        "label": "BaseSelectPeopleEmailView",
        "kind": 6,
        "importPath": "tabbycat.notifications.views",
        "description": "tabbycat.notifications.views",
        "peekOfCode": "class BaseSelectPeopleEmailView(AdministratorMixin, TournamentMixin, VueTableTemplateView, FormView):\n    template_name = \"email_participants.html\"\n    page_title = gettext_lazy(\"Email Participants\")\n    page_emoji = '📤'\n    edit_permission = Permission.SEND_EMAILS\n    form_class = BasicEmailForm\n    def get_success_url(self, *args, **kwargs) -> str:\n        return self.get_redirect_url(*args, **kwargs)\n    def get_context_data(self, **kwargs) -> Dict[str, Any]:\n        context = super().get_context_data(**kwargs)",
        "detail": "tabbycat.notifications.views",
        "documentation": {}
    },
    {
        "label": "RoleColumnMixin",
        "kind": 6,
        "importPath": "tabbycat.notifications.views",
        "description": "tabbycat.notifications.views",
        "peekOfCode": "class RoleColumnMixin:\n    \"\"\"Mixin to have a column Adjudicator/Speaker for email\"\"\"\n    def get_table(self, mixed_participants: bool = True) -> TabbycatTableBuilder:\n        table = super().get_table(mixed_participants)\n        table.add_column({'key': 'role', 'title': _(\"Role\")}, [{\n            'text': _(\"Adjudicator\") if hasattr(p, 'adjudicator') else _(\"Speaker\"),\n        } for p in self.get_queryset()])\n        return table\n    def get_context_data(self, **kwargs) -> Dict[str, Any]:\n        context = super().get_context_data(**kwargs)",
        "detail": "tabbycat.notifications.views",
        "documentation": {}
    },
    {
        "label": "TemplateEmailCreateView",
        "kind": 6,
        "importPath": "tabbycat.notifications.views",
        "description": "tabbycat.notifications.views",
        "peekOfCode": "class TemplateEmailCreateView(BaseSelectPeopleEmailView):\n    def get_initial(self) -> Dict[str, str]:\n        initial = super().get_initial()\n        initial['subject_line'] = self.tournament.pref(self.subject_template)\n        initial['message_body'] = self.tournament.pref(self.message_template)\n        return initial\n    def form_valid(self, form: BasicEmailForm) -> 'HttpResponseRedirect':\n        if hasattr(self, 'subject_template'):\n            self.tournament.preferences[self.subject_template] = form.cleaned_data['subject_line']\n            self.tournament.preferences[self.message_template] = form.cleaned_data['message_body']",
        "detail": "tabbycat.notifications.views",
        "documentation": {}
    },
    {
        "label": "TournamentTemplateEmailCreateView",
        "kind": 6,
        "importPath": "tabbycat.notifications.views",
        "description": "tabbycat.notifications.views",
        "peekOfCode": "class TournamentTemplateEmailCreateView(TemplateEmailCreateView):\n    def get_default_send_queryset(self) -> 'QuerySet[Person]':\n        return super().get_default_send_queryset().exclude(\n            sentmessage__notification__event=self.event, sentmessage__notification__tournament=self.tournament)\n    def get_extra(self) -> Dict[str, Any]:\n        extra = {'tournament_id': self.tournament.id}\n        return extra\nclass CustomEmailCreateView(RoleColumnMixin, TournamentTemplateEmailCreateView):\n    tournament_redirect_pattern_name = 'notifications-email'\n    event = BulkNotification.EventType.CUSTOM",
        "detail": "tabbycat.notifications.views",
        "documentation": {}
    },
    {
        "label": "CustomEmailCreateView",
        "kind": 6,
        "importPath": "tabbycat.notifications.views",
        "description": "tabbycat.notifications.views",
        "peekOfCode": "class CustomEmailCreateView(RoleColumnMixin, TournamentTemplateEmailCreateView):\n    tournament_redirect_pattern_name = 'notifications-email'\n    event = BulkNotification.EventType.CUSTOM\n    def get_initial(self) -> Dict[str, str]:\n        return {}  # Have everything unset\n    def get_default_send_queryset(self) -> 'QuerySet[Person]':\n        # From TemplateEmailCreateView to avoid excluding if already got custom\n        return self.get_queryset().filter(email__isnull=False).exclude(email__exact=\"\")\n    def default_send(self, p: Person, default_send_queryset: 'QuerySet[Person]') -> bool:\n        return False",
        "detail": "tabbycat.notifications.views",
        "documentation": {}
    },
    {
        "label": "RoundTemplateEmailCreateView",
        "kind": 6,
        "importPath": "tabbycat.notifications.views",
        "description": "tabbycat.notifications.views",
        "peekOfCode": "class RoundTemplateEmailCreateView(TemplateEmailCreateView, RoundMixin):\n    def get_default_send_queryset(self) -> 'QuerySet[Person]':\n        return super().get_default_send_queryset().exclude(\n            sentmessage__notification__event=self.event, sentmessage__notification__round=self.round)\n    def get_extra(self) -> Dict[str, Any]:\n        extra = {'round_id': self.round.id}\n        return extra",
        "detail": "tabbycat.notifications.views",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "tabbycat.notifications.views",
        "description": "tabbycat.notifications.views",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass TestEmailView(WarnAboutLegacySendgridConfigVarsMixin, AdministratorMixin, FormView):\n    form_class = TestEmailForm\n    template_name = 'test_email.html'\n    success_url = reverse_lazy('notifications-test-email')\n    view_role = \"\"\n    def form_valid(self, form: TestEmailForm) -> 'HttpResponseRedirect':\n        host = self.request.get_host()\n        try:\n            recipient = form.send_email(host)",
        "detail": "tabbycat.notifications.views",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "tabbycat.options.management.commands.applypreset",
        "description": "tabbycat.options.management.commands.applypreset",
        "peekOfCode": "class Command(TournamentCommand):\n    help = \"Applies a preferences preset\"\n    def add_arguments(self, parser):\n        super().add_arguments(parser)\n        parser.add_argument(\"preset\", choices=[slugify(x.__name__) for x in all_presets()])\n    def handle_tournament(self, tournament, **options):\n        selected_preset = get_preset_from_slug(options[\"preset\"])\n        self.stdout.write(\"Applying preset: \" + selected_preset.name)\n        selected_preset.save(tournament)",
        "detail": "tabbycat.options.management.commands.applypreset",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "tabbycat.options.management.commands.exportconfig",
        "description": "tabbycat.options.management.commands.exportconfig",
        "peekOfCode": "class Command(TournamentCommand):\n    help = \"Exports a tournament configuration to a JSON file.\"\n    def add_arguments(self, parser):\n        super(Command, self).add_arguments(parser)\n        parser.add_argument(\"file\", nargs=\"?\", type=str, default=\"config-<t>.json\",\n            help=\"Output file, where <t> will be replaced by the tournament slug. \"\n                 \"(default: config-<t>.json)\")\n        parser.add_argument(\"--compact\", action=\"store_true\",\n            help=\"Don't insert newlines in the JSON file.\")\n        parser.add_argument(\"--indent\", \"-i\", type=int, default=2,",
        "detail": "tabbycat.options.management.commands.exportconfig",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "tabbycat.options.management.commands.importconfig",
        "description": "tabbycat.options.management.commands.importconfig",
        "peekOfCode": "class Command(TournamentCommand):\n    help = \"Imports a tournament configuration from a JSON file.\"\n    def add_arguments(self, parser):\n        super(Command, self).add_arguments(parser)\n        parser.add_argument(\"file\", type=argparse.FileType('r'),\n            help=\"Input file\")\n    def handle_tournament(self, tournament, **options):\n        config = json.load(options['file'])\n        for key, value in config.items():\n            tournament.preferences[key] = value",
        "detail": "tabbycat.options.management.commands.importconfig",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.options.migrations.0001_initial",
        "description": "tabbycat.options.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('tournaments', '0001_initial'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='TournamentPreferenceModel',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "tabbycat.options.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.options.migrations.0002_move_welcome_message",
        "description": "tabbycat.options.migrations.0002_move_welcome_message",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('options', '0001_initial'),\n        ('tournaments', '0001_initial'),\n    ]\n    operations = [\n        migrations.RunSQL(\n            \"INSERT INTO options_tournamentpreferencemodel (section, name, raw_value, instance_id) SELECT 'public_features', 'welcome_message', welcome_msg, id FROM tournaments_tournament ON CONFLICT (instance_id, section, name) DO UPDATE SET raw_value=EXCLUDED.raw_value;\",\n            \"UPDATE tournaments_tournament t SET welcome_msg=o.raw_value FROM options_tournamentpreferencemodel o WHERE o.instance_id=t.id AND o.section='public_features' AND o.name='welcome_message';\",\n            elidable=True,",
        "detail": "tabbycat.options.migrations.0002_move_welcome_message",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.options.migrations.0003_split_up_ballots_per_debate",
        "description": "tabbycat.options.migrations.0003_split_up_ballots_per_debate",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('options', '0002_move_welcome_message'),\n        ('tournaments', '0001_initial'),\n    ]\n    operations = [\n        migrations.RunSQL(\n            \"INSERT INTO options_tournamentpreferencemodel (section, name, raw_value, instance_id) SELECT section, new_pref, raw_value, instance_id FROM options_tournamentpreferencemodel, (VALUES ('ballots_per_debate_prelim'), ('ballots_per_debate_elim')) t(new_pref) WHERE section='debate_rules' AND name='ballots_per_debate' ON CONFLICT DO NOTHING;\",\n            \"DELETE FROM options_tournamentpreferencemodel WHERE section='debate_rules' AND name IN ('ballots_per_debate_prelim', 'ballots_per_debate_elim');\",\n            elidable=True,",
        "detail": "tabbycat.options.migrations.0003_split_up_ballots_per_debate",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.options.migrations.0004_convert_tournament_staff",
        "description": "tabbycat.options.migrations.0004_convert_tournament_staff",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('options', '0003_split_up_ballots_per_debate'),\n    ]\n    operations = [\n        migrations.RunSQL(\n            \"INSERT INTO options_tournamentpreferencemodel (section, name, raw_value, instance_id) SELECT 'public_features', 'tournament_staff', array_to_string(array_agg('<strong>' || n.label || ':</strong> ' || o.raw_value ORDER BY n.seq), '<br />') new_val, instance_id FROM options_tournamentpreferencemodel o INNER JOIN (VALUES (1, 'tab_credit', 'Tabulation'), (2, 'org_credit', 'Organisation'), (3, 'adj_credit', 'Adjudication')) n(seq, name, label) ON o.name=n.name WHERE section='public_features' GROUP BY instance_id ON CONFLICT (section, name, instance_id) DO UPDATE SET raw_value=CASE WHEN options_tournamentpreferencemodel.raw_value='' THEN EXCLUDED.raw_value ELSE options_tournamentpreferencemodel.raw_value END;\",\n            migrations.RunSQL.noop,\n            elidable=True,\n        ),",
        "detail": "tabbycat.options.migrations.0004_convert_tournament_staff",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.options.migrations.0005_speaker_standings",
        "description": "tabbycat.options.migrations.0005_speaker_standings",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('options', '0004_convert_tournament_staff'),\n    ]\n    operations = [\n        migrations.RunSQL(\n            \"INSERT INTO options_tournamentpreferencemodel (section, name, raw_value, instance_id) SELECT 'standings', 'speaker_standings_precedence', raw_value, instance_id FROM options_tournamentpreferencemodel WHERE section='standings' AND name='rank_speakers_by' ON CONFLICT DO NOTHING;\",\n            \"DELETE FROM options_tournamentpreferencemodel WHERE section='standings' AND name='speaker_standings_precedence';\",\n            elidable=True,\n        ),",
        "detail": "tabbycat.options.migrations.0005_speaker_standings",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.options.migrations.0006_convert_public_draw",
        "description": "tabbycat.options.migrations.0006_convert_public_draw",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('options', '0005_speaker_standings'),\n    ]\n    operations = [\n        migrations.RunSQL(\n            \"UPDATE options_tournamentpreferencemodel o1 SET raw_value=CASE WHEN o1.raw_value='True' AND o2.raw_value='True' THEN 'all-released' WHEN o1.raw_value='True' THEN 'current' ELSE 'off' END FROM options_tournamentpreferencemodel o2 WHERE o1.section='public_features' AND o1.name='public_draw' AND o2.section='ui_options' AND o2.name='show_all_draws' AND o1.instance_id=o2.instance_id;\",\n            \"UPDATE options_tournamentpreferencemodel SET raw_value=CASE WHEN raw_value='off' THEN 'False' ELSE 'True' END WHERE section='public_features' AND name='public_draw';\",\n            elidable=True,\n        ),",
        "detail": "tabbycat.options.migrations.0006_convert_public_draw",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.options.migrations.0007_auto_20181224_1719",
        "description": "tabbycat.options.migrations.0007_auto_20181224_1719",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('options', '0006_convert_public_draw'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='tournamentpreferencemodel',\n            name='name',\n            field=models.CharField(db_index=True, max_length=150, verbose_name='Name'),\n        ),",
        "detail": "tabbycat.options.migrations.0007_auto_20181224_1719",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.options.migrations.0008_auto_20190906_1310",
        "description": "tabbycat.options.migrations.0008_auto_20190906_1310",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('options', '0007_auto_20181224_1719'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='tournamentpreferencemodel',\n            name='section',\n            field=models.CharField(blank=True, db_index=True, default=None, max_length=150, null=True, verbose_name='Section Name'),\n        ),",
        "detail": "tabbycat.options.migrations.0008_auto_20190906_1310",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.options.migrations.0009_create_motions_section",
        "description": "tabbycat.options.migrations.0009_create_motions_section",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('options', '0008_auto_20190906_1310'),\n    ]\n    operations = [\n        migrations.RunSQL(\n            \"UPDATE options_tournamentpreferencemodel SET section='motions' WHERE name IN ('enable_motions', 'motion_vetoes_enabled')\",\n            \"UPDATE options_tournamentpreferencemodel SET section=CASE WHEN name='enable_motions' THEN 'data_entry' ELSE 'debate_rules' END WHERE name IN ('enable_motions', 'motion_vetoes_enabled')\",\n        ),\n    ]",
        "detail": "tabbycat.options.migrations.0009_create_motions_section",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.options.migrations.0010_teams_in_debate",
        "description": "tabbycat.options.migrations.0010_teams_in_debate",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('options', '0009_create_motions_section'),\n    ]\n    operations = [\n        migrations.RunSQL(\n            \"UPDATE options_tournamentpreferencemodel SET raw_value=CASE WHEN raw_value='two' THEN '2' WHEN raw_value='bp' THEN '4' ELSE '2' END WHERE name='teams_in_debate'\",\n            \"UPDATE options_tournamentpreferencemodel SET raw_value=CASE WHEN raw_value='2' THEN 'two' WHEN raw_value='4' THEN 'bp' ELSE 'two' END WHERE name='teams_in_debate'\",\n        ),\n    ]",
        "detail": "tabbycat.options.migrations.0010_teams_in_debate",
        "documentation": {}
    },
    {
        "label": "TestPreset",
        "kind": 6,
        "importPath": "tabbycat.options.tests.management.commands.test_applypreset",
        "description": "tabbycat.options.tests.management.commands.test_applypreset",
        "peekOfCode": "class TestPreset(PreferencesPreset):\n    name         = \"Test Rules\"\n    description  = \"Used for unit tests\"\n    show_in_list = False\n    # Scoring\n    scoring__score_min = Decimal('70')\n    scoring__score_max = Decimal('80')\nclass ApplyPresetTests(TestCase):\n    @patch('options.management.commands.applypreset.all_presets', return_value=[TestPreset])\n    def test_preset_options(self, mock_all_presets):",
        "detail": "tabbycat.options.tests.management.commands.test_applypreset",
        "documentation": {}
    },
    {
        "label": "ApplyPresetTests",
        "kind": 6,
        "importPath": "tabbycat.options.tests.management.commands.test_applypreset",
        "description": "tabbycat.options.tests.management.commands.test_applypreset",
        "peekOfCode": "class ApplyPresetTests(TestCase):\n    @patch('options.management.commands.applypreset.all_presets', return_value=[TestPreset])\n    def test_preset_options(self, mock_all_presets):\n        with self.assertRaises(CommandError) as cm:\n            Command().create_parser('', '').parse_args(['notvalidpreset'])\n        self.assertEqual(str(cm.exception), \"Error: argument preset: invalid choice: 'notvalidpreset' (choose from 'testpreset')\")\n    @patch('options.management.commands.applypreset.all_presets', return_value=[TestPreset])\n    def test_set_invalid_preset(self, mock_all_presets):\n        tournament = Tournament.objects.create(slug=\"command\", name=\"Command Testing\")\n        with self.assertRaises(CommandError) as cm:",
        "detail": "tabbycat.options.tests.management.commands.test_applypreset",
        "documentation": {}
    },
    {
        "label": "MultiWidgetTest",
        "kind": 6,
        "importPath": "tabbycat.options.tests.test_fields",
        "description": "tabbycat.options.tests.test_fields",
        "peekOfCode": "class MultiWidgetTest(unittest.TestCase):\n    @patch('options.fields.MultiWidget.render')\n    def test_appends_empty_for_render(self, mock_render):\n        MultiSelect(nfields=5).render('test', ['a'])\n        mock_render.assert_called_with('test', ['a'] + ([EMPTY_CHOICE] * 4), attrs=None)\nclass MultiValueChoiceFieldTest(unittest.TestCase):\n    def test_compresses_empty(self):\n        field = MultiValueChoiceField(choices=[('a', 'a'), ('b', 'b')], allow_empty=True)\n        self.assertEqual(\n            field.compress(['a', EMPTY_CHOICE, 'b']),",
        "detail": "tabbycat.options.tests.test_fields",
        "documentation": {}
    },
    {
        "label": "MultiValueChoiceFieldTest",
        "kind": 6,
        "importPath": "tabbycat.options.tests.test_fields",
        "description": "tabbycat.options.tests.test_fields",
        "peekOfCode": "class MultiValueChoiceFieldTest(unittest.TestCase):\n    def test_compresses_empty(self):\n        field = MultiValueChoiceField(choices=[('a', 'a'), ('b', 'b')], allow_empty=True)\n        self.assertEqual(\n            field.compress(['a', EMPTY_CHOICE, 'b']),\n            ['a', 'b'],\n        )",
        "detail": "tabbycat.options.tests.test_fields",
        "documentation": {}
    },
    {
        "label": "FormBuilderTest",
        "kind": 6,
        "importPath": "tabbycat.options.tests.test_forms",
        "description": "tabbycat.options.tests.test_forms",
        "peekOfCode": "class FormBuilderTest(unittest.TestCase):\n    @patch('options.forms.preference_form_builder')\n    def test_create_global_form(self, mock_builder):\n        tournament_preference_form_builder(None, section='global')\n        mock_builder.assert_called_with(GlobalPreferenceForm, [], section='global')\nclass TournamentPreferenceFormTests(TestCase):\n    def setUp(self):\n        self.tournament = Tournament.objects.create()\n    def tearDown(self):\n        self.tournament.delete()",
        "detail": "tabbycat.options.tests.test_forms",
        "documentation": {}
    },
    {
        "label": "TournamentPreferenceFormTests",
        "kind": 6,
        "importPath": "tabbycat.options.tests.test_forms",
        "description": "tabbycat.options.tests.test_forms",
        "peekOfCode": "class TournamentPreferenceFormTests(TestCase):\n    def setUp(self):\n        self.tournament = Tournament.objects.create()\n    def tearDown(self):\n        self.tournament.delete()\n    def test_falsy_preference_change(self):\n        # Test that get_pref() doesn't get the current value if falsy in the posted data\n        form = tournament_preference_form_builder(self.tournament, section='data_entry')()\n        self.tournament.preferences['data_entry__public_use_password'] = False\n        form.cleaned_data = {'data_entry__public_use_password': True, 'data_entry__public_password': ''}",
        "detail": "tabbycat.options.tests.test_forms",
        "documentation": {}
    },
    {
        "label": "PrefValidationTests",
        "kind": 6,
        "importPath": "tabbycat.options.tests.test_preferences",
        "description": "tabbycat.options.tests.test_preferences",
        "peekOfCode": "class PrefValidationTests(unittest.TestCase):\n    @patch('options.preferences.validate_metric_duplicates')\n    def test_allow_empty(self, mock_validate_metric_duplicates):\n        for preference in (SpeakerStandingsPrecedence, TeamStandingsPrecedence):\n            with self.subTest(preference=preference):\n                self.assertIsNone(preference().validate([]))\n    @patch('options.preferences.validate_metric_duplicates')\n    def test_disallow_wrong_value(self, mock_validate_metric_duplicates):\n        for preference in (SpeakerStandingsPrecedence, TeamStandingsPrecedence):\n            with self.subTest(preference=preference), self.assertRaises(ValidationError):",
        "detail": "tabbycat.options.tests.test_preferences",
        "documentation": {}
    },
    {
        "label": "TestPreset",
        "kind": 6,
        "importPath": "tabbycat.options.tests.test_presets",
        "description": "tabbycat.options.tests.test_presets",
        "peekOfCode": "class TestPreset(PreferencesPreset):\n    name         = \"Test Rules\"\n    description  = \"Used for unit tests\"\n    show_in_list = False\n    # Scoring\n    scoring__score_min = Decimal('70')\n    scoring__score_max = Decimal('80')\nclass TestPresets(TestCase):\n    def set_up_tournament(self):\n        tournament = Tournament.objects.create(slug=\"preset\", name=\"Preset Testing\")",
        "detail": "tabbycat.options.tests.test_presets",
        "documentation": {}
    },
    {
        "label": "TestPresets",
        "kind": 6,
        "importPath": "tabbycat.options.tests.test_presets",
        "description": "tabbycat.options.tests.test_presets",
        "peekOfCode": "class TestPresets(TestCase):\n    def set_up_tournament(self):\n        tournament = Tournament.objects.create(slug=\"preset\", name=\"Preset Testing\")\n        tournament.preferences['scoring__score_min'] = Decimal('0')\n        tournament.preferences['scoring__score_max'] = Decimal('100')\n        return tournament\n    @patch('options.presets.all_presets', return_value=[TestPreset])\n    def test_get_preset_good_slug(self, mock_all_presets):\n        self.assertEqual(get_preset_from_slug('testpreset'), TestPreset)\n    @patch('options.presets.all_presets', return_value=[])",
        "detail": "tabbycat.options.tests.test_presets",
        "documentation": {}
    },
    {
        "label": "UseTeamCodeNamesTests",
        "kind": 6,
        "importPath": "tabbycat.options.tests.test_utils",
        "description": "tabbycat.options.tests.test_utils",
        "peekOfCode": "class UseTeamCodeNamesTests(TestCase):\n    def setUp(self):\n        t = Tournament.objects.create(slug=\"unittest\", name=\"Unit Testing\")\n        self.user = User.objects.create(username='admin1', password='admin', is_active=True)\n        self.user.userpermission_set.create(tournament=t, permission=Permission.VIEW_DECODED_TEAMS)\n    def tearDown(self):\n        Tournament.objects.filter(slug='unittest').delete()\n        self.user.delete()\n    def test_use_codes_if_setting(self):\n        tournament = Tournament.objects.get(slug='unittest')",
        "detail": "tabbycat.options.tests.test_utils",
        "documentation": {}
    },
    {
        "label": "DuplicatePreferencesTest",
        "kind": 6,
        "importPath": "tabbycat.options.tests.test_utils",
        "description": "tabbycat.options.tests.test_utils",
        "peekOfCode": "class DuplicatePreferencesTest(TestCase):\n    def test_unique_metrics(self):\n        self.assertIsNone(validate_metric_duplicates(TeamStandingsGenerator, ['wins', 'speaks_sum']))\n    def test_repeatable_metrics(self):\n        self.assertIsNone(validate_metric_duplicates(TeamStandingsGenerator, ['wins', 'wbw', 'speaks_sum', 'wbw']))\n    def test_non_repeatable_metrics(self):\n        with self.assertRaises(ValidationError):\n            validate_metric_duplicates(TeamStandingsGenerator, ['wins', 'speaks_sum', 'wins'])",
        "detail": "tabbycat.options.tests.test_utils",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "tabbycat.options.tests.test_utils",
        "description": "tabbycat.options.tests.test_utils",
        "peekOfCode": "User = get_user_model()\nclass UseTeamCodeNamesTests(TestCase):\n    def setUp(self):\n        t = Tournament.objects.create(slug=\"unittest\", name=\"Unit Testing\")\n        self.user = User.objects.create(username='admin1', password='admin', is_active=True)\n        self.user.userpermission_set.create(tournament=t, permission=Permission.VIEW_DECODED_TEAMS)\n    def tearDown(self):\n        Tournament.objects.filter(slug='unittest').delete()\n        self.user.delete()\n    def test_use_codes_if_setting(self):",
        "detail": "tabbycat.options.tests.test_utils",
        "documentation": {}
    },
    {
        "label": "TestPreset",
        "kind": 6,
        "importPath": "tabbycat.options.tests.test_views",
        "description": "tabbycat.options.tests.test_views",
        "peekOfCode": "class TestPreset(PreferencesPreset):\n    name         = \"Test Rules\"\n    description  = \"Used for unit tests\"\n    show_in_list = False\n    # Scoring\n    scoring__score_min = Decimal('70')\n    scoring__score_max = Decimal('80')\nclass TournamentConfigIndexViewTests(TestCase):\n    def test_order_presets(self):\n        tournament = Tournament.objects.create(slug=\"optionform\", name=\"Option Form Testing\")",
        "detail": "tabbycat.options.tests.test_views",
        "documentation": {}
    },
    {
        "label": "TournamentConfigIndexViewTests",
        "kind": 6,
        "importPath": "tabbycat.options.tests.test_views",
        "description": "tabbycat.options.tests.test_views",
        "peekOfCode": "class TournamentConfigIndexViewTests(TestCase):\n    def test_order_presets(self):\n        tournament = Tournament.objects.create(slug=\"optionform\", name=\"Option Form Testing\")\n        view = TournamentConfigIndexView()\n        request = RequestFactory()\n        request.user = get_user_model()(is_superuser=True)\n        view.setup(request, tournament_slug=tournament.slug)\n        presets = view.get_context_data()['presets']\n        self.assertEqual(presets[0], PublicInformation)\nclass TournamentPreferenceFormViewTests(TestCase):",
        "detail": "tabbycat.options.tests.test_views",
        "documentation": {}
    },
    {
        "label": "TournamentPreferenceFormViewTests",
        "kind": 6,
        "importPath": "tabbycat.options.tests.test_views",
        "description": "tabbycat.options.tests.test_views",
        "peekOfCode": "class TournamentPreferenceFormViewTests(TestCase):\n    @patch('options.views.tournament_preference_form_builder')\n    def test_gets_correct_form(self, mock_builder):\n        tournament = Tournament.objects.create(slug=\"optionform\", name=\"Option Form Testing\")\n        view = TournamentPreferenceFormView()\n        view.setup(RequestFactory().get(\n            reverse_tournament('options-tournament-section', tournament, kwargs={'section': 'scoring'})), tournament_slug=tournament.slug, section='scoring',\n        )\n        view.get_form_class()\n        mock_builder.assert_called_with(instance=tournament, section='scoring')",
        "detail": "tabbycat.options.tests.test_views",
        "documentation": {}
    },
    {
        "label": "TestSetPresetPreferencesView",
        "kind": 6,
        "importPath": "tabbycat.options.tests.test_views",
        "description": "tabbycat.options.tests.test_views",
        "peekOfCode": "class TestSetPresetPreferencesView(TestCase):\n    def set_up_tournament(self):\n        tournament = Tournament.objects.create(slug=\"preset\", name=\"Preset Testing\")\n        tournament.preferences['scoring__score_min'] = Decimal('0')\n        tournament.preferences['scoring__score_max'] = Decimal('100')\n        return tournament\n    @patch('options.presets.all_presets', return_value=[TestPreset])\n    def test_title_with_preset(self, mock_all_presets):\n        tournament = self.set_up_tournament()\n        request = RequestFactory().get(reverse_tournament('options-presets-confirm', tournament, kwargs={'preset_name': 'testpreset'}))",
        "detail": "tabbycat.options.tests.test_views",
        "documentation": {}
    },
    {
        "label": "TournamentPreferenceAdmin",
        "kind": 6,
        "importPath": "tabbycat.options.admin",
        "description": "tabbycat.options.admin",
        "peekOfCode": "class TournamentPreferenceAdmin(PerInstancePreferenceAdmin):\n    pass\n# We don't use the attachment model; so hide it in the admin area\nadmin.site.unregister(get_attachment_model())",
        "detail": "tabbycat.options.admin",
        "documentation": {}
    },
    {
        "label": "OptionsConfig",
        "kind": 6,
        "importPath": "tabbycat.options.apps",
        "description": "tabbycat.options.apps",
        "peekOfCode": "class OptionsConfig(AppConfig):\n    name = 'options'\n    verbose_name = _(\"Tournament Options\")\n    def ready(self):\n        TournamentPreferenceModel = self.get_model('TournamentPreferenceModel')  # noqa: N806\n        preference_models.register(TournamentPreferenceModel, tournament_preferences_registry)",
        "detail": "tabbycat.options.apps",
        "documentation": {}
    },
    {
        "label": "MultiSelect",
        "kind": 6,
        "importPath": "tabbycat.options.fields",
        "description": "tabbycat.options.fields",
        "peekOfCode": "class MultiSelect(MultiWidget):\n    def __init__(self, nfields=5, choices=(), attrs=None):\n        self.nfields = nfields\n        widgets = [Select(choices=choices, attrs=attrs) for i in range(self.nfields)]\n        super(MultiSelect, self).__init__(widgets, attrs)\n    def render(self, name, value, attrs=None, renderer=None):\n        # Extend to the appropriate number of values. Note that because\n        # compress() compresses to a list, decompress() is not called by\n        # MultiWidget.\n        if len(value) < self.nfields:",
        "detail": "tabbycat.options.fields",
        "documentation": {}
    },
    {
        "label": "MultiValueChoiceField",
        "kind": 6,
        "importPath": "tabbycat.options.fields",
        "description": "tabbycat.options.fields",
        "peekOfCode": "class MultiValueChoiceField(MultiValueField):\n    def __init__(self, *args, **kwargs):\n        self.nfields = kwargs.pop('nfields', 5)\n        allow_empty = kwargs.pop('allow_empty', False)\n        choices = kwargs.pop('choices')\n        choices = list(choices)\n        if allow_empty:\n            choices.insert(0, (EMPTY_CHOICE, '--------'))\n        fields = tuple(ChoiceField(choices=choices) for i in range(self.nfields))\n        self.widget = MultiSelect(nfields=self.nfields, choices=choices)",
        "detail": "tabbycat.options.fields",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "tabbycat.options.fields",
        "description": "tabbycat.options.fields",
        "peekOfCode": "logger = logging.getLogger(__name__)\nEMPTY_CHOICE = '__no_choice__'\nclass MultiSelect(MultiWidget):\n    def __init__(self, nfields=5, choices=(), attrs=None):\n        self.nfields = nfields\n        widgets = [Select(choices=choices, attrs=attrs) for i in range(self.nfields)]\n        super(MultiSelect, self).__init__(widgets, attrs)\n    def render(self, name, value, attrs=None, renderer=None):\n        # Extend to the appropriate number of values. Note that because\n        # compress() compresses to a list, decompress() is not called by",
        "detail": "tabbycat.options.fields",
        "documentation": {}
    },
    {
        "label": "EMPTY_CHOICE",
        "kind": 5,
        "importPath": "tabbycat.options.fields",
        "description": "tabbycat.options.fields",
        "peekOfCode": "EMPTY_CHOICE = '__no_choice__'\nclass MultiSelect(MultiWidget):\n    def __init__(self, nfields=5, choices=(), attrs=None):\n        self.nfields = nfields\n        widgets = [Select(choices=choices, attrs=attrs) for i in range(self.nfields)]\n        super(MultiSelect, self).__init__(widgets, attrs)\n    def render(self, name, value, attrs=None, renderer=None):\n        # Extend to the appropriate number of values. Note that because\n        # compress() compresses to a list, decompress() is not called by\n        # MultiWidget.",
        "detail": "tabbycat.options.fields",
        "documentation": {}
    },
    {
        "label": "TournamentPreferenceForm",
        "kind": 6,
        "importPath": "tabbycat.options.forms",
        "description": "tabbycat.options.forms",
        "peekOfCode": "class TournamentPreferenceForm(PreferenceForm):\n    registry = tournament_preferences_registry\n    def clean(self):\n        super().clean()\n        section, first_pref = self.manager.parse_lookup(next(iter(self.cleaned_data.keys())))\n        t = self.manager.instance\n        def get_pref(name, section=section):\n            return self.cleaned_data.get(section + \"__\" + name) if (section + \"__\" + name) in self.cleaned_data else t.pref(name)\n        score_range_msg = _(\"Mininum score must be less than maximum score\")\n        if section == 'scoring':",
        "detail": "tabbycat.options.forms",
        "documentation": {}
    },
    {
        "label": "tournament_preference_form_builder",
        "kind": 2,
        "importPath": "tabbycat.options.forms",
        "description": "tabbycat.options.forms",
        "peekOfCode": "def tournament_preference_form_builder(instance, preferences=[], **kwargs):\n    if kwargs.get('section') in [str(s) for s in global_preferences_registry.sections()]:\n        # Check for global preferences\n        return preference_form_builder(GlobalPreferenceForm, preferences, **kwargs)\n    return preference_form_builder(\n        TournamentPreferenceForm, preferences, model={'instance': instance}, **kwargs)",
        "detail": "tabbycat.options.forms",
        "documentation": {}
    },
    {
        "label": "TournamentPreferenceModel",
        "kind": 6,
        "importPath": "tabbycat.options.models",
        "description": "tabbycat.options.models",
        "peekOfCode": "class TournamentPreferenceModel(PerInstancePreferenceModel):\n    instance = models.ForeignKey(Tournament, models.CASCADE, related_name=\"preferences\",\n        verbose_name=_(\"instance\"))\n    registry = tournament_preferences_registry\n    class Meta(PerInstancePreferenceModel.Meta):\n        app_label = \"options\"\n        verbose_name = _(\"tournament preference\")\n        verbose_name_plural = _(\"tournament preferences\")",
        "detail": "tabbycat.options.models",
        "documentation": {}
    },
    {
        "label": "MinimumSpeakerScore",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class MinimumSpeakerScore(DecimalPreference):\n    help_text = _(\"Minimum allowed score for substantive speeches\")\n    section = scoring\n    name = 'score_min'\n    verbose_name = _(\"Minimum speaker score\")\n    default = Decimal('68')\n@tournament_preferences_registry.register\nclass MaximumSpeakerScore(DecimalPreference):\n    verbose_name = _(\"Maximum speaker score\")\n    help_text = _(\"Maximum allowed score for substantive speeches\")",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "MaximumSpeakerScore",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class MaximumSpeakerScore(DecimalPreference):\n    verbose_name = _(\"Maximum speaker score\")\n    help_text = _(\"Maximum allowed score for substantive speeches\")\n    section = scoring\n    name = 'score_max'\n    default = Decimal('82')\n@tournament_preferences_registry.register\nclass SpeakerScoreStep(DecimalPreference):\n    verbose_name = _(\"Speaker score step\")\n    help_text = _(\"Score steps allowed for substantive speeches, e.g. full points (1) or half points (0.5)\")",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "SpeakerScoreStep",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class SpeakerScoreStep(DecimalPreference):\n    verbose_name = _(\"Speaker score step\")\n    help_text = _(\"Score steps allowed for substantive speeches, e.g. full points (1) or half points (0.5)\")\n    section = scoring\n    name = 'score_step'\n    default = Decimal('1')\n@tournament_preferences_registry.register\nclass MaximumMargin(FloatPreference):\n    help_text = _(\"The largest amount by which one team can beat another (0 means no limit)\")\n    verbose_name = _(\"Maximum margin\")",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "MaximumMargin",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class MaximumMargin(FloatPreference):\n    help_text = _(\"The largest amount by which one team can beat another (0 means no limit)\")\n    verbose_name = _(\"Maximum margin\")\n    section = scoring\n    name = 'maximum_margin'\n    default = 0.0\n    field_kwargs = {'validators': [MinValueValidator(0.0)]}\n@tournament_preferences_registry.register\nclass MinimumReplyScore(DecimalPreference):\n    help_text = _(\"Minimum allowed score for reply speeches\")",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "MinimumReplyScore",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class MinimumReplyScore(DecimalPreference):\n    help_text = _(\"Minimum allowed score for reply speeches\")\n    verbose_name = _(\"Minimum reply score\")\n    section = scoring\n    name = 'reply_score_min'\n    default = Decimal('34.0')\n@tournament_preferences_registry.register\nclass MaximumReplyScore(DecimalPreference):\n    help_text = _(\"Maximum allowed score for reply speeches\")\n    verbose_name = _(\"Maximum reply score\")",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "MaximumReplyScore",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class MaximumReplyScore(DecimalPreference):\n    help_text = _(\"Maximum allowed score for reply speeches\")\n    verbose_name = _(\"Maximum reply score\")\n    section = scoring\n    name = 'reply_score_max'\n    default = Decimal('41.0')\n@tournament_preferences_registry.register\nclass ReplyScoreStep(DecimalPreference):\n    help_text = _(\"Score steps allowed for reply speeches, e.g. full points (1) or half points (0.5)\")\n    verbose_name = _(\"Reply score step\")",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "ReplyScoreStep",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class ReplyScoreStep(DecimalPreference):\n    help_text = _(\"Score steps allowed for reply speeches, e.g. full points (1) or half points (0.5)\")\n    verbose_name = _(\"Reply score step\")\n    section = scoring\n    name = 'reply_score_step'\n    default = Decimal('0.5')\n@tournament_preferences_registry.register\nclass MarginIncludesDissent(BooleanPreference):\n    help_text = _(\"If checked, a team's winning margin includes dissenting adjudicators\")\n    verbose_name = _(\"Margin includes dissenters\")",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "MarginIncludesDissent",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class MarginIncludesDissent(BooleanPreference):\n    help_text = _(\"If checked, a team's winning margin includes dissenting adjudicators\")\n    verbose_name = _(\"Margin includes dissenters\")\n    section = scoring\n    name = 'margin_includes_dissenters'\n    default = False\n@tournament_preferences_registry.register\nclass TeamScoreIncludesGhost(BooleanPreference):\n    help_text = _(\"If checked, all speaker scores, including for duplicate speeches, will be counted for team scores\")\n    verbose_name = _(\"Team score includes ghosts\")",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "TeamScoreIncludesGhost",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class TeamScoreIncludesGhost(BooleanPreference):\n    help_text = _(\"If checked, all speaker scores, including for duplicate speeches, will be counted for team scores\")\n    verbose_name = _(\"Team score includes ghosts\")\n    section = scoring\n    name = 'teamscore_includes_ghosts'\n    default = True\n# ==============================================================================\ndraw_rules = Section('draw_rules', verbose_name=_(\"Draw Rules\"))\n# ==============================================================================\n@tournament_preferences_registry.register",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "VotingScore",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class VotingScore(FloatPreference):\n    help_text = _(\"The auto-allocator will only take adjudicators at or above this score as voting panellists\")\n    verbose_name = _(\"Minimum adjudicator score to vote\")\n    section = draw_rules\n    name = 'adj_min_voting_score'\n    default = 1.5\n@tournament_preferences_registry.register\nclass AdjConflictPenalty(IntegerPreference):\n    help_text = _(\"Penalty applied by adjudicator auto-allocator for conflicts\")\n    verbose_name = _(\"Adjudicator conflict penalty\")",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "AdjConflictPenalty",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class AdjConflictPenalty(IntegerPreference):\n    help_text = _(\"Penalty applied by adjudicator auto-allocator for conflicts\")\n    verbose_name = _(\"Adjudicator conflict penalty\")\n    section = draw_rules\n    name = 'adj_conflict_penalty'\n    default = 1000000\n@tournament_preferences_registry.register\nclass AdjHistoryPenalty(IntegerPreference):\n    help_text = _(\"Penalty applied by adjudicator auto-allocator for history\")\n    verbose_name = _(\"Adjudicator history penalty\")",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "AdjHistoryPenalty",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class AdjHistoryPenalty(IntegerPreference):\n    help_text = _(\"Penalty applied by adjudicator auto-allocator for history\")\n    verbose_name = _(\"Adjudicator history penalty\")\n    section = draw_rules\n    name = 'adj_history_penalty'\n    default = 10000\n@tournament_preferences_registry.register\nclass PreformedPanelMismatchPenalty(IntegerPreference):\n    help_text = _(\"Penality applied by preformed panel auto-allocator for priority mismatch\")\n    verbose_name = _(\"Importance mismatch penalty\")",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "PreformedPanelMismatchPenalty",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class PreformedPanelMismatchPenalty(IntegerPreference):\n    help_text = _(\"Penality applied by preformed panel auto-allocator for priority mismatch\")\n    verbose_name = _(\"Importance mismatch penalty\")\n    section = draw_rules\n    name = 'preformed_panel_mismatch_penalty'\n    default = 10000000\n@tournament_preferences_registry.register\nclass TeamInstitutionPenalty(IntegerPreference):\n    help_text = _(\"Penalty applied by conflict avoidance method for teams seeing their own institution\")\n    verbose_name = _(\"Team institution penalty\")",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "TeamInstitutionPenalty",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class TeamInstitutionPenalty(IntegerPreference):\n    help_text = _(\"Penalty applied by conflict avoidance method for teams seeing their own institution\")\n    verbose_name = _(\"Team institution penalty\")\n    section = draw_rules\n    name = 'team_institution_penalty'\n    default = 1\n@tournament_preferences_registry.register\nclass TeamHistoryPenalty(IntegerPreference):\n    help_text = _(\"Penalty applied by conflict avoidance method for teams seeing each other twice or more\")\n    verbose_name = _(\"Team history penalty\")",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "TeamHistoryPenalty",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class TeamHistoryPenalty(IntegerPreference):\n    help_text = _(\"Penalty applied by conflict avoidance method for teams seeing each other twice or more\")\n    verbose_name = _(\"Team history penalty\")\n    section = draw_rules\n    name = 'team_history_penalty'\n    default = 1000\n@tournament_preferences_registry.register\nclass AvoidSameInstitution(BooleanPreference):\n    help_text = _(\"If checked, the draw will try to avoid pairing teams against their own institution\")\n    verbose_name = _(\"Avoid same institution\")",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "AvoidSameInstitution",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class AvoidSameInstitution(BooleanPreference):\n    help_text = _(\"If checked, the draw will try to avoid pairing teams against their own institution\")\n    verbose_name = _(\"Avoid same institution\")\n    section = draw_rules\n    name = 'avoid_same_institution'\n    default = True\n@tournament_preferences_registry.register\nclass AvoidTeamHistory(BooleanPreference):\n    help_text = _(\"If checked, the draw will try to avoid having teams see each other twice\")\n    verbose_name = _(\"Avoid team history\")",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "AvoidTeamHistory",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class AvoidTeamHistory(BooleanPreference):\n    help_text = _(\"If checked, the draw will try to avoid having teams see each other twice\")\n    verbose_name = _(\"Avoid team history\")\n    section = draw_rules\n    name = 'avoid_team_history'\n    default = True\n@tournament_preferences_registry.register\nclass PullupDebatesPenalty(IntegerPreference):\n    help_text = _(\"Penalty applied by conflict avoidance method for teams being in a pullup many times. Leave 0 for no penalty.\")\n    verbose_name = _(\"Previously saw pullup penalty\")",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "PullupDebatesPenalty",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class PullupDebatesPenalty(IntegerPreference):\n    help_text = _(\"Penalty applied by conflict avoidance method for teams being in a pullup many times. Leave 0 for no penalty.\")\n    verbose_name = _(\"Previously saw pullup penalty\")\n    section = draw_rules\n    name = 'pullup_debates_penalty'\n    default = 0\n@tournament_preferences_registry.register\nclass SideBalancePenalty(IntegerPreference):\n    help_text = _(\"Penalty applied by minimum cost matching to prefer pairings that balance sides.\")\n    verbose_name = _(\"Side balance penalty\")",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "SideBalancePenalty",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class SideBalancePenalty(IntegerPreference):\n    help_text = _(\"Penalty applied by minimum cost matching to prefer pairings that balance sides.\")\n    verbose_name = _(\"Side balance penalty\")\n    section = draw_rules\n    name = 'side_penalty'\n    default = 0\n@tournament_preferences_registry.register\nclass PairingPenalty(IntegerPreference):\n    help_text = _(\"Penalty applied by minimum cost matching to prefer pairings that follow the draw pairing method.\")\n    verbose_name = _(\"Pairing deviation penalty\")",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "PairingPenalty",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class PairingPenalty(IntegerPreference):\n    help_text = _(\"Penalty applied by minimum cost matching to prefer pairings that follow the draw pairing method.\")\n    verbose_name = _(\"Pairing deviation penalty\")\n    section = draw_rules\n    name = 'pairing_penalty'\n    default = 0\n@tournament_preferences_registry.register\nclass DrawOddBracket(ChoicePreference):\n    help_text = _(\"How odd brackets are resolved (see documentation for further details)\")\n    verbose_name = _(\"Odd bracket resolution method\")",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "DrawOddBracket",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class DrawOddBracket(ChoicePreference):\n    help_text = _(\"How odd brackets are resolved (see documentation for further details)\")\n    verbose_name = _(\"Odd bracket resolution method\")\n    section = draw_rules\n    name = 'draw_odd_bracket'\n    choices = (\n        ('pullup_top', _(\"Pull up from top\")),\n        ('pullup_bottom', _(\"Pull up from bottom\")),\n        ('pullup_middle', _(\"Pull up from middle\")),\n        ('pullup_random', _(\"Pull up at random\")),",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "DrawSideAllocations",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class DrawSideAllocations(ChoicePreference):\n    help_text = _(\"How affirmative/negative positions are assigned (see documentation for further details)\")\n    verbose_name = _(\"Side allocations method\")\n    section = draw_rules\n    name = 'draw_side_allocations'\n    choices = (\n        ('random', _(\"Random\")),\n        ('balance', _(\"Balance\")),\n        ('preallocated', _(\"Pre-allocated\")),\n        ('manual-ballot', _(\"Manually enter from ballot\")),",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "DrawPairingMethod",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class DrawPairingMethod(ChoicePreference):\n    help_text = _(\"Slide: 1 vs 6, 2 vs 7, …. Fold: 1 vs 10, 2 vs 9, …. Adjacent: 1 vs 2, 3 vs 4, ….\")\n    verbose_name = _(\"Pairing method\")\n    section = draw_rules\n    name = 'draw_pairing_method'\n    choices = (\n        ('slide', _(\"Slide\")),\n        ('fold', _(\"Fold\")),\n        ('random', _(\"Random\")),\n        ('adjacent', _(\"Adjacent\")),",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "DrawAvoidConflicts",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class DrawAvoidConflicts(ChoicePreference):\n    help_text = _(\"Method used to try to avoid teams facing each other multiple times or their \"\n        \"own institution (see documentation for further details)\")\n    verbose_name = _(\"Conflict avoidance method\")\n    section = draw_rules\n    name = 'draw_avoid_conflicts'\n    choices = (\n        ('off', _(\"Off\")),\n        ('one_up_one_down', _(\"One-up-one-down\")),\n        ('graph', _(\"Minimum cost matching\")),",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "DrawPullupRestriction",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class DrawPullupRestriction(ChoicePreference):\n    help_text = _(\"If using pull-ups, restrict which teams can be pulled up. \"\n        \"Two-team formats only. Has no effect on BP or intermediate brackets.\")\n    verbose_name = _(\"Pullup restriction\")\n    section = draw_rules\n    name = 'draw_pullup_restriction'\n    choices = (\n        ('none', _(\"No restriction\")),\n        ('least_to_date', _(\"Choose from teams who have been pulled up the fewest times so far\")),\n        ('lowest_ds_wins', _(\"Choose from teams with the lowest draw strength by wins so far\")),",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "BPPullupDistribution",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class BPPullupDistribution(ChoicePreference):\n    help_text = _(\"In BP, how pullups are distributed. Only \\\"Anywhere\\\" is WUDC-compliant.\")\n    verbose_name = _(\"BP pullup distribution\")\n    section = draw_rules\n    name = 'bp_pullup_distribution'\n    choices = (\n        ('anywhere', _(\"Anywhere in bracket\")),\n        ('one_room', _(\"All in the same room (not WUDC-compliant)\")),\n    )\n    default = 'anywhere'",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "BPPositionCost",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class BPPositionCost(ChoicePreference):\n    help_text = _(\"In BP, which position cost function to use (see documentation for details)\")\n    verbose_name = _(\"BP position cost\")\n    section = draw_rules\n    name = 'bp_position_cost'\n    choices = (\n        ('simple', _(\"Simple\")),\n        ('entropy', _(\"Rényi entropy\")),\n        ('variance', _(\"Population variance\")),\n    )",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "BPRenyiOrder",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class BPRenyiOrder(FloatPreference):\n    help_text = _(\"Rényi order α, if BP position cost uses Rényi entropy. \"\n                  \"Shannon is α = 1, Hartley is α = 0, collision is α = 2. \"\n                  \"See documentation for details.\")\n    verbose_name = _(\"Rényi order (BP)\")\n    section = draw_rules\n    name = 'bp_renyi_order'\n    default = 1.0\n    field_kwargs = {'validators': [MinValueValidator(0.0)]}\n@tournament_preferences_registry.register",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "BPPositionCostExponent",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class BPPositionCostExponent(FloatPreference):\n    help_text = _(\"The BP position cost is raised to this power; higher exponents \"\n                  \"bias towards resolving fewer large position imbalances over more \"\n                  \"small ones. See documentation for details.\")\n    verbose_name = _(\"BP position cost exponent\")\n    section = draw_rules\n    name = 'bp_position_cost_exponent'\n    default = 4.0\n    field_kwargs = {'validators': [MinValueValidator(0.0)]}\n@tournament_preferences_registry.register",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "BPAssignmentMethod",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class BPAssignmentMethod(ChoicePreference):\n    help_text = _(\"In BP, which method to use to solve the assignment problem. \"\n                  \"Only Hungarian with preshuffling is WUDC-compliant.\")\n    verbose_name = _(\"BP assignment method\")\n    section = draw_rules\n    name = 'bp_assignment_method'\n    choices = (\n        ('hungarian', _(\"Hungarian algorithm (not WUDC-compliant)\")),\n        ('hungarian_preshuffled', _(\"Hungarian algorithm with preshuffling\")),\n    )",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "SkipAdjCheckins",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class SkipAdjCheckins(BooleanPreference):\n    help_text = _(\"Automatically make all adjudicators available for all rounds\")\n    verbose_name = _(\"Skip adjudicator check-ins\")\n    section = draw_rules\n    name = 'draw_skip_adj_checkins'\n    default = False\n@tournament_preferences_registry.register\nclass HidePanellistPosition(BooleanPreference):\n    help_text = _(\"Hide panellist positions in the UI (and don't allocate them)\")\n    verbose_name = _(\"No panellist adjudicators\")",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "HidePanellistPosition",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class HidePanellistPosition(BooleanPreference):\n    help_text = _(\"Hide panellist positions in the UI (and don't allocate them)\")\n    verbose_name = _(\"No panellist adjudicators\")\n    section = draw_rules\n    name = 'no_panellist_position'\n    default = False\n@tournament_preferences_registry.register\nclass HideTraineePosition(BooleanPreference):\n    help_text = _(\"Hide trainee positions in the UI (and don't allocate them)\")\n    verbose_name = _(\"No trainee adjudicators\")",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "HideTraineePosition",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class HideTraineePosition(BooleanPreference):\n    help_text = _(\"Hide trainee positions in the UI (and don't allocate them)\")\n    verbose_name = _(\"No trainee adjudicators\")\n    section = draw_rules\n    name = 'no_trainee_position'\n    default = False\n@tournament_preferences_registry.register\nclass ByeTeamResults(ChoicePreference):\n    help_text = _(\"How to handle teams who were marked available yet excluded from\"\n        \"a round (a bye)\")",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "ByeTeamResults",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class ByeTeamResults(ChoicePreference):\n    help_text = _(\"How to handle teams who were marked available yet excluded from\"\n        \"a round (a bye)\")\n    verbose_name = _(\"Bye team results\")\n    section = draw_rules\n    name = 'bye_team_results'\n    choices = (\n        ('none', _(\"Treat bye teams as absent\")),\n        ('points', _(\"Attribute a win to bye teams, without speaks\")),\n    )",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "ByeTeamSelection",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class ByeTeamSelection(ChoicePreference):\n    help_text = _(\"If creating a draw with an uneven number of teams, how to \"\n        \"decide who gets the bye (won't be allocated)\")\n    verbose_name = _(\"Bye team selection method\")\n    section = draw_rules\n    name = 'bye_team_selection'\n    choices = (\n        ('off', _(\"Don't choose bye teams\")),\n        ('random', _(\"Choose bye teams randomly\")),\n        ('lowest', _(\"Choose lowest ranking teams\")),",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "MinimumAdjScore",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class MinimumAdjScore(FloatPreference):\n    help_text = _(\"Minimum possible adjudicator score that can be given\")\n    verbose_name = _(\"Minimum adjudicator score\")\n    section = feedback\n    name = 'adj_min_score'\n    default = 0.0\n@tournament_preferences_registry.register\nclass MaximumAdjScore(FloatPreference):\n    help_text = _(\"Maximum possible adjudicator score that can be given\")\n    verbose_name = _(\"Maximum adjudicator score\")",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "MaximumAdjScore",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class MaximumAdjScore(FloatPreference):\n    help_text = _(\"Maximum possible adjudicator score that can be given\")\n    verbose_name = _(\"Maximum adjudicator score\")\n    section = feedback\n    name = 'adj_max_score'\n    default = 5.0\n@tournament_preferences_registry.register\nclass FeedbackPaths(ChoicePreference):\n    help_text = _(\"Used to inform available choices in the feedback forms for adjudicators (both online and printed) and feedback progress\")\n    verbose_name = _(\"Allow and expect feedback to be submitted by\")",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "FeedbackPaths",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class FeedbackPaths(ChoicePreference):\n    help_text = _(\"Used to inform available choices in the feedback forms for adjudicators (both online and printed) and feedback progress\")\n    verbose_name = _(\"Allow and expect feedback to be submitted by\")\n    section = feedback\n    name = 'feedback_paths'\n    choices = (\n        ('minimal', _(\"Chairs on panellists and trainees\")),\n        ('with-p-on-c', _(\"Panellists on chairs, chairs on panellists and trainees\")),\n        ('with-t-on-c', _(\"Panellists and trainees on chairs, vice-versa\")),\n        ('all-adjs', _(\"All adjudicators (including trainees) on each other\")),",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "FeedbackFromTeams",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class FeedbackFromTeams(ChoicePreference):\n    verbose_name = _(\"Expect feedback to be submitted by teams on\")\n    help_text = _(\"Used to inform available choices in the feedback forms for teams (both online and printed) and feedback progress; this option is used by, e.g., UADC\")\n    section = feedback\n    name = 'feedback_from_teams'\n    choices = (\n        ('orallist', _(\"Orallist only (voting panellists permitted, with prompts to select orallist)\")),\n        ('all-adjs', _(\"All adjudicators in their panels (including trainees)\")),\n        ('no-one', _(\"No one\")),\n    )",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "ShowUnexpectedFeedback",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class ShowUnexpectedFeedback(BooleanPreference):\n    verbose_name = _(\"Show unexpected feedback submissions in participants pages\")\n    help_text = _(\"Displays unexpected feedback with a question mark symbol; only relevant if public participants and feedback progress are both enabled\")\n    section = feedback\n    name = 'show_unexpected_feedback'\n    default = True\n@tournament_preferences_registry.register\nclass ShowUnaccredited(BooleanPreference):\n    help_text = _(\"Show if an adjudicator is a trainee (unaccredited)\")\n    verbose_name = _(\"Show unaccredited\")",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "ShowUnaccredited",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class ShowUnaccredited(BooleanPreference):\n    help_text = _(\"Show if an adjudicator is a trainee (unaccredited)\")\n    verbose_name = _(\"Show unaccredited\")\n    section = feedback\n    name = 'show_unaccredited'\n    default = False\n@tournament_preferences_registry.register\nclass FeedbackIntroduction(LongStringPreference):\n    help_text = _(\"Any explanatory text needed to introduce the feedback form\")\n    verbose_name = _(\"Feedback introduction/explanation\")",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "FeedbackIntroduction",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class FeedbackIntroduction(LongStringPreference):\n    help_text = _(\"Any explanatory text needed to introduce the feedback form\")\n    verbose_name = _(\"Feedback introduction/explanation\")\n    section = feedback\n    name = 'feedback_introduction'\n    default = ''\n    widget = SummernoteWidget(attrs={'height': 150, 'class': 'form-summernote'})\n    field_kwargs = {'required': False}\n# ==============================================================================\ndebate_rules = Section('debate_rules', verbose_name=_(\"Debate Rules\"))",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "TeamsInDebate",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class TeamsInDebate(IntegerPreference):\n    help_text = _(\"How many teams are in each debate (normally 2 but 4 for BP)\")\n    verbose_name = _(\"Number of teams per debate\")\n    section = debate_rules\n    name = 'teams_in_debate'\n    default = 2\n@tournament_preferences_registry.register\nclass BallotsPerDebatePreliminary(ChoicePreference):\n    help_text = _(\"Whether panels submit a ballot each or a single ballot for a debate during the preliminary rounds. Note: BP must use one per debate.\")\n    verbose_name = _(\"Ballots per debate, preliminary rounds\")",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "BallotsPerDebatePreliminary",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class BallotsPerDebatePreliminary(ChoicePreference):\n    help_text = _(\"Whether panels submit a ballot each or a single ballot for a debate during the preliminary rounds. Note: BP must use one per debate.\")\n    verbose_name = _(\"Ballots per debate, preliminary rounds\")\n    section = debate_rules\n    name = 'ballots_per_debate_prelim'\n    choices = (\n        ('per-adj', _(\"One ballot per voting adjudicator\")),\n        ('per-debate', _(\"Consensus ballot (one ballot per debate)\")),\n    )\n    default = 'per-adj'",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "BallotsPerDebateElimination",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class BallotsPerDebateElimination(ChoicePreference):\n    help_text = _(\"Whether panels submit a ballot each or a single ballot for a debate during the elimination rounds. Note: BP must use one per debate.\")\n    verbose_name = _(\"Ballots per debate, elimination rounds\")\n    section = debate_rules\n    name = 'ballots_per_debate_elim'\n    choices = (\n        ('per-adj', _(\"One ballot per voting adjudicator\")),\n        ('per-debate', _(\"Consensus ballot (one ballot per debate)\")),\n    )\n    default = 'per-adj'",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "BallotMustConfirmWinner",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class BallotMustConfirmWinner(ChoicePreference):\n    help_text = _(\"Whether adjudicator(s) must select the winning team in their ballot, and how it should be treated. Note: Not supported in BP.\")\n    verbose_name = _(\"Winner Declaration in ballot(s)\")\n    section = debate_rules\n    name = 'winners_in_ballots'\n    choices = (\n        ('none', _(\"Do not require separate winner selection\")),\n        ('high-points', _(\"Require separate winner selection as a check on correct scores\")),\n        ('tied-points', _(\"Require winner selection to break tied-point debates\")),\n        ('low-points', _(\"Require winner selection, overriding scores\")),",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "BallotUsesScores",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class BallotUsesScores(ChoicePreference):\n    help_text = _(\"When ballots should ask for speaker scores.\")\n    verbose_name = _(\"Require speaker scores\")\n    section = debate_rules\n    name = 'speakers_in_ballots'\n    choices = (\n        ('always', _(\"Always require speaker scores\")),\n        ('prelim', _(\"Only require speaker scores in preliminary rounds\")),\n        ('never', _(\"Never require speaker scores\")),\n    )",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "SubstantiveSpeakers",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class SubstantiveSpeakers(IntegerPreference):\n    help_text = _(\"How many substantive speakers on a team\")\n    verbose_name = _(\"Substantive speakers\")\n    section = debate_rules\n    name = 'substantive_speakers'\n    default = 3\n@tournament_preferences_registry.register\nclass SideNames(ChoicePreference):\n    help_text = _(\"What to call the teams\")\n    verbose_name = _(\"Side names\")",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "SideNames",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class SideNames(ChoicePreference):\n    help_text = _(\"What to call the teams\")\n    verbose_name = _(\"Side names\")\n    section = debate_rules\n    name = 'side_names'\n    choices = get_side_name_choices()\n    default = 'aff-neg'\n@tournament_preferences_registry.register\nclass ReplyScores(BooleanPreference):\n    help_text = _(\"Whether this style features scored reply speeches\")",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "ReplyScores",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class ReplyScores(BooleanPreference):\n    help_text = _(\"Whether this style features scored reply speeches\")\n    verbose_name = _(\"Reply scores\")\n    section = debate_rules\n    name = 'reply_scores_enabled'\n    default = True\n@tournament_preferences_registry.register\nclass RequireSubstantiveForReply(BooleanPreference):\n    help_text = _(\"Whether to limit reply speeches to speakers who gave a substantive speech in the debate\")\n    verbose_name = _(\"Require reply speaker to have given a substantive speech\")",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "RequireSubstantiveForReply",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class RequireSubstantiveForReply(BooleanPreference):\n    help_text = _(\"Whether to limit reply speeches to speakers who gave a substantive speech in the debate\")\n    verbose_name = _(\"Require reply speaker to have given a substantive speech\")\n    section = debate_rules\n    name = 'require_substantive_for_reply'\n    default = True\n@tournament_preferences_registry.register\nclass UseSpeakerRanks(ChoicePreference):\n    help_text = _(\"Whether and how to use speech ranks within a debate\")\n    verbose_name = _(\"Use of speech ranks\")",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "UseSpeakerRanks",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class UseSpeakerRanks(ChoicePreference):\n    help_text = _(\"Whether and how to use speech ranks within a debate\")\n    verbose_name = _(\"Use of speech ranks\")\n    section = debate_rules\n    name = 'speaker_ranks'\n    choices = (\n        ('none', 'Do not rank speeches'),\n        ('any', 'Require ranking speeches, independently of speaker scores'),\n        ('high-points', 'Require ranking speeches, ranks congruent with speaker scores'),\n    )",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "PreparationTime",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class PreparationTime(IntegerPreference):\n    help_text = _(\"How long, in minutes, after motion release does the round start (-1 to deactivate)\")\n    verbose_name = _(\"Preparation Time\")\n    section = debate_rules\n    name = 'preparation_time'\n    default = -1\n# ==============================================================================\nstandings = Section('standings', verbose_name=_(\"Standings\"))\n# ==============================================================================\n@tournament_preferences_registry.register",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "StandingsMissedDebates",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class StandingsMissedDebates(IntegerPreference):\n    help_text = _(\"The number of substantive speeches a speaker can miss and still be on the speaker tab (-1 means no limit)\")\n    verbose_name = _(\"Speeches missable for standings eligibility\")\n    section = standings\n    name = 'standings_missed_debates'\n    default = -1\n@tournament_preferences_registry.register\nclass StandingsMissedReplies(IntegerPreference):\n    help_text = _(\"The number of reply speeches a speaker can miss and still be on the replies tab (-1 means no limit)\")\n    verbose_name = _(\"Replies missable for standings eligibility\")",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "StandingsMissedReplies",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class StandingsMissedReplies(IntegerPreference):\n    help_text = _(\"The number of reply speeches a speaker can miss and still be on the replies tab (-1 means no limit)\")\n    verbose_name = _(\"Replies missable for standings eligibility\")\n    section = standings\n    name = 'standings_missed_replies'\n    default = -1\n@tournament_preferences_registry.register\nclass TeamStandingsPrecedence(MultiValueChoicePreference):\n    help_text = _(\"Metrics to use to rank teams (see documentation for further details)\")\n    verbose_name = _(\"Team standings precedence\")",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "TeamStandingsPrecedence",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class TeamStandingsPrecedence(MultiValueChoicePreference):\n    help_text = _(\"Metrics to use to rank teams (see documentation for further details)\")\n    verbose_name = _(\"Team standings precedence\")\n    section = standings\n    name = 'team_standings_precedence'\n    choices = TeamStandingsGenerator.get_metric_choices()\n    nfields = 8\n    allow_empty = True\n    default = ['wins', 'speaks_avg']\n    def validate(self, value):",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "TeamStandingsExtraMetrics",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class TeamStandingsExtraMetrics(MultiValueChoicePreference):\n    help_text = _(\"Metrics to calculate, but not used to rank teams\")\n    verbose_name = _(\"Team standings extra metrics\")\n    section = standings\n    name = 'team_standings_extra_metrics'\n    choices = TeamStandingsGenerator.get_metric_choices(ranked_only=False)\n    nfields = 5\n    allow_empty = True\n    default = []\n@tournament_preferences_registry.register",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "SpeakerStandingsPrecedence",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class SpeakerStandingsPrecedence(MultiValueChoicePreference):\n    help_text = _(\"Metrics to use to rank speakers (see documentation for further details)\")\n    verbose_name = _(\"Speaker standings precedence\")\n    section = standings\n    name = 'speaker_standings_precedence'\n    choices = SpeakerStandingsGenerator.get_metric_choices()\n    nfields = 4\n    allow_empty = True\n    default = ['average']\n    def validate(self, value):",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "SpeakerStandingsExtraMetrics",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class SpeakerStandingsExtraMetrics(MultiValueChoicePreference):\n    help_text = _(\"Metrics to calculate, but not used to rank speakers\")\n    verbose_name = _(\"Speaker standings extra metrics\")\n    section = standings\n    name = 'speaker_standings_extra_metrics'\n    choices = SpeakerStandingsGenerator.get_metric_choices(ranked_only=False)\n    nfields = 5\n    allow_empty = True\n    default = ['stdev', 'count']\n# ==============================================================================",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "TeamTabReleased",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class TeamTabReleased(BooleanPreference):\n    help_text = _(\"Enables public display of the team tab. Intended for use after the tournament.\")\n    verbose_name = _(\"Release team tab to public\")\n    section = tab_release\n    name = 'team_tab_released'\n    default = False\n@tournament_preferences_registry.register\nclass TeamTabReleaseLimit(IntegerPreference):\n    help_text = _(\"Only show scores for the top X teams in the public tab (set to 0 to show all teams).\")\n    verbose_name = _(\"Top teams cutoff\")",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "TeamTabReleaseLimit",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class TeamTabReleaseLimit(IntegerPreference):\n    help_text = _(\"Only show scores for the top X teams in the public tab (set to 0 to show all teams).\")\n    verbose_name = _(\"Top teams cutoff\")\n    section = tab_release\n    name = 'team_tab_limit'\n    default = 0\n@tournament_preferences_registry.register\nclass SpeakerTabReleased(BooleanPreference):\n    help_text = _(\"Enables public display of the speaker tab. Intended for use after the tournament.\")\n    verbose_name = _(\"Release speaker tab to public\")",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "SpeakerTabReleased",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class SpeakerTabReleased(BooleanPreference):\n    help_text = _(\"Enables public display of the speaker tab. Intended for use after the tournament.\")\n    verbose_name = _(\"Release speaker tab to public\")\n    section = tab_release\n    name = 'speaker_tab_released'\n    default = False\n@tournament_preferences_registry.register\nclass SpeakerTabReleaseLimit(IntegerPreference):\n    help_text = _(\"Only show scores for the top X speakers in the public tab (set to 0 to show all speakers).\")\n    verbose_name = _(\"Top speakers cutoff\")",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "SpeakerTabReleaseLimit",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class SpeakerTabReleaseLimit(IntegerPreference):\n    help_text = _(\"Only show scores for the top X speakers in the public tab (set to 0 to show all speakers).\")\n    verbose_name = _(\"Top speakers cutoff\")\n    section = tab_release\n    name = 'speaker_tab_limit'\n    default = 0\n@tournament_preferences_registry.register\nclass RepliesTabReleased(BooleanPreference):\n    help_text = _(\"Enables public display of the replies tab. Intended for use after the tournament.\")\n    verbose_name = _(\"Release replies tab to public\")",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "RepliesTabReleased",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class RepliesTabReleased(BooleanPreference):\n    help_text = _(\"Enables public display of the replies tab. Intended for use after the tournament.\")\n    verbose_name = _(\"Release replies tab to public\")\n    section = tab_release\n    name = 'replies_tab_released'\n    default = False\n@tournament_preferences_registry.register\nclass RepliesTabReleaseLimit(IntegerPreference):\n    help_text = _(\"Only show scores for the top X repliers in the public tab (set to 0 to show all repliers).\")\n    verbose_name = _(\"Top replies cutoff\")",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "RepliesTabReleaseLimit",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class RepliesTabReleaseLimit(IntegerPreference):\n    help_text = _(\"Only show scores for the top X repliers in the public tab (set to 0 to show all repliers).\")\n    verbose_name = _(\"Top replies cutoff\")\n    section = tab_release\n    name = 'replies_tab_limit'\n    default = 0\n@tournament_preferences_registry.register\nclass BreakCategoryTabsReleased(BooleanPreference):\n    help_text = \"Enables public display of tabs for teams in each break category. Intended for use after the tournament.\"\n    verbose_name = \"Release break (team) category tabs to public\"",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "BreakCategoryTabsReleased",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class BreakCategoryTabsReleased(BooleanPreference):\n    help_text = \"Enables public display of tabs for teams in each break category. Intended for use after the tournament.\"\n    verbose_name = \"Release break (team) category tabs to public\"\n    section = tab_release\n    name = \"break_category_tabs_released\"\n    default = False\n@tournament_preferences_registry.register\nclass SpeakerCategoryTabsReleased(BooleanPreference):\n    help_text = \"Enables public display of those speaker category tabs that are marked to be public. Intended for use after the tournament.\"\n    verbose_name = \"Release speaker category tabs to public\"",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "SpeakerCategoryTabsReleased",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class SpeakerCategoryTabsReleased(BooleanPreference):\n    help_text = \"Enables public display of those speaker category tabs that are marked to be public. Intended for use after the tournament.\"\n    verbose_name = \"Release speaker category tabs to public\"\n    section = tab_release\n    name = \"speaker_category_tabs_released\"\n    default = False\n@tournament_preferences_registry.register\nclass MotionTabReleased(BooleanPreference):\n    help_text = _(\"Enables public display of all motions and win/loss/selection information. \"\n                  \"This includes all motions — whether they have been marked as released or not. \"",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "MotionTabReleased",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class MotionTabReleased(BooleanPreference):\n    help_text = _(\"Enables public display of all motions and win/loss/selection information. \"\n                  \"This includes all motions — whether they have been marked as released or not. \"\n                  \"Intended for use after the tournament.\")\n    verbose_name = _(\"Release motions tab to public\")\n    section = tab_release\n    name = 'motion_tab_released'\n    default = False\n@tournament_preferences_registry.register\nclass AdjudicatorsTabRelease(BooleanPreference):",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "AdjudicatorsTabRelease",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class AdjudicatorsTabRelease(BooleanPreference):\n    help_text = _(\"Enables public display of the feedback scores of all adjudicators\")\n    verbose_name = _(\"Release adjudicator tab to public\")\n    section = tab_release\n    name = 'adjudicators_tab_released'\n    default = False\n@tournament_preferences_registry.register\nclass AdjudicatorsTabShows(ChoicePreference):\n    help_text = _(\"What (if released) the adjudicator tab shows\")\n    verbose_name = _(\"Adjudicator tab displays\")",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "AdjudicatorsTabShows",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class AdjudicatorsTabShows(ChoicePreference):\n    help_text = _(\"What (if released) the adjudicator tab shows\")\n    verbose_name = _(\"Adjudicator tab displays\")\n    section = tab_release\n    name = 'adjudicators_tab_shows'\n    choices = (\n        ('test', _(\"Only shows base score\")),\n        ('final', _(\"Only shows final score\")),\n        ('all', _(\"Shows base, final, and per-round scores\")),\n    )",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "BallotsReleased",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class BallotsReleased(BooleanPreference):\n    help_text = _(\"Enables public display of every adjudicator's ballot. Intended for use after the tournament.\")\n    verbose_name = _(\"Release ballots to public\")\n    section = tab_release\n    name = 'ballots_released'\n    default = False\n@tournament_preferences_registry.register\nclass AllResultsReleased(BooleanPreference):\n    help_text = _(\"This releases all the results for all rounds (including silent and break rounds). Do so only after the tournament is finished!\")\n    verbose_name = _(\"Release all round results to public\")",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "AllResultsReleased",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class AllResultsReleased(BooleanPreference):\n    help_text = _(\"This releases all the results for all rounds (including silent and break rounds). Do so only after the tournament is finished!\")\n    verbose_name = _(\"Release all round results to public\")\n    section = tab_release\n    name = 'all_results_released'\n    default = False\n@tournament_preferences_registry.register\nclass PrivateBallotsReleased(BooleanPreference):\n    help_text = _(\"Enables display of confirmed ballots through private URLs. Intended for use after the tournament.\")\n    verbose_name = _(\"Release ballots through private URLs\")",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "PrivateBallotsReleased",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class PrivateBallotsReleased(BooleanPreference):\n    help_text = _(\"Enables display of confirmed ballots through private URLs. Intended for use after the tournament.\")\n    verbose_name = _(\"Release ballots through private URLs\")\n    section = tab_release\n    name = 'private_ballots_released'\n    default = False\n# ==============================================================================\ndata_entry = Section('data_entry', verbose_name=_(\"Data Entry\"))\n# ==============================================================================\n@tournament_preferences_registry.register",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "ParticipantBallotSubmissions",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class ParticipantBallotSubmissions(ChoicePreference):\n    help_text = _(\"Whether adjudicators can submit ballots themselves, and how they do so\")\n    verbose_name = _(\"Ballot submissions from adjudicators\")\n    section = data_entry\n    name = 'participant_ballots'\n    choices = (\n        ('off', _(\"Disabled (tab staff only)\")),\n        ('private-urls', _(\"Use private URLs\")),\n        ('public', _(\"Use publicly accessible form\")),\n    )",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "ParticipantFeedbackSubmissions",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class ParticipantFeedbackSubmissions(ChoicePreference):\n    help_text = _(\"Whether participants can submit feedback themselves, and how they do so\")\n    verbose_name = _(\"Feedback submissions from participants\")\n    section = data_entry\n    name = 'participant_feedback'\n    choices = (\n        ('off', _(\"Disabled (tab staff only)\")),\n        ('private-urls', _(\"Use private URLs\")),\n        ('public', _(\"Use publicly accessible form\")),\n    )",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "PublicUsePassword",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class PublicUsePassword(BooleanPreference):\n    help_text = _(\"If checked, users must enter a password when submitting public feedback and ballots\")\n    verbose_name = _(\"Require password for submission\")\n    section = data_entry\n    name = 'public_use_password'\n    default = False\n@tournament_preferences_registry.register\nclass PublicPassword(StringPreference):\n    help_text = _(\"Value of the password required for public submissions, if passwords are required\")\n    verbose_name = _(\"Password for public submission\")",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "PublicPassword",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class PublicPassword(StringPreference):\n    help_text = _(\"Value of the password required for public submissions, if passwords are required\")\n    verbose_name = _(\"Password for public submission\")\n    section = data_entry\n    name = 'public_password'\n    default = ''\n    required = False\n@tournament_preferences_registry.register\nclass DisableBallotConfirmation(BooleanPreference):\n    help_text = _(\"Bypasses double checking by setting ballots to be automatically confirmed\")",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "DisableBallotConfirmation",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class DisableBallotConfirmation(BooleanPreference):\n    help_text = _(\"Bypasses double checking by setting ballots to be automatically confirmed\")\n    verbose_name = _(\"Bypass double checking\")\n    section = data_entry\n    name = 'disable_ballot_confirms'\n    default = False\n@tournament_preferences_registry.register\nclass EnableBlindBallotConfirmation(BooleanPreference):\n    help_text = _(\"Requires scores of draft ballots to be re-entered as part of the confirmation stage (to create more stringent check). Only applies to BP formats.\")\n    verbose_name = _(\"Enforce blind confirmations\")",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "EnableBlindBallotConfirmation",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class EnableBlindBallotConfirmation(BooleanPreference):\n    help_text = _(\"Requires scores of draft ballots to be re-entered as part of the confirmation stage (to create more stringent check). Only applies to BP formats.\")\n    verbose_name = _(\"Enforce blind confirmations\")\n    section = data_entry\n    name = 'enable_blind_checks'\n    default = False\n@tournament_preferences_registry.register\nclass AssistantAccess(ChoicePreference):\n    help_text = _(\"Whether assistants can access pages that can reveal matchups \"\n                  \"and motions ahead of public release (these pages are useful for \"",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "AssistantAccess",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class AssistantAccess(ChoicePreference):\n    help_text = _(\"Whether assistants can access pages that can reveal matchups \"\n                  \"and motions ahead of public release (these pages are useful for \"\n                  \"displaying draws/motions to the public and for printing ballots).\")\n    verbose_name = _(\"Assistant user access\")\n    section = data_entry\n    name = 'assistant_access'\n    default = 'all_areas'\n    choices = (\n        ('all_areas', _(\"All areas (results entry, draw display, and motions)\")),",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "CheckInParticipantSubmit",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class CheckInParticipantSubmit(BooleanPreference):\n    help_text = _(\"Whether participants can check themselves in/out through their private URL.\")\n    verbose_name = _(\"Participant self-checkin\")\n    section = data_entry\n    name = 'public_checkins_submit'\n    default = False\n@tournament_preferences_registry.register\nclass CheckInWindowPeople(FloatPreference):\n    help_text = _(\"The amount of time (in hours) before a speaker or adjudicator's check-in event expires\")\n    section = data_entry",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "CheckInWindowPeople",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class CheckInWindowPeople(FloatPreference):\n    help_text = _(\"The amount of time (in hours) before a speaker or adjudicator's check-in event expires\")\n    section = data_entry\n    name = 'checkin_window_people'\n    verbose_name = _(\"Check-In Window (People)\")\n    default = 12.0\n@tournament_preferences_registry.register\nclass CheckInWindowVenues(FloatPreference):\n    help_text = _(\"The amount of time (in hours) before a room's check-in event expires\")\n    section = data_entry",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "CheckInWindowVenues",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class CheckInWindowVenues(FloatPreference):\n    help_text = _(\"The amount of time (in hours) before a room's check-in event expires\")\n    section = data_entry\n    name = 'checkin_window_venues'\n    verbose_name = _(\"Check-In Window (Rooms)\")\n    default = 2.0\n@tournament_preferences_registry.register\nclass BallotsConfirmDigits(BooleanPreference):\n    help_text = _(\"Whether the printed scoresheets should show the 'circle digits' prompt to help check bad handwriting\")\n    verbose_name = _(\"Ballot Digit Checks\")",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "BallotsConfirmDigits",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class BallotsConfirmDigits(BooleanPreference):\n    help_text = _(\"Whether the printed scoresheets should show the 'circle digits' prompt to help check bad handwriting\")\n    verbose_name = _(\"Ballot Digit Checks\")\n    section = data_entry\n    name = 'ballots_confirm_digits'\n    default = True\n@tournament_preferences_registry.register\nclass ScoreReturnLocation(StringPreference):\n    help_text = _(\"The location to return scoresheets to, printed on pre-printed ballots. Set to 'TBA' to hide.\")\n    verbose_name = _(\"Score return location\")",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "ScoreReturnLocation",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class ScoreReturnLocation(StringPreference):\n    help_text = _(\"The location to return scoresheets to, printed on pre-printed ballots. Set to 'TBA' to hide.\")\n    verbose_name = _(\"Score return location\")\n    section = data_entry\n    name = 'score_return_location'\n    default = 'TBA'\n@tournament_preferences_registry.register\nclass FeedbackReturnLocation(StringPreference):\n    help_text = _(\"The location to return feedback to, printed on pre-printed feedback forms. Set to 'TBA' to hide.\")\n    verbose_name = _(\"Feedback return location\")",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "FeedbackReturnLocation",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class FeedbackReturnLocation(StringPreference):\n    help_text = _(\"The location to return feedback to, printed on pre-printed feedback forms. Set to 'TBA' to hide.\")\n    verbose_name = _(\"Feedback return location\")\n    section = data_entry\n    name = 'feedback_return_location'\n    default = 'TBA'\n@tournament_preferences_registry.register\nclass EnablePostponements(BooleanPreference):\n    help_text = _(\"Lets debates have their status as postponed, as to not block draw generation.\")\n    verbose_name = _(\"Enable postponements\")",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "EnablePostponements",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class EnablePostponements(BooleanPreference):\n    help_text = _(\"Lets debates have their status as postponed, as to not block draw generation.\")\n    verbose_name = _(\"Enable postponements\")\n    section = data_entry\n    name = 'enable_postponements'\n    default = False\n@tournament_preferences_registry.register\nclass SplitVotingBallots(BooleanPreference):\n    help_text = _(\"Have each voting adjudicator submit a separate ballot.\")\n    verbose_name = _(\"Individual voting ballots\")",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "SplitVotingBallots",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class SplitVotingBallots(BooleanPreference):\n    help_text = _(\"Have each voting adjudicator submit a separate ballot.\")\n    verbose_name = _(\"Individual voting ballots\")\n    section = data_entry\n    name = 'individual_ballots'\n    default = False\n# ==============================================================================\npublic_features = Section('public_features', verbose_name=_(\"Public Features\"))\n# ==============================================================================\n@tournament_preferences_registry.register",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "PublicParticipants",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class PublicParticipants(BooleanPreference):\n    help_text = _(\"Enables the public page listing all participants in the tournament\")\n    verbose_name = _(\"Enable public view of participants list\")\n    section = public_features\n    name = 'public_participants'\n    default = False\n@tournament_preferences_registry.register\nclass PublicInstitutionsList(BooleanPreference):\n    help_text = _(\"Enables the public page listing all institutions in the tournament\")\n    verbose_name = _(\"Enable public view of institutions list\")",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "PublicInstitutionsList",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class PublicInstitutionsList(BooleanPreference):\n    help_text = _(\"Enables the public page listing all institutions in the tournament\")\n    verbose_name = _(\"Enable public view of institutions list\")\n    section = public_features\n    name = 'public_institutions_list'\n    default = False\n@tournament_preferences_registry.register\nclass PublicDiversity(BooleanPreference):\n    help_text = _(\"Enables the public page listing diversity statistics\")\n    verbose_name = _(\"Enable public view of diversity info\")",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "PublicDiversity",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class PublicDiversity(BooleanPreference):\n    help_text = _(\"Enables the public page listing diversity statistics\")\n    verbose_name = _(\"Enable public view of diversity info\")\n    section = public_features\n    name = 'public_diversity'\n    default = False\n@tournament_preferences_registry.register\nclass PublicCheckinStatuses(BooleanPreference):\n    help_text = _(\"Enables the public page showing checkin statuses for \"\n                  \"individuals, institutions, and teams. Note that this page \"",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "PublicCheckinStatuses",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class PublicCheckinStatuses(BooleanPreference):\n    help_text = _(\"Enables the public page showing checkin statuses for \"\n                  \"individuals, institutions, and teams. Note that this page \"\n                  \"can be slow when used at very large tournaments.\")\n    verbose_name = _(\"Enable public view of the checkin statuses\")\n    section = public_features\n    name = 'public_checkins'\n    default = False\n@tournament_preferences_registry.register\nclass PublicBreakCategories(BooleanPreference):",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "PublicBreakCategories",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class PublicBreakCategories(BooleanPreference):\n    help_text = _(\"If the participants list is enabled, displays break category eligibility on that page\")\n    verbose_name = _(\"Show break categories on participants page\")\n    section = public_features\n    name = 'public_break_categories'\n    default = False\n@tournament_preferences_registry.register\nclass PublicSideAllocations(BooleanPreference):\n    help_text = _(\"Enables the public page listing pre-allocated sides\")\n    verbose_name = _(\"Show pre-allocated sides to public\")",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "PublicSideAllocations",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class PublicSideAllocations(BooleanPreference):\n    help_text = _(\"Enables the public page listing pre-allocated sides\")\n    verbose_name = _(\"Show pre-allocated sides to public\")\n    section = public_features\n    name = 'public_side_allocations'\n    default = False\n@tournament_preferences_registry.register\nclass PublicDraw(ChoicePreference):\n    help_text = _(\"Enables the public page showing released draws\")\n    verbose_name = _(\"Enable public view of draw\")",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "PublicDraw",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class PublicDraw(ChoicePreference):\n    help_text = _(\"Enables the public page showing released draws\")\n    verbose_name = _(\"Enable public view of draw\")\n    section = public_features\n    name = 'public_draw'\n    choices = (\n        ('off', _(\"Disabled\")),\n        ('current', _(\"Show a single page for the current round's draw\")),\n        ('all-released', _(\"Show individual pages for all released draws\")),\n    )",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "PublicResults",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class PublicResults(BooleanPreference):\n    help_text = _(\"Enables the public page showing results of non-silent rounds\")\n    verbose_name = _(\"Enable public view of results\")\n    section = public_features\n    name = 'public_results'\n    default = False\n@tournament_preferences_registry.register\nclass PublicMotions(BooleanPreference):\n    help_text = _(\"Enables the public page showing motions that have been explicitly released to the public\")\n    verbose_name = _(\"Enable public view of motions\")",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "PublicMotions",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class PublicMotions(BooleanPreference):\n    help_text = _(\"Enables the public page showing motions that have been explicitly released to the public\")\n    verbose_name = _(\"Enable public view of motions\")\n    section = public_features\n    name = 'public_motions'\n    default = False\n@tournament_preferences_registry.register\nclass PublicTeamStandings(BooleanPreference):\n    help_text = _(\"Enables the public page showing team standings, showing wins only (not speaker scores or ranking)\")\n    verbose_name = _(\"Enable public view of team standings\")",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "PublicTeamStandings",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class PublicTeamStandings(BooleanPreference):\n    help_text = _(\"Enables the public page showing team standings, showing wins only (not speaker scores or ranking)\")\n    verbose_name = _(\"Enable public view of team standings\")\n    section = public_features\n    name = 'public_team_standings'\n    default = False\n@tournament_preferences_registry.register\nclass PublicRecordPages(BooleanPreference):\n    help_text = _(\"Enables the public page for each team and adjudicator showing their records\")\n    verbose_name = _(\"Enable public record pages\")",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "PublicRecordPages",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class PublicRecordPages(BooleanPreference):\n    help_text = _(\"Enables the public page for each team and adjudicator showing their records\")\n    verbose_name = _(\"Enable public record pages\")\n    section = public_features\n    name = 'public_record'\n    default = True\n@tournament_preferences_registry.register\nclass PublicBreakingTeams(BooleanPreference):\n    help_text = _(\"Enables the public page showing the team breaks. Intended for use after the break announcement.\")\n    verbose_name = _(\"Release team breaks to public\")",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "PublicBreakingTeams",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class PublicBreakingTeams(BooleanPreference):\n    help_text = _(\"Enables the public page showing the team breaks. Intended for use after the break announcement.\")\n    verbose_name = _(\"Release team breaks to public\")\n    section = public_features\n    name = 'public_breaking_teams'\n    default = False\n@tournament_preferences_registry.register\nclass PublicBreakingAdjs(BooleanPreference):\n    help_text = _(\"Enables the public page showing breaking adjudicators. Intended for use after the break announcement.\")\n    verbose_name = _(\"Release adjudicators break to public\")",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "PublicBreakingAdjs",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class PublicBreakingAdjs(BooleanPreference):\n    help_text = _(\"Enables the public page showing breaking adjudicators. Intended for use after the break announcement.\")\n    verbose_name = _(\"Release adjudicators break to public\")\n    section = public_features\n    name = 'public_breaking_adjs'\n    default = False\n@tournament_preferences_registry.register\nclass FeedbackProgress(BooleanPreference):\n    help_text = _(\"Enables the public page detailing who has unsubmitted feedback\")\n    verbose_name = _(\"Enable public view of unsubmitted feedback\")",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "FeedbackProgress",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class FeedbackProgress(BooleanPreference):\n    help_text = _(\"Enables the public page detailing who has unsubmitted feedback\")\n    verbose_name = _(\"Enable public view of unsubmitted feedback\")\n    section = public_features\n    name = 'feedback_progress'\n    default = False\n@tournament_preferences_registry.register\nclass TournamentStaff(LongStringPreference):\n    help_text = _(\"List of tournament staff, to be displayed on the tournament home page. Leave this blank or with the default text if you want to not show this information.\")\n    verbose_name = _(\"Tournament staff\")",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "TournamentStaff",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class TournamentStaff(LongStringPreference):\n    help_text = _(\"List of tournament staff, to be displayed on the tournament home page. Leave this blank or with the default text if you want to not show this information.\")\n    verbose_name = _(\"Tournament staff\")\n    section = public_features\n    name = 'tournament_staff'\n    default = \"\"\n    widget = SummernoteWidget(attrs={'height': 150, 'class': 'form-summernote'})\n    field_kwargs = {'required': False}\n@tournament_preferences_registry.register\nclass WelcomeMessage(LongStringPreference):",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "WelcomeMessage",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class WelcomeMessage(LongStringPreference):\n    help_text = _(\"Message to be displayed on the tournament home page\")\n    verbose_name = _(\"Welcome message\")\n    section = public_features\n    name = 'welcome_message'\n    default = \"\"\n    widget = SummernoteWidget(attrs={'height': 150, 'class': 'form-summernote'})\n    field_kwargs = {'required': False}\n# ==============================================================================\nui_options = Section('ui_options', verbose_name=_(\"UI Options\"))",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "ShowSplittingAdjudicators",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class ShowSplittingAdjudicators(BooleanPreference):\n    help_text = _(\"If showing results to public, show splitting adjudicators in them\")\n    verbose_name = _(\"Show splitting adjudicators\")\n    name = 'show_splitting_adjudicators'\n    section = ui_options\n    default = False\n@tournament_preferences_registry.register\nclass TeamCodeNames(ChoicePreference):\n    help_text = _(\"Whether and how to use code names for teams\")\n    verbose_name = _(\"Team code names\")",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "TeamCodeNames",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class TeamCodeNames(ChoicePreference):\n    help_text = _(\"Whether and how to use code names for teams\")\n    verbose_name = _(\"Team code names\")\n    section = ui_options\n    name = 'team_code_names'\n    default = 'off'\n    choices = (\n        ('off',                 _(\"Do not use code names\")),\n        ('all-tooltips',        _(\"Use real names everywhere, and show code names in tooltips\")),\n        ('admin-tooltips-code', _(\"Use code names for public; real names with code names in \"",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "ParticipantCodeNames",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class ParticipantCodeNames(ChoicePreference):\n    help_text = _(\"Whether and how to use code names for participants\")\n    verbose_name = _(\"Participant code names\")\n    section = ui_options\n    name = 'participant_code_names'\n    default = 'off'\n    choices = (\n        ('off',                 _(\"Do not use code names\")),\n        ('everywhere',          _(\"Use code names everywhere; do not use tooltips (real names show in some admin views)\")),\n    )",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "ShowEmoji",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class ShowEmoji(BooleanPreference):\n    help_text = _(\"Display team emoji in the public and admin interfaces\")\n    verbose_name = _(\"Show emoji\")\n    section = ui_options\n    name = 'show_emoji'\n    default = True\n@tournament_preferences_registry.register\nclass ShowTeamInstitutions(BooleanPreference):\n    help_text = _(\"In tables listing teams, adds a column showing their institutions\")\n    verbose_name = _(\"Show team institutions\")",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "ShowTeamInstitutions",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class ShowTeamInstitutions(BooleanPreference):\n    help_text = _(\"In tables listing teams, adds a column showing their institutions\")\n    verbose_name = _(\"Show team institutions\")\n    section = ui_options\n    name = 'show_team_institutions'\n    default = True\n@tournament_preferences_registry.register\nclass ShowAdjudicatorInstitutions(BooleanPreference):\n    help_text = _(\"Hide the institutions of adjudicators on public pages and on printed ballots\")\n    verbose_name = _(\"Show adjudicator institutions\")",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "ShowAdjudicatorInstitutions",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class ShowAdjudicatorInstitutions(BooleanPreference):\n    help_text = _(\"Hide the institutions of adjudicators on public pages and on printed ballots\")\n    verbose_name = _(\"Show adjudicator institutions\")\n    section = ui_options\n    name = 'show_adjudicator_institutions'\n    default = True\n@tournament_preferences_registry.register\nclass ShowSpeakersInDraw(BooleanPreference):\n    help_text = _(\"Enables a hover element on every team's name showing that team's speakers\")\n    verbose_name = _(\"Show speakers in draw\")",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "ShowSpeakersInDraw",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class ShowSpeakersInDraw(BooleanPreference):\n    help_text = _(\"Enables a hover element on every team's name showing that team's speakers\")\n    verbose_name = _(\"Show speakers in draw\")\n    section = ui_options\n    name = 'show_speakers_in_draw'\n    default = True\n@tournament_preferences_registry.register\nclass ShowSeedInImporter(ChoicePreference):\n    help_text = _(\"Input team seed in simple team importer\")\n    verbose_name = _(\"Enable team seed in importer\")",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "ShowSeedInImporter",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class ShowSeedInImporter(ChoicePreference):\n    help_text = _(\"Input team seed in simple team importer\")\n    verbose_name = _(\"Enable team seed in importer\")\n    section = ui_options\n    name = 'show_seed_in_importer'\n    choices = (\n        ('off', _(\"Do not ask for team seed\")),\n        ('numeric', _(\"Ask for numeric team seed\")),\n        ('title', _(\"Ask for descriptive team seed name\")),\n    )",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "ReplyToEmailName",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class ReplyToEmailName(StringPreference):\n    help_text = _(\"The name of the organizer tasked with managing emails (in case of replies)\")\n    verbose_name = _(\"Reply-to name\")\n    section = email\n    name = 'reply_to_name'\n    default = \"Tabulation Team\"\n@tournament_preferences_registry.register\nclass ReplyToEmailAddress(StringPreference):\n    help_text = _(\"The email address for handling replies\")\n    verbose_name = _(\"Reply-to address\")",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "ReplyToEmailAddress",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class ReplyToEmailAddress(StringPreference):\n    help_text = _(\"The email address for handling replies\")\n    verbose_name = _(\"Reply-to address\")\n    section = email\n    name = 'reply_to_address'\n    default = \"\"\n@tournament_preferences_registry.register\nclass EmailWebhookKey(StringPreference):\n    help_text = _(\"A secret key to accept email status events\")\n    verbose_name = _(\"Email status secret key\")",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "EmailWebhookKey",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class EmailWebhookKey(StringPreference):\n    help_text = _(\"A secret key to accept email status events\")\n    verbose_name = _(\"Email status secret key\")\n    section = email\n    name = 'email_hook_key'\n    default = \"\"\n    required = False\n    field_kwargs = {'validators': [validate_slug]}\n@tournament_preferences_registry.register\nclass EnableEmailBallotReceipts(BooleanPreference):",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "EnableEmailBallotReceipts",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class EnableEmailBallotReceipts(BooleanPreference):\n    help_text = _(\"Enables a copy of adjudicators' ballots to be automatically sent to them (by email) after they are entered in Tabbycat (for confirmation or checking)\")\n    verbose_name = _(\"Ballot receipts\")\n    section = email\n    name = 'enable_ballot_receipts'\n    default = False\n@tournament_preferences_registry.register\nclass BallotEmailSubjectLine(StringPreference):\n    help_text = _(\"The subject line for emails sent to adjudicators with their submitted ballot. \"\n                  \"Use '{{ DEBATE }}' as a placeholder for the associated debate\")",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "BallotEmailSubjectLine",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class BallotEmailSubjectLine(StringPreference):\n    help_text = _(\"The subject line for emails sent to adjudicators with their submitted ballot. \"\n                  \"Use '{{ DEBATE }}' as a placeholder for the associated debate\")\n    verbose_name = _(\"Ballot receipt subject line\")\n    section = email\n    name = 'ballot_email_subject'\n    default = \"Your ballot for {{ DEBATE }} has been received\"\n@tournament_preferences_registry.register\nclass BallotEmailMessageBody(LongStringPreference):\n    help_text = _(\"The message body for emails sent to adjudicators with their submitted ballot.\")",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "BallotEmailMessageBody",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class BallotEmailMessageBody(LongStringPreference):\n    help_text = _(\"The message body for emails sent to adjudicators with their submitted ballot.\")\n    verbose_name = _(\"Ballot receipt message\")\n    section = email\n    name = 'ballot_email_message'\n    default = (\"<p>Hi {{ USER }},</p>\"\n        \"<p>Your ballot for {{ DEBATE }} has been successfully received, with these scores:</p>\"\n        \"{{ SCORES }}\"\n        \"<p>If there are any problems, please contact the tab team.</p>\")\n    widget = SummernoteWidget(attrs={'height': 150, 'class': 'form-summernote'})",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "PointsEmailSubjectLine",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class PointsEmailSubjectLine(StringPreference):\n    help_text = \"The subject line for emails sent to speakers with their team points.\"\n    verbose_name = \"Team points subject line\"\n    name = 'team_points_email_subject'\n    default = \"{{ TEAM }}'s current wins after {{ ROUND }}: {{ POINTS }}\"\n@tournament_preferences_registry.register\nclass PointsEmailMessageBody(LongStringPreference):\n    help_text = \"The message body for emails sent to speakers with their team points.\"\n    verbose_name = \"Team points message\"\n    name = 'team_points_email_message'",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "PointsEmailMessageBody",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class PointsEmailMessageBody(LongStringPreference):\n    help_text = \"The message body for emails sent to speakers with their team points.\"\n    verbose_name = \"Team points message\"\n    name = 'team_points_email_message'\n    default = (\"<p>Hi {{ USER }},</p>\"\n        \"After {{ ROUND }}, your team ({{ TEAM }}) currently has <strong>{{ POINTS }}</strong> wins in the {{ TOURN }}.</p>\"\n        \"<p>Current Standings: <a href='{{ URL }}'>{{ URL }}</a></p>\")\n@tournament_preferences_registry.register\nclass AdjudicatorDrawNotificationSubject(StringPreference):\n    help_text = \"The subject line for emails sent to adjudicators with their assignments.\"",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "AdjudicatorDrawNotificationSubject",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class AdjudicatorDrawNotificationSubject(StringPreference):\n    help_text = \"The subject line for emails sent to adjudicators with their assignments.\"\n    verbose_name = \"Adjudicator draw subject line\"\n    name = 'adj_email_subject'\n    default = \"Your assigned debate for {{ ROUND }}: {{ VENUE }}\"\n@tournament_preferences_registry.register\nclass AdjudicatorDrawNotificationMessage(LongStringPreference):\n    help_text = \"The message body for emails sent to adjudicators with their assignments.\"\n    verbose_name = \"Adjudicator draw message\"\n    name = 'adj_email_message'",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "AdjudicatorDrawNotificationMessage",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class AdjudicatorDrawNotificationMessage(LongStringPreference):\n    help_text = \"The message body for emails sent to adjudicators with their assignments.\"\n    verbose_name = \"Adjudicator draw message\"\n    name = 'adj_email_message'\n    default = (\"<p>Hi {{ USER }},</p>\"\n        \"<p>You have been assigned as <strong>{{ POSITION }}</strong> adjudicator for {{ ROUND }} in <strong>{{ VENUE }}</strong> with the following panel: {{ PANEL }}</p>\"\n        \"<p>The debate is between these teams: {{ DRAW }}</p>\")\n@tournament_preferences_registry.register\nclass TeamDrawNotificationSubject(StringPreference):\n    help_text = \"The subject line for emails sent to teams with their draw.\"",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "TeamDrawNotificationSubject",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class TeamDrawNotificationSubject(StringPreference):\n    help_text = \"The subject line for emails sent to teams with their draw.\"\n    verbose_name = \"Team draw subject line\"\n    name = 'team_draw_email_subject'\n    default = \"Your assigned debate for {{ ROUND }}: {{ VENUE }}\"\n@tournament_preferences_registry.register\nclass TeamDrawNotificationMessage(LongStringPreference):\n    help_text = \"The message body for emails sent to participants with their draw.\"\n    verbose_name = \"Private URL notification message\"\n    name = 'team_draw_email_message'",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "TeamDrawNotificationMessage",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class TeamDrawNotificationMessage(LongStringPreference):\n    help_text = \"The message body for emails sent to participants with their draw.\"\n    verbose_name = \"Private URL notification message\"\n    name = 'team_draw_email_message'\n    default = (\"<p>Hi {{ USER }},</p>\"\n        \"<p>You have been assigned as <strong>{{ SIDE }}</strong> for {{ ROUND }} in <strong>{{ VENUE }}</strong> with the following panel: {{ PANEL }}</p>\"\n        \"<p>The debate is between: {{ DRAW }}</p>\")\n@tournament_preferences_registry.register\nclass PrivateUrlEmailSubject(StringPreference):\n    help_text = \"The subject line for emails sent to participants with their private URLs.\"",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "PrivateUrlEmailSubject",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class PrivateUrlEmailSubject(StringPreference):\n    help_text = \"The subject line for emails sent to participants with their private URLs.\"\n    verbose_name = \"Private URL notification subject line\"\n    name = 'url_email_subject'\n    default = \"Your personal private URL for {{ TOURN }}\"\n@tournament_preferences_registry.register\nclass PrivateUrlEmailMessage(LongStringPreference):\n    help_text = \"The message body for emails sent to participants with their private URLs.\"\n    verbose_name = \"Private URL notification message\"\n    name = 'url_email_message'",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "PrivateUrlEmailMessage",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class PrivateUrlEmailMessage(LongStringPreference):\n    help_text = \"The message body for emails sent to participants with their private URLs.\"\n    verbose_name = \"Private URL notification message\"\n    name = 'url_email_message'\n    default = (\"<p>Hi {{ USER }},</p>\"\n        \"<p>At {{ TOURN }}, we are using an online tabulation system. You can submit \"\n        \"your ballots and/or feedback at the following URL. This URL is unique to you — do not share it with \"\n        \"anyone, as anyone who knows it can submit forms on your behalf. This URL \"\n        \"will not change throughout this tournament, so we suggest bookmarking it.</p>\"\n        \"<p>Your personal private URL is:<br />\"",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "MotionReleaseEmailSubject",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class MotionReleaseEmailSubject(StringPreference):\n    help_text = \"The subject line for emails sent to participants on motion release.\"\n    verbose_name = \"Motion release notification subject line\"\n    name = 'motion_email_subject'\n    default = \"Motions for {{ ROUND }}\"\n@tournament_preferences_registry.register\nclass MotionReleaseEmailMessage(LongStringPreference):\n    help_text = \"The message body for emails sent to participants on motion release.\"\n    verbose_name = \"Motion release notification message\"\n    name = 'motion_email_message'",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "MotionReleaseEmailMessage",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class MotionReleaseEmailMessage(LongStringPreference):\n    help_text = \"The message body for emails sent to participants on motion release.\"\n    verbose_name = \"Motion release notification message\"\n    name = 'motion_email_message'\n    default = (\"<p>The motion(s) for {{ ROUND }} are:</p>\"\n        \"{{ MOTIONS }}\")\n@tournament_preferences_registry.register\nclass TeamNameEmailSubject(StringPreference):\n    help_text = \"The subject line for emails sent to participants informing them of their team registration.\"\n    verbose_name = \"Team registration notification subject line\"",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "TeamNameEmailSubject",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class TeamNameEmailSubject(StringPreference):\n    help_text = \"The subject line for emails sent to participants informing them of their team registration.\"\n    verbose_name = \"Team registration notification subject line\"\n    name = 'team_email_subject'\n    default = \"Registration for {{ SHORT }}\"\n@tournament_preferences_registry.register\nclass TeamNameEmailMessage(LongStringPreference):\n    help_text = \"The message body for emails sent to participants informing them of their team registration.\"\n    verbose_name = \"Team registration notification message\"\n    name = 'team_email_message'",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "TeamNameEmailMessage",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class TeamNameEmailMessage(LongStringPreference):\n    help_text = \"The message body for emails sent to participants informing them of their team registration.\"\n    verbose_name = \"Team registration notification message\"\n    name = 'team_email_message'\n    default = (\"<p>Hi {{ USER }},</p>\"\n        \"<p>You are registered as <strong>{{ LONG }}</strong> in {{ TOURN }} with {{ SPEAKERS }}.</p>\")\n    default = (\"Hi {{ USER }},\\n\\n\"\n        \"You are registered as {{ LONG }} in {{ TOURN }} with {{ SPEAKERS }}.\")\n# ==============================================================================\nmotions = Section('motions', verbose_name=_(\"Motions\"))",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "EnableMotions",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class EnableMotions(BooleanPreference):\n    help_text = _(\"If checked, ballots require a motion to be entered\")\n    verbose_name = _(\"Enable motions\")\n    section = motions\n    name = 'enable_motions'\n    default = True\n@tournament_preferences_registry.register\nclass BallotsHideMotions(BooleanPreference):\n    help_text = _(\"Whether the printed scoresheets should hide the text of motions (even if they have been entered and released)\")\n    verbose_name = _(\"Ballot Hide Motions\")",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "BallotsHideMotions",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class BallotsHideMotions(BooleanPreference):\n    help_text = _(\"Whether the printed scoresheets should hide the text of motions (even if they have been entered and released)\")\n    verbose_name = _(\"Ballot Hide Motions\")\n    section = data_entry\n    name = 'ballots_hide_motions'\n    default = False\n@tournament_preferences_registry.register\nclass MotionVetoes(BooleanPreference):\n    help_text = _(\"Enables the motion veto field on ballots, to track veto statistics\")\n    verbose_name = _(\"Motion vetoes\")",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "MotionVetoes",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class MotionVetoes(BooleanPreference):\n    help_text = _(\"Enables the motion veto field on ballots, to track veto statistics\")\n    verbose_name = _(\"Motion vetoes\")\n    section = motions\n    name = 'motion_vetoes_enabled'\n    default = True\n@tournament_preferences_registry.register\nclass ShowMotionsInResults(BooleanPreference):\n    help_text = _(\"If showing results to public, show which motions were selected in the record\")\n    verbose_name = _(\"Show motions in results\")",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "ShowMotionsInResults",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class ShowMotionsInResults(BooleanPreference):\n    help_text = _(\"If showing results to public, show which motions were selected in the record\")\n    verbose_name = _(\"Show motions in results\")\n    section = motions\n    name = 'show_motions_in_results'\n    default = False\n@tournament_preferences_registry.register\nclass PublicMotionsOrder(ChoicePreference):\n    help_text = _(\"Order in which are listed by round in the public view\")\n    verbose_name = _(\"Order to display motions\")",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "PublicMotionsOrder",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class PublicMotionsOrder(ChoicePreference):\n    help_text = _(\"Order in which are listed by round in the public view\")\n    verbose_name = _(\"Order to display motions\")\n    section = motions\n    name = 'public_motions_order'\n    choices = (\n        ('forward', _(\"Earliest round first\")),\n        ('reverse', _(\"Latest round first\")),\n    )\n    default = 'reverse'",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "EnableMotionReuse",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class EnableMotionReuse(BooleanPreference):\n    help_text = _(\"Whether motions can be reused from one round to another.\")\n    verbose_name = _(\"Allow motion reuse\")\n    section = motions\n    name = 'enable_motion_reuse'\n    default = False\n# ==============================================================================\nglobal_settings = Section('global', verbose_name=_('Global Settings'))\n# ==============================================================================\n@global_preferences_registry.register",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "EnableAPIAccess",
        "kind": 6,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "class EnableAPIAccess(BooleanPreference):\n    help_text = _(\"Enables external applications to access the site through a dedicated interface, subject to public information settings.\")\n    verbose_name = _(\"Enable API access\")\n    section = global_settings\n    name = 'enable_api'\n    default = True",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "scoring",
        "kind": 5,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "scoring = Section('scoring', verbose_name=_(\"Score Rules\"))\n# ==============================================================================\n@tournament_preferences_registry.register\nclass MinimumSpeakerScore(DecimalPreference):\n    help_text = _(\"Minimum allowed score for substantive speeches\")\n    section = scoring\n    name = 'score_min'\n    verbose_name = _(\"Minimum speaker score\")\n    default = Decimal('68')\n@tournament_preferences_registry.register",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "draw_rules",
        "kind": 5,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "draw_rules = Section('draw_rules', verbose_name=_(\"Draw Rules\"))\n# ==============================================================================\n@tournament_preferences_registry.register\nclass VotingScore(FloatPreference):\n    help_text = _(\"The auto-allocator will only take adjudicators at or above this score as voting panellists\")\n    verbose_name = _(\"Minimum adjudicator score to vote\")\n    section = draw_rules\n    name = 'adj_min_voting_score'\n    default = 1.5\n@tournament_preferences_registry.register",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "feedback",
        "kind": 5,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "feedback = Section('feedback', verbose_name=_(\"Feedback\"))\n# ==============================================================================\n@tournament_preferences_registry.register\nclass MinimumAdjScore(FloatPreference):\n    help_text = _(\"Minimum possible adjudicator score that can be given\")\n    verbose_name = _(\"Minimum adjudicator score\")\n    section = feedback\n    name = 'adj_min_score'\n    default = 0.0\n@tournament_preferences_registry.register",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "debate_rules",
        "kind": 5,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "debate_rules = Section('debate_rules', verbose_name=_(\"Debate Rules\"))\n# ==============================================================================\n@tournament_preferences_registry.register\nclass TeamsInDebate(IntegerPreference):\n    help_text = _(\"How many teams are in each debate (normally 2 but 4 for BP)\")\n    verbose_name = _(\"Number of teams per debate\")\n    section = debate_rules\n    name = 'teams_in_debate'\n    default = 2\n@tournament_preferences_registry.register",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "standings",
        "kind": 5,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "standings = Section('standings', verbose_name=_(\"Standings\"))\n# ==============================================================================\n@tournament_preferences_registry.register\nclass StandingsMissedDebates(IntegerPreference):\n    help_text = _(\"The number of substantive speeches a speaker can miss and still be on the speaker tab (-1 means no limit)\")\n    verbose_name = _(\"Speeches missable for standings eligibility\")\n    section = standings\n    name = 'standings_missed_debates'\n    default = -1\n@tournament_preferences_registry.register",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "tab_release",
        "kind": 5,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "tab_release = Section('tab_release', verbose_name=_(\"Tab Release\"))\n# ==============================================================================\n@tournament_preferences_registry.register\nclass TeamTabReleased(BooleanPreference):\n    help_text = _(\"Enables public display of the team tab. Intended for use after the tournament.\")\n    verbose_name = _(\"Release team tab to public\")\n    section = tab_release\n    name = 'team_tab_released'\n    default = False\n@tournament_preferences_registry.register",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "data_entry",
        "kind": 5,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "data_entry = Section('data_entry', verbose_name=_(\"Data Entry\"))\n# ==============================================================================\n@tournament_preferences_registry.register\nclass ParticipantBallotSubmissions(ChoicePreference):\n    help_text = _(\"Whether adjudicators can submit ballots themselves, and how they do so\")\n    verbose_name = _(\"Ballot submissions from adjudicators\")\n    section = data_entry\n    name = 'participant_ballots'\n    choices = (\n        ('off', _(\"Disabled (tab staff only)\")),",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "public_features",
        "kind": 5,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "public_features = Section('public_features', verbose_name=_(\"Public Features\"))\n# ==============================================================================\n@tournament_preferences_registry.register\nclass PublicParticipants(BooleanPreference):\n    help_text = _(\"Enables the public page listing all participants in the tournament\")\n    verbose_name = _(\"Enable public view of participants list\")\n    section = public_features\n    name = 'public_participants'\n    default = False\n@tournament_preferences_registry.register",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "ui_options",
        "kind": 5,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "ui_options = Section('ui_options', verbose_name=_(\"UI Options\"))\n# ==============================================================================\n@tournament_preferences_registry.register\nclass ShowSplittingAdjudicators(BooleanPreference):\n    help_text = _(\"If showing results to public, show splitting adjudicators in them\")\n    verbose_name = _(\"Show splitting adjudicators\")\n    name = 'show_splitting_adjudicators'\n    section = ui_options\n    default = False\n@tournament_preferences_registry.register",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "email",
        "kind": 5,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "email = Section('email', verbose_name=_(\"Notifications\"))\n# ==============================================================================\n@tournament_preferences_registry.register\nclass ReplyToEmailName(StringPreference):\n    help_text = _(\"The name of the organizer tasked with managing emails (in case of replies)\")\n    verbose_name = _(\"Reply-to name\")\n    section = email\n    name = 'reply_to_name'\n    default = \"Tabulation Team\"\n@tournament_preferences_registry.register",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "motions",
        "kind": 5,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "motions = Section('motions', verbose_name=_(\"Motions\"))\n# ==============================================================================\n@tournament_preferences_registry.register\nclass EnableMotions(BooleanPreference):\n    help_text = _(\"If checked, ballots require a motion to be entered\")\n    verbose_name = _(\"Enable motions\")\n    section = motions\n    name = 'enable_motions'\n    default = True\n@tournament_preferences_registry.register",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "global_settings",
        "kind": 5,
        "importPath": "tabbycat.options.preferences",
        "description": "tabbycat.options.preferences",
        "peekOfCode": "global_settings = Section('global', verbose_name=_('Global Settings'))\n# ==============================================================================\n@global_preferences_registry.register\nclass EnableAPIAccess(BooleanPreference):\n    help_text = _(\"Enables external applications to access the site through a dedicated interface, subject to public information settings.\")\n    verbose_name = _(\"Enable API access\")\n    section = global_settings\n    name = 'enable_api'\n    default = True",
        "detail": "tabbycat.options.preferences",
        "documentation": {}
    },
    {
        "label": "PreferencesPreset",
        "kind": 6,
        "importPath": "tabbycat.options.presets",
        "description": "tabbycat.options.presets",
        "peekOfCode": "class PreferencesPreset:\n    show_in_list                               = False\n    @classmethod\n    def get_preferences(cls):\n        for key in dir(cls):\n            if '__' in key and not key.startswith('__'):\n                yield key\n    @classmethod\n    def get_form(cls, tournament, **kwargs):\n        form = tournament_preference_form_builder(tournament, [tuple(key.split('__', 1)[::-1]) for key in cls.get_preferences()])(**kwargs)",
        "detail": "tabbycat.options.presets",
        "documentation": {}
    },
    {
        "label": "AustralsPreferences",
        "kind": 6,
        "importPath": "tabbycat.options.presets",
        "description": "tabbycat.options.presets",
        "peekOfCode": "class AustralsPreferences(PreferencesPreset):\n    name         = _(\"Australs Rules\")\n    description  = _(\"3 vs 3 with replies, chosen motions, intermediate brackets, \"\n        \"one-up-one-down. Compliant with AIDA rules.\")\n    show_in_list = True\n    # Scoring\n    scoring__score_min                         = Decimal('70') # Technically the speaks\n    scoring__score_max                         = Decimal('80') # range is at the adj\n    scoring__score_step                        = Decimal('1')  # core's discretion (it's\n    scoring__reply_score_min                   = Decimal('35.0') # not in the constitution)",
        "detail": "tabbycat.options.presets",
        "documentation": {}
    },
    {
        "label": "BritishParliamentaryPreferences",
        "kind": 6,
        "importPath": "tabbycat.options.presets",
        "description": "tabbycat.options.presets",
        "peekOfCode": "class BritishParliamentaryPreferences(PreferencesPreset):\n    name         = _(\"British Parliamentary Rules\")\n    description  = _(\"2 vs 2 vs 2 vs 2. Compliant with WUDC rules.\")\n    show_in_list = True\n    scoring__score_min                         = Decimal('50')\n    scoring__score_max                         = Decimal('99')\n    scoring__score_step                        = Decimal('1')\n    scoring__maximum_margin                    = 0.0\n    scoring__teamscore_includes_ghosts         = True  # WUDC 34.9.3.2\n    # Debate Rules",
        "detail": "tabbycat.options.presets",
        "documentation": {}
    },
    {
        "label": "CanadianParliamentaryPreferences",
        "kind": 6,
        "importPath": "tabbycat.options.presets",
        "description": "tabbycat.options.presets",
        "peekOfCode": "class CanadianParliamentaryPreferences(PreferencesPreset):\n    name         = _(\"Canadian Parliamentary Rules\")\n    show_in_list = True\n    description  = _(\"2 vs 2 with replies (unscored) and POIs. May require \"\n        \"additional configuration depending on regional variations.\")\n    # Scoring\n    scoring__score_min                         = Decimal('50')\n    scoring__score_max                         = Decimal('100')\n    # Debate Rules\n    debate_rules__reply_scores_enabled         = False # Not scored",
        "detail": "tabbycat.options.presets",
        "documentation": {}
    },
    {
        "label": "AustralianEastersPreferences",
        "kind": 6,
        "importPath": "tabbycat.options.presets",
        "description": "tabbycat.options.presets",
        "peekOfCode": "class AustralianEastersPreferences(AustralsPreferences):\n    name         = _(\"Australian Easters Rules\")\n    show_in_list = True\n    description  = _(\"3 vs 3 without replies, set motions, novices, intermediate \"\n        \"bubbles, one-up-one-down. Compliant with AIDA rules.\")\n    # Scoring\n    scoring__score_min                         = Decimal('70')\n    scoring__score_max                         = Decimal('80')\n    scoring__maximum_margin                    = 15.0\n    # Debate Rules",
        "detail": "tabbycat.options.presets",
        "documentation": {}
    },
    {
        "label": "NZEastersPreferences",
        "kind": 6,
        "importPath": "tabbycat.options.presets",
        "description": "tabbycat.options.presets",
        "peekOfCode": "class NZEastersPreferences(AustralsPreferences):\n    name         = _(\"2 vs 2 Impromptu\")\n    show_in_list = True\n    description  = _(\"2 vs 2 with replies, chosen motions, chosen sides, and \"\n        \"novice statuses.\")\n    # Scoring\n    scoring__score_min                         = Decimal('60')\n    scoring__score_max                         = Decimal('80')\n    scoring__reply_score_min                   = Decimal('30.0')\n    scoring__reply_score_max                   = Decimal('40.0')",
        "detail": "tabbycat.options.presets",
        "documentation": {}
    },
    {
        "label": "JoyntPreferences",
        "kind": 6,
        "importPath": "tabbycat.options.presets",
        "description": "tabbycat.options.presets",
        "peekOfCode": "class JoyntPreferences(AustralsPreferences):\n    name         = _(\"3 vs 3 Prepared\")\n    show_in_list = True\n    description  = _(\"3 vs 3 with preallocated sides, publicly displayed sides \"\n        \"and motions, and novice statuses.\")\n    # Scoring\n    scoring__score_min                         = Decimal('60')\n    scoring__score_max                         = Decimal('80')\n    scoring__reply_score_min                   = Decimal('30.0')\n    scoring__reply_score_max                   = Decimal('40.0')",
        "detail": "tabbycat.options.presets",
        "documentation": {}
    },
    {
        "label": "UADCPreferences",
        "kind": 6,
        "importPath": "tabbycat.options.presets",
        "description": "tabbycat.options.presets",
        "peekOfCode": "class UADCPreferences(AustralsPreferences):\n    name         = _(\"UADC Rules\")\n    show_in_list = True\n    description  = _(\"3 vs 3 with replies, chosen motions, and all adjudicators \"\n        \"can receive feedback from teams.\")\n    # Rules source = https://docs.google.com/document/d/10AVKBhev_OFRtorWsu2VB9B5V1a2f20425HYkC5ztMM/edit\n    # Scoring\n    scoring__score_min                         = Decimal('69')  # From Rules Book\n    scoring__score_max                         = Decimal('81')  # From Rules Book\n    scoring__score_step                        = Decimal('1')",
        "detail": "tabbycat.options.presets",
        "documentation": {}
    },
    {
        "label": "WSDCPreferences",
        "kind": 6,
        "importPath": "tabbycat.options.presets",
        "description": "tabbycat.options.presets",
        "peekOfCode": "class WSDCPreferences(AustralsPreferences):\n    name         = _(\"WSDC Rules\")\n    show_in_list = True\n    description  = _(\"3 vs 3 with replies, chosen motions, prop/opp side labels, \"\n        \"and all adjudicators can receive feedback from teams.\")\n    # Rules source = http://mkf2v40tlr04cjqkt2dtlqbr.wpengine.netdna-cdn.com/wp-content/uploads/2014/05/WSDC-Debate-Rules-U-2015.pdf\n    # Score (strictly specified in the rules)\n    scoring__score_min                         = Decimal('60')\n    scoring__score_max                         = Decimal('80')\n    scoring__score_step                        = Decimal('1')",
        "detail": "tabbycat.options.presets",
        "documentation": {}
    },
    {
        "label": "APDAPreferences",
        "kind": 6,
        "importPath": "tabbycat.options.presets",
        "description": "tabbycat.options.presets",
        "peekOfCode": "class APDAPreferences(PreferencesPreset):\n    name = _(\"APDA Rules\")\n    show_in_list = True\n    description = _(\"2 vs 2 with speech rankings and byes\")\n    scoring__score_min                         = Decimal('15')\n    scoring__score_max                         = Decimal('40')\n    motions__motion_vetoes_enabled             = False # Single motions per round\n    motions__enable_motions                    = False\n    draw_rules__draw_odd_bracket               = 'pullup_bottom'\n    draw_rules__team_institution_penalty       = 1000",
        "detail": "tabbycat.options.presets",
        "documentation": {}
    },
    {
        "label": "PublicSpeaking",
        "kind": 6,
        "importPath": "tabbycat.options.presets",
        "description": "tabbycat.options.presets",
        "peekOfCode": "class PublicSpeaking(PreferencesPreset):\n    name = _(\"Public Speaking\")\n    show_in_list = True\n    description = _(\"Arbitrary number of teams per room, one speech each, no team points\")\n    scoring__score_min                         = Decimal('50')\n    scoring__score_max                         = Decimal('99')\n    scoring__score_step                        = Decimal('1')\n    scoring__maximum_margin                    = 0.0\n    scoring__margin_includes_dissenters        = True  # Disables win/rank calculations\n    # Debate Rules",
        "detail": "tabbycat.options.presets",
        "documentation": {}
    },
    {
        "label": "PublicInformation",
        "kind": 6,
        "importPath": "tabbycat.options.presets",
        "description": "tabbycat.options.presets",
        "peekOfCode": "class PublicInformation(PreferencesPreset):\n    name         = _(\"Public Information Options\")\n    show_in_list = False\n    description  = _(\"For tournaments hosted online: this sets it up so that \"\n        \"people can access the draw and other generally useful information \"\n        \"via the tab site.\")\n    public_features__public_draw               = 'current'\n    public_features__public_break_categories   = True\n    public_features__public_results            = True\n    public_features__public_motions            = True",
        "detail": "tabbycat.options.presets",
        "documentation": {}
    },
    {
        "label": "TabRelease",
        "kind": 6,
        "importPath": "tabbycat.options.presets",
        "description": "tabbycat.options.presets",
        "peekOfCode": "class TabRelease(PreferencesPreset):\n    name         = _(\"Tab Release Options\")\n    show_in_list = False\n    description  = _(\"For when a tab is ready to be released. This will publicly \"\n        \"display the results of all rounds, the team tab, the speaker tab, etc\")\n    tab_release__team_tab_released             = True\n    tab_release__speaker_tab_released          = True\n    tab_release__motion_tab_released           = True\n    tab_release__ballots_released              = True\n    tab_release__all_results_released          = True",
        "detail": "tabbycat.options.presets",
        "documentation": {}
    },
    {
        "label": "PrivateURLs",
        "kind": 6,
        "importPath": "tabbycat.options.presets",
        "description": "tabbycat.options.presets",
        "peekOfCode": "class PrivateURLs(PreferencesPreset):\n    name = _(\"Use Private URLs\")\n    show_in_list = False\n    description = _(\"Enables participant data entry through private URLs.\")\n    data_entry__participant_ballots            = 'private-urls'\n    data_entry__participant_feedback           = 'private-urls'\nclass PublicForms(PreferencesPreset):\n    name = _(\"Use Public Forms\")\n    show_in_list = False\n    description = _(\"Enables participant data entry through public forms.\")",
        "detail": "tabbycat.options.presets",
        "documentation": {}
    },
    {
        "label": "PublicForms",
        "kind": 6,
        "importPath": "tabbycat.options.presets",
        "description": "tabbycat.options.presets",
        "peekOfCode": "class PublicForms(PreferencesPreset):\n    name = _(\"Use Public Forms\")\n    show_in_list = False\n    description = _(\"Enables participant data entry through public forms.\")\n    data_entry__participant_ballots            = 'public'\n    data_entry__participant_feedback           = 'public'",
        "detail": "tabbycat.options.presets",
        "documentation": {}
    },
    {
        "label": "all_presets",
        "kind": 2,
        "importPath": "tabbycat.options.presets",
        "description": "tabbycat.options.presets",
        "peekOfCode": "def all_presets():\n    yield from _all_subclasses(PreferencesPreset)\ndef presets_for_form():\n    presets = all_presets()\n    choices = []\n    for index, preset in enumerate(presets):\n        if preset.show_in_list:\n            choices.append((preset.name, preset.name))\n    choices.sort(key=lambda x: x[1]) # Sort by name\n    return choices",
        "detail": "tabbycat.options.presets",
        "documentation": {}
    },
    {
        "label": "presets_for_form",
        "kind": 2,
        "importPath": "tabbycat.options.presets",
        "description": "tabbycat.options.presets",
        "peekOfCode": "def presets_for_form():\n    presets = all_presets()\n    choices = []\n    for index, preset in enumerate(presets):\n        if preset.show_in_list:\n            choices.append((preset.name, preset.name))\n    choices.sort(key=lambda x: x[1]) # Sort by name\n    return choices\npublic_presets_for_form = [\n    (True, _('Enable Public Information')),",
        "detail": "tabbycat.options.presets",
        "documentation": {}
    },
    {
        "label": "get_preset_from_slug",
        "kind": 2,
        "importPath": "tabbycat.options.presets",
        "description": "tabbycat.options.presets",
        "peekOfCode": "def get_preset_from_slug(slug):\n    selected_presets = [x for x in all_presets() if slugify(x.__name__) == slug]\n    if len(selected_presets) == 0:\n        raise ValueError(\"Preset {!r} not found.\".format(slug))\n    elif len(selected_presets) > 1:\n        logger.warning(\"Found more than one preset for %s\", slug)\n    return selected_presets[0]\nclass PreferencesPreset:\n    show_in_list                               = False\n    @classmethod",
        "detail": "tabbycat.options.presets",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "tabbycat.options.presets",
        "description": "tabbycat.options.presets",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef _all_subclasses(cls):\n    for subclass in cls.__subclasses__():\n        yield from _all_subclasses(subclass)\n        yield subclass\ndef all_presets():\n    yield from _all_subclasses(PreferencesPreset)\ndef presets_for_form():\n    presets = all_presets()\n    choices = []",
        "detail": "tabbycat.options.presets",
        "documentation": {}
    },
    {
        "label": "public_presets_for_form",
        "kind": 5,
        "importPath": "tabbycat.options.presets",
        "description": "tabbycat.options.presets",
        "peekOfCode": "public_presets_for_form = [\n    (True, _('Enable Public Information')),\n    (False, _('Disable Public Information')),\n]\ndata_entry_presets_for_form = [\n    (False, _('Disabled (tab staff only)')),\n    (\"private-urls\", _('Use private URLs')),\n    (\"public\", _('Use publicly accessible form')),\n]\ndef get_preset_from_slug(slug):",
        "detail": "tabbycat.options.presets",
        "documentation": {}
    },
    {
        "label": "data_entry_presets_for_form",
        "kind": 5,
        "importPath": "tabbycat.options.presets",
        "description": "tabbycat.options.presets",
        "peekOfCode": "data_entry_presets_for_form = [\n    (False, _('Disabled (tab staff only)')),\n    (\"private-urls\", _('Use private URLs')),\n    (\"public\", _('Use publicly accessible form')),\n]\ndef get_preset_from_slug(slug):\n    selected_presets = [x for x in all_presets() if slugify(x.__name__) == slug]\n    if len(selected_presets) == 0:\n        raise ValueError(\"Preset {!r} not found.\".format(slug))\n    elif len(selected_presets) > 1:",
        "detail": "tabbycat.options.presets",
        "documentation": {}
    },
    {
        "label": "TournamentPreferenceRegistry",
        "kind": 6,
        "importPath": "tabbycat.options.registries",
        "description": "tabbycat.options.registries",
        "peekOfCode": "class TournamentPreferenceRegistry(PerInstancePreferenceRegistry):\n    pass\ntournament_preferences_registry = TournamentPreferenceRegistry()",
        "detail": "tabbycat.options.registries",
        "documentation": {}
    },
    {
        "label": "tournament_preferences_registry",
        "kind": 5,
        "importPath": "tabbycat.options.registries",
        "description": "tabbycat.options.registries",
        "peekOfCode": "tournament_preferences_registry = TournamentPreferenceRegistry()",
        "detail": "tabbycat.options.registries",
        "documentation": {}
    },
    {
        "label": "MultiValueSerializer",
        "kind": 6,
        "importPath": "tabbycat.options.serializers",
        "description": "tabbycat.options.serializers",
        "peekOfCode": "class MultiValueSerializer(MultipleSerializer):\n    separator = \"//\"\n    sort = False",
        "detail": "tabbycat.options.serializers",
        "documentation": {}
    },
    {
        "label": "MultiValueChoicePreference",
        "kind": 6,
        "importPath": "tabbycat.options.types",
        "description": "tabbycat.options.types",
        "peekOfCode": "class MultiValueChoicePreference(ChoicePreference):\n    nfields = 5\n    allow_empty = False\n    field_class = MultiValueChoiceField\n    serializer = MultiValueSerializer\n    def get_field_kwargs(self):\n        field_kwargs = super().get_field_kwargs()\n        field_kwargs['nfields'] = self.nfields\n        field_kwargs['allow_empty'] = self.allow_empty\n        return field_kwargs",
        "detail": "tabbycat.options.types",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "tabbycat.options.urls",
        "description": "tabbycat.options.urls",
        "peekOfCode": "urlpatterns = [\n    # Overview\n    path('',\n        views.TournamentConfigIndexView.as_view(),\n        name='options-tournament-index'),\n    # Presets\n    path('presets/<slug:preset_name>/confirm/',\n        views.SetPresetPreferencesView.as_view(),\n        name=\"options-presets-confirm\"),\n    # Per Type",
        "detail": "tabbycat.options.urls",
        "documentation": {}
    },
    {
        "label": "use_team_code_names",
        "kind": 2,
        "importPath": "tabbycat.options.utils",
        "description": "tabbycat.options.utils",
        "peekOfCode": "def use_team_code_names(tournament, admin, user=AnonymousUser()):\n    \"\"\"Returns True if team code names should be used, given the tournament\n    preferences of `tournament` and whether the request is for an admin view.\n    `admin` should be True if the request is for an admin view and False if not.\n    \"\"\"\n    if tournament.pref('team_code_names') in ['admin-tooltips-real', 'everywhere']:\n        return True\n    if tournament.pref('team_code_names') == 'admin-tooltips-code' and not (admin and has_permission(user, Permission.VIEW_DECODED_TEAMS, tournament)):\n        return True\n    return False",
        "detail": "tabbycat.options.utils",
        "documentation": {}
    },
    {
        "label": "use_team_code_names_data_entry",
        "kind": 2,
        "importPath": "tabbycat.options.utils",
        "description": "tabbycat.options.utils",
        "peekOfCode": "def use_team_code_names_data_entry(tournament, tabroom):\n    \"\"\"Returns one of 'off', 'code' and 'both', indicating whether code names\n    should (respectively) not be used, only be used, or be used alongside real\n    names, in data entry screens. This is a different use-case from\n    use_team_code_names() above, because during data entry, the paper ballots\n    will have code names on them, so it's easier for data entry staff to look\n    at them by code name.\"\"\"\n    pref = tournament.pref('team_code_names')\n    if pref in ['off', 'all-tooltips']:\n        return 'off'",
        "detail": "tabbycat.options.utils",
        "documentation": {}
    },
    {
        "label": "validate_metric_duplicates",
        "kind": 2,
        "importPath": "tabbycat.options.utils",
        "description": "tabbycat.options.utils",
        "peekOfCode": "def validate_metric_duplicates(generator, value):\n    # Check that non-repeatable metrics aren't listed twice\n    classes = [generator.metric_annotator_classes[metric] for metric in value]\n    duplicates = [c for c in classes if not c.repeatable and classes.count(c) > 1]\n    if duplicates:\n        duplicates_str = \", \".join(list(set(force_str(c.name) for c in duplicates)))\n        raise ValidationError(_(\"The following metrics can't be listed twice: \"\n                \"%(duplicates)s\") % {'duplicates': duplicates_str})",
        "detail": "tabbycat.options.utils",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "tabbycat.options.utils",
        "description": "tabbycat.options.utils",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef use_team_code_names(tournament, admin, user=AnonymousUser()):\n    \"\"\"Returns True if team code names should be used, given the tournament\n    preferences of `tournament` and whether the request is for an admin view.\n    `admin` should be True if the request is for an admin view and False if not.\n    \"\"\"\n    if tournament.pref('team_code_names') in ['admin-tooltips-real', 'everywhere']:\n        return True\n    if tournament.pref('team_code_names') == 'admin-tooltips-code' and not (admin and has_permission(user, Permission.VIEW_DECODED_TEAMS, tournament)):\n        return True",
        "detail": "tabbycat.options.utils",
        "documentation": {}
    },
    {
        "label": "TournamentConfigIndexView",
        "kind": 6,
        "importPath": "tabbycat.options.views",
        "description": "tabbycat.options.views",
        "peekOfCode": "class TournamentConfigIndexView(AdministratorMixin, TournamentMixin, TemplateView):\n    template_name = \"preferences_index.html\"\n    view_permission = True\n    def get_preset_options(self):\n        \"\"\"Returns a list of all preset classes.\"\"\"\n        preset_options = []\n        for preset_class in all_presets():\n            preset_class.slugified_name = slugify(preset_class.__name__)\n            preset_options.append(preset_class)\n        preset_options.sort(key=lambda x: (x.show_in_list, x.name))",
        "detail": "tabbycat.options.views",
        "documentation": {}
    },
    {
        "label": "MultiPreferenceFormView",
        "kind": 6,
        "importPath": "tabbycat.options.views",
        "description": "tabbycat.options.views",
        "peekOfCode": "class MultiPreferenceFormView(PreferenceFormView):\n    possible_registries = []\n    def dispatch(self, request, *args, **kwargs):\n        for registry in self.possible_registries:\n            self.registry = registry\n            try:\n                return super().dispatch(request, *args, **kwargs)\n            except Http404:\n                continue\n        else:",
        "detail": "tabbycat.options.views",
        "documentation": {}
    },
    {
        "label": "TournamentPreferenceFormView",
        "kind": 6,
        "importPath": "tabbycat.options.views",
        "description": "tabbycat.options.views",
        "peekOfCode": "class TournamentPreferenceFormView(AdministratorMixin, LogActionMixin, TournamentMixin, MultiPreferenceFormView):\n    possible_registries = [global_preferences_registry, tournament_preferences_registry]\n    section = None\n    template_name = \"preferences_section_set.html\"\n    view_permission = Permission.VIEW_SETTINGS\n    edit_permission = Permission.EDIT_SETTINGS\n    action_log_type = ActionLogEntry.ActionType.OPTIONS_EDIT\n    def form_valid(self, *args, **kwargs):\n        messages.success(self.request, _(\"Tournament options (%(section)s) saved.\") % {'section': self.section.verbose_name})\n        return super().form_valid(*args, **kwargs)",
        "detail": "tabbycat.options.views",
        "documentation": {}
    },
    {
        "label": "SetPresetPreferencesView",
        "kind": 6,
        "importPath": "tabbycat.options.views",
        "description": "tabbycat.options.views",
        "peekOfCode": "class SetPresetPreferencesView(AdministratorMixin, LogActionMixin, TournamentMixin, FormView):\n    template_name = \"preset_edit.html\"\n    page_emoji = '❔'\n    view_permission = Permission.VIEW_SETTINGS\n    edit_permission = Permission.EDIT_SETTINGS\n    action_log_type = ActionLogEntry.ActionType.OPTIONS_EDIT\n    def get_page_title(self):\n        return _(\"Apply Preset: %s\") % self.get_selected_preset().name\n    def get_form(self):\n        return self.get_selected_preset().get_form(self.tournament, **self.get_form_kwargs())",
        "detail": "tabbycat.options.views",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "tabbycat.options.views",
        "description": "tabbycat.options.views",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass TournamentConfigIndexView(AdministratorMixin, TournamentMixin, TemplateView):\n    template_name = \"preferences_index.html\"\n    view_permission = True\n    def get_preset_options(self):\n        \"\"\"Returns a list of all preset classes.\"\"\"\n        preset_options = []\n        for preset_class in all_presets():\n            preset_class.slugified_name = slugify(preset_class.__name__)\n            preset_options.append(preset_class)",
        "detail": "tabbycat.options.views",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "tabbycat.participants.management.commands.convertteamnames",
        "description": "tabbycat.participants.management.commands.convertteamnames",
        "peekOfCode": "class Command(TournamentCommand):\n    help = \"Removes institution codes from team names and enables 'use institution prefix' on them. \" \\\n           \"For example, if a team's reference field is 'Auckland 1' and its institution's short\" \\\n           \"name is 'Auckland', the team's reference will be changed to '1' and its institution \" \\\n           \"prefix enabled, so it will still show as 'Auckland 1' but be represented more correctly \" \\\n           \"in the database.\"\n    def add_arguments(self, parser):\n        super(Command, self).add_arguments(parser)\n        parser.add_argument(\"--dry-run\", action=\"store_true\",\n                            help=\"Show what it would convert, but do not actually convert\")",
        "detail": "tabbycat.participants.management.commands.convertteamnames",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "tabbycat.participants.management.commands.generateemoji",
        "description": "tabbycat.participants.management.commands.generateemoji",
        "peekOfCode": "class Command(TournamentCommand):\n    help = \"Regenerates all emoji for a given tournament's teams\"\n    def handle_tournament(self, tournament, **options):\n        all_teams = tournament.team_set.all()\n        all_teams.update(emoji=None)\n        set_emoji(all_teams, tournament)\n        self.stdout.write(\"Assigned emoji to {count} teams in tournament {tournament}\".format(\n                count=all_teams.count(), tournament=tournament))",
        "detail": "tabbycat.participants.management.commands.generateemoji",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "tabbycat.participants.management.commands.participantscsv",
        "description": "tabbycat.participants.management.commands.participantscsv",
        "peekOfCode": "class Command(TournamentCommand):\n    help = \"Prints a CSV-style list of participants\"\n    def add_arguments(self, parser):\n        subparsers = parser.add_subparsers(dest=\"subcommand\", parser_class=ArgumentParser,\n              metavar=\"{teams,adjs}\")\n        subparsers.required = True\n        teams = subparsers.add_parser(\"teams\")\n        teams.add_argument(\"--full-institution-name\", action=\"store_true\", default=False,\n            help=\"Use full institution name (rather than code)\")\n        super(Command, self).add_arguments(teams)",
        "detail": "tabbycat.participants.management.commands.participantscsv",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "tabbycat.participants.management.commands.populatecodenames",
        "description": "tabbycat.participants.management.commands.populatecodenames",
        "peekOfCode": "class Command(TournamentCommand):\n    help = \"Populates teams' code names based on their emoji\"\n    def add_arguments(self, parser):\n        super(Command, self).add_arguments(parser)\n        parser.add_argument(\"--overwrite\", action=\"store_true\",\n            help=\"Overwrite all existing code names\")\n    def handle_tournament(self, tournament, **options):\n        count = populate_code_names_from_emoji(tournament.team_set.all(), overwrite=options[\"overwrite\"])\n        self.stdout.write(\"Populated code names for {count} teams in tournament {tournament}\".format(\n                count=count, tournament=tournament))",
        "detail": "tabbycat.participants.management.commands.populatecodenames",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "tabbycat.participants.management.commands.resaveteams",
        "description": "tabbycat.participants.management.commands.resaveteams",
        "peekOfCode": "class Command(TournamentCommand):\n    help = \"Resaves all teams which updates their short and long name fields. \" \\\n           \"This shouldn't generally be necessary, because the names are \" \\\n           \"auto-populated whenever institutions and teams are saved, but it \" \\\n           \"can be used when there was a mishap with team names.\"\n    def handle_tournament(self, tournament, **options):\n        for team in tournament.team_set.all():\n            old_names = team.long_name + \" (\" + team.short_name + \")\"\n            team.save()\n            new_names = team.long_name + \" (\" + team.short_name + \")\"",
        "detail": "tabbycat.participants.management.commands.resaveteams",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.participants.migrations.0001_initial",
        "description": "tabbycat.participants.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('breakqual', '0001_initial'),\n        ('tournaments', '0001_initial'),\n        ('divisions', '0001_initial'),\n        ('adjallocation', '0001_initial'),\n    ]\n    operations = [\n        migrations.CreateModel(",
        "detail": "tabbycat.participants.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.participants.migrations.0002_auto_20171201_1130",
        "description": "tabbycat.participants.migrations.0002_auto_20171201_1130",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('participants', '0001_initial'),\n    ]\n    replaces = [\n        ('participants', '0002_auto_20180320_1018'),\n    ]\n    operations = [\n        migrations.AlterModelOptions(\n            name='adjudicator',",
        "detail": "tabbycat.participants.migrations.0002_auto_20171201_1130",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.participants.migrations.0002_auto_20180320_1018",
        "description": "tabbycat.participants.migrations.0002_auto_20180320_1018",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('participants', '0001_initial'),\n    ]\n    operations = [\n        migrations.AlterModelOptions(\n            name='adjudicator',\n            options={'verbose_name': 'adjudicator', 'verbose_name_plural': 'adjudicators'},\n        ),\n    ]",
        "detail": "tabbycat.participants.migrations.0002_auto_20180320_1018",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.participants.migrations.0003_auto_20180307_2202",
        "description": "tabbycat.participants.migrations.0003_auto_20180307_2202",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('participants', '0002_auto_20171201_1130'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='team',\n            name='emoji',\n            field=models.CharField(blank=True, choices=[('☕', '☕'), ('⛑', '⛑'), ('⛰', '⛰'), ('⛪', '⛪'), ('⛺', '⛺'), ('⛵', '⛵'), ('⛔', '⛔'), ('⛅', '⛅'), ('⛈', '⛈'), ('⛱', '⛱'), ('⛄', '⛄'), ('⚽', '⚽'), ('⛸', '⛸'), ('⛏', '⛏'), ('😁', '😁'), ('😂', '😂'), ('😄', '😄'), ('😅', '😅'), ('😆', '😆'), ('😉', '😉'), ('😊', '😊'), ('😎', '😎'), ('😍', '😍'), ('😘', '😘'), ('😇', '😇'), ('😐', '😐'), ('😏', '😏'), ('😣', '😣'), ('😥', '😥'), ('😫', '😫'), ('😜', '😜'), ('😓', '😓'), ('😔', '😔'), ('😖', '😖'), ('😷', '😷'), ('😲', '😲'), ('😞', '😞'), ('😭', '😭'), ('😰', '😰'), ('😱', '😱'), ('😳', '😳'), ('😵', '😵'), ('😡', '😡'), ('👿', '👿'), ('👩', '👩'), ('👴', '👴'), ('👵', '👵'), ('👶', '👶'), ('👮', '👮'), ('👷', '👷'), ('👸', '👸'), ('💂', '💂'), ('🎅', '🎅'), ('👼', '👼'), ('👯', '👯'), ('👰', '👰'), ('🙅', '🙅'), ('🙆', '🙆'), ('💁', '💁'), ('🙋', '🙋'), ('🙇', '🙇'), ('🙌', '🙌'), ('🙏', '🙏'), ('💃', '💃'), ('💑', '💑'), ('👪', '👪'), ('👫', '👫'), ('👬', '👬'), ('👭', '👭'), ('💪', '💪'), ('👆', '👆'), ('✊', '✊'), ('✋', '✋'), ('👊', '👊'), ('👌', '👌'), ('👍', '👍'), ('👎', '👎'), ('👐', '👐'), ('💅', '💅'), ('👂', '👂'), ('👃', '👃'), ('👅', '👅'), ('👄', '👄'), ('💘', '💘'), ('💔', '💔'), ('💖', '💖'), ('💌', '💌'), ('💧', '💧'), ('💤', '💤'), ('💣', '💣'), ('💥', '💥'), ('💦', '💦'), ('💨', '💨'), ('💫', '💫'), ('👓', '👓'), ('👔', '👔'), ('👙', '👙'), ('👜', '👜'), ('👟', '👟'), ('👠', '👠'), ('👒', '👒'), ('🎩', '🎩'), ('💄', '💄'), ('💍', '💍'), ('💎', '💎'), ('👻', '👻'), ('💀', '💀'), ('👽', '👽'), ('👾', '👾'), ('💩', '💩'), ('🐵', '🐵'), ('🙈', '🙈'), ('🙉', '🙉'), ('🙊', '🙊'), ('🐶', '🐶'), ('🐩', '🐩'), ('🐯', '🐯'), ('🐴', '🐴'), ('🐮', '🐮'), ('🐑', '🐑'), ('🐭', '🐭'), ('🐹', '🐹'), ('🐰', '🐰'), ('🐻', '🐻'), ('🐨', '🐨'), ('🐼', '🐼'), ('🐔', '🐔'), ('🐣', '🐣'), ('🐥', '🐥'), ('🐦', '🐦'), ('🐧', '🐧'), ('🐸', '🐸'), ('🐢', '🐢'), ('🐍', '🐍'), ('🐲', '🐲'), ('🐳', '🐳'), ('🐬', '🐬'), ('🐟', '🐟'), ('🐠', '🐠'), ('🐙', '🐙'), ('🐚', '🐚'), ('🐌', '🐌'), ('🐛', '🐛'), ('🐝', '🐝'), ('💐', '💐'), ('🌸', '🌸'), ('🌹', '🌹'), ('🌻', '🌻'), ('🌷', '🌷'), ('🌱', '🌱'), ('🌴', '🌴'), ('🌵', '🌵'), ('🌿', '🌿'), ('🍀', '🍀'), ('🍁', '🍁'), ('🍇', '🍇'), ('🍉', '🍉'), ('🍊', '🍊'), ('🍋', '🍋'), ('🍌', '🍌'), ('🍍', '🍍'), ('🍎', '🍎'), ('🍑', '🍑'), ('🍒', '🍒'), ('🍓', '🍓'), ('🍅', '🍅'), ('🍆', '🍆'), ('🌽', '🌽'), ('🍄', '🍄'), ('🍞', '🍞'), ('🍔', '🍔'), ('🍟', '🍟'), ('🍕', '🍕'), ('🍙', '🍙'), ('🍨', '🍨'), ('🍩', '🍩'), ('🍪', '🍪'), ('🍰', '🍰'), ('🍭', '🍭'), ('🍼', '🍼'), ('🍷', '🍷'), ('🍹', '🍹'), ('🍺', '🍺'), ('🍴', '🍴'), ('🌋', '🌋'), ('🏠', '🏠'), ('🏢', '🏢'), ('🏥', '🏥'), ('🏩', '🏩'), ('🏰', '🏰'), ('🌊', '🌊'), ('🎡', '🎡'), ('🎢', '🎢'), ('🎨', '🎨'), ('🚃', '🚃'), ('🚄', '🚄'), ('🚝', '🚝'), ('🚍', '🚍'), ('🚔', '🚔'), ('🚘', '🚘'), ('🚲', '🚲'), ('🚨', '🚨'), ('🚣', '🚣'), ('🚁', '🚁'), ('🚀', '🚀'), ('🚦', '🚦'), ('🚧', '🚧'), ('🚫', '🚫'), ('🚷', '🚷'), ('🚻', '🚻'), ('🚽', '🚽'), ('🚿', '🚿'), ('🛀', '🛀'), ('⏳', '⏳'), ('🌑', '🌑'), ('🌕', '🌕'), ('🌗', '🌗'), ('🌞', '🌞'), ('🌈', '🌈'), ('🌂', '🌂'), ('🌟', '🌟'), ('🔥', '🔥'), ('🎃', '🎃'), ('🎄', '🎄'), ('🎈', '🎈'), ('🎉', '🎉'), ('🎓', '🎓'), ('🎯', '🎯'), ('🎀', '🎀'), ('🏀', '🏀'), ('🏈', '🏈'), ('🎾', '🎾'), ('🎱', '🎱'), ('🏊', '🏊'), ('🎮', '🎮'), ('🎲', '🎲'), ('📣', '📣'), ('📯', '📯'), ('🔔', '🔔'), ('🎶', '🎶'), ('🎤', '🎤'), ('🎹', '🎹'), ('🎺', '🎺'), ('🎻', '🎻'), ('📻', '📻'), ('📱', '📱'), ('📞', '📞'), ('🔋', '🔋'), ('🔌', '🔌'), ('💾', '💾'), ('💿', '💿'), ('🎬', '🎬'), ('📷', '📷'), ('🔍', '🔍'), ('🔭', '🔭'), ('💡', '💡'), ('📕', '📕'), ('📰', '📰'), ('💰', '💰'), ('💸', '💸'), ('📦', '📦'), ('📫', '📫'), ('💼', '💼'), ('📅', '📅'), ('📎', '📎'), ('📏', '📏'), ('📐', '📐'), ('🔒', '🔒'), ('🔑', '🔑'), ('🔧', '🔧'), ('🔩', '🔩'), ('💉', '💉'), ('💊', '💊'), ('🔪', '🔪'), ('🔫', '🔫'), ('🚬', '🚬'), ('🏁', '🏁'), ('🔮', '🔮'), ('❌', '❌'), ('❓', '❓'), ('🔞', '🔞'), ('🆒', '🆒'), ('🆗', '🆗'), ('🆘', '🆘'), ('😙', '😙'), ('😑', '😑'), ('😮', '😮'), ('😴', '😴'), ('😛', '😛'), ('😧', '😧'), ('😬', '😬'), ('🕵', '🕵'), ('🖕', '🖕'), ('🖖', '🖖'), ('👁', '👁'), ('🕶', '🕶'), ('🛍', '🛍'), ('🐿', '🐿'), ('🕊', '🕊'), ('🕷', '🕷'), ('🕸', '🕸'), ('🏵', '🏵'), ('🌶', '🌶'), ('🏕', '🏕'), ('🏛', '🏛'), ('🛢', '🛢'), ('🛥', '🛥'), ('🛩', '🛩'), ('🛎', '🛎'), ('🕰', '🕰'), ('🌡', '🌡'), ('🌤', '🌤'), ('🌧', '🌧'), ('🌩', '🌩'), ('🌪', '🌪'), ('🌬', '🌬'), ('🎖', '🎖'), ('🎗', '🎗'), ('🎞', '🎞'), ('🏷', '🏷'), ('🏋', '🏋'), ('🏅', '🏅'), ('🕹', '🕹'), ('🎙', '🎙'), ('🖥', '🖥'), ('🖨', '🖨'), ('🖲', '🖲'), ('📸', '📸'), ('🕯', '🕯'), ('🗞', '🗞'), ('🖋', '🖋'), ('🗑', '🗑'), ('🛠', '🛠'), ('🗡', '🗡'), ('🛡', '🛡'), ('🏳', '🏳'), ('🏴', '🏴'), ('🤗', '🤗'), ('🤔', '🤔'), ('🙄', '🙄'), ('🤐', '🤐'), ('🤓', '🤓'), ('🙃', '🙃'), ('🤒', '🤒'), ('🤕', '🤕'), ('🤑', '🤑'), ('🤘', '🤘'), ('📿', '📿'), ('🤖', '🤖'), ('🦁', '🦁'), ('🦄', '🦄'), ('🦀', '🦀'), ('🦂', '🦂'), ('🧀', '🧀'), ('🌭', '🌭'), ('🌮', '🌮'), ('🌯', '🌯'), ('🍿', '🍿'), ('🍾', '🍾'), ('🏏', '🏏'), ('🏐', '🏐'), ('🏓', '🏓'), ('🏹', '🏹'), ('\\U0001f923', '\\U0001f923'), ('\\U0001f924', '\\U0001f924'), ('\\U0001f922', '\\U0001f922'), ('\\U0001f927', '\\U0001f927'), ('\\U0001f920', '\\U0001f920'), ('\\U0001f921', '\\U0001f921'), ('\\U0001f925', '\\U0001f925'), ('\\U0001f934', '\\U0001f934'), ('\\U0001f935', '\\U0001f935'), ('\\U0001f930', '\\U0001f930'), ('\\U0001f936', '\\U0001f936'), ('\\U0001f926', '\\U0001f926'), ('\\U0001f937', '\\U0001f937'), ('\\U0001f57a', '\\U0001f57a'), ('\\U0001f93a', '\\U0001f93a'), ('\\U0001f938', '\\U0001f938'), ('\\U0001f93c', '\\U0001f93c'), ('\\U0001f939', '\\U0001f939'), ('\\U0001f933', '\\U0001f933'), ('\\U0001f91e', '\\U0001f91e'), ('\\U0001f919', '\\U0001f919'), ('\\U0001f91b', '\\U0001f91b'), ('\\U0001f91c', '\\U0001f91c'), ('\\U0001f91a', '\\U0001f91a'), ('\\U0001f91d', '\\U0001f91d'), ('\\U0001f5a4', '\\U0001f5a4'), ('\\U0001f98a', '\\U0001f98a'), ('\\U0001f98c', '\\U0001f98c'), ('\\U0001f987', '\\U0001f987'), ('\\U0001f985', '\\U0001f985'), ('\\U0001f986', '\\U0001f986'), ('\\U0001f989', '\\U0001f989'), ('\\U0001f98e', '\\U0001f98e'), ('\\U0001f988', '\\U0001f988'), ('\\U0001f990', '\\U0001f990'), ('\\U0001f991', '\\U0001f991'), ('\\U0001f98b', '\\U0001f98b'), ('\\U0001f940', '\\U0001f940'), ('\\U0001f95d', '\\U0001f95d'), ('\\U0001f951', '\\U0001f951'), ('\\U0001f954', '\\U0001f954'), ('\\U0001f955', '\\U0001f955'), ('\\U0001f952', '\\U0001f952'), ('\\U0001f95c', '\\U0001f95c'), ('\\U0001f950', '\\U0001f950'), ('\\U0001f956', '\\U0001f956'), ('\\U0001f95e', '\\U0001f95e'), ('\\U0001f959', '\\U0001f959'), ('\\U0001f95a', '\\U0001f95a'), ('\\U0001f957', '\\U0001f957'), ('\\U0001f95b', '\\U0001f95b'), ('\\U0001f942', '\\U0001f942'), ('\\U0001f943', '\\U0001f943'), ('\\U0001f944', '\\U0001f944'), ('\\U0001f6f6', '\\U0001f6f6'), ('\\U0001f94a', '\\U0001f94a'), ('\\U0001f94b', '\\U0001f94b'), ('\\U0001f945', '\\U0001f945'), ('\\U0001f941', '\\U0001f941'), ('\\U0001f6d2', '\\U0001f6d2')], default=None, max_length=2, null=True, verbose_name='emoji'),\n        ),",
        "detail": "tabbycat.participants.migrations.0003_auto_20180307_2202",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.participants.migrations.0003_auto_20180307_2202_squashed_0010_auto_20180409_1118",
        "description": "tabbycat.participants.migrations.0003_auto_20180307_2202_squashed_0010_auto_20180409_1118",
        "peekOfCode": "class Migration(migrations.Migration):\n    replaces = [\n        ('participants', '0003_auto_20180307_2202'),\n        ('participants', '0004_team_code_name'),\n        ('participants', '0005_auto_20180310_1035'),\n        ('participants', '0006_auto_20180312_2218'),\n        ('participants', '0007_auto_20180318_2355'),\n        ('participants', '0008_auto_20180401_1036'),\n        ('participants', '0009_auto_20180331_2259'),\n        ('participants', '0010_auto_20180409_1945'),",
        "detail": "tabbycat.participants.migrations.0003_auto_20180307_2202_squashed_0010_auto_20180409_1118",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.participants.migrations.0004_auto_20180420_2040",
        "description": "tabbycat.participants.migrations.0004_auto_20180420_2040",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('participants', '0003_auto_20180307_2202_squashed_0010_auto_20180409_1118'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='team',\n            name='emoji',\n            field=models.CharField(blank=True, choices=[('☺️', '☺️ White Smiling'), ('☹', '☹ White Frowning'), ('☝️', '☝️ White Up Pointing Index'), ('✌️', '✌️ Victory Hand'), ('✍', '✍ Writing Hand'), ('❤️', '❤️ Heavy Black Heart'), ('❣', '❣ Heart Exclamation Mark'), ('☠', '☠ Skull and Crossbones'), ('♨️', '♨️ Hot Springs'), ('✈️', '✈️ Airplane'), ('⌛', '⌛ Hourglass'), ('⌚', '⌚ Watch'), ('♈', '♈ Aries'), ('♉', '♉ Taurus'), ('♊', '♊ Gemini'), ('♋', '♋ Cancer'), ('♌', '♌ Leo'), ('♍', '♍ Virgo'), ('♎', '♎ Libra'), ('♏', '♏ Scorpius'), ('♐', '♐ Sagittarius'), ('♑', '♑ Capricorn'), ('♒', '♒ Aquarius'), ('♓', '♓ Pisces'), ('☀️', '☀️ Black Sun With Rays'), ('☁️', '☁️ Cloud'), ('☂', '☂ Umbrella'), ('❄️', '❄️ Snowflake'), ('☃', '☃ Snowman'), ('☄️', '☄️ Comet'), ('♠️', '♠️ Spade Suit'), ('♥️', '♥️ Heart Suit'), ('♦️', '♦️ Diamond Suit'), ('♣️', '♣️ Club Suit'), ('▶️', '▶️ Black Right-Pointing Triangle'), ('◀️', '◀️ Black Left-Pointing Triangle'), ('☎️', '☎️ Black Telephone'), ('⌨', '⌨ Keyboard'), ('✉️', '✉️ Envelope'), ('✏️', '✏️ Pencil'), ('✒️', '✒️ Black Nib'), ('✂️', '✂️ Scissors'), ('↗️', '↗️ North East Arrow'), ('➡️', '➡️ Black Rightwards Arrow'), ('↘️', '↘️ South East Arrow'), ('↙️', '↙️ South West Arrow'), ('↖️', '↖️ North West Arrow'), ('↕️', '↕️ Up Down Arrow'), ('↔️', '↔️ Left Right Arrow'), ('↩️', '↩️ Leftwards Arrow With Hook'), ('↪️', '↪️ Rightwards Arrow With Hook'), ('✡', '✡ Star of David'), ('☸', '☸ Wheel of Dharma'), ('☯', '☯ Yin Yang'), ('✝', '✝ Latin Cross'), ('☦', '☦ Orthodox Cross'), ('☪', '☪ Star and Crescent'), ('☮', '☮ Peace Symbol'), ('☢', '☢ Radioactive Sign'), ('☣', '☣ Biohazard Sign'), ('☑️', '☑️ Ballot Box With Check'), ('✔️', '✔️ Heavy Check Mark'), ('✖️', '✖️ Heavy Multiplication X'), ('✳️', '✳️ Eight Spoked Asterisk'), ('✴️', '✴️ Eight Pointed Black Star'), ('❇️', '❇️ Sparkle'), ('‼️', '‼️ Double Exclamation Mark'), ('〰️', '〰️ Wavy Dash'), ('©️', '©️ Copyright Sign'), ('®️', '®️ Registered Sign'), ('™️', '™️ Trade Mark Sign'), ('Ⓜ️', 'Ⓜ️ Capital M'), ('㊗️', '㊗️ Congratulations'), ('㊙️', '㊙️ Secret'), ('▪️', '▪️ Black Square'), ('▫️', '▫️ White Square'), ('#⃣️', '#⃣️ Keycap Number Sign'), ('*⃣', '*⃣ Keycap Asterisk'), ('0⃣️', '0⃣️ Keycap Digit Zero'), ('1⃣️', '1⃣️ Keycap Digit One'), ('2⃣️', '2⃣️ Keycap Digit Two'), ('3⃣️', '3⃣️ Keycap Digit Three'), ('4⃣️', '4⃣️ Keycap Digit Four'), ('5⃣️', '5⃣️ Keycap Digit Five'), ('6⃣️', '6⃣️ Keycap Digit Six'), ('7⃣️', '7⃣️ Keycap Digit Seven'), ('8⃣️', '8⃣️ Keycap Digit Eight'), ('9⃣️', '9⃣️ Keycap Digit Nine'), ('⁉️', '⁉️ Exclamation Question Mark'), ('ℹ️', 'ℹ️ Information Source'), ('⤴️', '⤴️ Right-Curve-Up'), ('⤵️', '⤵️ Right-Curve-Down'), ('♻️', '♻️ Recycling'), ('〽️', '〽️ Part Alternation Mark'), ('◻️', '◻️ White Medium Square'), ('◼️', '◼️ Black Medium Square'), ('◽', '◽ White Medium Small Square'), ('◾', '◾ Black Medium Small Square'), ('☕', '☕ Hot Beverage'), ('⚠️', '⚠️ Warning Sign'), ('☔', '☔ Umbrella With Rain Drops'), ('⏏', '⏏ Eject Symbol'), ('⬆️', '⬆️ Upwards Black Arrow'), ('⬇️', '⬇️ Downwards Black Arrow'), ('⬅️', '⬅️ Leftwards Black Arrow'), ('⚡', '⚡ High Voltage'), ('☘', '☘ Shamrock'), ('⚓', '⚓ Anchor'), ('♿', '♿ Wheelchair Symbol'), ('⚒', '⚒ Hammer and Pick'), ('⚙', '⚙ Gear'), ('⚗', '⚗ Alembic'), ('⚖', '⚖ Scales'), ('⚔', '⚔ Crossed Swords'), ('⚰', '⚰ Coffin'), ('⚱', '⚱ Funeral Urn'), ('⚜', '⚜ Fleur-De-Lis'), ('⚛', '⚛ Atom Symbol'), ('⚪', '⚪ Medium White Circle'), ('⚫', '⚫ Medium Black Circle'), ('🀄', '🀄 Mahjong Tile Red Dragon'), ('⭐', '⭐ White Medium Star'), ('⬛', '⬛ Black Square'), ('⬜', '⬜ White Square'), ('⛑', '⛑ Rescue Worker'), ('⛰', '⛰ Mountain'), ('⛪', '⛪ Church'), ('⛲', '⛲ Fountain'), ('⛺', '⛺ Tent'), ('⛽', '⛽ Fuel Pump'), ('⛵', '⛵ Sailboat'), ('⛴', '⛴ Ferry'), ('⛔', '⛔ No Entry'), ('⛅', '⛅ Overcast'), ('⛈', '⛈ Storm'), ('⛱', '⛱ Umbrella'), ('⛄', '⛄ Snowman'), ('⚽', '⚽ Soccer'), ('⚾', '⚾ Baseball'), ('⛳', '⛳ Hole in One'), ('⛸', '⛸ Ice Skate'), ('⛷', '⛷ Skier'), ('⛹', '⛹ Person With Ball'), ('⛏', '⛏ Pick'), ('⛓', '⛓ Chains'), ('⛩', '⛩ Shinto Shrine'), ('⭕', '⭕ Heavy Large Circle'), ('❗', '❗ Heavy Exclamation Mark'), ('🅿️', '🅿️ Squared P'), ('🈯', '🈯 Squared 指 (Finger)'), ('🈚', '🈚 Squared CJK Unified Ideograph-7121'), ('😁', '😁 Smiling Eyes'), ('😂', '😂 Tears of Joy'), ('😃', '😃 Smiling Face With Open Mouth'), ('😄', '😄 Smiling Face With Open Mouth and Smiling Eyes'), ('😅', '😅 Cold Sweat'), ('😆', '😆 Closed Eyes'), ('😉', '😉 Winky'), ('😊', '😊 Smiling Eyes'), ('😋', '😋 Face Savouring Delicious Food'), ('😎', '😎 Sunglasses'), ('😍', '😍 Heart Eyes'), ('😘', '😘 Kissy'), ('😚', '😚 Kissing Face With Closed Eyes'), ('😇', '😇 Halo'), ('😐', '😐 Neutral'), ('😶', '😶 Face Without Mouth'), ('😏', '😏 Smirking'), ('😣', '😣 Persevering'), ('😥', '😥 Disappointed'), ('😪', '😪 Sleepy'), ('😫', '😫 Tired'), ('😌', '😌 Relieved'), ('😜', '😜 Tongue Out'), ('😝', '😝 Tongue Out Closed Eyes'), ('😒', '😒 Unamused'), ('😓', '😓 Cold Sweat'), ('😔', '😔 Pensive'), ('😖', '😖 Confounded'), ('😷', '😷 Medical Mask'), ('😲', '😲 Astonished'), ('😞', '😞 Disappointed'), ('😤', '😤 Face With Look of Triumph'), ('😢', '😢 Crying'), ('😭', '😭 Sobbing'), ('😨', '😨 Fearful'), ('😩', '😩 Weary'), ('😰', '😰 Open Mouth Cold Sweat'), ('😱', '😱 Screaming'), ('😳', '😳 Flushed'), ('😵', '😵 Dizzy'), ('😡', '😡 Pouting'), ('😠', '😠 Angry'), ('👿', '👿 Imp'), ('😈', '😈 Smiling Face With Horns'), ('👦', '👦 Boy'), ('👧', '👧 Girl'), ('👨', '👨 Generic Man'), ('👩', '👩 Generic Woman'), ('👴', '👴 Older Man'), ('👵', '👵 Older Woman'), ('👶', '👶 Baby'), ('👱', '👱 Person With Blond Hair'), ('👮', '👮 Police Officer'), ('👲', '👲 Man With Gua Pi Mao'), ('👳', '👳 Man With Turban'), ('👷', '👷 Trade Worker'), ('👸', '👸 Princess'), ('💂', '💂 Guardsman'), ('🎅', '🎅 Santa Claus'), ('👼', '👼 Baby Angel'), ('👯', '👯 Bunny Women'), ('💆', '💆 Face Massage'), ('💇', '💇 Haircut'), ('👰', '👰 Bride'), ('🙍', '🙍 Person Frowning'), ('🙎', '🙎 Person With Pouting'), ('🙅', '🙅 Block Gesture'), ('🙆', '🙆 OK Gesture'), ('💁', '💁 Sass Gesture'), ('🙋', '🙋 Raised Hand'), ('🙇', '🙇 Deep Bow'), ('🙌', '🙌 Praise Hands'), ('🙏', '🙏 Prayer Hands'), ('👤', '👤 Bust in Silhouette'), ('👥', '👥 Busts in Silhouette'), ('🚶', '🚶 Pedestrian'), ('🏃', '🏃 Runner'), ('💃', '💃 Dancer'), ('💏', '💏 Kiss'), ('💑', '💑 Heteronormative Couple'), ('👪', '👪 Hetero Family'), ('👫', '👫 Man & Woman'), ('👬', '👬 Two Men'), ('👭', '👭 Two Women'), ('💪', '💪 Biceps'), ('👈', '👈 Left Pointing Backhand'), ('👉', '👉 Right Pointing Backhand'), ('👆', '👆 Pointing Hand'), ('👇', '👇 Down Pointing Backhand'), ('✊', '✊ Power Hand'), ('✋', '✋ Palm Hand'), ('👊', '👊 Fist Hand'), ('👌', '👌 OK Hand'), ('👍', '👍 Thumbs Up'), ('👎', '👎 Thumbs Down'), ('👋', '👋 Waving Hand Sign'), ('👏', '👏 Clappy Hands'), ('👐', '👐 Open Hands Sign'), ('💅', '💅 Nail Polish'), ('👣', '👣 Footprints'), ('👀', '👀 Eyes'), ('👂', '👂 Ear'), ('👃', '👃 Nose'), ('👅', '👅 Lick'), ('👄', '👄 Mouth'), ('💋', '💋 Kiss Mark'), ('💘', '💘 Cupid Arrow'), ('💓', '💓 Beating Heart'), ('💔', '💔 Broken Heart'), ('💕', '💕 Two Hearts'), ('💖', '💖 Sparkling Heart'), ('💗', '💗 Growing Heart'), ('💙', '💙 Blue Heart'), ('💚', '💚 Green Heart'), ('💛', '💛 Yellow Heart'), ('💜', '💜 Purple Heart'), ('💝', '💝 Heart With Ribbon'), ('💞', '💞 Revolving Hearts'), ('💟', '💟 Heart Decoration'), ('💌', '💌 Love Letter'), ('💧', '💧 Droplet'), ('💤', '💤 ZZZ'), ('💢', '💢 Anger'), ('💣', '💣 Bomb'), ('💥', '💥 Explosion'), ('💦', '💦 Splashing'), ('💨', '💨 Dash'), ('💫', '💫 Shooting Star'), ('💬', '💬 Speech Bubble'), ('💭', '💭 Thought Bubble'), ('👓', '👓 Eyeglasses'), ('👔', '👔 Necktie'), ('👕', '👕 T-Shirt'), ('👖', '👖 Jeans'), ('👗', '👗 Dress'), ('👘', '👘 Kimono'), ('👙', '👙 Bikini'), ('👚', '👚 Womans Clothes'), ('👛', '👛 Purse'), ('👜', '👜 Handbag'), ('👝', '👝 Pouch'), ('🎒', '🎒 Backpack'), ('👞', '👞 Mans Shoe'), ('👟', '👟 Running Shoe'), ('👠', '👠 Heels'), ('👡', '👡 Womans Sandal'), ('👢', '👢 Womans Boots'), ('👑', '👑 Crown'), ('👒', \"👒 Lady's Hat\"), ('🎩', '🎩 Top Hat'), ('💄', '💄 Lipstick'), ('💍', '💍 Ring'), ('💎', '💎 Gem'), ('👹', '👹 Japanese Ogre'), ('👺', '👺 Japanese Goblin'), ('👻', '👻 Ghost'), ('💀', '💀 Skull'), ('👽', '👽 Alien'), ('👾', '👾 Space Invader'), ('💩', '💩 Pile of Poo'), ('🐵', '🐵 Monkey'), ('🙈', '🙈 See No Evil'), ('🙉', '🙉 Hear No Evil'), ('🙊', '🙊 Speak No Evil'), ('🐒', '🐒 Monkey'), ('🐶', '🐶 Dog'), ('🐕', '🐕 Dog'), ('🐩', '🐩 Poodle'), ('🐺', '🐺 Wolf'), ('🐱', '🐱 Cat'), ('😸', '😸 Grinning Cat with Smiling Eyes'), ('😹', '😹 Cat with Tears of Joy'), ('😺', '😺 Smiling Cat with Open Mouth'), ('😻', '😻 Smiling Cat with Heart Eyes'), ('😼', '😼 Cat with Wry Smile'), ('😽', '😽 Kissing Cat with Closed Eyes'), ('😾', '😾 Pouting Cat Face'), ('😿', '😿 Crying Cat Face'), ('🙀', '🙀 Weary Cat Face'), ('🐈', '🐈 Cat'), ('🐯', '🐯 Tiger'), ('🐅', '🐅 Tiger'), ('🐆', '🐆 Leopard'), ('🐴', '🐴 Horse'), ('🐎', '🐎 Horse'), ('🐮', '🐮 Cow'), ('🐂', '🐂 Ox'), ('🐃', '🐃 Water Buffalo'), ('🐄', '🐄 Cow'), ('🐷', '🐷 Pig'), ('🐖', '🐖 Pig'), ('🐗', '🐗 Boar'), ('🐽', '🐽 Pig Nose'), ('🐏', '🐏 Ram'), ('🐑', '🐑 Sheep'), ('🐐', '🐐 Goat'), ('🐪', '🐪 Dromedary Camel'), ('🐫', '🐫 Bactrian Camel'), ('🐘', '🐘 Elephant'), ('🐭', '🐭 Mouse'), ('🐁', '🐁 Mouse'), ('🐀', '🐀 Rat'), ('🐹', '🐹 Hamster'), ('🐰', '🐰 Rabbit'), ('🐇', '🐇 Rabbit'), ('🐻', '🐻 Bear'), ('🐨', '🐨 Koala'), ('🐼', '🐼 Panda'), ('🐾', '🐾 Paw Prints'), ('🐔', '🐔 Chicken'), ('🐓', '🐓 Rooster'), ('🐣', '🐣 Hatching Chick'), ('🐤', '🐤 Chick'), ('🐥', '🐥 Front-Facing Baby Chick'), ('🐦', '🐦 Bird'), ('🐧', '🐧 Penguin'), ('🐸', '🐸 Frog'), ('🐊', '🐊 Crocodile'), ('🐢', '🐢 Turtle'), ('🐍', '🐍 Snake'), ('🐲', '🐲 Dragon'), ('🐉', '🐉 Dragon'), ('🐳', '🐳 Whale'), ('🐋', '🐋 Whale'), ('🐬', '🐬 Dolphin'), ('🐟', '🐟 Fish'), ('🐠', '🐠 Fish'), ('🐡', '🐡 Blowfish'), ('🐙', '🐙 Octopus'), ('🐚', '🐚 Shell'), ('🐌', '🐌 Snail'), ('🐛', '🐛 Bug'), ('🐜', '🐜 Ant'), ('🐝', '🐝 Honeybee'), ('🐞', '🐞 Lady Beetle'), ('💐', '💐 Bouquet'), ('🌸', '🌸 Sakura'), ('💮', '💮 White Flower'), ('🌹', '🌹 Rose'), ('🌺', '🌺 Hibiscus'), ('🌻', '🌻 Sunflower'), ('🌼', '🌼 Blossom'), ('🌷', '🌷 Tulip'), ('🌱', '🌱 Seedling'), ('🌲', '🌲 Evergreen Tree'), ('🌳', '🌳 Deciduous Tree'), ('🌴', '🌴 Palm Tree'), ('🌵', '🌵 Cactus'), ('🌾', '🌾 Ear of Rice'), ('🌿', '🌿 Herb'), ('🍀', '🍀 Clover'), ('🍁', '🍁 Maple Leaf'), ('🍂', '🍂 Fallen Leaf'), ('🍃', '🍃 Blown Leaves'), ('🍇', '🍇 Grapes'), ('🍈', '🍈 Melon'), ('🍉', '🍉 Watermelon'), ('🍊', '🍊 Tangerine'), ('🍋', '🍋 Lemon'), ('🍌', '🍌 Banana'), ('🍍', '🍍 Pineapple'), ('🍎', '🍎 Red Apple'), ('🍏', '🍏 Green Apple'), ('🍐', '🍐 Pear'), ('🍑', '🍑 Peach'), ('🍒', '🍒 Cherries'), ('🍓', '🍓 Strawberry'), ('🍅', '🍅 Tomato'), ('🍆', '🍆 Eggplant'), ('🌽', '🌽 Corn'), ('🍄', '🍄 Mushroom'), ('🌰', '🌰 Chestnut'), ('🍞', '🍞 Bread'), ('🍖', '🍖 Meat on Bone'), ('🍗', '🍗 Poultry Leg'), ('🍔', '🍔 Hamburger'), ('🍟', '🍟 Fries'), ('🍕', '🍕 Pizza'), ('🍲', '🍲 Pot of Food'), ('🍱', '🍱 Bento Box'), ('🍘', '🍘 Rice Cracker'), ('🍙', '🍙 Rice Ball'), ('🍚', '🍚 Cooked Rice'), ('🍛', '🍛 Curry and Rice'), ('🍜', '🍜 Steaming Bowl'), ('🍝', '🍝 Spaghetti'), ('🍠', '🍠 Sweet Potato'), ('🍢', '🍢 Oden'), ('🍣', '🍣 Sushi'), ('🍤', '🍤 Fried Shrimp'), ('🍥', '🍥 Fish Cake With Swirl Design'), ('🍡', '🍡 Dango'), ('🍦', '🍦 Soft Ice Cream'), ('🍧', '🍧 Shaved Ice'), ('🍨', '🍨 Ice Cream'), ('🍩', '🍩 Doughnut'), ('🍪', '🍪 Cookie'), ('🎂', '🎂 Birthday Cake'), ('🍰', '🍰 Shortcake'), ('🍫', '🍫 Chocolate Bar'), ('🍬', '🍬 Candy'), ('🍭', '🍭 Lollipop'), ('🍮', '🍮 Custard'), ('🍯', '🍯 Honey Pot'), ('🍼', '🍼 Baby Bottle'), ('🍵', '🍵 Teacup Without Handle'), ('🍶', '🍶 Sake Bottle and Cup'), ('🍷', '🍷 Wine Glass'), ('🍸', '🍸 Cocktail Glass'), ('🍹', '🍹 Tropical Drink'), ('🍺', '🍺 Beer'), ('🍻', '🍻 Clinking Beer Mugs'), ('🍴', '🍴 Fork & Knife'), ('🍳', '🍳 Cooking'), ('🌍', '🌍 Earth Globe Europe-Africa'), ('🌎', '🌎 Earth Globe Americas'), ('🌏', '🌏 Earth Globe Asia-Australia'), ('🌐', '🌐 Globe With Meridians'), ('🌋', '🌋 Volcano'), ('🗻', '🗻 Mount Fuji'), ('🏠', '🏠 House'), ('🏡', '🏡 House With Garden'), ('🏢', '🏢 Office'), ('🏣', '🏣 Japanese Post Office'), ('🏤', '🏤 European Post Office'), ('🏥', '🏥 Hospital'), ('🏦', '🏦 Bank'), ('🏨', '🏨 Hotel'), ('🏩', '🏩 Love Hotel'), ('🏪', '🏪 Convenience Store'), ('🏫', '🏫 School'), ('🏬', '🏬 Department Store'), ('🏭', '🏭 Factory'), ('🏯', '🏯 Japanese Castle'), ('🏰', '🏰 Castle'), ('💒', '💒 Wedding'), ('🗼', '🗼 Tokyo Tower'), ('🗽', '🗽 Statue of Liberty'), ('🗾', '🗾 Silhouette of Japan'), ('🌁', '🌁 Foggy'), ('🌃', '🌃 Night With Stars'), ('🌄', '🌄 Sunrise Over Mountains'), ('🌅', '🌅 Sunrise'), ('🌆', '🌆 Cityscape at Dusk'), ('🌇', '🌇 Sunset Over Buildings'), ('🌉', '🌉 Bridge at Night'), ('🌊', '🌊 Big Wave'), ('🗿', '🗿 Moyai'), ('🌌', '🌌 Milky Way'), ('🎠', '🎠 Carousel Horse'), ('🎡', '🎡 Ferris Wheel'), ('🎢', '🎢 Roller Coaster'), ('💈', '💈 Barber Pole'), ('🎪', '🎪 Circus Tent'), ('🎭', '🎭 Performing Arts'), ('🎨', '🎨 Palette'), ('🎰', '🎰 Slot Machine'), ('🚂', '🚂 Steam Locomotive'), ('🚃', '🚃 Railcar'), ('🚄', '🚄 Fast Train'), ('🚅', '🚅 Fast Train with Bullet Nose'), ('🚆', '🚆 Train'), ('🚇', '🚇 Metro'), ('🚈', '🚈 Light Rail'), ('🚉', '🚉 Station'), ('🚊', '🚊 Tram'), ('🚝', '🚝 Monorail'), ('🚞', '🚞 Mountain Railway'), ('🚋', '🚋 Tram Car'), ('🚌', '🚌 Bus'), ('🚍', '🚍 Bus'), ('🚎', '🚎 Trolleybus'), ('🚏', '🚏 Bus Stop'), ('🚐', '🚐 Minibus'), ('🚑', '🚑 Ambulance'), ('🚒', '🚒 Fire Engine'), ('🚓', '🚓 Police Car'), ('🚔', '🚔 Police Car'), ('🚕', '🚕 Taxi'), ('🚖', '🚖 Oncoming Taxi'), ('🚗', '🚗 Automobile'), ('🚘', '🚘 Automobile'), ('🚙', '🚙 Recreational Vehicle'), ('🚚', '🚚 Delivery Truck'), ('🚛', '🚛 Articulated Lorry'), ('🚜', '🚜 Tractor'), ('🚲', '🚲 Bicycle'), ('🚳', '🚳 No Bicycles'), ('🚨', '🚨 Alert Light'), ('🔱', '🔱 Trident Emblem'), ('🚣', '🚣 Rowboat'), ('🚤', '🚤 Speedboat'), ('🚢', '🚢 Ship'), ('💺', '💺 Seat'), ('🚁', '🚁 Helicopter'), ('🚟', '🚟 Suspension Railway'), ('🚠', '🚠 Mountain Tram'), ('🚡', '🚡 Aerial Tramway'), ('🚀', '🚀 Rocket'), ('🏧', '🏧 ATM'), ('🚮', '🚮 Put Litter in Its Place'), ('🚥', '🚥 Horizontal Traffic Light'), ('🚦', '🚦 Traffic Light'), ('🚧', '🚧 Hazard Sign'), ('🚫', '🚫 Prohibited'), ('🚭', '🚭 No Smoking'), ('🚯', '🚯 Do Not Litter'), ('🚰', '🚰 Potable Water'), ('🚱', '🚱 Non-Potable Water'), ('🚷', '🚷 No Pedestrians'), ('🚸', '🚸 Children Crossing'), ('🚹', '🚹 Mens Symbol'), ('🚺', '🚺 Womens Symbol'), ('🚻', '🚻 Restroom'), ('🚼', '🚼 Baby Symbol'), ('🚾', '🚾 Water Closet'), ('🛂', '🛂 Passport Control'), ('🛃', '🛃 Customs'), ('🛄', '🛄 Baggage Claim'), ('🛅', '🛅 Left Luggage'), ('🚪', '🚪 Door'), ('🚽', '🚽 Toilet'), ('🚿', '🚿 Shower'), ('🛀', '🛀 Bath'), ('🛁', '🛁 Bathtub'), ('⏳', '⏳ Hourglass'), ('⏰', '⏰ Alarm Clock'), ('⏱', '⏱ Stopwatch'), ('⏲', '⏲ Timer Clock'), ('🕛', \"🕛 Twelve O'Clock\"), ('🕧', '🕧 Half Past Twelve'), ('🕐', \"🕐 One O'Clock\"), ('🕜', '🕜 Half Past One'), ('🕑', \"🕑 Two O'Clock\"), ('🕝', '🕝 Half Past Two'), ('🕒', \"🕒 Three O'Clock\"), ('🕞', '🕞 Half Past Three'), ('🕓', \"🕓 Four O'Clock\"), ('🕟', '🕟 Half Past Four'), ('🕔', \"🕔 Five O'Clock\"), ('🕠', '🕠 Half Past Five'), ('🕕', \"🕕 Six O'Clock\"), ('🕡', '🕡 Half Past Six'), ('🕖', \"🕖 Seven O'Clock\"), ('🕢', '🕢 Half Past Seven'), ('🕗', \"🕗 Eight O'Clock\"), ('🕣', '🕣 Half Past Eight'), ('🕘', \"🕘 Nine O'Clock\"), ('🕤', '🕤 Half Past Nine'), ('🕙', \"🕙 Ten O'Clock\"), ('🕥', '🕥 Half Past Ten'), ('🕚', \"🕚 Eleven O'Clock\"), ('🕦', '🕦 Half Past Eleven'), ('⛎', '⛎ Ophiuchus'), ('🌑', '🌑 New Moon'), ('🌒', '🌒 Waxing Crescent'), ('🌓', '🌓 First Quarter Moon Symbol'), ('🌔', '🌔 Waxing Gibbous'), ('🌕', '🌕 Full Moon'), ('🌖', '🌖 Waning Gibbous'), ('🌗', '🌗 Half Moon'), ('🌘', '🌘 Waning Crescent'), ('🌙', '🌙 Crescent Moon'), ('🌚', '🌚 New Moon With Face'), ('🌛', '🌛 First Quarter Moon With Face'), ('🌜', '🌜 Last Quarter Moon With Face'), ('🌝', '🌝 Full Moon With Face'), ('🌞', '🌞 Sun'), ('🌀', '🌀 Cyclone'), ('🌈', '🌈 Rainbow'), ('🌂', '🌂 Umbrella'), ('🌟', '🌟 Glowing Star'), ('🌠', '🌠 Shooting Star'), ('🔥', '🔥 Fire'), ('🎃', '🎃 Jack-O-Lantern'), ('🎄', '🎄 Christmas Tree'), ('🎆', '🎆 Fireworks'), ('🎇', '🎇 Firework Sparkler'), ('✨', '✨ Sparkles'), ('🎈', '🎈 Balloon'), ('🎉', '🎉 Party Popper'), ('🎊', '🎊 Confetti Ball'), ('🎋', '🎋 Tanabata Tree'), ('🎌', '🎌 Crossed Flags'), ('🎍', '🎍 Pine Decoration'), ('🎎', '🎎 Japanese Dolls'), ('🎏', '🎏 Carp Streamer'), ('🎐', '🎐 Wind Chime'), ('🎑', '🎑 Moon Viewing Ceremony'), ('🎓', '🎓 Graduation Cap'), ('🎯', '🎯 Bullseye'), ('🎴', '🎴 Flower Playing Cards'), ('🎀', '🎀 Ribbon'), ('🎁', '🎁 Wrapped Present'), ('🎫', '🎫 Ticket'), ('🏀', '🏀 Basketball'), ('🏈', '🏈 American Football'), ('🏉', '🏉 Rugby Ball'), ('🎾', '🎾 Tennis'), ('🎱', '🎱 Billiards'), ('🎳', '🎳 Bowling'), ('🎣', '🎣 Fishing Pole and Fish'), ('🎽', '🎽 Running Shirt With Sash'), ('🎿', '🎿 Ski and Ski Boot'), ('🏂', '🏂 Snowboarder'), ('🏄', '🏄 Surfer'), ('🏇', '🏇 Horse Racing'), ('🏊', '🏊 Swimmer'), ('🚴', '🚴 Bicyclist'), ('🚵', '🚵 Mountain Bicyclist'), ('🏆', '🏆 Trophy'), ('🎮', '🎮 Video Game'), ('🎲', '🎲 Dice'), ('🃏', '🃏 Playing Card Black Joker'), ('🔇', '🔇 Speaker With Cancellation Stroke'), ('🔈', '🔈 Speaker'), ('🔉', '🔉 Speaker With One Sound Wave'), ('🔊', '🔊 Speaker With Three Sound Waves'), ('📢', '📢 Public Address Loudspeaker'), ('📣', '📣 Megaphone'), ('📯', '📯 Horn'), ('🔔', '🔔 Bell'), ('🔕', '🔕 No Bells'), ('🔀', '🔀 Shuffle'), ('🔁', '🔁 Repeat'), ('🔂', '🔂 Repeat Once'), ('⏩', '⏩ Fast Forward'), ('⏭', '⏭ Next Track'), ('⏯', '⏯ Play/Pause'), ('⏪', '⏪ Rewind'), ('⏮', '⏮ Previous Track'), ('🔼', '🔼 Up-Pointing Small Red Triangle'), ('⏫', '⏫ Up to Top'), ('🔽', '🔽 Down-Pointing Small Red Triangle'), ('⏬', '⏬ Down to Bottom'), ('🎼', '🎼 Musical Score'), ('🎵', '🎵 Musical Note'), ('🎶', '🎶 Music Notes'), ('🎤', '🎤 Microphone'), ('🎧', '🎧 Headphone'), ('🎷', '🎷 Saxophone'), ('🎸', '🎸 Guitar'), ('🎹', '🎹 Keyboard'), ('🎺', '🎺 Trumpet'), ('🎻', '🎻 Violin'), ('📻', '📻 Boom Box'), ('📱', '📱 Mobile Phone'), ('📳', '📳 Vibration Mode'), ('📴', '📴 Mobile Phone Off'), ('📲', '📲 Download to Phone'), ('📵', '📵 No Mobile Phones'), ('📞', '📞 Telephone'), ('🔟', '🔟 Keycap Ten'), ('📶', '📶 Antenna With Bars'), ('📟', '📟 Pager'), ('📠', '📠 Fax Machine'), ('🔋', '🔋 Battery'), ('🔌', '🔌 Plug'), ('💻', '💻 Personal Computer'), ('💽', '💽 Minidisc'), ('💾', '💾 Floppy'), ('💿', '💿 Compact Disc'), ('📀', '📀 DVD'), ('🎥', '🎥 Movie Camera'), ('🎦', '🎦 Cinema'), ('🎬', '🎬 Clapperboard'), ('📺', '📺 Television'), ('📷', '📷 Camera'), ('📹', '📹 Video Camera'), ('📼', '📼 Videocassette'), ('🔅', '🔅 Low Brightness Symbol'), ('🔆', '🔆 High Brightness Symbol'), ('🔍', '🔍 Magnifying Glass'), ('🔎', '🔎 Right-Pointing Magnifying Glass'), ('🔬', '🔬 Microscope'), ('🔭', '🔭 Telescope'), ('📡', '📡 Satellite Dish'), ('💡', '💡 Light Bulb'), ('🔦', '🔦 Electric Torch'), ('🏮', '🏮 Izakaya Lantern'), ('📔', '📔 Notebook With Decorative Cover'), ('📕', '📕 Closed Book'), ('📖', '📖 Open Book'), ('📗', '📗 Green Book'), ('📘', '📘 Blue Book'), ('📙', '📙 Orange Book'), ('📚', '📚 Books'), ('📓', '📓 Notebook'), ('📒', '📒 Ledger'), ('📃', '📃 Page With Curl'), ('📜', '📜 Scroll'), ('📄', '📄 Page Facing Up'), ('📰', '📰 Newspaper'), ('📑', '📑 Bookmark Tabs'), ('🔖', '🔖 Bookmark'), ('💰', '💰 Money Bag'), ('💴', '💴 Banknote With Yen Sign'), ('💵', '💵 Banknote With Dollar Sign'), ('💶', '💶 Banknote With Euro Sign'), ('💷', '💷 Banknote With Pound Sign'), ('💸', '💸 Flying Money'), ('💱', '💱 Currency Exchange'), ('💲', '💲 Heavy Dollar Sign'), ('💳', '💳 Credit Card'), ('💹', '💹 Upwards Trend in Yen'), ('📧', '📧 E-Mail Symbol'), ('📨', '📨 Incoming Envelope'), ('📩', '📩 Going Into Envelope'), ('📤', '📤 Outbox Tray'), ('📥', '📥 Inbox Tray'), ('📦', '📦 Package'), ('📫', '📫 Mailbox'), ('📪', '📪 Closed Mailbox With Lowered Flag'), ('📬', '📬 Open Mailbox With Raised Flag'), ('📭', '📭 Open Mailbox With Lowered Flag'), ('📮', '📮 Postbox'), ('📝', '📝 Memo'), ('💼', '💼 Briefcase'), ('📁', '📁 File Folder'), ('📂', '📂 Open File Folder'), ('📅', '📅 Calendar'), ('📆', '📆 Tear-Off Calendar'), ('📇', '📇 Card Index'), ('📈', '📈 Upwards Trend'), ('📉', '📉 Downwards Trend'), ('📊', '📊 Bar Chart'), ('📋', '📋 Clipboard'), ('📌', '📌 Pushpin'), ('📍', '📍 Round Pushpin'), ('📎', '📎 Paperclip'), ('📏', '📏 Straight Ruler'), ('📐', '📐 Triangle Ruler'), ('📛', '📛 Name Badge'), ('🔒', '🔒 Lock'), ('🔓', '🔓 Open Lock'), ('🔏', '🔏 Lock With Ink Pen'), ('🔐', '🔐 Closed Lock With Key'), ('🔑', '🔑 Key'), ('🔨', '🔨 Hammer'), ('🔧', '🔧 Spanner'), ('🔩', '🔩 Calipers'), ('🔗', '🔗 Link Symbol'), ('💉', '💉 Syringe'), ('💊', '💊 Pill'), ('🔪', '🔪 Chef Knife'), ('🔫', '🔫 Pistol'), ('🚬', '🚬 Durry'), ('🏁', '🏁 Chequered Flag'), ('🚩', '🚩 Triangular Flag on Post'), ('🇦🇫', '🇦🇫 Afghanistan'), ('🇦🇽', '🇦🇽 Åland Islands'), ('🇦🇱', '🇦🇱 Albania'), ('🇩🇿', '🇩🇿 Algeria'), ('🇦🇸', '🇦🇸 American Samoa'), ('🇦🇩', '🇦🇩 Andorra'), ('🇦🇴', '🇦🇴 Angola'), ('🇦🇮', '🇦🇮 Anguilla'), ('🇦🇶', '🇦🇶 Antarctica'), ('🇦🇬', '🇦🇬 Antigua & Barbuda'), ('🇦🇷', '🇦🇷 Argentina'), ('🇦🇲', '🇦🇲 Armenia'), ('🇦🇼', '🇦🇼 Aruba'), ('🇦🇨', '🇦🇨 Ascension Island'), ('🇦🇺', '🇦🇺 Australia'), ('🇦🇹', '🇦🇹 Austria'), ('🇦🇿', '🇦🇿 Azerbaijan'), ('🇧🇸', '🇧🇸 Bahamas'), ('🇧🇭', '🇧🇭 Bahrain'), ('🇧🇩', '🇧🇩 Bangladesh'), ('🇧🇧', '🇧🇧 Barbados'), ('🇧🇾', '🇧🇾 Belarus'), ('🇧🇪', '🇧🇪 Belgium'), ('🇧🇿', '🇧🇿 Belize'), ('🇧🇯', '🇧🇯 Benin'), ('🇧🇲', '🇧🇲 Bermuda'), ('🇧🇹', '🇧🇹 Bhutan'), ('🇧🇴', '🇧🇴 Bolivia'), ('🇧🇦', '🇧🇦 Bosnia & Herzegovina'), ('🇧🇼', '🇧🇼 Botswana'), ('🇧🇻', '🇧🇻 Bouvet Island'), ('🇧🇷', '🇧🇷 Brazil'), ('🇮🇴', '🇮🇴 British Indian Ocean Territory'), ('🇻🇬', '🇻🇬 British Virgin Islands'), ('🇧🇳', '🇧🇳 Brunei'), ('🇧🇬', '🇧🇬 Bulgaria'), ('🇧🇫', '🇧🇫 Burkina Faso'), ('🇧🇮', '🇧🇮 Burundi'), ('🇰🇭', '🇰🇭 Cambodia'), ('🇨🇲', '🇨🇲 Cameroon'), ('🇨🇦', '🇨🇦 Canada'), ('🇮🇨', '🇮🇨 Canary Islands'), ('🇨🇻', '🇨🇻 Cape Verde'), ('🇧🇶', '🇧🇶 Caribbean Netherlands'), ('🇰🇾', '🇰🇾 Cayman Islands'), ('🇨🇫', '🇨🇫 Central African Republic'), ('🇪🇦', '🇪🇦 Ceuta & Melilla'), ('🇹🇩', '🇹🇩 Chad'), ('🇨🇱', '🇨🇱 Chile'), ('🇨🇳', '🇨🇳 China'), ('🇨🇽', '🇨🇽 Christmas Island'), ('🇨🇵', '🇨🇵 Clipperton Island'), ('🇨🇨', '🇨🇨 Cocos Islands'), ('🇨🇴', '🇨🇴 Colombia'), ('🇰🇲', '🇰🇲 Comoros'), ('🇨🇬', '🇨🇬 Congo - Brazzaville'), ('🇨🇩', '🇨🇩 Congo - Kinshasa'), ('🇨🇰', '🇨🇰 Cook Islands'), ('🇨🇷', '🇨🇷 Costa Rica'), ('🇨🇮', '🇨🇮 Côte D’Ivoire'), ('🇭🇷', '🇭🇷 Croatia'), ('🇨🇺', '🇨🇺 Cuba'), ('🇨🇼', '🇨🇼 Curaçao'), ('🇨🇾', '🇨🇾 Cyprus'), ('🇨🇿', '🇨🇿 Czech Republic'), ('🇩🇰', '🇩🇰 Denmark'), ('🇩🇬', '🇩🇬 Diego Garcia'), ('🇩🇯', '🇩🇯 Djibouti'), ('🇩🇲', '🇩🇲 Dominica'), ('🇩🇴', '🇩🇴 Dominican Republic'), ('🇪🇨', '🇪🇨 Ecuador'), ('🇪🇬', '🇪🇬 Egypt'), ('🇸🇻', '🇸🇻 El Salvador'), ('🇬🇶', '🇬🇶 Equatorial Guinea'), ('🇪🇷', '🇪🇷 Eritrea'), ('🇪🇪', '🇪🇪 Estonia'), ('🇪🇹', '🇪🇹 Ethiopia'), ('🇪🇺', '🇪🇺 European Union'), ('🇫🇰', '🇫🇰 Falkland Islands'), ('🇫🇴', '🇫🇴 Faroe Islands'), ('🇫🇯', '🇫🇯 Fiji'), ('🇫🇮', '🇫🇮 Finland'), ('🇫🇷', '🇫🇷 France'), ('🇬🇫', '🇬🇫 French Guiana'), ('🇵🇫', '🇵🇫 French Polynesia'), ('🇹🇫', '🇹🇫 French Southern Territories'), ('🇬🇦', '🇬🇦 Gabon'), ('🇬🇲', '🇬🇲 Gambia'), ('🇬🇪', '🇬🇪 Georgia'), ('🇩🇪', '🇩🇪 Germany'), ('🇬🇭', '🇬🇭 Ghana'), ('🇬🇮', '🇬🇮 Gibraltar'), ('🇬🇷', '🇬🇷 Greece'), ('🇬🇱', '🇬🇱 Greenland'), ('🇬🇩', '🇬🇩 Grenada'), ('🇬🇵', '🇬🇵 Guadeloupe'), ('🇬🇺', '🇬🇺 Guam'), ('🇬🇹', '🇬🇹 Guatemala'), ('🇬🇬', '🇬🇬 Guernsey'), ('🇬🇳', '🇬🇳 Guinea'), ('🇬🇼', '🇬🇼 Guinea-Bissau'), ('🇬🇾', '🇬🇾 Guyana'), ('🇭🇹', '🇭🇹 Haiti'), ('🇭🇲', '🇭🇲 Heard & McDonald Islands'), ('🇭🇳', '🇭🇳 Honduras'), ('🇭🇰', '🇭🇰 Hong Kong'), ('🇭🇺', '🇭🇺 Hungary'), ('🇮🇸', '🇮🇸 Iceland'), ('🇮🇳', '🇮🇳 India'), ('🇮🇩', '🇮🇩 Indonesia'), ('🇮🇷', '🇮🇷 Iran'), ('🇮🇶', '🇮🇶 Iraq'), ('🇮🇪', '🇮🇪 Ireland'), ('🇮🇲', '🇮🇲 Isle of Man'), ('🇮🇱', '🇮🇱 Israel'), ('🇮🇹', '🇮🇹 Italy'), ('🇯🇲', '🇯🇲 Jamaica'), ('🇯🇵', '🇯🇵 Japan'), ('🇯🇪', '🇯🇪 Jersey'), ('🇯🇴', '🇯🇴 Jordan'), ('🇰🇿', '🇰🇿 Kazakhstan'), ('🇰🇪', '🇰🇪 Kenya'), ('🇰🇮', '🇰🇮 Kiribati'), ('🇽🇰', '🇽🇰 Kosovo'), ('🇰🇼', '🇰🇼 Kuwait'), ('🇰🇬', '🇰🇬 Kyrgyzstan'), ('🇱🇦', '🇱🇦 Laos'), ('🇱🇻', '🇱🇻 Latvia'), ('🇱🇧', '🇱🇧 Lebanon'), ('🇱🇸', '🇱🇸 Lesotho'), ('🇱🇷', '🇱🇷 Liberia'), ('🇱🇾', '🇱🇾 Libya'), ('🇱🇮', '🇱🇮 Liechtenstein'), ('🇱🇹', '🇱🇹 Lithuania'), ('🇱🇺', '🇱🇺 Luxembourg'), ('🇲🇴', '🇲🇴 Macau'), ('🇲🇰', '🇲🇰 Macedonia'), ('🇲🇬', '🇲🇬 Madagascar'), ('🇲🇼', '🇲🇼 Malawi'), ('🇲🇾', '🇲🇾 Malaysia'), ('🇲🇻', '🇲🇻 Maldives'), ('🇲🇱', '🇲🇱 Mali'), ('🇲🇹', '🇲🇹 Malta'), ('🇲🇭', '🇲🇭 Marshall Islands'), ('🇲🇶', '🇲🇶 Martinique'), ('🇲🇷', '🇲🇷 Mauritania'), ('🇲🇺', '🇲🇺 Mauritius'), ('🇾🇹', '🇾🇹 Mayotte'), ('🇲🇽', '🇲🇽 Mexico'), ('🇫🇲', '🇫🇲 Micronesia'), ('🇲🇩', '🇲🇩 Moldova'), ('🇲🇨', '🇲🇨 Monaco'), ('🇲🇳', '🇲🇳 Mongolia'), ('🇲🇪', '🇲🇪 Montenegro'), ('🇲🇸', '🇲🇸 Montserrat'), ('🇲🇦', '🇲🇦 Morocco'), ('🇲🇿', '🇲🇿 Mozambique'), ('🇲🇲', '🇲🇲 Myanmar'), ('🇳🇦', '🇳🇦 Namibia'), ('🇳🇷', '🇳🇷 Nauru'), ('🇳🇵', '🇳🇵 Nepal'), ('🇳🇱', '🇳🇱 Netherlands'), ('🇳🇨', '🇳🇨 New Caledonia'), ('🇳🇿', '🇳🇿 New Zealand'), ('🇳🇮', '🇳🇮 Nicaragua'), ('🇳🇪', '🇳🇪 Niger'), ('🇳🇬', '🇳🇬 Nigeria'), ('🇳🇺', '🇳🇺 Niue'), ('🇳🇫', '🇳🇫 Norfolk Island'), ('🇲🇵', '🇲🇵 Northern Mariana Islands'), ('🇰🇵', '🇰🇵 North Korea'), ('🇳🇴', '🇳🇴 Norway'), ('🇴🇲', '🇴🇲 Oman'), ('🇵🇰', '🇵🇰 Pakistan'), ('🇵🇼', '🇵🇼 Palau'), ('🇵🇸', '🇵🇸 Palestinian Territories'), ('🇵🇦', '🇵🇦 Panama'), ('🇵🇬', '🇵🇬 Papua New Guinea'), ('🇵🇾', '🇵🇾 Paraguay'), ('🇵🇪', '🇵🇪 Peru'), ('🇵🇭', '🇵🇭 Philippines'), ('🇵🇳', '🇵🇳 Pitcairn Islands'), ('🇵🇱', '🇵🇱 Poland'), ('🇵🇹', '🇵🇹 Portugal'), ('🇵🇷', '🇵🇷 Puerto Rico'), ('🇶🇦', '🇶🇦 Qatar'), ('🇷🇪', '🇷🇪 Réunion'), ('🇷🇴', '🇷🇴 Romania'), ('🇷🇺', '🇷🇺 Russia'), ('🇷🇼', '🇷🇼 Rwanda'), ('🇼🇸', '🇼🇸 Samoa'), ('🇸🇲', '🇸🇲 San Marino'), ('🇸🇹', '🇸🇹 São Tomé & Príncipe'), ('🇸🇦', '🇸🇦 Saudi Arabia'), ('🇸🇳', '🇸🇳 Senegal'), ('🇷🇸', '🇷🇸 Serbia'), ('🇸🇨', '🇸🇨 Seychelles'), ('🇸🇱', '🇸🇱 Sierra Leone'), ('🇸🇬', '🇸🇬 Singapore'), ('🇸🇽', '🇸🇽 Sint Maarten'), ('🇸🇰', '🇸🇰 Slovakia'), ('🇸🇮', '🇸🇮 Slovenia'), ('🇸🇧', '🇸🇧 Solomon Islands'), ('🇸🇴', '🇸🇴 Somalia'), ('🇿🇦', '🇿🇦 South Africa'), ('🇬🇸', '🇬🇸 South Georgia & South Sandwich Islands'), ('🇰🇷', '🇰🇷 South Korea'), ('🇸🇸', '🇸🇸 South Sudan'), ('🇪🇸', '🇪🇸 Spain'), ('🇱🇰', '🇱🇰 Sri Lanka'), ('🇧🇱', '🇧🇱 St. Barthélemy'), ('🇸🇭', '🇸🇭 St. Helena'), ('🇰🇳', '🇰🇳 St. Kitts & Nevis'), ('🇱🇨', '🇱🇨 St. Lucia'), ('🇲🇫', '🇲🇫 St. Martin'), ('🇵🇲', '🇵🇲 St. Pierre & Miquelon'), ('🇻🇨', '🇻🇨 St. Vincent & Grenadines'), ('🇸🇩', '🇸🇩 Sudan'), ('🇸🇷', '🇸🇷 Suriname'), ('🇸🇯', '🇸🇯 Svalbard & Jan Mayen'), ('🇸🇿', '🇸🇿 Swaziland'), ('🇸🇪', '🇸🇪 Sweden'), ('🇨🇭', '🇨🇭 Switzerland'), ('🇸🇾', '🇸🇾 Syria'), ('🇹🇼', '🇹🇼 Taiwan'), ('🇹🇯', '🇹🇯 Tajikistan'), ('🇹🇿', '🇹🇿 Tanzania'), ('🇹🇭', '🇹🇭 Thailand'), ('🇹🇱', '🇹🇱 Timor-Leste'), ('🇹🇬', '🇹🇬 Togo'), ('🇹🇰', '🇹🇰 Tokelau'), ('🇹🇴', '🇹🇴 Tonga'), ('🇹🇹', '🇹🇹 Trinidad & Tobago'), ('🇹🇦', '🇹🇦 Tristan Da Cunha'), ('🇹🇳', '🇹🇳 Tunisia'), ('🇹🇷', '🇹🇷 Turkey'), ('🇹🇲', '🇹🇲 Turkmenistan'), ('🇹🇨', '🇹🇨 Turks & Caicos Islands'), ('🇹🇻', '🇹🇻 Tuvalu'), ('🇺🇬', '🇺🇬 Uganda'), ('🇺🇦', '🇺🇦 Ukraine'), ('🇦🇪', '🇦🇪 United Arab Emirates'), ('🇬🇧', '🇬🇧 United Kingdom'), ('🇺🇸', '🇺🇸 United States'), ('🇺🇾', '🇺🇾 Uruguay'), ('🇺🇲', '🇺🇲 U.S. Outlying Islands'), ('🇻🇮', '🇻🇮 U.S. Virgin Islands'), ('🇺🇿', '🇺🇿 Uzbekistan'), ('🇻🇺', '🇻🇺 Vanuatu'), ('🇻🇦', '🇻🇦 Vatican City'), ('🇻🇪', '🇻🇪 Venezuela'), ('🇻🇳', '🇻🇳 Vietnam'), ('🇼🇫', '🇼🇫 Wallis & Futuna'), ('🇪🇭', '🇪🇭 Western Sahara'), ('🇾🇪', '🇾🇪 Yemen'), ('🇿🇲', '🇿🇲 Zambia'), ('🇿🇼', '🇿🇼 Zimbabwe'), ('🔃', '🔃 Clockwise Arrows'), ('🔄', '🔄 Anticlockwise Arrows'), ('🔙', '🔙 Back'), ('🔚', '🔚 End'), ('🔛', '🔛 On'), ('🔜', '🔜 Soon'), ('🔝', '🔝 Top'), ('🔰', '🔰 Beginner'), ('🔮', '🔮 Crystal Ball'), ('🔯', '🔯 Six Pointed Star With Middle Dot'), ('✅', '✅ White Heavy Check Mark'), ('❌', '❌ Cross'), ('❎', '❎ Negative Squared Cross Mark'), ('➕', '➕ Heavy Plus Sign'), ('➖', '➖ Heavy Minus Sign'), ('➗', '➗ Heavy Division Sign'), ('➰', '➰ Curly Loop'), ('➿', '➿ Double Curly Loop'), ('❓', '❓ Question'), ('❔', '❔ White Question Mark Ornament'), ('❕', '❕ White Exclamation Mark Ornament'), ('💯', '💯 Hundred Points Symbol'), ('🔞', '🔞 Over Eighteen'), ('🔠', '🔠 Latin Capital Letters'), ('🔡', '🔡 Latin Small Letters'), ('🔢', '🔢 Numbers'), ('🔣', '🔣 Symbols'), ('🔤', '🔤 Latin Letters'), ('🅰️', '🅰️ Squared A'), ('🆎', '🆎 Squared AB'), ('🅱️', '🅱️ Squared B'), ('🆑', '🆑 Squared CL'), ('🆒', '🆒 Cool Square'), ('🆓', '🆓 Squared Free'), ('🆔', '🆔 Squared ID'), ('🆕', '🆕 New Square'), ('🆖', '🆖 Squared NG'), ('🅾️', '🅾️ Squared O'), ('🆗', '🆗 OK Square'), ('🆘', '🆘 SOS Square'), ('🆙', '🆙 Squared Up!'), ('🆚', '🆚 Squared Vs'), ('🈁', '🈁 Squared Katakana Koko'), ('🈂️', '🈂️ Squared Katakana Sa'), ('🈷️', '🈷️ Squared 月 (Moon)'), ('🈶', '🈶 Squared 有 (Have)'), ('🉐', '🉐 Circled Ideograph Advantage'), ('🈹', '🈹 Squared CJK Unified Ideograph-5272'), ('🈲', '🈲 Squared CJK Unified Ideograph-7981'), ('🉑', '🉑 Circled 可 (Accept)'), ('🈸', '🈸 Squared CJK Unified Ideograph-7533'), ('🈴', '🈴 Squared CJK Unified Ideograph-5408'), ('🈳', '🈳 Squared CJK Unified Ideograph-7a7a'), ('🈺', '🈺 Squared CJK Unified Ideograph-55b6'), ('🈵', '🈵 Squared CJK Unified Ideograph-6e80'), ('🔶', '🔶 Large Orange Diamond'), ('🔷', '🔷 Large Blue Diamond'), ('🔸', '🔸 Small Orange Diamond'), ('🔹', '🔹 Small Blue Diamond'), ('🔺', '🔺 Up-Pointing Red Triangle'), ('🔻', '🔻 Down-Pointing Red Triangle'), ('💠', '💠 Diamond Shape With a Dot Inside'), ('🔘', '🔘 Radio Button'), ('🔲', '🔲 Black Square Button'), ('🔳', '🔳 White Square Button'), ('🔴', '🔴 Large Red Circle'), ('🔵', '🔵 Large Blue Circle'), ('😀', '😀 Grinning'), ('😗', '😗 Kissing'), ('😙', '😙 Smooch'), ('😑', '😑 True Neutral'), ('😮', '😮 Stunned'), ('😯', '😯 Hushed'), ('😴', '😴 Sleeping'), ('😛', '😛 Tongue'), ('😕', '😕 Confused'), ('😟', '😟 Worried'), ('😦', '😦 Frowning Face With Open Mouth'), ('😧', '😧 Anguished'), ('😬', '😬 Grimacing'), ('🙂', '🙂 Slightly Smiling'), ('🙁', '🙁 Slightly Frowning'), ('🕵', '🕵 Spy'), ('🗣', '🗣 Speaking Head in Silhouette'), ('🕴', '🕴 Man in Business Suit Levitating'), ('🖕', '🖕 Middle Finger'), ('🖖', '🖖 Vulcan Hand'), ('🖐', '🖐 Raised Hand With Fingers Splayed'), ('👁', '👁 Eye'), ('🕳', '🕳 Hole'), ('🗯', '🗯 Right Anger Bubble'), ('🕶', '🕶 Dark Sunglasses'), ('🛍', '🛍 Shopping Bags'), ('🐿', '🐿 Chipmunk'), ('🕊', '🕊 Peace Dove'), ('🕷', '🕷 Spider'), ('🕸', '🕸 Spider Web'), ('🏵', '🏵 Rosette'), ('🌶', '🌶 Hot Pepper'), ('🍽', '🍽 Fork and Knife With Plate'), ('🗺', '🗺 World Map'), ('🏔', '🏔 Snow Capped Mountain'), ('🏕', '🏕 Camping'), ('🏖', '🏖 Beach With Umbrella'), ('🏜', '🏜 Desert'), ('🏝', '🏝 Desert Island'), ('🏞', '🏞 National Park'), ('🏟', '🏟 Stadium'), ('🏛', '🏛 Architecture'), ('🏗', '🏗 Building Construction'), ('🏘', '🏘 House Buildings'), ('🏙', '🏙 Cityscape'), ('🏚', '🏚 Derelict House Building'), ('🖼', '🖼 Frame With Picture'), ('🛢', '🛢 Oil Drum'), ('🛣', '🛣 Motorway'), ('🛤', '🛤 Railway Track'), ('🛳', '🛳 Passenger Ship'), ('🛥', '🛥 Motor Boat'), ('🛩', '🛩 Airplane'), ('🛫', '🛫 Airplane Departure'), ('🛬', '🛬 Airplane Arriving'), ('🛰', '🛰 Satellite'), ('🛎', '🛎 Service Bell'), ('🛌', '🛌 Sleeping Accommodation'), ('🛏', '🛏 Bed'), ('🛋', '🛋 Couch and Lamp'), ('🕰', '🕰 Mantelpiece'), ('🌡', '🌡 Thermometer'), ('🌤', '🌤 Small Cloud'), ('🌥', '🌥 White Sun Behind Cloud'), ('🌦', '🌦 White Sun Behind Cloud With Rain'), ('🌧', '🌧 Cloud With Rain'), ('🌨', '🌨 Cloud With Snow'), ('🌩', '🌩 Lightning'), ('🌪', '🌪 Tornado'), ('🌫', '🌫 Fog'), ('🌬', '🌬 Blowing'), ('🎖', '🎖 Medal'), ('🎗', '🎗 Ribbon'), ('🎞', '🎞 Film'), ('🎟', '🎟 Admission Tickets'), ('🏷', '🏷 Label'), ('🏌', '🏌 Golfer'), ('🏋', '🏋 Lifting'), ('🏎', '🏎 Racing Car'), ('🏍', '🏍 Racing Motorcycle'), ('🏅', '🏅 Medal'), ('🕹', '🕹 Joystick'), ('⏸', '⏸ Double Vertical Bar'), ('⏹', '⏹ Black Square for Stop'), ('⏺', '⏺ Black Circle for Record'), ('🎙', '🎙 Microphone'), ('🎚', '🎚 Level Slider'), ('🎛', '🎛 Control Knobs'), ('🖥', '🖥 Desktop'), ('🖨', '🖨 Printer'), ('🖱', '🖱 Three Button Mouse'), ('🖲', '🖲 Trackball'), ('📽', '📽 Film Projector'), ('📸', '📸 Camera With Flash'), ('🕯', '🕯 Candle'), ('🗞', '🗞 Newspaper'), ('🗳', '🗳 Ballot Box With Ballot'), ('🖋', '🖋 Fancy Pen'), ('🖊', '🖊 Lower Left Ballpoint Pen'), ('🖌', '🖌 Lower Left Paintbrush'), ('🖍', '🖍 Lower Left Crayon'), ('🗂', '🗂 Card Index Dividers'), ('🗒', '🗒 Spiral Note Pad'), ('🗓', '🗓 Spiral Calendar Pad'), ('🖇', '🖇 Linked Paperclips'), ('🗃', '🗃 Card File Box'), ('🗄', '🗄 File Cabinet'), ('🗑', '🗑 Wastebasket'), ('🗝', '🗝 Old Key'), ('🛠', '🛠 Hammer Spanner'), ('🗜', '🗜 Compression'), ('🗡', '🗡 Dagger'), ('🛡', '🛡 Shield'), ('🏳', '🏳 White Flag'), ('🏴', '🏴 Black Flag'), ('🕉', '🕉 Om Symbol'), ('🗨', '🗨 Left Speech Bubble'), ('🤗', '🤗 Hugging'), ('🤔', '🤔 Thinking'), ('🙄', '🙄 Rolling Eyes'), ('🤐', '🤐 Hushed'), ('🤓', '🤓 Nerd'), ('🙃', '🙃 Upside Down'), ('🤒', '🤒 Sick'), ('🤕', '🤕 Hurt'), ('🤑', '🤑 Money'), ('🏻', '🏻 Emoji Modifier 1-2'), ('🏼', '🏼 Emoji Modifier 3'), ('🏽', '🏽 Emoji Modifier 4'), ('🏾', '🏾 Emoji Modifier 5'), ('🏿', '🏿 Emoji Modifier 6'), ('🤘', '🤘 Rock On'), ('📿', '📿 Prayer Beads'), ('🤖', '🤖 Robot'), ('🦁', '🦁 Lion'), ('🦄', '🦄 Unicorn'), ('🦃', '🦃 Turkey'), ('🦀', '🦀 Crab'), ('🦂', '🦂 Scorpion'), ('🧀', '🧀 Cheese'), ('🌭', '🌭 Hot Dog'), ('🌮', '🌮 Taco'), ('🌯', '🌯 Burrito'), ('🍿', '🍿 Popcorn'), ('🍾', '🍾 Popping Cork'), ('🏺', '🏺 Amphora'), ('🛐', '🛐 Place of Worship'), ('🕋', '🕋 Kaaba'), ('🕌', '🕌 Mosque'), ('🕍', '🕍 Synagogue'), ('🕎', '🕎 Menorah'), ('🏏', '🏏 Cricket'), ('🏐', '🏐 Volleyball'), ('🏑', '🏑 Field Hockey'), ('🏒', '🏒 Ice Hockey'), ('🏓', '🏓 Table Tennis'), ('🏸', '🏸 Badminton'), ('🏹', '🏹 Archer'), ('🤣', '🤣 ROFL Face'), ('🤤', '🤤 Drooling'), ('🤢', '🤢 Nauseated'), ('🤧', '🤧 Sneezing'), ('🤠', '🤠 Cowboy'), ('🤡', '🤡 Clown'), ('🤥', '🤥 Lying'), ('🤴', '🤴 Prince'), ('🤵', '🤵 Tuxedo Man'), ('🤰', '🤰 Pregnant'), ('🤶', '🤶 Mrs. Claus'), ('🤦', '🤦 Facepalm'), ('🤷', '🤷 Shrugging'), ('🕺', '🕺 Man Dancing'), ('🤺', '🤺 Fencing'), ('🤸', '🤸 Cartwheeling'), ('🤼', '🤼 Wrestling'), ('🤽', '🤽 Water Polo'), ('🤾', '🤾 Handball'), ('🤹', '🤹 Juggling'), ('🤳', '🤳 Selfie'), ('🤞', '🤞 Fingers Crossed'), ('🤙', '🤙 Call Me Hand'), ('🤛', '🤛 Left-Facing Fist'), ('🤜', '🤜 Right-Facing Fist'), ('🤚', '🤚 Raised Back of Hand'), ('🤝', '🤝 Handshake'), ('🖤', '🖤 Black Heart'), ('🦍', '🦍 Gorilla'), ('🦊', '🦊 Fox'), ('🦌', '🦌 Deer'), ('🦏', '🦏 Rhinoceros'), ('🦇', '🦇 Bat'), ('🦅', '🦅 Eagle'), ('🦆', '🦆 Duck'), ('🦉', '🦉 Owl'), ('🦎', '🦎 Lizard'), ('🦈', '🦈 Shark'), ('🦐', '🦐 Shrimp'), ('🦑', '🦑 Squid'), ('🦋', '🦋 Butterfly'), ('🥀', '🥀 Wilted Flower'), ('🥝', '🥝 Kiwifruit'), ('🥑', '🥑 Avocado'), ('🥔', '🥔 Potato'), ('🥕', '🥕 Carrot'), ('🥒', '🥒 Cucumber'), ('🥜', '🥜 Peanuts'), ('🥐', '🥐 Croissant'), ('🥖', '🥖 Baguette'), ('🥞', '🥞 Pancakes'), ('🥓', '🥓 Bacon'), ('🥙', '🥙 Stuffed Flatbread'), ('🥚', '🥚 Egg'), ('🥘', '🥘 Shallow Pan of Food'), ('🥗', '🥗 Green Salad'), ('🥛', '🥛 Milk Glass'), ('🥂', '🥂 Clinking Glasses'), ('🥃', '🥃 Tumbler'), ('🥄', '🥄 Spoon'), ('🛴', '🛴 Kick Scooter'), ('🛵', '🛵 Motor Scooter'), ('🛑', '🛑 Stop Sign'), ('🛶', '🛶 Canoe'), ('🥇', '🥇 Gold Medal'), ('🥈', '🥈 Silver Medal'), ('🥉', '🥉 Bronze Medal'), ('🥊', '🥊 Boxing Glove'), ('🥋', '🥋 Martial Artist'), ('🥅', '🥅 Goal Net'), ('🥁', '🥁 Drum'), ('🛒', '🛒 Shopping Cart')], default=None, max_length=2, null=True, verbose_name='emoji'),\n        ),",
        "detail": "tabbycat.participants.migrations.0004_auto_20180420_2040",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.participants.migrations.0004_team_code_name",
        "description": "tabbycat.participants.migrations.0004_team_code_name",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('participants', '0003_auto_20180307_2202'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='team',\n            name='code_name',\n            field=models.CharField(blank=True, help_text='Name used to obscure institutional identity on public-facing pages', max_length=150, verbose_name='code name'),\n        ),",
        "detail": "tabbycat.participants.migrations.0004_team_code_name",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.participants.migrations.0005_auto_20180310_1035",
        "description": "tabbycat.participants.migrations.0005_auto_20180310_1035",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('participants', '0004_team_code_name'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='team',\n            name='emoji',\n            field=models.CharField(blank=True, choices=[('☁️', '☁️'), ('❄️', '❄️'), ('♠️', '♠️'), ('♥️', '♥️'), ('♦️', '♦️'), ('♣️', '♣️'), ('✉️', '✉️'), ('✂️', '✂️'), ('☕', '☕'), ('⬛', '⬛'), ('⬜', '⬜'), ('⛑', '⛑'), ('⛰', '⛰'), ('⛪', '⛪'), ('⛺', '⛺'), ('⛵', '⛵'), ('⛔', '⛔'), ('⛅', '⛅'), ('⛈', '⛈'), ('⛱', '⛱'), ('⛄', '⛄'), ('⚽', '⚽'), ('⛸', '⛸'), ('⛏', '⛏'), ('😂', '😂'), ('😆', '😆'), ('😉', '😉'), ('😊', '😊'), ('😎', '😎'), ('😍', '😍'), ('😘', '😘'), ('😇', '😇'), ('😐', '😐'), ('😏', '😏'), ('😣', '😣'), ('😥', '😥'), ('😜', '😜'), ('😓', '😓'), ('😖', '😖'), ('😷', '😷'), ('😲', '😲'), ('😭', '😭'), ('😱', '😱'), ('😳', '😳'), ('😵', '😵'), ('😡', '😡'), ('👿', '👿'), ('👨', '👨'), ('👩', '👩'), ('👴', '👴'), ('👵', '👵'), ('👶', '👶'), ('👮', '👮'), ('👷', '👷'), ('👸', '👸'), ('💂', '💂'), ('🎅', '🎅'), ('👼', '👼'), ('👯', '👯'), ('👰', '👰'), ('🙅', '🙅'), ('🙆', '🙆'), ('💁', '💁'), ('🙋', '🙋'), ('🙇', '🙇'), ('🙌', '🙌'), ('🙏', '🙏'), ('💃', '💃'), ('💑', '💑'), ('👪', '👪'), ('👫', '👫'), ('👬', '👬'), ('👭', '👭'), ('💪', '💪'), ('👆', '👆'), ('✊', '✊'), ('✋', '✋'), ('👊', '👊'), ('👌', '👌'), ('👍', '👍'), ('👎', '👎'), ('👏', '👏'), ('💅', '💅'), ('👣', '👣'), ('👂', '👂'), ('👃', '👃'), ('👅', '👅'), ('👄', '👄'), ('💘', '💘'), ('💔', '💔'), ('💖', '💖'), ('💌', '💌'), ('💧', '💧'), ('💤', '💤'), ('💣', '💣'), ('💥', '💥'), ('💦', '💦'), ('💨', '💨'), ('💫', '💫'), ('👓', '👓'), ('👔', '👔'), ('👙', '👙'), ('👜', '👜'), ('👟', '👟'), ('👠', '👠'), ('👒', '👒'), ('🎩', '🎩'), ('💄', '💄'), ('💍', '💍'), ('💎', '💎'), ('👻', '👻'), ('💀', '💀'), ('👽', '👽'), ('👾', '👾'), ('💩', '💩'), ('🐵', '🐵'), ('🙈', '🙈'), ('🙉', '🙉'), ('🙊', '🙊'), ('🐶', '🐶'), ('🐺', '🐺'), ('🐯', '🐯'), ('🐴', '🐴'), ('🐮', '🐮'), ('🐑', '🐑'), ('🐭', '🐭'), ('🐹', '🐹'), ('🐰', '🐰'), ('🐻', '🐻'), ('🐨', '🐨'), ('🐼', '🐼'), ('🐔', '🐔'), ('🐣', '🐣'), ('🐤', '🐤'), ('🐦', '🐦'), ('🐧', '🐧'), ('🐸', '🐸'), ('🐢', '🐢'), ('🐍', '🐍'), ('🐲', '🐲'), ('🐳', '🐳'), ('🐬', '🐬'), ('🐠', '🐠'), ('🐙', '🐙'), ('🐚', '🐚'), ('🐌', '🐌'), ('🐛', '🐛'), ('🐝', '🐝'), ('💐', '💐'), ('🌸', '🌸'), ('🌹', '🌹'), ('🌻', '🌻'), ('🌷', '🌷'), ('🌱', '🌱'), ('🌴', '🌴'), ('🌵', '🌵'), ('🌿', '🌿'), ('🍀', '🍀'), ('🍁', '🍁'), ('🍇', '🍇'), ('🍉', '🍉'), ('🍋', '🍋'), ('🍌', '🍌'), ('🍍', '🍍'), ('🍎', '🍎'), ('🍑', '🍑'), ('🍒', '🍒'), ('🍓', '🍓'), ('🍆', '🍆'), ('🌽', '🌽'), ('🍄', '🍄'), ('🍞', '🍞'), ('🍔', '🍔'), ('🍟', '🍟'), ('🍕', '🍕'), ('🍙', '🍙'), ('🍩', '🍩'), ('🍪', '🍪'), ('🍰', '🍰'), ('🍭', '🍭'), ('🍼', '🍼'), ('🍷', '🍷'), ('🍹', '🍹'), ('🍺', '🍺'), ('🍴', '🍴'), ('🌋', '🌋'), ('🏠', '🏠'), ('🏢', '🏢'), ('🏥', '🏥'), ('🏰', '🏰'), ('🌊', '🌊'), ('🎡', '🎡'), ('🎢', '🎢'), ('🎨', '🎨'), ('🚃', '🚃'), ('🚄', '🚄'), ('🚝', '🚝'), ('🚍', '🚍'), ('🚔', '🚔'), ('🚘', '🚘'), ('🚲', '🚲'), ('🚨', '🚨'), ('🚣', '🚣'), ('🚁', '🚁'), ('🚀', '🚀'), ('🚦', '🚦'), ('🚧', '🚧'), ('🚫', '🚫'), ('🚷', '🚷'), ('🚻', '🚻'), ('🚽', '🚽'), ('🚿', '🚿'), ('🛀', '🛀'), ('⏳', '⏳'), ('🌑', '🌑'), ('🌕', '🌕'), ('🌗', '🌗'), ('🌞', '🌞'), ('🌈', '🌈'), ('🌟', '🌟'), ('🔥', '🔥'), ('🎃', '🎃'), ('🎄', '🎄'), ('🎈', '🎈'), ('🎉', '🎉'), ('🎓', '🎓'), ('🎯', '🎯'), ('🎀', '🎀'), ('🏀', '🏀'), ('🏈', '🏈'), ('🎾', '🎾'), ('🎱', '🎱'), ('🏊', '🏊'), ('🎮', '🎮'), ('🎲', '🎲'), ('📣', '📣'), ('📯', '📯'), ('🔔', '🔔'), ('🎶', '🎶'), ('🎤', '🎤'), ('🎹', '🎹'), ('🎺', '🎺'), ('🎻', '🎻'), ('📻', '📻'), ('📱', '📱'), ('📞', '📞'), ('🔋', '🔋'), ('🔌', '🔌'), ('💾', '💾'), ('💿', '💿'), ('🎬', '🎬'), ('📷', '📷'), ('🔍', '🔍'), ('🔭', '🔭'), ('💡', '💡'), ('📕', '📕'), ('📰', '📰'), ('💰', '💰'), ('💸', '💸'), ('📦', '📦'), ('📫', '📫'), ('💼', '💼'), ('📅', '📅'), ('📎', '📎'), ('📏', '📏'), ('📐', '📐'), ('🔒', '🔒'), ('🔑', '🔑'), ('🔧', '🔧'), ('🔩', '🔩'), ('💉', '💉'), ('💊', '💊'), ('🔪', '🔪'), ('🔫', '🔫'), ('🚬', '🚬'), ('🏁', '🏁'), ('🔮', '🔮'), ('❌', '❌'), ('❓', '❓'), ('🔞', '🔞'), ('🆒', '🆒'), ('🆗', '🆗'), ('🆘', '🆘'), ('😙', '😙'), ('😑', '😑'), ('😮', '😮'), ('😴', '😴'), ('😛', '😛'), ('😧', '😧'), ('😬', '😬'), ('🕵', '🕵'), ('🖕', '🖕'), ('🖖', '🖖'), ('👁', '👁'), ('🛍', '🛍'), ('🐿', '🐿'), ('🕊', '🕊'), ('🕷', '🕷'), ('🕸', '🕸'), ('🏵', '🏵'), ('🌶', '🌶'), ('🏕', '🏕'), ('🏛', '🏛'), ('🛢', '🛢'), ('🛥', '🛥'), ('🛩', '🛩'), ('🛎', '🛎'), ('🕰', '🕰'), ('🌡', '🌡'), ('🌩', '🌩'), ('🌪', '🌪'), ('🌬', '🌬'), ('🎖', '🎖'), ('🎗', '🎗'), ('🎞', '🎞'), ('🏷', '🏷'), ('🏋', '🏋'), ('🏅', '🏅'), ('🕹', '🕹'), ('🎙', '🎙'), ('🖥', '🖥'), ('🖨', '🖨'), ('🖲', '🖲'), ('📸', '📸'), ('🕯', '🕯'), ('🗞', '🗞'), ('🖋', '🖋'), ('🗑', '🗑'), ('🛠', '🛠'), ('🗡', '🗡'), ('🛡', '🛡'), ('🏳', '🏳'), ('🏴', '🏴'), ('🤗', '🤗'), ('🤔', '🤔'), ('🙄', '🙄'), ('🤐', '🤐'), ('🤓', '🤓'), ('🙃', '🙃'), ('🤒', '🤒'), ('🤕', '🤕'), ('🤑', '🤑'), ('🤘', '🤘'), ('📿', '📿'), ('🤖', '🤖'), ('🦁', '🦁'), ('🦄', '🦄'), ('🦀', '🦀'), ('🦂', '🦂'), ('🧀', '🧀'), ('🌭', '🌭'), ('🌮', '🌮'), ('🌯', '🌯'), ('🍿', '🍿'), ('🍾', '🍾'), ('🏏', '🏏'), ('🏐', '🏐'), ('🏓', '🏓'), ('🏹', '🏹'), ('🤣', '🤣'), ('🤤', '🤤'), ('🤢', '🤢'), ('🤧', '🤧'), ('🤠', '🤠'), ('🤡', '🤡'), ('🤥', '🤥'), ('🤴', '🤴'), ('🤵', '🤵'), ('🤰', '🤰'), ('🤶', '🤶'), ('🤦', '🤦'), ('🤷', '🤷'), ('🕺', '🕺'), ('🤺', '🤺'), ('🤸', '🤸'), ('🤼', '🤼'), ('🤹', '🤹'), ('🤳', '🤳'), ('🤞', '🤞'), ('🤙', '🤙'), ('🤛', '🤛'), ('🤜', '🤜'), ('🤝', '🤝'), ('🖤', '🖤'), ('🦊', '🦊'), ('🦇', '🦇'), ('🦅', '🦅'), ('🦆', '🦆'), ('🦉', '🦉'), ('🦎', '🦎'), ('🦈', '🦈'), ('🦐', '🦐'), ('🦑', '🦑'), ('🦋', '🦋'), ('🥝', '🥝'), ('🥑', '🥑'), ('🥔', '🥔'), ('🥕', '🥕'), ('🥒', '🥒'), ('🥜', '🥜'), ('🥐', '🥐'), ('🥖', '🥖'), ('🥞', '🥞'), ('🥚', '🥚'), ('🥗', '🥗'), ('🥛', '🥛'), ('🥃', '🥃'), ('🥄', '🥄'), ('🛶', '🛶'), ('🥊', '🥊'), ('🥋', '🥋'), ('🥅', '🥅'), ('🥁', '🥁'), ('🛒', '🛒')], default=None, max_length=2, null=True, verbose_name='emoji'),\n        ),",
        "detail": "tabbycat.participants.migrations.0005_auto_20180310_1035",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.participants.migrations.0005_auto_20180717_0820",
        "description": "tabbycat.participants.migrations.0005_auto_20180717_0820",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('tournaments', '0002_remove_tournament_welcome_msg'),\n        ('participants', '0004_auto_20180420_2040'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='person',\n            name='url_key_',\n            field=models.SlugField(blank=True, max_length=24, null=True, unique=True, verbose_name='URL key'),",
        "detail": "tabbycat.participants.migrations.0005_auto_20180717_0820",
        "documentation": {}
    },
    {
        "label": "populate_participant_urls",
        "kind": 2,
        "importPath": "tabbycat.participants.migrations.0005_auto_20180717_0820",
        "description": "tabbycat.participants.migrations.0005_auto_20180717_0820",
        "peekOfCode": "def populate_participant_urls(apps, schema_editor):\n    Person = apps.get_model(\"participants\", \"Person\")\n    Adjudicator = apps.get_model(\"participants\", \"Adjudicator\")\n    Team = apps.get_model(\"participants\", \"Team\")\n    for team in Team.objects.all():\n        speaker = team.speaker_set.first()\n        rel = Person.objects.get(pk=speaker.pk)\n        rel.url_key_ = team.url_key\n        rel.save()\n    for adj in Adjudicator.objects.all():",
        "detail": "tabbycat.participants.migrations.0005_auto_20180717_0820",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.participants.migrations.0006_auto_20180312_2218",
        "description": "tabbycat.participants.migrations.0006_auto_20180312_2218",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('participants', '0005_auto_20180310_1035'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='person',\n            name='barcode_id',\n        ),\n        migrations.RemoveField(",
        "detail": "tabbycat.participants.migrations.0006_auto_20180312_2218",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.participants.migrations.0006_auto_20180807_2132",
        "description": "tabbycat.participants.migrations.0006_auto_20180807_2132",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('participants', '0005_auto_20180717_0820'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='team',\n            name='emoji',\n            field=models.CharField(blank=True, choices=[('☺️', '☺️ White Smiling'), ('☹', '☹ White Frowning'), ('☝️', '☝️ White Up Pointing Index'), ('✌️', '✌️ Victory Hand'), ('✍', '✍ Writing Hand'), ('❤️', '❤️ Heavy Black Heart'), ('❣', '❣ Heart Exclamation Mark'), ('☠', '☠ Skull and Crossbones'), ('♨️', '♨️ Hot Springs'), ('✈️', '✈️ Airplane'), ('⌛', '⌛ Hourglass'), ('⌚', '⌚ Watch'), ('♈', '♈ Aries'), ('♉', '♉ Taurus'), ('♊', '♊ Gemini'), ('♋', '♋ Cancer'), ('♌', '♌ Leo'), ('♍', '♍ Virgo'), ('♎', '♎ Libra'), ('♏', '♏ Scorpius'), ('♐', '♐ Sagittarius'), ('♑', '♑ Capricorn'), ('♒', '♒ Aquarius'), ('♓', '♓ Pisces'), ('☀️', '☀️ Black Sun With Rays'), ('☁️', '☁️ Cloud'), ('☂', '☂ Umbrella'), ('❄️', '❄️ Snowflake'), ('☃', '☃ Snowman'), ('☄️', '☄️ Comet'), ('♠️', '♠️ Spade Suit'), ('♥️', '♥️ Heart Suit'), ('♦️', '♦️ Diamond Suit'), ('♣️', '♣️ Club Suit'), ('▶️', '▶️ Black Right-Pointing Triangle'), ('◀️', '◀️ Black Left-Pointing Triangle'), ('☎️', '☎️ Black Telephone'), ('⌨', '⌨ Keyboard'), ('✉️', '✉️ Envelope'), ('✏️', '✏️ Pencil'), ('✒️', '✒️ Black Nib'), ('✂️', '✂️ Scissors'), ('↗️', '↗️ North East Arrow'), ('➡️', '➡️ Black Rightwards Arrow'), ('↘️', '↘️ South East Arrow'), ('↙️', '↙️ South West Arrow'), ('↖️', '↖️ North West Arrow'), ('↕️', '↕️ Up Down Arrow'), ('↔️', '↔️ Left Right Arrow'), ('↩️', '↩️ Leftwards Arrow With Hook'), ('↪️', '↪️ Rightwards Arrow With Hook'), ('✡', '✡ Star of David'), ('☸', '☸ Wheel of Dharma'), ('☯', '☯ Yin Yang'), ('✝', '✝ Latin Cross'), ('☦', '☦ Orthodox Cross'), ('☪', '☪ Star and Crescent'), ('☮', '☮ Peace Symbol'), ('☢', '☢ Radioactive Sign'), ('☣', '☣ Biohazard Sign'), ('☑️', '☑️ Ballot Box With Check'), ('✔️', '✔️ Heavy Check Mark'), ('✖️', '✖️ Heavy Multiplication X'), ('✳️', '✳️ Eight Spoked Asterisk'), ('✴️', '✴️ Eight Pointed Black Star'), ('❇️', '❇️ Sparkle'), ('‼️', '‼️ Double Exclamation Mark'), ('〰️', '〰️ Wavy Dash'), ('©️', '©️ Copyright Sign'), ('®️', '®️ Registered Sign'), ('™️', '™️ Trade Mark Sign'), ('Ⓜ️', 'Ⓜ️ Capital M'), ('㊗️', '㊗️ Congratulations'), ('㊙️', '㊙️ Secret'), ('▪️', '▪️ Black Square'), ('▫️', '▫️ White Square'), ('#⃣️', '#⃣️ Keycap Number Sign'), ('*⃣', '*⃣ Keycap Asterisk'), ('0⃣️', '0⃣️ Keycap Digit Zero'), ('1⃣️', '1⃣️ Keycap Digit One'), ('2⃣️', '2⃣️ Keycap Digit Two'), ('3⃣️', '3⃣️ Keycap Digit Three'), ('4⃣️', '4⃣️ Keycap Digit Four'), ('5⃣️', '5⃣️ Keycap Digit Five'), ('6⃣️', '6⃣️ Keycap Digit Six'), ('7⃣️', '7⃣️ Keycap Digit Seven'), ('8⃣️', '8⃣️ Keycap Digit Eight'), ('9⃣️', '9⃣️ Keycap Digit Nine'), ('⁉️', '⁉️ Exclamation Question Mark'), ('ℹ️', 'ℹ️ Information Source'), ('⤴️', '⤴️ Right-Curve-Up'), ('⤵️', '⤵️ Right-Curve-Down'), ('♻️', '♻️ Recycling'), ('〽️', '〽️ Part Alternation Mark'), ('◻️', '◻️ White Medium Square'), ('◼️', '◼️ Black Medium Square'), ('◽', '◽ White Medium Small Square'), ('◾', '◾ Black Medium Small Square'), ('☕', '☕ Hot Beverage'), ('⚠️', '⚠️ Warning Sign'), ('☔', '☔ Umbrella With Rain Drops'), ('⏏', '⏏ Eject Symbol'), ('⬆️', '⬆️ Upwards Black Arrow'), ('⬇️', '⬇️ Downwards Black Arrow'), ('⬅️', '⬅️ Leftwards Black Arrow'), ('⚡', '⚡ High Voltage'), ('☘', '☘ Shamrock'), ('⚓', '⚓ Anchor'), ('♿', '♿ Wheelchair Symbol'), ('⚒', '⚒ Hammer and Pick'), ('⚙', '⚙ Gear'), ('⚗', '⚗ Alembic'), ('⚖', '⚖ Scales'), ('⚔', '⚔ Crossed Swords'), ('⚰', '⚰ Coffin'), ('⚱', '⚱ Funeral Urn'), ('⚜', '⚜ Fleur-De-Lis'), ('⚛', '⚛ Atom Symbol'), ('⚪', '⚪ Medium White Circle'), ('⚫', '⚫ Medium Black Circle'), ('🀄', '🀄 Mahjong Tile Red Dragon'), ('⭐', '⭐ White Medium Star'), ('⬛', '⬛ Black Square'), ('⬜', '⬜ White Square'), ('⛑', '⛑ Rescue Worker'), ('⛰', '⛰ Mountain'), ('⛪', '⛪ Church'), ('⛲', '⛲ Fountain'), ('⛺', '⛺ Tent'), ('⛽', '⛽ Fuel Pump'), ('⛵', '⛵ Sailboat'), ('⛴', '⛴ Ferry'), ('⛔', '⛔ No Entry'), ('⛅', '⛅ Overcast'), ('⛈', '⛈ Storm'), ('⛱', '⛱ Umbrella'), ('⛄', '⛄ Snowman'), ('⚽', '⚽ Soccer'), ('⚾', '⚾ Baseball'), ('⛳', '⛳ Hole in One'), ('⛸', '⛸ Ice Skate'), ('⛷', '⛷ Skier'), ('⛹', '⛹ Person With Ball'), ('⛏', '⛏ Pick'), ('⛓', '⛓ Chains'), ('⛩', '⛩ Shinto Shrine'), ('⭕', '⭕ Heavy Large Circle'), ('❗', '❗ Heavy Exclamation Mark'), ('🅿️', '🅿️ Squared P'), ('🈯', '🈯 Squared 指 (Finger)'), ('🈚', '🈚 Squared CJK Unified Ideograph-7121'), ('😁', '😁 Smiling Eyes'), ('😂', '😂 Tears of Joy'), ('😃', '😃 Smiling Face With Open Mouth'), ('😄', '😄 Smiling Face With Open Mouth and Smiling Eyes'), ('😅', '😅 Cold Sweat'), ('😆', '😆 Closed Eyes'), ('😉', '😉 Winky'), ('😊', '😊 Smiling Eyes'), ('😋', '😋 Face Savouring Delicious Food'), ('😎', '😎 Sunglasses'), ('😍', '😍 Heart Eyes'), ('😘', '😘 Kissy'), ('😚', '😚 Kissing Face With Closed Eyes'), ('😇', '😇 Halo'), ('😐', '😐 Neutral'), ('😶', '😶 No Mouth'), ('😏', '😏 Smirking'), ('😣', '😣 Persevering'), ('😥', '😥 Disappointed'), ('😪', '😪 Sleepy'), ('😫', '😫 Tired'), ('😌', '😌 Relieved'), ('😜', '😜 Tongue Out'), ('😝', '😝 Tongue Out Closed Eyes'), ('😒', '😒 Unamused'), ('😓', '😓 Cold Sweat'), ('😔', '😔 Pensive'), ('😖', '😖 Confounded'), ('😷', '😷 Medical Mask'), ('😲', '😲 Astonished'), ('😞', '😞 Disappointed'), ('😤', '😤 Face With Look of Triumph'), ('😢', '😢 Crying'), ('😭', '😭 Sobbing'), ('😨', '😨 Fearful'), ('😩', '😩 Weary'), ('😰', '😰 Open Mouth Cold Sweat'), ('😱', '😱 Screaming'), ('😳', '😳 Flushed'), ('😵', '😵 Dizzy'), ('😡', '😡 Pouting'), ('😠', '😠 Angry'), ('👿', '👿 Imp'), ('😈', '😈 Smiling Face With Horns'), ('👦', '👦 Boy'), ('👧', '👧 Girl'), ('👨', '👨 Generic Man'), ('👩', '👩 Generic Woman'), ('👴', '👴 Older Man'), ('👵', '👵 Older Woman'), ('👶', '👶 Baby'), ('👱', '👱 Person With Blond Hair'), ('👮', '👮 Police Officer'), ('👲', '👲 Man With Gua Pi Mao'), ('👳', '👳 Man With Turban'), ('👷', '👷 Trade Worker'), ('👸', '👸 Princess'), ('💂', '💂 Guardsman'), ('🎅', '🎅 Santa Claus'), ('👼', '👼 Baby Angel'), ('👯', '👯 Bunny Women'), ('💆', '💆 Face Massage'), ('💇', '💇 Haircut'), ('👰', '👰 Bride'), ('🙍', '🙍 Person Frowning'), ('🙎', '🙎 Person With Pouting'), ('🙅', '🙅 Block Gesture'), ('🙆', '🙆 OK Gesture'), ('💁', '💁 Sass Gesture'), ('🙋', '🙋 Raised Hand'), ('🙇', '🙇 Deep Bow'), ('🙌', '🙌 Praise Hands'), ('🙏', '🙏 Prayer Hands'), ('👤', '👤 Bust in Silhouette'), ('👥', '👥 Busts in Silhouette'), ('🚶', '🚶 Pedestrian'), ('🏃', '🏃 Runner'), ('💃', '💃 Dancer'), ('💏', '💏 Kiss'), ('💑', '💑 Heteronormative Couple'), ('👪', '👪 Hetero Family'), ('👫', '👫 Man & Woman'), ('👬', '👬 Two Men'), ('👭', '👭 Two Women'), ('💪', '💪 Biceps'), ('👈', '👈 Left Pointing Backhand'), ('👉', '👉 Right Pointing Backhand'), ('👆', '👆 Pointing Hand'), ('👇', '👇 Down Pointing Backhand'), ('✊', '✊ Power Hand'), ('✋', '✋ Palm Hand'), ('👊', '👊 Fist Hand'), ('👌', '👌 OK Hand'), ('👍', '👍 Thumbs Up'), ('👎', '👎 Thumbs Down'), ('👋', '👋 Waving Hand Sign'), ('👏', '👏 Clappy Hands'), ('👐', '👐 Open Hands Sign'), ('💅', '💅 Nail Polish'), ('👣', '👣 Footprints'), ('👀', '👀 Eyes'), ('👂', '👂 Ear'), ('👃', '👃 Nose'), ('👅', '👅 Lick'), ('👄', '👄 Mouth'), ('💋', '💋 Kiss Mark'), ('💘', '💘 Cupid Arrow'), ('💓', '💓 Beating Heart'), ('💔', '💔 Broken Heart'), ('💕', '💕 Two Hearts'), ('💖', '💖 Sparkly Heart'), ('💗', '💗 Growing Heart'), ('💙', '💙 Blue Heart'), ('💚', '💚 Green Heart'), ('💛', '💛 Yellow Heart'), ('💜', '💜 Purple Heart'), ('💝', '💝 Heart With Ribbon'), ('💞', '💞 Revolving Hearts'), ('💟', '💟 Heart Decoration'), ('💌', '💌 Love Letter'), ('💧', '💧 Droplet'), ('💤', '💤 ZZZ'), ('💢', '💢 Anger'), ('💣', '💣 Bomb'), ('💥', '💥 Explosion'), ('💦', '💦 Splashing'), ('💨', '💨 Dash'), ('💫', '💫 Shooting Star'), ('💬', '💬 Speech Bubble'), ('💭', '💭 Thought Bubble'), ('👓', '👓 Eyeglasses'), ('👔', '👔 Necktie'), ('👕', '👕 T-Shirt'), ('👖', '👖 Jeans'), ('👗', '👗 Dress'), ('👘', '👘 Kimono'), ('👙', '👙 Bikini'), ('👚', '👚 Womans Clothes'), ('👛', '👛 Purse'), ('👜', '👜 Handbag'), ('👝', '👝 Pouch'), ('🎒', '🎒 Backpack'), ('👞', '👞 Mans Shoe'), ('👟', '👟 Running Shoe'), ('👠', '👠 Heels'), ('👡', '👡 Womans Sandal'), ('👢', '👢 Womans Boots'), ('👑', '👑 Crown'), ('👒', \"👒 Lady's Hat\"), ('🎩', '🎩 Top Hat'), ('💄', '💄 Lipstick'), ('💍', '💍 Ring'), ('💎', '💎 Gem'), ('👹', '👹 Japanese Ogre'), ('👺', '👺 Japanese Goblin'), ('👻', '👻 Ghost'), ('💀', '💀 Skull'), ('👽', '👽 Alien'), ('👾', '👾 Space Invader'), ('💩', '💩 Pile of Poo'), ('🐵', '🐵 Monkey'), ('🙈', '🙈 See No Evil'), ('🙉', '🙉 Hear No Evil'), ('🙊', '🙊 Speak No Evil'), ('🐒', '🐒 Monkey'), ('🐶', '🐶 Dog'), ('🐕', '🐕 Dog'), ('🐩', '🐩 Poodle'), ('🐺', '🐺 Wolf'), ('🐱', '🐱 Cat'), ('😸', '😸 Grinning Cat with Smiling Eyes'), ('😹', '😹 Cat with Tears of Joy'), ('😺', '😺 Smiling Cat with Open Mouth'), ('😻', '😻 Smiling Cat with Heart Eyes'), ('😼', '😼 Cat with Wry Smile'), ('😽', '😽 Kissing Cat with Closed Eyes'), ('😾', '😾 Pouting Cat Face'), ('😿', '😿 Crying Cat Face'), ('🙀', '🙀 Weary Cat Face'), ('🐈', '🐈 Cat'), ('🐯', '🐯 Tiger'), ('🐅', '🐅 Tiger'), ('🐆', '🐆 Leopard'), ('🐴', '🐴 Horse'), ('🐎', '🐎 Horse'), ('🐮', '🐮 Cow'), ('🐂', '🐂 Ox'), ('🐃', '🐃 Water Buffalo'), ('🐄', '🐄 Cow'), ('🐷', '🐷 Pig'), ('🐖', '🐖 Pig'), ('🐗', '🐗 Boar'), ('🐽', '🐽 Pig Nose'), ('🐏', '🐏 Ram'), ('🐑', '🐑 Sheep'), ('🐐', '🐐 Goat'), ('🐪', '🐪 Dromedary Camel'), ('🐫', '🐫 Bactrian Camel'), ('🐘', '🐘 Elephant'), ('🐭', '🐭 Mouse'), ('🐁', '🐁 Mouse'), ('🐀', '🐀 Rat'), ('🐹', '🐹 Hamster'), ('🐰', '🐰 Rabbit'), ('🐇', '🐇 Rabbit'), ('🐻', '🐻 Bear'), ('🐨', '🐨 Koala'), ('🐼', '🐼 Panda'), ('🐾', '🐾 Paw Prints'), ('🐔', '🐔 Chicken'), ('🐓', '🐓 Rooster'), ('🐣', '🐣 Hatching Chick'), ('🐤', '🐤 Chick'), ('🐥', '🐥 Front-Facing Baby Chick'), ('🐦', '🐦 Bird'), ('🐧', '🐧 Penguin'), ('🐸', '🐸 Frog'), ('🐊', '🐊 Crocodile'), ('🐢', '🐢 Turtle'), ('🐍', '🐍 Snake'), ('🐲', '🐲 Dragon'), ('🐉', '🐉 Dragon'), ('🐳', '🐳 Whale'), ('🐋', '🐋 Whale'), ('🐬', '🐬 Dolphin'), ('🐟', '🐟 Fish'), ('🐠', '🐠 Fish'), ('🐡', '🐡 Blowfish'), ('🐙', '🐙 Octopus'), ('🐚', '🐚 Shell'), ('🐌', '🐌 Snail'), ('🐛', '🐛 Bug'), ('🐜', '🐜 Ant'), ('🐝', '🐝 Honeybee'), ('🐞', '🐞 Lady Beetle'), ('💐', '💐 Bouquet'), ('🌸', '🌸 Sakura'), ('💮', '💮 White Flower'), ('🌹', '🌹 Rose'), ('🌺', '🌺 Hibiscus'), ('🌻', '🌻 Sunflower'), ('🌼', '🌼 Blossom'), ('🌷', '🌷 Tulip'), ('🌱', '🌱 Seedling'), ('🌲', '🌲 Evergreen Tree'), ('🌳', '🌳 Deciduous Tree'), ('🌴', '🌴 Palm Tree'), ('🌵', '🌵 Cactus'), ('🌾', '🌾 Ear of Rice'), ('🌿', '🌿 Herb'), ('🍀', '🍀 Clover'), ('🍁', '🍁 Maple Leaf'), ('🍂', '🍂 Fallen Leaf'), ('🍃', '🍃 Blown Leaves'), ('🍇', '🍇 Grapes'), ('🍈', '🍈 Melon'), ('🍉', '🍉 Watermelon'), ('🍊', '🍊 Tangerine'), ('🍋', '🍋 Lemon'), ('🍌', '🍌 Banana'), ('🍍', '🍍 Pineapple'), ('🍎', '🍎 Red Apple'), ('🍏', '🍏 Green Apple'), ('🍐', '🍐 Pear'), ('🍑', '🍑 Peach'), ('🍒', '🍒 Cherries'), ('🍓', '🍓 Strawberry'), ('🍅', '🍅 Tomato'), ('🍆', '🍆 Eggplant'), ('🌽', '🌽 Corn'), ('🍄', '🍄 Mushroom'), ('🌰', '🌰 Chestnut'), ('🍞', '🍞 Bread'), ('🍖', '🍖 Meat on Bone'), ('🍗', '🍗 Poultry Leg'), ('🍔', '🍔 Hamburger'), ('🍟', '🍟 Fries'), ('🍕', '🍕 Pizza'), ('🍲', '🍲 Pot of Food'), ('🍱', '🍱 Bento Box'), ('🍘', '🍘 Rice Cracker'), ('🍙', '🍙 Rice Ball'), ('🍚', '🍚 Cooked Rice'), ('🍛', '🍛 Curry and Rice'), ('🍜', '🍜 Steaming Bowl'), ('🍝', '🍝 Spaghetti'), ('🍠', '🍠 Sweet Potato'), ('🍢', '🍢 Oden'), ('🍣', '🍣 Sushi'), ('🍤', '🍤 Fried Shrimp'), ('🍥', '🍥 Fish Cake With Swirl Design'), ('🍡', '🍡 Dango'), ('🍦', '🍦 Soft Ice Cream'), ('🍧', '🍧 Shaved Ice'), ('🍨', '🍨 Ice Cream'), ('🍩', '🍩 Doughnut'), ('🍪', '🍪 Cookie'), ('🎂', '🎂 Birthday Cake'), ('🍰', '🍰 Shortcake'), ('🍫', '🍫 Chocolate Bar'), ('🍬', '🍬 Candy'), ('🍭', '🍭 Lollipop'), ('🍮', '🍮 Custard'), ('🍯', '🍯 Honey Pot'), ('🍼', '🍼 Baby Bottle'), ('🍵', '🍵 Teacup Without Handle'), ('🍶', '🍶 Sake Bottle and Cup'), ('🍷', '🍷 Wine Glass'), ('🍸', '🍸 Cocktail Glass'), ('🍹', '🍹 Tropical Drink'), ('🍺', '🍺 Beer'), ('🍻', '🍻 Clinking Beer Mugs'), ('🍴', '🍴 Fork & Knife'), ('🍳', '🍳 Cooking'), ('🌍', '🌍 Earth Globe Europe-Africa'), ('🌎', '🌎 Earth Globe Americas'), ('🌏', '🌏 Earth Globe Asia-Australia'), ('🌐', '🌐 Globe With Meridians'), ('🌋', '🌋 Volcano'), ('🗻', '🗻 Mount Fuji'), ('🏠', '🏠 House'), ('🏡', '🏡 House With Garden'), ('🏢', '🏢 Office'), ('🏣', '🏣 Japanese Post Office'), ('🏤', '🏤 European Post Office'), ('🏥', '🏥 Hospital'), ('🏦', '🏦 Bank'), ('🏨', '🏨 Hotel'), ('🏩', '🏩 Love Hotel'), ('🏪', '🏪 Convenience Store'), ('🏫', '🏫 School'), ('🏬', '🏬 Department Store'), ('🏭', '🏭 Factory'), ('🏯', '🏯 Japanese Castle'), ('🏰', '🏰 Castle'), ('💒', '💒 Wedding'), ('🗼', '🗼 Tokyo Tower'), ('🗽', '🗽 Liberty'), ('🗾', '🗾 Silhouette of Japan'), ('🌁', '🌁 Foggy'), ('🌃', '🌃 Night With Stars'), ('🌄', '🌄 Sunrise Over Mountains'), ('🌅', '🌅 Sunrise'), ('🌆', '🌆 Cityscape at Dusk'), ('🌇', '🌇 Sunset Over Buildings'), ('🌉', '🌉 Bridge at Night'), ('🌊', '🌊 Big Wave'), ('🗿', '🗿 Moyai'), ('🌌', '🌌 Milky Way'), ('🎠', '🎠 Carousel Horse'), ('🎡', '🎡 Ferris Wheel'), ('🎢', '🎢 Roller Coaster'), ('💈', '💈 Barber Pole'), ('🎪', '🎪 Circus Tent'), ('🎭', '🎭 Performing Arts'), ('🎨', '🎨 Palette'), ('🎰', '🎰 Slot Machine'), ('🚂', '🚂 Steam Locomotive'), ('🚃', '🚃 Railcar'), ('🚄', '🚄 Fast Train'), ('🚅', '🚅 Fast Train with Bullet Nose'), ('🚆', '🚆 Train'), ('🚇', '🚇 Metro'), ('🚈', '🚈 Light Rail'), ('🚉', '🚉 Station'), ('🚊', '🚊 Tram'), ('🚝', '🚝 Monorail'), ('🚞', '🚞 Mountain Railway'), ('🚋', '🚋 Tram Car'), ('🚌', '🚌 Bus'), ('🚍', '🚍 Bus'), ('🚎', '🚎 Trolleybus'), ('🚏', '🚏 Bus Stop'), ('🚐', '🚐 Minibus'), ('🚑', '🚑 Ambulance'), ('🚒', '🚒 Fire Engine'), ('🚓', '🚓 Police Car'), ('🚔', '🚔 Police Car'), ('🚕', '🚕 Taxi'), ('🚖', '🚖 Oncoming Taxi'), ('🚗', '🚗 Automobile'), ('🚘', '🚘 Automobile'), ('🚙', '🚙 Recreational Vehicle'), ('🚚', '🚚 Truck'), ('🚛', '🚛 Articulated Lorry'), ('🚜', '🚜 Tractor'), ('🚲', '🚲 Bicycle'), ('🚳', '🚳 No Bicycles'), ('🚨', '🚨 Alert Light'), ('🔱', '🔱 Trident'), ('🚣', '🚣 Rowboat'), ('🚤', '🚤 Speedboat'), ('🚢', '🚢 Ship'), ('💺', '💺 Seat'), ('🚁', '🚁 Helicopter'), ('🚟', '🚟 Suspension Railway'), ('🚠', '🚠 Sky Tram'), ('🚡', '🚡 Aerial Tramway'), ('🚀', '🚀 Rocket'), ('🏧', '🏧 ATM'), ('🚮', '🚮 Put Litter in Its Place'), ('🚥', '🚥 Horizontal Traffic Light'), ('🚦', '🚦 Traffic Light'), ('🚧', '🚧 Hazard Sign'), ('🚫', '🚫 Prohibited'), ('🚭', '🚭 No Smoking'), ('🚯', '🚯 Do Not Litter'), ('🚰', '🚰 Tap Water'), ('🚱', '🚱 Non-Potable Water'), ('🚷', '🚷 No Pedestrians'), ('🚸', '🚸 Children Crossing'), ('🚹', '🚹 Mens Symbol'), ('🚺', '🚺 Womens Symbol'), ('🚻', '🚻 Restroom'), ('🚼', '🚼 Baby Symbol'), ('🚾', '🚾 Water Closet'), ('🛂', '🛂 Passport Control'), ('🛃', '🛃 Customs'), ('🛄', '🛄 Baggage Claim'), ('🛅', '🛅 Left Luggage'), ('🚪', '🚪 Door'), ('🚽', '🚽 Toilet'), ('🚿', '🚿 Shower'), ('🛀', '🛀 Bath'), ('🛁', '🛁 Bathtub'), ('⏳', '⏳ Hourglass'), ('⏰', '⏰ Alarm Clock'), ('⏱', '⏱ Stopwatch'), ('⏲', '⏲ Timer Clock'), ('🕛', \"🕛 Twelve O'Clock\"), ('🕧', '🕧 Half Past Twelve'), ('🕐', \"🕐 One O'Clock\"), ('🕜', '🕜 Half Past One'), ('🕑', \"🕑 Two O'Clock\"), ('🕝', '🕝 Half Past Two'), ('🕒', \"🕒 Three O'Clock\"), ('🕞', '🕞 Half Past Three'), ('🕓', \"🕓 Four O'Clock\"), ('🕟', '🕟 Half Past Four'), ('🕔', \"🕔 Five O'Clock\"), ('🕠', '🕠 Half Past Five'), ('🕕', \"🕕 Six O'Clock\"), ('🕡', '🕡 Half Past Six'), ('🕖', \"🕖 Seven O'Clock\"), ('🕢', '🕢 Half Past Seven'), ('🕗', \"🕗 Eight O'Clock\"), ('🕣', '🕣 Half Past Eight'), ('🕘', \"🕘 Nine O'Clock\"), ('🕤', '🕤 Half Past Nine'), ('🕙', \"🕙 Ten O'Clock\"), ('🕥', '🕥 Half Past Ten'), ('🕚', \"🕚 Eleven O'Clock\"), ('🕦', '🕦 Half Past Eleven'), ('⛎', '⛎ Ophiuchus'), ('🌑', '🌑 New Moon'), ('🌒', '🌒 Waxing Crescent'), ('🌓', '🌓 First Quarter Moon Symbol'), ('🌔', '🌔 Waxing Gibbous'), ('🌕', '🌕 Full Moon'), ('🌖', '🌖 Waning Gibbous'), ('🌗', '🌗 Half Moon'), ('🌘', '🌘 Waning Crescent'), ('🌙', '🌙 Crescent Moon'), ('🌚', '🌚 New Moon With Face'), ('🌛', '🌛 First Quarter Moon With Face'), ('🌜', '🌜 Last Quarter Moon With Face'), ('🌝', '🌝 Full Moon With Face'), ('🌞', '🌞 Sun'), ('🌀', '🌀 Cyclone'), ('🌈', '🌈 Rainbow'), ('🌂', '🌂 Umbrella'), ('🌟', '🌟 Glowing Star'), ('🌠', '🌠 Shooting Star'), ('🔥', '🔥 Fire'), ('🎃', '🎃 Jack-O-Lantern'), ('🎄', '🎄 Christmas Tree'), ('🎆', '🎆 Fireworks'), ('🎇', '🎇 Firework Sparkler'), ('✨', '✨ Sparkles'), ('🎈', '🎈 Balloon'), ('🎉', '🎉 Party Popper'), ('🎊', '🎊 Confetti Ball'), ('🎋', '🎋 Tanabata Tree'), ('🎌', '🎌 Crossed Flags'), ('🎍', '🎍 Pine Decoration'), ('🎎', '🎎 Japanese Dolls'), ('🎏', '🎏 Carp Streamer'), ('🎐', '🎐 Wind Chime'), ('🎑', '🎑 Moon Viewing Ceremony'), ('🎓', '🎓 Grad Hat'), ('🎯', '🎯 Bullseye'), ('🎴', '🎴 Flower Playing Cards'), ('🎀', '🎀 Ribbon'), ('🎁', '🎁 Wrapped Present'), ('🎫', '🎫 Ticket'), ('🏀', '🏀 Basketball'), ('🏈', '🏈 America Ball'), ('🏉', '🏉 Rugby Ball'), ('🎾', '🎾 Tennis'), ('🎱', '🎱 Billiards'), ('🎳', '🎳 Bowling'), ('🎣', '🎣 Fishing Pole and Fish'), ('🎽', '🎽 Running Shirt With Sash'), ('🎿', '🎿 Ski and Ski Boot'), ('🏂', '🏂 Snowboarder'), ('🏄', '🏄 Surfer'), ('🏇', '🏇 Horse Racing'), ('🏊', '🏊 Swimmer'), ('🚴', '🚴 Bicyclist'), ('🚵', '🚵 Mountain Bicyclist'), ('🏆', '🏆 Trophy'), ('🎮', '🎮 Video Game'), ('🎲', '🎲 Dice'), ('🃏', '🃏 Playing Card Black Joker'), ('🔇', '🔇 Speaker With Cancellation Stroke'), ('🔈', '🔈 Speaker'), ('🔉', '🔉 Speaker With One Sound Wave'), ('🔊', '🔊 Speaker With Three Sound Waves'), ('📢', '📢 Public Address Loudspeaker'), ('📣', '📣 Megaphone'), ('📯', '📯 Horn'), ('🔔', '🔔 Bell'), ('🔕', '🔕 No Bells'), ('🔀', '🔀 Shuffle'), ('🔁', '🔁 Repeat'), ('🔂', '🔂 Repeat Once'), ('⏩', '⏩ Fast Forward'), ('⏭', '⏭ Next Track'), ('⏯', '⏯ Play/Pause'), ('⏪', '⏪ Rewind'), ('⏮', '⏮ Previous Track'), ('🔼', '🔼 Up-Pointing Small Red Triangle'), ('⏫', '⏫ Up to Top'), ('🔽', '🔽 Down-Pointing Small Red Triangle'), ('⏬', '⏬ Down to Bottom'), ('🎼', '🎼 Musical Score'), ('🎵', '🎵 Musical Note'), ('🎶', '🎶 Music Notes'), ('🎤', '🎤 Microphone'), ('🎧', '🎧 Headphone'), ('🎷', '🎷 Saxophone'), ('🎸', '🎸 Guitar'), ('🎹', '🎹 Keyboard'), ('🎺', '🎺 Trumpet'), ('🎻', '🎻 Violin'), ('📻', '📻 Boom Box'), ('📱', '📱 Internet Phone'), ('📳', '📳 Vibration Mode'), ('📴', '📴 Mobile Phone Off'), ('📲', '📲 Download to Phone'), ('📵', '📵 No Mobile Phones'), ('📞', '📞 Old Phone'), ('🔟', '🔟 Keycap Ten'), ('📶', '📶 Antenna With Bars'), ('📟', '📟 Pager'), ('📠', '📠 Fax Machine'), ('🔋', '🔋 Battery'), ('🔌', '🔌 Plug'), ('💻', '💻 Personal Computer'), ('💽', '💽 Minidisc'), ('💾', '💾 Floppy'), ('💿', '💿 Compact Disc'), ('📀', '📀 DVD'), ('🎥', '🎥 Movie Camera'), ('🎦', '🎦 Cinema'), ('🎬', '🎬 Clapperboard'), ('📺', '📺 Television'), ('📷', '📷 Camera'), ('📹', '📹 Video Camera'), ('📼', '📼 Videocassette'), ('🔅', '🔅 Low Brightness Symbol'), ('🔆', '🔆 High Brightness Symbol'), ('🔍', '🔍 Magnifying Glass'), ('🔎', '🔎 Right-Pointing Magnifying Glass'), ('🔬', '🔬 Microscope'), ('🔭', '🔭 Telescope'), ('📡', '📡 Satellite Dish'), ('💡', '💡 Light Bulb'), ('🔦', '🔦 Electric Torch'), ('🏮', '🏮 Izakaya Lantern'), ('📔', '📔 Notebook With Decorative Cover'), ('📕', '📕 Closed Book'), ('📖', '📖 Open Book'), ('📗', '📗 Green Book'), ('📘', '📘 Blue Book'), ('📙', '📙 Orange Book'), ('📚', '📚 Books'), ('📓', '📓 Notebook'), ('📒', '📒 Ledger'), ('📃', '📃 Page With Curl'), ('📜', '📜 Scroll'), ('📄', '📄 Page Facing Up'), ('📰', '📰 Newspaper'), ('📑', '📑 Bookmark Tabs'), ('🔖', '🔖 Bookmark'), ('💰', '💰 Money Bag'), ('💴', '💴 Banknote With Yen Sign'), ('💵', '💵 Banknote With Dollar Sign'), ('💶', '💶 Banknote With Euro Sign'), ('💷', '💷 Banknote With Pound Sign'), ('💸', '💸 Flying Money'), ('💱', '💱 Currency Exchange'), ('💲', '💲 Heavy Dollar Sign'), ('💳', '💳 Credit Card'), ('💹', '💹 Upwards Trend in Yen'), ('📧', '📧 E-Mail Symbol'), ('📨', '📨 Incoming Envelope'), ('📩', '📩 Going Into Envelope'), ('📤', '📤 Outbox Tray'), ('📥', '📥 Inbox Tray'), ('📦', '📦 Package'), ('📫', '📫 Mailbox'), ('📪', '📪 Closed Mailbox With Lowered Flag'), ('📬', '📬 Open Mailbox With Raised Flag'), ('📭', '📭 Open Mailbox With Lowered Flag'), ('📮', '📮 Postbox'), ('📝', '📝 Memo'), ('💼', '💼 Briefcase'), ('📁', '📁 File Folder'), ('📂', '📂 Open File Folder'), ('📅', '📅 Calendar'), ('📆', '📆 Tear-Off Calendar'), ('📇', '📇 Card Index'), ('📈', '📈 Up Trend'), ('📉', '📉 Down Trend'), ('📊', '📊 Bar Chart'), ('📋', '📋 Clipboard'), ('📌', '📌 Pushpin'), ('📍', '📍 Location'), ('📎', '📎 Paperclip'), ('📏', '📏 Ruler'), ('📐', '📐 Triangle'), ('📛', '📛 Name Badge'), ('🔒', '🔒 Lock'), ('🔓', '🔓 Open Lock'), ('🔏', '🔏 Lock With Ink Pen'), ('🔐', '🔐 Closed Lock With Key'), ('🔑', '🔑 Key'), ('🔨', '🔨 Hammer'), ('🔧', '🔧 Spanner'), ('🔩', '🔩 Calipers'), ('🔗', '🔗 Link Symbol'), ('💉', '💉 Syringe'), ('💊', '💊 Pill'), ('🔪', '🔪 Chef Knife'), ('🔫', '🔫 Pistol'), ('🚬', '🚬 Durry'), ('🏁', '🏁 Start Flag'), ('🚩', '🚩 Triangular Flag on Post'), ('🇦🇫', '🇦🇫 Afghanistan'), ('🇦🇽', '🇦🇽 Åland Islands'), ('🇦🇱', '🇦🇱 Albania'), ('🇩🇿', '🇩🇿 Algeria'), ('🇦🇸', '🇦🇸 American Samoa'), ('🇦🇩', '🇦🇩 Andorra'), ('🇦🇴', '🇦🇴 Angola'), ('🇦🇮', '🇦🇮 Anguilla'), ('🇦🇶', '🇦🇶 Antarctica'), ('🇦🇬', '🇦🇬 Antigua & Barbuda'), ('🇦🇷', '🇦🇷 Argentina'), ('🇦🇲', '🇦🇲 Armenia'), ('🇦🇼', '🇦🇼 Aruba'), ('🇦🇨', '🇦🇨 Ascension Island'), ('🇦🇺', '🇦🇺 Australia'), ('🇦🇹', '🇦🇹 Austria'), ('🇦🇿', '🇦🇿 Azerbaijan'), ('🇧🇸', '🇧🇸 Bahamas'), ('🇧🇭', '🇧🇭 Bahrain'), ('🇧🇩', '🇧🇩 Bangladesh'), ('🇧🇧', '🇧🇧 Barbados'), ('🇧🇾', '🇧🇾 Belarus'), ('🇧🇪', '🇧🇪 Belgium'), ('🇧🇿', '🇧🇿 Belize'), ('🇧🇯', '🇧🇯 Benin'), ('🇧🇲', '🇧🇲 Bermuda'), ('🇧🇹', '🇧🇹 Bhutan'), ('🇧🇴', '🇧🇴 Bolivia'), ('🇧🇦', '🇧🇦 Bosnia & Herzegovina'), ('🇧🇼', '🇧🇼 Botswana'), ('🇧🇻', '🇧🇻 Bouvet Island'), ('🇧🇷', '🇧🇷 Brazil'), ('🇮🇴', '🇮🇴 British Indian Ocean Territory'), ('🇻🇬', '🇻🇬 British Virgin Islands'), ('🇧🇳', '🇧🇳 Brunei'), ('🇧🇬', '🇧🇬 Bulgaria'), ('🇧🇫', '🇧🇫 Burkina Faso'), ('🇧🇮', '🇧🇮 Burundi'), ('🇰🇭', '🇰🇭 Cambodia'), ('🇨🇲', '🇨🇲 Cameroon'), ('🇨🇦', '🇨🇦 Canada'), ('🇮🇨', '🇮🇨 Canary Islands'), ('🇨🇻', '🇨🇻 Cape Verde'), ('🇧🇶', '🇧🇶 Caribbean Netherlands'), ('🇰🇾', '🇰🇾 Cayman Islands'), ('🇨🇫', '🇨🇫 Central African Republic'), ('🇪🇦', '🇪🇦 Ceuta & Melilla'), ('🇹🇩', '🇹🇩 Chad'), ('🇨🇱', '🇨🇱 Chile'), ('🇨🇳', '🇨🇳 China'), ('🇨🇽', '🇨🇽 Christmas Island'), ('🇨🇵', '🇨🇵 Clipperton Island'), ('🇨🇨', '🇨🇨 Cocos Islands'), ('🇨🇴', '🇨🇴 Colombia'), ('🇰🇲', '🇰🇲 Comoros'), ('🇨🇬', '🇨🇬 Congo - Brazzaville'), ('🇨🇩', '🇨🇩 Congo - Kinshasa'), ('🇨🇰', '🇨🇰 Cook Islands'), ('🇨🇷', '🇨🇷 Costa Rica'), ('🇨🇮', '🇨🇮 Côte D’Ivoire'), ('🇭🇷', '🇭🇷 Croatia'), ('🇨🇺', '🇨🇺 Cuba'), ('🇨🇼', '🇨🇼 Curaçao'), ('🇨🇾', '🇨🇾 Cyprus'), ('🇨🇿', '🇨🇿 Czech Republic'), ('🇩🇰', '🇩🇰 Denmark'), ('🇩🇬', '🇩🇬 Diego Garcia'), ('🇩🇯', '🇩🇯 Djibouti'), ('🇩🇲', '🇩🇲 Dominica'), ('🇩🇴', '🇩🇴 Dominican Republic'), ('🇪🇨', '🇪🇨 Ecuador'), ('🇪🇬', '🇪🇬 Egypt'), ('🇸🇻', '🇸🇻 El Salvador'), ('🇬🇶', '🇬🇶 Equatorial Guinea'), ('🇪🇷', '🇪🇷 Eritrea'), ('🇪🇪', '🇪🇪 Estonia'), ('🇪🇹', '🇪🇹 Ethiopia'), ('🇪🇺', '🇪🇺 European Union'), ('🇫🇰', '🇫🇰 Falkland Islands'), ('🇫🇴', '🇫🇴 Faroe Islands'), ('🇫🇯', '🇫🇯 Fiji'), ('🇫🇮', '🇫🇮 Finland'), ('🇫🇷', '🇫🇷 France'), ('🇬🇫', '🇬🇫 French Guiana'), ('🇵🇫', '🇵🇫 French Polynesia'), ('🇹🇫', '🇹🇫 French Southern Territories'), ('🇬🇦', '🇬🇦 Gabon'), ('🇬🇲', '🇬🇲 Gambia'), ('🇬🇪', '🇬🇪 Georgia'), ('🇩🇪', '🇩🇪 Germany'), ('🇬🇭', '🇬🇭 Ghana'), ('🇬🇮', '🇬🇮 Gibraltar'), ('🇬🇷', '🇬🇷 Greece'), ('🇬🇱', '🇬🇱 Greenland'), ('🇬🇩', '🇬🇩 Grenada'), ('🇬🇵', '🇬🇵 Guadeloupe'), ('🇬🇺', '🇬🇺 Guam'), ('🇬🇹', '🇬🇹 Guatemala'), ('🇬🇬', '🇬🇬 Guernsey'), ('🇬🇳', '🇬🇳 Guinea'), ('🇬🇼', '🇬🇼 Guinea-Bissau'), ('🇬🇾', '🇬🇾 Guyana'), ('🇭🇹', '🇭🇹 Haiti'), ('🇭🇲', '🇭🇲 Heard & McDonald Islands'), ('🇭🇳', '🇭🇳 Honduras'), ('🇭🇰', '🇭🇰 Hong Kong'), ('🇭🇺', '🇭🇺 Hungary'), ('🇮🇸', '🇮🇸 Iceland'), ('🇮🇳', '🇮🇳 India'), ('🇮🇩', '🇮🇩 Indonesia'), ('🇮🇷', '🇮🇷 Iran'), ('🇮🇶', '🇮🇶 Iraq'), ('🇮🇪', '🇮🇪 Ireland'), ('🇮🇲', '🇮🇲 Isle of Man'), ('🇮🇱', '🇮🇱 Israel'), ('🇮🇹', '🇮🇹 Italy'), ('🇯🇲', '🇯🇲 Jamaica'), ('🇯🇵', '🇯🇵 Japan'), ('🇯🇪', '🇯🇪 Jersey'), ('🇯🇴', '🇯🇴 Jordan'), ('🇰🇿', '🇰🇿 Kazakhstan'), ('🇰🇪', '🇰🇪 Kenya'), ('🇰🇮', '🇰🇮 Kiribati'), ('🇽🇰', '🇽🇰 Kosovo'), ('🇰🇼', '🇰🇼 Kuwait'), ('🇰🇬', '🇰🇬 Kyrgyzstan'), ('🇱🇦', '🇱🇦 Laos'), ('🇱🇻', '🇱🇻 Latvia'), ('🇱🇧', '🇱🇧 Lebanon'), ('🇱🇸', '🇱🇸 Lesotho'), ('🇱🇷', '🇱🇷 Liberia'), ('🇱🇾', '🇱🇾 Libya'), ('🇱🇮', '🇱🇮 Liechtenstein'), ('🇱🇹', '🇱🇹 Lithuania'), ('🇱🇺', '🇱🇺 Luxembourg'), ('🇲🇴', '🇲🇴 Macau'), ('🇲🇰', '🇲🇰 Macedonia'), ('🇲🇬', '🇲🇬 Madagascar'), ('🇲🇼', '🇲🇼 Malawi'), ('🇲🇾', '🇲🇾 Malaysia'), ('🇲🇻', '🇲🇻 Maldives'), ('🇲🇱', '🇲🇱 Mali'), ('🇲🇹', '🇲🇹 Malta'), ('🇲🇭', '🇲🇭 Marshall Islands'), ('🇲🇶', '🇲🇶 Martinique'), ('🇲🇷', '🇲🇷 Mauritania'), ('🇲🇺', '🇲🇺 Mauritius'), ('🇾🇹', '🇾🇹 Mayotte'), ('🇲🇽', '🇲🇽 Mexico'), ('🇫🇲', '🇫🇲 Micronesia'), ('🇲🇩', '🇲🇩 Moldova'), ('🇲🇨', '🇲🇨 Monaco'), ('🇲🇳', '🇲🇳 Mongolia'), ('🇲🇪', '🇲🇪 Montenegro'), ('🇲🇸', '🇲🇸 Montserrat'), ('🇲🇦', '🇲🇦 Morocco'), ('🇲🇿', '🇲🇿 Mozambique'), ('🇲🇲', '🇲🇲 Myanmar'), ('🇳🇦', '🇳🇦 Namibia'), ('🇳🇷', '🇳🇷 Nauru'), ('🇳🇵', '🇳🇵 Nepal'), ('🇳🇱', '🇳🇱 Netherlands'), ('🇳🇨', '🇳🇨 New Caledonia'), ('🇳🇿', '🇳🇿 New Zealand'), ('🇳🇮', '🇳🇮 Nicaragua'), ('🇳🇪', '🇳🇪 Niger'), ('🇳🇬', '🇳🇬 Nigeria'), ('🇳🇺', '🇳🇺 Niue'), ('🇳🇫', '🇳🇫 Norfolk Island'), ('🇲🇵', '🇲🇵 Northern Mariana Islands'), ('🇰🇵', '🇰🇵 North Korea'), ('🇳🇴', '🇳🇴 Norway'), ('🇴🇲', '🇴🇲 Oman'), ('🇵🇰', '🇵🇰 Pakistan'), ('🇵🇼', '🇵🇼 Palau'), ('🇵🇸', '🇵🇸 Palestinian Territories'), ('🇵🇦', '🇵🇦 Panama'), ('🇵🇬', '🇵🇬 Papua New Guinea'), ('🇵🇾', '🇵🇾 Paraguay'), ('🇵🇪', '🇵🇪 Peru'), ('🇵🇭', '🇵🇭 Philippines'), ('🇵🇳', '🇵🇳 Pitcairn Islands'), ('🇵🇱', '🇵🇱 Poland'), ('🇵🇹', '🇵🇹 Portugal'), ('🇵🇷', '🇵🇷 Puerto Rico'), ('🇶🇦', '🇶🇦 Qatar'), ('🇷🇪', '🇷🇪 Réunion'), ('🇷🇴', '🇷🇴 Romania'), ('🇷🇺', '🇷🇺 Russia'), ('🇷🇼', '🇷🇼 Rwanda'), ('🇼🇸', '🇼🇸 Samoa'), ('🇸🇲', '🇸🇲 San Marino'), ('🇸🇹', '🇸🇹 São Tomé & Príncipe'), ('🇸🇦', '🇸🇦 Saudi Arabia'), ('🇸🇳', '🇸🇳 Senegal'), ('🇷🇸', '🇷🇸 Serbia'), ('🇸🇨', '🇸🇨 Seychelles'), ('🇸🇱', '🇸🇱 Sierra Leone'), ('🇸🇬', '🇸🇬 Singapore'), ('🇸🇽', '🇸🇽 Sint Maarten'), ('🇸🇰', '🇸🇰 Slovakia'), ('🇸🇮', '🇸🇮 Slovenia'), ('🇸🇧', '🇸🇧 Solomon Islands'), ('🇸🇴', '🇸🇴 Somalia'), ('🇿🇦', '🇿🇦 South Africa'), ('🇬🇸', '🇬🇸 South Georgia & South Sandwich Islands'), ('🇰🇷', '🇰🇷 South Korea'), ('🇸🇸', '🇸🇸 South Sudan'), ('🇪🇸', '🇪🇸 Spain'), ('🇱🇰', '🇱🇰 Sri Lanka'), ('🇧🇱', '🇧🇱 St. Barthélemy'), ('🇸🇭', '🇸🇭 St. Helena'), ('🇰🇳', '🇰🇳 St. Kitts & Nevis'), ('🇱🇨', '🇱🇨 St. Lucia'), ('🇲🇫', '🇲🇫 St. Martin'), ('🇵🇲', '🇵🇲 St. Pierre & Miquelon'), ('🇻🇨', '🇻🇨 St. Vincent & Grenadines'), ('🇸🇩', '🇸🇩 Sudan'), ('🇸🇷', '🇸🇷 Suriname'), ('🇸🇯', '🇸🇯 Svalbard & Jan Mayen'), ('🇸🇿', '🇸🇿 Swaziland'), ('🇸🇪', '🇸🇪 Sweden'), ('🇨🇭', '🇨🇭 Switzerland'), ('🇸🇾', '🇸🇾 Syria'), ('🇹🇼', '🇹🇼 Taiwan'), ('🇹🇯', '🇹🇯 Tajikistan'), ('🇹🇿', '🇹🇿 Tanzania'), ('🇹🇭', '🇹🇭 Thailand'), ('🇹🇱', '🇹🇱 Timor-Leste'), ('🇹🇬', '🇹🇬 Togo'), ('🇹🇰', '🇹🇰 Tokelau'), ('🇹🇴', '🇹🇴 Tonga'), ('🇹🇹', '🇹🇹 Trinidad & Tobago'), ('🇹🇦', '🇹🇦 Tristan Da Cunha'), ('🇹🇳', '🇹🇳 Tunisia'), ('🇹🇷', '🇹🇷 Turkey'), ('🇹🇲', '🇹🇲 Turkmenistan'), ('🇹🇨', '🇹🇨 Turks & Caicos Islands'), ('🇹🇻', '🇹🇻 Tuvalu'), ('🇺🇬', '🇺🇬 Uganda'), ('🇺🇦', '🇺🇦 Ukraine'), ('🇦🇪', '🇦🇪 United Arab Emirates'), ('🇬🇧', '🇬🇧 United Kingdom'), ('🇺🇸', '🇺🇸 United States'), ('🇺🇾', '🇺🇾 Uruguay'), ('🇺🇲', '🇺🇲 U.S. Outlying Islands'), ('🇻🇮', '🇻🇮 U.S. Virgin Islands'), ('🇺🇿', '🇺🇿 Uzbekistan'), ('🇻🇺', '🇻🇺 Vanuatu'), ('🇻🇦', '🇻🇦 Vatican City'), ('🇻🇪', '🇻🇪 Venezuela'), ('🇻🇳', '🇻🇳 Vietnam'), ('🇼🇫', '🇼🇫 Wallis & Futuna'), ('🇪🇭', '🇪🇭 Western Sahara'), ('🇾🇪', '🇾🇪 Yemen'), ('🇿🇲', '🇿🇲 Zambia'), ('🇿🇼', '🇿🇼 Zimbabwe'), ('🔃', '🔃 Clockwise Arrows'), ('🔄', '🔄 Anticlockwise Arrows'), ('🔙', '🔙 Back'), ('🔚', '🔚 End'), ('🔛', '🔛 On'), ('🔜', '🔜 Soon'), ('🔝', '🔝 Top'), ('🔰', '🔰 Beginner'), ('🔮', '🔮 Crystal Ball'), ('🔯', '🔯 Six Pointed Star With Middle Dot'), ('✅', '✅ White Heavy Check Mark'), ('❌', '❌ Cross'), ('❎', '❎ Negative Squared Cross Mark'), ('➕', '➕ Heavy Plus Sign'), ('➖', '➖ Heavy Minus Sign'), ('➗', '➗ Heavy Division Sign'), ('➰', '➰ Curly Loop'), ('➿', '➿ Double Curly Loop'), ('❓', '❓ Question'), ('❔', '❔ White Question Mark Ornament'), ('❕', '❕ White Exclamation Mark Ornament'), ('💯', '💯 Hundred Points'), ('🔞', '🔞 Over Eighteen'), ('🔠', '🔠 Latin Capital Letters'), ('🔡', '🔡 Latin Small Letters'), ('🔢', '🔢 Numbers'), ('🔣', '🔣 Symbols'), ('🔤', '🔤 Latin Letters'), ('🅰️', '🅰️ Squared A'), ('🆎', '🆎 Squared AB'), ('🅱️', '🅱️ Squared B'), ('🆑', '🆑 Squared CL'), ('🆒', '🆒 Cool Square'), ('🆓', '🆓 Squared Free'), ('🆔', '🆔 Squared ID'), ('🆕', '🆕 New Square'), ('🆖', '🆖 Squared NG'), ('🅾️', '🅾️ Squared O'), ('🆗', '🆗 OK Square'), ('🆘', '🆘 SOS Square'), ('🆙', '🆙 Squared Up!'), ('🆚', '🆚 Squared Vs'), ('🈁', '🈁 Squared Katakana Koko'), ('🈂️', '🈂️ Squared Katakana Sa'), ('🈷️', '🈷️ Squared 月 (Moon)'), ('🈶', '🈶 Squared 有 (Have)'), ('🉐', '🉐 Circled Ideograph Advantage'), ('🈹', '🈹 Squared CJK Unified Ideograph-5272'), ('🈲', '🈲 Squared CJK Unified Ideograph-7981'), ('🉑', '🉑 Circled 可 (Accept)'), ('🈸', '🈸 Squared CJK Unified Ideograph-7533'), ('🈴', '🈴 Squared CJK Unified Ideograph-5408'), ('🈳', '🈳 Squared CJK Unified Ideograph-7a7a'), ('🈺', '🈺 Squared CJK Unified Ideograph-55b6'), ('🈵', '🈵 Squared CJK Unified Ideograph-6e80'), ('🔶', '🔶 Large Orange Diamond'), ('🔷', '🔷 Large Blue Diamond'), ('🔸', '🔸 Small Orange Diamond'), ('🔹', '🔹 Small Blue Diamond'), ('🔺', '🔺 Up-Pointing Red Triangle'), ('🔻', '🔻 Down-Pointing Red Triangle'), ('💠', '💠 Diamond Shape With a Dot Inside'), ('🔘', '🔘 Radio Button'), ('🔲', '🔲 Black Square Button'), ('🔳', '🔳 White Square Button'), ('🔴', '🔴 Large Red Circle'), ('🔵', '🔵 Large Blue Circle'), ('😀', '😀 Grinning'), ('😗', '😗 Kissing'), ('😙', '😙 Smooch'), ('😑', '😑 True Neutral'), ('😮', '😮 Stunned'), ('😯', '😯 Hushed'), ('😴', '😴 Sleeping'), ('😛', '😛 Tongue'), ('😕', '😕 Confused'), ('😟', '😟 Worried'), ('😦', '😦 Frowning Face With Open Mouth'), ('😧', '😧 Anguished'), ('😬', '😬 Grimacing'), ('🙂', '🙂 Slightly Smiling'), ('🙁', '🙁 Slightly Frowning'), ('🕵', '🕵 Spy'), ('🗣', '🗣 Speaking Head in Silhouette'), ('🕴', '🕴 Man in Business Suit Levitating'), ('🖕', '🖕 Middle Finger'), ('🖖', '🖖 Vulcan Hand'), ('🖐', '🖐 Raised Hand With Fingers Splayed'), ('👁', '👁 Eye'), ('🕳', '🕳 Hole'), ('🗯', '🗯 Right Anger Bubble'), ('🕶', '🕶 Sunglasses'), ('🛍', '🛍 Shopping'), ('🐿', '🐿 Chipmunk'), ('🕊', '🕊 Peace Dove'), ('🕷', '🕷 Spider'), ('🕸', '🕸 Web'), ('🏵', '🏵 Rosette'), ('🌶', '🌶 Chilli'), ('🍽', '🍽 Fork and Knife With Plate'), ('🗺', '🗺 World Map'), ('🏔', '🏔 Snow Capped Mountain'), ('🏕', '🏕 Camping'), ('🏖', '🏖 Beach'), ('🏜', '🏜 Desert'), ('🏝', '🏝 Desert Island'), ('🏞', '🏞 National Park'), ('🏟', '🏟 Stadium'), ('🏛', '🏛 Architecture'), ('🏗', '🏗 Building Construction'), ('🏘', '🏘 House Buildings'), ('🏙', '🏙 Cityscape'), ('🏚', '🏚 Derelict House Building'), ('🖼', '🖼 Frame With Picture'), ('🛢', '🛢 Oil Drum'), ('🛣', '🛣 Motorway'), ('🛤', '🛤 Railway Track'), ('🛳', '🛳 Passenger Ship'), ('🛥', '🛥 Boat'), ('🛩', '🛩 Airplane'), ('🛫', '🛫 Airplane Departure'), ('🛬', '🛬 Airplane Arriving'), ('🛰', '🛰 Satellite'), ('🛎', '🛎 Service Bell'), ('🛌', '🛌 Bed'), ('🛏', '🛏 Bed'), ('🛋', '🛋 Couch and Lamp'), ('🕰', '🕰 Mantelpiece'), ('🌡', '🌡 Thermometer'), ('🌤', '🌤 Small Cloud'), ('🌥', '🌥 White Sun Behind Cloud'), ('🌦', '🌦 White Sun Behind Cloud With Rain'), ('🌧', '🌧 Cloud With Rain'), ('🌨', '🌨 Cloud With Snow'), ('🌩', '🌩 Lightning'), ('🌪', '🌪 Tornado'), ('🌫', '🌫 Fog'), ('🌬', '🌬 Blowing'), ('🎖', '🎖 Medal'), ('🎗', '🎗 Ribbon'), ('🎞', '🎞 Film'), ('🎟', '🎟 Admission Tickets'), ('🏷', '🏷 Label'), ('🏌', '🏌 Golfer'), ('🏋', '🏋 Lifting'), ('🏎', '🏎 Racing Car'), ('🏍', '🏍 Racing Motorcycle'), ('🏅', '🏅 Medal'), ('🕹', '🕹 Joystick'), ('⏸', '⏸ Double Vertical Bar'), ('⏹', '⏹ Black Square for Stop'), ('⏺', '⏺ Black Circle for Record'), ('🎙', '🎙 Microphone'), ('🎚', '🎚 Level Slider'), ('🎛', '🎛 Control Knobs'), ('🖥', '🖥 Desktop'), ('🖨', '🖨 Printer'), ('🖱', '🖱 Three Button Mouse'), ('🖲', '🖲 Trackball'), ('📽', '📽 Film Projector'), ('📸', '📸 Camera With Flash'), ('🕯', '🕯 Candle'), ('🗞', '🗞 Newspaper'), ('🗳', '🗳 Ballot Box With Ballot'), ('🖋', '🖋 Fancy Pen'), ('🖊', '🖊 Lower Left Ballpoint Pen'), ('🖌', '🖌 Lower Left Paintbrush'), ('🖍', '🖍 Lower Left Crayon'), ('🗂', '🗂 Card Index Dividers'), ('🗒', '🗒 Spiral Note Pad'), ('🗓', '🗓 Spiral Calendar Pad'), ('🖇', '🖇 Linked Paperclips'), ('🗃', '🗃 Card File Box'), ('🗄', '🗄 File Cabinet'), ('🗑', '🗑 Wastebasket'), ('🗝', '🗝 Old Key'), ('🛠', '🛠 Tools'), ('🗜', '🗜 Compression'), ('🗡', '🗡 Dagger'), ('🛡', '🛡 Shield'), ('🏳', '🏳 White Flag'), ('🏴', '🏴 Black Flag'), ('🕉', '🕉 Om Symbol'), ('🗨', '🗨 Left Speech Bubble'), ('🤗', '🤗 Hugging'), ('🤔', '🤔 Thinking'), ('🙄', '🙄 Rolling Eyes'), ('🤐', '🤐 Hushed'), ('🤓', '🤓 Nerd'), ('🙃', '🙃 Upside Down'), ('🤒', '🤒 Sick'), ('🤕', '🤕 Hurt'), ('🤑', '🤑 Money'), ('🏻', '🏻 Emoji Modifier 1-2'), ('🏼', '🏼 Emoji Modifier 3'), ('🏽', '🏽 Emoji Modifier 4'), ('🏾', '🏾 Emoji Modifier 5'), ('🏿', '🏿 Emoji Modifier 6'), ('🤘', '🤘 Rock On'), ('📿', '📿 Prayer Beads'), ('🤖', '🤖 Robot'), ('🦁', '🦁 Lion'), ('🦄', '🦄 Unicorn'), ('🦃', '🦃 Turkey'), ('🦀', '🦀 Crab'), ('🦂', '🦂 Scorpion'), ('🧀', '🧀 Cheese'), ('🌭', '🌭 Hot Dog'), ('🌮', '🌮 Taco'), ('🌯', '🌯 Burrito'), ('🍿', '🍿 Popcorn'), ('🍾', '🍾 Popping Cork'), ('🏺', '🏺 Amphora'), ('🛐', '🛐 Place of Worship'), ('🕋', '🕋 Kaaba'), ('🕌', '🕌 Mosque'), ('🕍', '🕍 Synagogue'), ('🕎', '🕎 Menorah'), ('🏏', '🏏 Cricket'), ('🏐', '🏐 Volleyball'), ('🏑', '🏑 Field Hockey'), ('🏒', '🏒 Ice Hockey'), ('🏓', '🏓 Table Tennis'), ('🏸', '🏸 Badminton'), ('🏹', '🏹 Archer'), ('🤣', '🤣 ROFL Face'), ('🤤', '🤤 Drooling'), ('🤢', '🤢 Nauseated'), ('🤧', '🤧 Sneezing'), ('🤠', '🤠 Cowboy'), ('🤡', '🤡 Clown'), ('🤥', '🤥 Lying'), ('🤴', '🤴 Prince'), ('🤵', '🤵 Tuxedo Man'), ('🤰', '🤰 Pregnant'), ('🤶', '🤶 Mrs. Claus'), ('🤦', '🤦 Facepalm'), ('🤷', '🤷 Shrugging'), ('🕺', '🕺 Man Dancing'), ('🤺', '🤺 Fencing'), ('🤸', '🤸 Cartwheel'), ('🤼', '🤼 Wrestling'), ('🤽', '🤽 Water Polo'), ('🤾', '🤾 Handball'), ('🤹', '🤹 Juggling'), ('🤳', '🤳 Selfie'), ('🤞', '🤞 Luck Hand'), ('🤙', '🤙 Call Me Hand'), ('🤛', '🤛 Left-Facing Fist'), ('🤜', '🤜 Right-Facing Fist'), ('🤚', '🤚 Raised Back of Hand'), ('🤝', '🤝 Handshake'), ('🖤', '🖤 Black Heart'), ('🦍', '🦍 Gorilla'), ('🦊', '🦊 Fox'), ('🦌', '🦌 Deer'), ('🦏', '🦏 Rhinoceros'), ('🦇', '🦇 Bat'), ('🦅', '🦅 Eagle'), ('🦆', '🦆 Duck'), ('🦉', '🦉 Owl'), ('🦎', '🦎 Lizard'), ('🦈', '🦈 Shark'), ('🦐', '🦐 Shrimp'), ('🦑', '🦑 Squid'), ('🦋', '🦋 Butterfly'), ('🥀', '🥀 Wilted'), ('🥝', '🥝 Kiwifruit'), ('🥑', '🥑 Avocado'), ('🥔', '🥔 Potato'), ('🥕', '🥕 Carrot'), ('🥒', '🥒 Cucumber'), ('🥜', '🥜 Peanuts'), ('🥐', '🥐 Croissant'), ('🥖', '🥖 Baguette'), ('🥞', '🥞 Pancakes'), ('🥓', '🥓 Bacon'), ('🥙', '🥙 Stuffed Flatbread'), ('🥚', '🥚 Egg'), ('🥘', '🥘 Shallow Pan'), ('🥗', '🥗 Salad'), ('🥛', '🥛 Milk'), ('🥂', '🥂 Clinking Glasses'), ('🥃', '🥃 Tumbler'), ('🥄', '🥄 Spoon'), ('🛴', '🛴 Scooter'), ('🛵', '🛵 Motor Scooter'), ('🛑', '🛑 Stop Sign'), ('🛶', '🛶 Canoe'), ('🥇', '🥇 Gold Medal'), ('🥈', '🥈 Silver Medal'), ('🥉', '🥉 Bronze Medal'), ('🥊', '🥊 Boxing'), ('🥋', '🥋 Martial Arts'), ('🥅', '🥅 Goal Net'), ('🥁', '🥁 Drum'), ('🛒', '🛒 Shopping Cart'), ('\\U0001f929', '\\U0001f929 Star Struck'), ('\\U0001f928', '\\U0001f928 Raised Eyebrow'), ('\\U0001f92f', '\\U0001f92f Mind Blown'), ('\\U0001f92a', '\\U0001f92a Zany Face'), ('\\U0001f92c', '\\U0001f92c Swear Face'), ('\\U0001f92e', '\\U0001f92e Vomiting'), ('\\U0001f92b', '\\U0001f92b Shushing'), ('\\U0001f92d', '\\U0001f92d Hand Over Mouth'), ('\\U0001f9d0', '\\U0001f9d0 Monocle'), ('\\U0001f9d2', '\\U0001f9d2 Child'), ('\\U0001f9d1', '\\U0001f9d1 Adult'), ('\\U0001f9d3', '\\U0001f9d3 Older Adult'), ('\\U0001f9d5', '\\U0001f9d5 Headscarf'), ('\\U0001f9d4', '\\U0001f9d4 Bearded Person'), ('\\U0001f931', '\\U0001f931 Breast Feeding'), ('\\U0001f9d9', '\\U0001f9d9 Mage'), ('\\U0001f9da', '\\U0001f9da Fairy'), ('\\U0001f9db', '\\U0001f9db Vampire'), ('\\U0001f9dc', '\\U0001f9dc Merperson'), ('\\U0001f9dd', '\\U0001f9dd Elf'), ('\\U0001f9de', '\\U0001f9de Genie'), ('\\U0001f9df', '\\U0001f9df Zombie'), ('\\U0001f9d6', '\\U0001f9d6 Steamy Room'), ('\\U0001f9d7', '\\U0001f9d7 Person Climbing'), ('\\U0001f9d8', '\\U0001f9d8 Lotus Position'), ('\\U0001f91f', '\\U0001f91f Love-You Gesture'), ('\\U0001f932', '\\U0001f932 Palms Up Together'), ('\\U0001f9e0', '\\U0001f9e0 Brain'), ('\\U0001f9e1', '\\U0001f9e1 Orange Heart'), ('\\U0001f9e3', '\\U0001f9e3 Scarf'), ('\\U0001f9e4', '\\U0001f9e4 Gloves'), ('\\U0001f9e5', '\\U0001f9e5 Coat'), ('\\U0001f9e6', '\\U0001f9e6 Socks'), ('\\U0001f9e2', '\\U0001f9e2 Billed Cap'), ('\\U0001f993', '\\U0001f993 Zebra'), ('\\U0001f992', '\\U0001f992 Giraffe'), ('\\U0001f994', '\\U0001f994 Hedgehog'), ('\\U0001f995', '\\U0001f995 Long Neck'), ('\\U0001f996', '\\U0001f996 T-Rex'), ('\\U0001f997', '\\U0001f997 Cricket'), ('\\U0001f965', '\\U0001f965 Coconut'), ('\\U0001f966', '\\U0001f966 Broccoli'), ('\\U0001f968', '\\U0001f968 Pretzel'), ('\\U0001f969', '\\U0001f969 Cut of Meat'), ('\\U0001f96a', '\\U0001f96a Sandwich'), ('\\U0001f963', '\\U0001f963 Bowl With Spoon'), ('\\U0001f96b', '\\U0001f96b Canned'), ('\\U0001f95f', '\\U0001f95f Dumpling'), ('\\U0001f960', '\\U0001f960 Fortune Cookie'), ('\\U0001f961', '\\U0001f961 Takeout Box'), ('\\U0001f967', '\\U0001f967 Pie'), ('\\U0001f964', '\\U0001f964 Cup With Straw'), ('\\U0001f962', '\\U0001f962 Chopsticks'), ('\\U0001f6f8', '\\U0001f6f8 Flying Saucer'), ('\\U0001f6f7', '\\U0001f6f7 Sled'), ('\\U0001f94c', '\\U0001f94c Curling')], default=None, max_length=2, null=True, verbose_name='emoji'),\n        ),",
        "detail": "tabbycat.participants.migrations.0006_auto_20180807_2132",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.participants.migrations.0007_auto_20180318_2355",
        "description": "tabbycat.participants.migrations.0007_auto_20180318_2355",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('participants', '0006_auto_20180312_2218'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='team',\n            name='emoji',\n            field=models.CharField(blank=True, choices=[('☁️', '☁️'), ('❄️', '❄️'), ('♠️', '♠️'), ('♥️', '♥️'), ('♦️', '♦️'), ('♣️', '♣️'), ('✉️', '✉️'), ('✂️', '✂️'), ('☕', '☕'), ('⬛', '⬛'), ('⬜', '⬜'), ('⛑', '⛑'), ('⛰', '⛰'), ('⛪', '⛪'), ('⛺', '⛺'), ('⛵', '⛵'), ('⛔', '⛔'), ('⛅', '⛅'), ('⛈', '⛈'), ('⛱', '⛱'), ('⛄', '⛄'), ('⚽', '⚽'), ('⛸', '⛸'), ('⛏', '⛏'), ('😂', '😂'), ('😆', '😆'), ('😉', '😉'), ('😊', '😊'), ('😎', '😎'), ('😍', '😍'), ('😘', '😘'), ('😇', '😇'), ('😐', '😐'), ('😏', '😏'), ('😣', '😣'), ('😥', '😥'), ('😜', '😜'), ('😓', '😓'), ('😖', '😖'), ('😷', '😷'), ('😲', '😲'), ('😭', '😭'), ('😱', '😱'), ('😳', '😳'), ('😵', '😵'), ('😡', '😡'), ('👿', '👿'), ('👨', '👨'), ('👩', '👩'), ('👴', '👴'), ('👵', '👵'), ('👶', '👶'), ('👮', '👮'), ('👷', '👷'), ('👸', '👸'), ('💂', '💂'), ('🎅', '🎅'), ('👼', '👼'), ('👯', '👯'), ('👰', '👰'), ('🙅', '🙅'), ('🙆', '🙆'), ('💁', '💁'), ('🙋', '🙋'), ('🙇', '🙇'), ('🙌', '🙌'), ('🙏', '🙏'), ('💃', '💃'), ('👪', '👪'), ('👫', '👫'), ('👬', '👬'), ('👭', '👭'), ('💪', '💪'), ('👆', '👆'), ('✊', '✊'), ('✋', '✋'), ('👊', '👊'), ('👌', '👌'), ('👍', '👍'), ('👎', '👎'), ('👏', '👏'), ('💅', '💅'), ('👣', '👣'), ('👂', '👂'), ('👃', '👃'), ('👅', '👅'), ('👄', '👄'), ('💘', '💘'), ('💔', '💔'), ('💖', '💖'), ('💌', '💌'), ('💧', '💧'), ('💤', '💤'), ('💣', '💣'), ('💥', '💥'), ('💦', '💦'), ('💨', '💨'), ('💫', '💫'), ('👓', '👓'), ('👔', '👔'), ('👙', '👙'), ('👜', '👜'), ('👟', '👟'), ('👠', '👠'), ('👒', '👒'), ('🎩', '🎩'), ('💄', '💄'), ('💍', '💍'), ('💎', '💎'), ('👻', '👻'), ('💀', '💀'), ('👽', '👽'), ('👾', '👾'), ('💩', '💩'), ('🐵', '🐵'), ('🙈', '🙈'), ('🙉', '🙉'), ('🙊', '🙊'), ('🐶', '🐶'), ('🐺', '🐺'), ('🐯', '🐯'), ('🐴', '🐴'), ('🐮', '🐮'), ('🐑', '🐑'), ('🐭', '🐭'), ('🐹', '🐹'), ('🐰', '🐰'), ('🐻', '🐻'), ('🐨', '🐨'), ('🐼', '🐼'), ('🐔', '🐔'), ('🐣', '🐣'), ('🐤', '🐤'), ('🐦', '🐦'), ('🐧', '🐧'), ('🐸', '🐸'), ('🐢', '🐢'), ('🐍', '🐍'), ('🐲', '🐲'), ('🐳', '🐳'), ('🐬', '🐬'), ('🐠', '🐠'), ('🐙', '🐙'), ('🐚', '🐚'), ('🐌', '🐌'), ('🐛', '🐛'), ('🐝', '🐝'), ('💐', '💐'), ('🌸', '🌸'), ('🌹', '🌹'), ('🌻', '🌻'), ('🌷', '🌷'), ('🌱', '🌱'), ('🌴', '🌴'), ('🌵', '🌵'), ('🌿', '🌿'), ('🍀', '🍀'), ('🍁', '🍁'), ('🍇', '🍇'), ('🍉', '🍉'), ('🍋', '🍋'), ('🍌', '🍌'), ('🍍', '🍍'), ('🍎', '🍎'), ('🍑', '🍑'), ('🍒', '🍒'), ('🍓', '🍓'), ('🍆', '🍆'), ('🌽', '🌽'), ('🍄', '🍄'), ('🍞', '🍞'), ('🍔', '🍔'), ('🍟', '🍟'), ('🍕', '🍕'), ('🍙', '🍙'), ('🍩', '🍩'), ('🍪', '🍪'), ('🍰', '🍰'), ('🍭', '🍭'), ('🍼', '🍼'), ('🍷', '🍷'), ('🍹', '🍹'), ('🍺', '🍺'), ('🍴', '🍴'), ('🌋', '🌋'), ('🏠', '🏠'), ('🏢', '🏢'), ('🏥', '🏥'), ('🏰', '🏰'), ('🌊', '🌊'), ('🎡', '🎡'), ('🎢', '🎢'), ('🎨', '🎨'), ('🚃', '🚃'), ('🚄', '🚄'), ('🚝', '🚝'), ('🚍', '🚍'), ('🚔', '🚔'), ('🚘', '🚘'), ('🚲', '🚲'), ('🚨', '🚨'), ('🚣', '🚣'), ('🚁', '🚁'), ('🚀', '🚀'), ('🚦', '🚦'), ('🚧', '🚧'), ('🚫', '🚫'), ('🚷', '🚷'), ('🚻', '🚻'), ('🚽', '🚽'), ('🚿', '🚿'), ('🛀', '🛀'), ('⏳', '⏳'), ('🌑', '🌑'), ('🌕', '🌕'), ('🌗', '🌗'), ('🌞', '🌞'), ('🌈', '🌈'), ('🌟', '🌟'), ('🔥', '🔥'), ('🎃', '🎃'), ('🎄', '🎄'), ('🎈', '🎈'), ('🎉', '🎉'), ('🎓', '🎓'), ('🎯', '🎯'), ('🎀', '🎀'), ('🏀', '🏀'), ('🏈', '🏈'), ('🎾', '🎾'), ('🎱', '🎱'), ('🏊', '🏊'), ('🎮', '🎮'), ('🎲', '🎲'), ('📣', '📣'), ('📯', '📯'), ('🔔', '🔔'), ('🎶', '🎶'), ('🎤', '🎤'), ('🎹', '🎹'), ('🎺', '🎺'), ('🎻', '🎻'), ('📻', '📻'), ('📱', '📱'), ('📞', '📞'), ('🔋', '🔋'), ('🔌', '🔌'), ('💾', '💾'), ('💿', '💿'), ('🎬', '🎬'), ('📷', '📷'), ('🔍', '🔍'), ('🔭', '🔭'), ('💡', '💡'), ('📕', '📕'), ('📰', '📰'), ('💰', '💰'), ('💸', '💸'), ('📦', '📦'), ('📫', '📫'), ('💼', '💼'), ('📅', '📅'), ('📎', '📎'), ('📏', '📏'), ('📐', '📐'), ('🔒', '🔒'), ('🔑', '🔑'), ('🔧', '🔧'), ('🔩', '🔩'), ('💉', '💉'), ('💊', '💊'), ('🔪', '🔪'), ('🔫', '🔫'), ('🚬', '🚬'), ('🏁', '🏁'), ('🔮', '🔮'), ('❌', '❌'), ('❓', '❓'), ('🔞', '🔞'), ('🆒', '🆒'), ('🆗', '🆗'), ('🆘', '🆘'), ('😙', '😙'), ('😑', '😑'), ('😮', '😮'), ('😴', '😴'), ('😛', '😛'), ('😧', '😧'), ('😬', '😬'), ('🕵', '🕵'), ('🖕', '🖕'), ('🖖', '🖖'), ('👁', '👁'), ('🛍', '🛍'), ('🐿', '🐿'), ('🕊', '🕊'), ('🕷', '🕷'), ('🕸', '🕸'), ('🏵', '🏵'), ('🌶', '🌶'), ('🏕', '🏕'), ('🏛', '🏛'), ('🛢', '🛢'), ('🛥', '🛥'), ('🛩', '🛩'), ('🛎', '🛎'), ('🕰', '🕰'), ('🌡', '🌡'), ('🌩', '🌩'), ('🌪', '🌪'), ('🌬', '🌬'), ('🎖', '🎖'), ('🎗', '🎗'), ('🎞', '🎞'), ('🏷', '🏷'), ('🏋', '🏋'), ('🏅', '🏅'), ('🕹', '🕹'), ('🎙', '🎙'), ('🖥', '🖥'), ('🖨', '🖨'), ('🖲', '🖲'), ('📸', '📸'), ('🕯', '🕯'), ('🗞', '🗞'), ('🖋', '🖋'), ('🗑', '🗑'), ('🛠', '🛠'), ('🗡', '🗡'), ('🛡', '🛡'), ('🏳', '🏳'), ('🏴', '🏴'), ('🤗', '🤗'), ('🤔', '🤔'), ('🙄', '🙄'), ('🤐', '🤐'), ('🤓', '🤓'), ('🙃', '🙃'), ('🤒', '🤒'), ('🤕', '🤕'), ('🤑', '🤑'), ('🤘', '🤘'), ('📿', '📿'), ('🤖', '🤖'), ('🦁', '🦁'), ('🦄', '🦄'), ('🦀', '🦀'), ('🦂', '🦂'), ('🧀', '🧀'), ('🌭', '🌭'), ('🌮', '🌮'), ('🌯', '🌯'), ('🍿', '🍿'), ('🍾', '🍾'), ('🏏', '🏏'), ('🏐', '🏐'), ('🏓', '🏓'), ('🏹', '🏹'), ('🤣', '🤣'), ('🤤', '🤤'), ('🤢', '🤢'), ('🤧', '🤧'), ('🤠', '🤠'), ('🤡', '🤡'), ('🤥', '🤥'), ('🤴', '🤴'), ('🤵', '🤵'), ('🤰', '🤰'), ('🤶', '🤶'), ('🤦', '🤦'), ('🤷', '🤷'), ('🕺', '🕺'), ('🤺', '🤺'), ('🤸', '🤸'), ('🤼', '🤼'), ('🤹', '🤹'), ('🤳', '🤳'), ('🤞', '🤞'), ('🤙', '🤙'), ('🤜', '🤜'), ('🤝', '🤝'), ('🖤', '🖤'), ('🦊', '🦊'), ('🦇', '🦇'), ('🦅', '🦅'), ('🦆', '🦆'), ('🦉', '🦉'), ('🦎', '🦎'), ('🦈', '🦈'), ('🦐', '🦐'), ('🦑', '🦑'), ('🦋', '🦋'), ('🥝', '🥝'), ('🥑', '🥑'), ('🥔', '🥔'), ('🥕', '🥕'), ('🥒', '🥒'), ('🥜', '🥜'), ('🥐', '🥐'), ('🥖', '🥖'), ('🥞', '🥞'), ('🥚', '🥚'), ('🥗', '🥗'), ('🥛', '🥛'), ('🥃', '🥃'), ('🥄', '🥄'), ('🛶', '🛶'), ('🥊', '🥊'), ('🥋', '🥋'), ('🥅', '🥅'), ('🥁', '🥁'), ('🛒', '🛒')], default=None, max_length=2, null=True, verbose_name='emoji'),\n        ),",
        "detail": "tabbycat.participants.migrations.0007_auto_20180318_2355",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.participants.migrations.0007_auto_20180909_2156",
        "description": "tabbycat.participants.migrations.0007_auto_20180909_2156",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('participants', '0006_auto_20180807_2132'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='team',\n            name='emoji',\n            field=models.CharField(blank=True, choices=[('☺️', '☺️ White Smiling'), ('☹', '☹ White Frowning'), ('☝️', '☝️ White Up Pointing Index'), ('✌️', '✌️ Victory Hand'), ('✍', '✍ Writing Hand'), ('❤️', '❤️ Heavy Black Heart'), ('❣', '❣ Heart Exclamation Mark'), ('☠', '☠ Skull and Crossbones'), ('♨️', '♨️ Hot Springs'), ('✈️', '✈️ Airplane'), ('⌛', '⌛ Hourglass'), ('⌚', '⌚ Watch'), ('♈', '♈ Aries'), ('♉', '♉ Taurus'), ('♊', '♊ Gemini'), ('♋', '♋ Cancer'), ('♌', '♌ Leo'), ('♍', '♍ Virgo'), ('♎', '♎ Libra'), ('♏', '♏ Scorpius'), ('♐', '♐ Sagittarius'), ('♑', '♑ Capricorn'), ('♒', '♒ Aquarius'), ('♓', '♓ Pisces'), ('☀️', '☀️ Black Sun With Rays'), ('☁️', '☁️ Cloud'), ('☂', '☂ Umbrella'), ('❄️', '❄️ Snowflake'), ('☃', '☃ Snowman'), ('☄️', '☄️ Comet'), ('♠️', '♠️ Spade Suit'), ('♥️', '♥️ Heart Suit'), ('♦️', '♦️ Diamond Suit'), ('♣️', '♣️ Club Suit'), ('▶️', '▶️ Black Right-Pointing Triangle'), ('◀️', '◀️ Black Left-Pointing Triangle'), ('☎️', '☎️ Black Telephone'), ('⌨', '⌨ Keyboard'), ('✉️', '✉️ Envelope'), ('✏️', '✏️ Pencil'), ('✒️', '✒️ Black Nib'), ('✂️', '✂️ Scissors'), ('↗️', '↗️ North East Arrow'), ('➡️', '➡️ Black Rightwards Arrow'), ('↘️', '↘️ South East Arrow'), ('↙️', '↙️ South West Arrow'), ('↖️', '↖️ North West Arrow'), ('↕️', '↕️ Up Down Arrow'), ('↔️', '↔️ Left Right Arrow'), ('↩️', '↩️ Leftwards Arrow With Hook'), ('↪️', '↪️ Rightwards Arrow With Hook'), ('✡', '✡ Star of David'), ('☸', '☸ Wheel of Dharma'), ('☯', '☯ Yin Yang'), ('✝', '✝ Latin Cross'), ('☦', '☦ Orthodox Cross'), ('☪', '☪ Star and Crescent'), ('☮', '☮ Peace Symbol'), ('☢', '☢ Radioactive Sign'), ('☣', '☣ Biohazard Sign'), ('☑️', '☑️ Ballot Box With Check'), ('✔️', '✔️ Heavy Check Mark'), ('✖️', '✖️ Heavy Multiplication X'), ('✳️', '✳️ Eight Spoked Asterisk'), ('✴️', '✴️ Eight Pointed Black Star'), ('❇️', '❇️ Sparkle'), ('‼️', '‼️ Double Exclamation Mark'), ('〰️', '〰️ Wavy Dash'), ('©️', '©️ Copyright Sign'), ('®️', '®️ Registered Sign'), ('™️', '™️ Trade Mark Sign'), ('Ⓜ️', 'Ⓜ️ Capital M'), ('㊗️', '㊗️ Congratulations'), ('㊙️', '㊙️ Secret'), ('▪️', '▪️ Black Square'), ('▫️', '▫️ White Square'), ('#⃣️', '#⃣️ Keycap Number Sign'), ('*⃣', '*⃣ Keycap Asterisk'), ('0⃣️', '0⃣️ Keycap Digit Zero'), ('1⃣️', '1⃣️ Keycap Digit One'), ('2⃣️', '2⃣️ Keycap Digit Two'), ('3⃣️', '3⃣️ Keycap Digit Three'), ('4⃣️', '4⃣️ Keycap Digit Four'), ('5⃣️', '5⃣️ Keycap Digit Five'), ('6⃣️', '6⃣️ Keycap Digit Six'), ('7⃣️', '7⃣️ Keycap Digit Seven'), ('8⃣️', '8⃣️ Keycap Digit Eight'), ('9⃣️', '9⃣️ Keycap Digit Nine'), ('⁉️', '⁉️ Exclamation Question Mark'), ('ℹ️', 'ℹ️ Information Source'), ('⤴️', '⤴️ Right-Curve-Up'), ('⤵️', '⤵️ Right-Curve-Down'), ('♻️', '♻️ Recycling'), ('〽️', '〽️ Part Alternation Mark'), ('◻️', '◻️ White Medium Square'), ('◼️', '◼️ Black Medium Square'), ('◽', '◽ White Medium Small Square'), ('◾', '◾ Black Medium Small Square'), ('☕', '☕ Hot Beverage'), ('⚠️', '⚠️ Warning Sign'), ('☔', '☔ Umbrella With Rain Drops'), ('⏏', '⏏ Eject Symbol'), ('⬆️', '⬆️ Upwards Black Arrow'), ('⬇️', '⬇️ Downwards Black Arrow'), ('⬅️', '⬅️ Leftwards Black Arrow'), ('⚡', '⚡ High Voltage'), ('☘', '☘ Shamrock'), ('⚓', '⚓ Anchor'), ('♿', '♿ Wheelchair Symbol'), ('⚒', '⚒ Hammer and Pick'), ('⚙', '⚙ Gear'), ('⚗', '⚗ Alembic'), ('⚖', '⚖ Scales'), ('⚔', '⚔ Crossed Swords'), ('⚰', '⚰ Coffin'), ('⚱', '⚱ Funeral Urn'), ('⚜', '⚜ Fleur-De-Lis'), ('⚛', '⚛ Atom Symbol'), ('⚪', '⚪ Medium White Circle'), ('⚫', '⚫ Medium Black Circle'), ('🀄', '🀄 Mahjong Tile Red Dragon'), ('⭐', '⭐ White Medium Star'), ('⬛', '⬛ Black Square'), ('⬜', '⬜ White Square'), ('⛑', '⛑ Rescue Hat'), ('⛰', '⛰ Mountain'), ('⛪', '⛪ Church'), ('⛲', '⛲ Fountain'), ('⛺', '⛺ Tent'), ('⛽', '⛽ Fuel Pump'), ('⛵', '⛵ Sailboat'), ('⛴', '⛴ Ferry'), ('⛔', '⛔ No Entry'), ('⛅', '⛅ Overcast'), ('⛈', '⛈ Storm'), ('⛱', '⛱ Umbrella'), ('⛄', '⛄ Snowman'), ('⚽', '⚽ Soccer'), ('⚾', '⚾ Baseball'), ('⛳', '⛳ Hole in One'), ('⛸', '⛸ Ice Skate'), ('⛷', '⛷ Skier'), ('⛹', '⛹ Person With Ball'), ('⛏', '⛏ Pick'), ('⛓', '⛓ Chains'), ('⛩', '⛩ Shinto Shrine'), ('⭕', '⭕ Heavy Large Circle'), ('❗', '❗ Heavy Exclamation Mark'), ('🅿️', '🅿️ Squared P'), ('🈯', '🈯 Squared 指 (Finger)'), ('🈚', '🈚 Squared CJK Unified Ideograph-7121'), ('😁', '😁 Smiling Eyes'), ('😂', '😂 Joy Tears'), ('😃', '😃 Smiling Face With Open Mouth'), ('😄', '😄 Smiling Face With Open Mouth and Smiling Eyes'), ('😅', '😅 Cold Sweat'), ('😆', '😆 Closed Eyes'), ('😉', '😉 Winky'), ('😊', '😊 Smiling Eyes'), ('😋', '😋 Face Savouring Delicious Food'), ('😎', '😎 Sunglasses'), ('😍', '😍 Heart Eyes'), ('😘', '😘 Kissy'), ('😚', '😚 Kissing Face With Closed Eyes'), ('😇', '😇 Halo'), ('😐', '😐 Neutral'), ('😶', '😶 No Mouth'), ('😏', '😏 Smirking'), ('😣', '😣 Persevering'), ('😥', '😥 Disappointed'), ('😪', '😪 Sleepy'), ('😫', '😫 Tired'), ('😌', '😌 Relieved'), ('😜', '😜 Tongue Out'), ('😝', '😝 Tongue Out Closed Eyes'), ('😒', '😒 Unamused'), ('😓', '😓 Cold Sweat'), ('😔', '😔 Pensive'), ('😖', '😖 Confounded'), ('😷', '😷 Medical Mask'), ('😲', '😲 Astonished'), ('😞', '😞 Disappointed'), ('😤', '😤 Face With Look of Triumph'), ('😢', '😢 Crying'), ('😭', '😭 Sobbing'), ('😨', '😨 Fearful'), ('😩', '😩 Weary'), ('😰', '😰 Open Mouth Cold Sweat'), ('😱', '😱 Screaming'), ('😳', '😳 Flushed'), ('😵', '😵 Dizzy'), ('😡', '😡 Pouting'), ('😠', '😠 Angry'), ('👿', '👿 Imp'), ('😈', '😈 Smiling Face With Horns'), ('👦', '👦 Boy'), ('👧', '👧 Girl'), ('👨', '👨 Generic Man'), ('👩', '👩 Generic Woman'), ('👴', '👴 Older Man'), ('👵', '👵 Older Woman'), ('👶', '👶 Baby'), ('👱', '👱 Person With Blond Hair'), ('👮', '👮 Police Officer'), ('👲', '👲 Man With Gua Pi Mao'), ('👳', '👳 Man With Turban'), ('👷', '👷 Trade Worker'), ('👸', '👸 Princess'), ('💂', '💂 Guardsman'), ('🎅', '🎅 Santa Claus'), ('👼', '👼 Baby Angel'), ('👯', '👯 Bunny Women'), ('💆', '💆 Face Massage'), ('💇', '💇 Haircut'), ('👰', '👰 Bride'), ('🙍', '🙍 Person Frowning'), ('🙎', '🙎 Person With Pouting'), ('🙅', '🙅 Block Gesture'), ('🙆', '🙆 OK Gesture'), ('💁', '💁 Sass Gesture'), ('🙋', '🙋 Raised Hand'), ('🙇', '🙇 Deep Bow'), ('🙌', '🙌 Praise Hands'), ('🙏', '🙏 Prayer Hands'), ('👤', '👤 Bust in Silhouette'), ('👥', '👥 Busts in Silhouette'), ('🚶', '🚶 Pedestrian'), ('🏃', '🏃 Runner'), ('💃', '💃 Dancer'), ('💏', '💏 Kiss'), ('💑', '💑 Heteronormative Couple'), ('👪', '👪 Hetero Family'), ('👫', '👫 Man & Woman'), ('👬', '👬 Two Men'), ('👭', '👭 Two Women'), ('💪', '💪 Biceps'), ('👈', '👈 Left Pointing Backhand'), ('👉', '👉 Right Pointing Backhand'), ('👆', '👆 Pointing Hand'), ('👇', '👇 Down Pointing Backhand'), ('✊', '✊ Power Hand'), ('✋', '✋ Palm Hand'), ('👊', '👊 Fist Hand'), ('👌', '👌 OK Hand'), ('👍', '👍 Thumbs Up'), ('👎', '👎 Thumbs Down'), ('👋', '👋 Waving Hand Sign'), ('👏', '👏 Clappy Hands'), ('👐', '👐 Open Hands Sign'), ('💅', '💅 Nail Polish'), ('👣', '👣 Footprints'), ('👀', '👀 Eyes'), ('👂', '👂 Ear'), ('👃', '👃 Nose'), ('👅', '👅 Lick'), ('👄', '👄 Mouth'), ('💋', '💋 Kiss Mark'), ('💘', '💘 Cupid Arrow'), ('💓', '💓 Beating Heart'), ('💔', '💔 Broken Heart'), ('💕', '💕 Two Hearts'), ('💖', '💖 Sparkly Heart'), ('💗', '💗 Growing Heart'), ('💙', '💙 Blue Heart'), ('💚', '💚 Green Heart'), ('💛', '💛 Yellow Heart'), ('💜', '💜 Purple Heart'), ('💝', '💝 Heart With Ribbon'), ('💞', '💞 Revolving Hearts'), ('💟', '💟 Heart Decoration'), ('💌', '💌 Love Letter'), ('💧', '💧 Droplet'), ('💤', '💤 ZZZ'), ('💢', '💢 Anger'), ('💣', '💣 Bomb'), ('💥', '💥 Sparks'), ('💦', '💦 Splashing'), ('💨', '💨 Dash'), ('💫', '💫 Shooting Star'), ('💬', '💬 Speech Bubble'), ('💭', '💭 Thought Bubble'), ('👓', '👓 Eyeglasses'), ('👔', '👔 Necktie'), ('👕', '👕 T-Shirt'), ('👖', '👖 Jeans'), ('👗', '👗 Dress'), ('👘', '👘 Kimono'), ('👙', '👙 Bikini'), ('👚', '👚 Womans Clothes'), ('👛', '👛 Purse'), ('👜', '👜 Handbag'), ('👝', '👝 Pouch'), ('🎒', '🎒 Backpack'), ('👞', '👞 Mans Shoe'), ('👟', '👟 Running Shoe'), ('👠', '👠 Heels'), ('👡', '👡 Womans Sandal'), ('👢', '👢 Womans Boots'), ('👑', '👑 Crown'), ('👒', \"👒 Lady's Hat\"), ('🎩', '🎩 Top Hat'), ('💄', '💄 Lipstick'), ('💍', '💍 Ring'), ('💎', '💎 Gem'), ('👹', '👹 Japanese Ogre'), ('👺', '👺 Japanese Goblin'), ('👻', '👻 Ghost'), ('💀', '💀 Skull'), ('👽', '👽 Alien'), ('👾', '👾 Space Invader'), ('💩', '💩 Pile of Poo'), ('🐵', '🐵 Monkey'), ('🙈', '🙈 See No Evil'), ('🙉', '🙉 Hear No Evil'), ('🙊', '🙊 Speak No Evil'), ('🐒', '🐒 Monkey'), ('🐶', '🐶 Dog'), ('🐕', '🐕 Dog'), ('🐩', '🐩 Poodle'), ('🐺', '🐺 Wolf'), ('🐱', '🐱 Cat'), ('😸', '😸 Grinning Cat with Smiling Eyes'), ('😹', '😹 Cat with Tears of Joy'), ('😺', '😺 Smiling Cat with Open Mouth'), ('😻', '😻 Smiling Cat with Heart Eyes'), ('😼', '😼 Cat with Wry Smile'), ('😽', '😽 Kissing Cat with Closed Eyes'), ('😾', '😾 Pouting Cat Face'), ('😿', '😿 Crying Cat Face'), ('🙀', '🙀 Weary Cat Face'), ('🐈', '🐈 Cat'), ('🐯', '🐯 Tiger'), ('🐅', '🐅 Tiger'), ('🐆', '🐆 Leopard'), ('🐴', '🐴 Horse'), ('🐎', '🐎 Horse'), ('🐮', '🐮 Cow'), ('🐂', '🐂 Ox'), ('🐃', '🐃 Water Buffalo'), ('🐄', '🐄 Cow'), ('🐷', '🐷 Pig'), ('🐖', '🐖 Pig'), ('🐗', '🐗 Boar'), ('🐽', '🐽 Pig Nose'), ('🐏', '🐏 Ram'), ('🐑', '🐑 Sheep'), ('🐐', '🐐 Goat'), ('🐪', '🐪 Dromedary Camel'), ('🐫', '🐫 Bactrian Camel'), ('🐘', '🐘 Elephant'), ('🐭', '🐭 Mouse'), ('🐁', '🐁 Mouse'), ('🐀', '🐀 Rat'), ('🐹', '🐹 Hamster'), ('🐰', '🐰 Rabbit'), ('🐇', '🐇 Rabbit'), ('🐻', '🐻 Bear'), ('🐨', '🐨 Koala'), ('🐼', '🐼 Panda'), ('🐾', '🐾 Paw Prints'), ('🐔', '🐔 Chicken'), ('🐓', '🐓 Rooster'), ('🐣', '🐣 Hatching'), ('🐤', '🐤 Chick'), ('🐥', '🐥 Front-Facing Baby Chick'), ('🐦', '🐦 Bird'), ('🐧', '🐧 Penguin'), ('🐸', '🐸 Frog'), ('🐊', '🐊 Crocodile'), ('🐢', '🐢 Turtle'), ('🐍', '🐍 Snake'), ('🐲', '🐲 Dragon'), ('🐉', '🐉 Dragon'), ('🐳', '🐳 Whale'), ('🐋', '🐋 Whale'), ('🐬', '🐬 Dolphin'), ('🐟', '🐟 Fish'), ('🐠', '🐠 Fish'), ('🐡', '🐡 Blowfish'), ('🐙', '🐙 Octopus'), ('🐚', '🐚 Shell'), ('🐌', '🐌 Snail'), ('🐛', '🐛 Bug'), ('🐜', '🐜 Ant'), ('🐝', '🐝 Honeybee'), ('🐞', '🐞 Lady Beetle'), ('💐', '💐 Bouquet'), ('🌸', '🌸 Sakura'), ('💮', '💮 White Flower'), ('🌹', '🌹 Rose'), ('🌺', '🌺 Hibiscus'), ('🌻', '🌻 Sunflower'), ('🌼', '🌼 Blossom'), ('🌷', '🌷 Tulip'), ('🌱', '🌱 Seedling'), ('🌲', '🌲 Evergreen Tree'), ('🌳', '🌳 Deciduous Tree'), ('🌴', '🌴 Palm Tree'), ('🌵', '🌵 Cactus'), ('🌾', '🌾 Ear of Rice'), ('🌿', '🌿 Herb'), ('🍀', '🍀 Clover'), ('🍁', '🍁 Maple Leaf'), ('🍂', '🍂 Fallen Leaf'), ('🍃', '🍃 Blown Leaves'), ('🍇', '🍇 Grapes'), ('🍈', '🍈 Melon'), ('🍉', '🍉 Watermelon'), ('🍊', '🍊 Tangerine'), ('🍋', '🍋 Lemon'), ('🍌', '🍌 Banana'), ('🍍', '🍍 Pineapple'), ('🍎', '🍎 Red Apple'), ('🍏', '🍏 Green Apple'), ('🍐', '🍐 Pear'), ('🍑', '🍑 Peach'), ('🍒', '🍒 Cherries'), ('🍓', '🍓 Strawberry'), ('🍅', '🍅 Tomato'), ('🍆', '🍆 Eggplant'), ('🌽', '🌽 Corn'), ('🍄', '🍄 Mushroom'), ('🌰', '🌰 Chestnut'), ('🍞', '🍞 Bread'), ('🍖', '🍖 Meat on Bone'), ('🍗', '🍗 Poultry Leg'), ('🍔', '🍔 Hamburger'), ('🍟', '🍟 Fries'), ('🍕', '🍕 Pizza'), ('🍲', '🍲 Pot of Food'), ('🍱', '🍱 Bento Box'), ('🍘', '🍘 Rice Cracker'), ('🍙', '🍙 Rice Ball'), ('🍚', '🍚 Cooked Rice'), ('🍛', '🍛 Curry and Rice'), ('🍜', '🍜 Steaming Bowl'), ('🍝', '🍝 Spaghetti'), ('🍠', '🍠 Sweet Potato'), ('🍢', '🍢 Oden'), ('🍣', '🍣 Sushi'), ('🍤', '🍤 Fried Shrimp'), ('🍥', '🍥 Fish Cake With Swirl Design'), ('🍡', '🍡 Dango'), ('🍦', '🍦 Soft Ice Cream'), ('🍧', '🍧 Shaved Ice'), ('🍨', '🍨 Ice Cream'), ('🍩', '🍩 Doughnut'), ('🍪', '🍪 Cookie'), ('🎂', '🎂 Birthday Cake'), ('🍰', '🍰 Shortcake'), ('🍫', '🍫 Chocolate Bar'), ('🍬', '🍬 Candy'), ('🍭', '🍭 Lollipop'), ('🍮', '🍮 Custard'), ('🍯', '🍯 Honey Pot'), ('🍼', '🍼 Baby Bottle'), ('🍵', '🍵 Teacup Without Handle'), ('🍶', '🍶 Sake Bottle and Cup'), ('🍷', '🍷 Wine Glass'), ('🍸', '🍸 Cocktail Glass'), ('🍹', '🍹 Tropical Drink'), ('🍺', '🍺 Beer'), ('🍻', '🍻 Clinking Beer Mugs'), ('🍴', '🍴 Fork & Knife'), ('🍳', '🍳 Cooking'), ('🌍', '🌍 Earth Globe Europe-Africa'), ('🌎', '🌎 Earth Globe Americas'), ('🌏', '🌏 Earth Globe Asia-Australia'), ('🌐', '🌐 Globe With Meridians'), ('🌋', '🌋 Volcano'), ('🗻', '🗻 Mount Fuji'), ('🏠', '🏠 House'), ('🏡', '🏡 House With Garden'), ('🏢', '🏢 Office'), ('🏣', '🏣 Japanese Post Office'), ('🏤', '🏤 European Post Office'), ('🏥', '🏥 Hospital'), ('🏦', '🏦 Bank'), ('🏨', '🏨 Hotel'), ('🏩', '🏩 Love Hotel'), ('🏪', '🏪 Convenience Store'), ('🏫', '🏫 School'), ('🏬', '🏬 Department Store'), ('🏭', '🏭 Factory'), ('🏯', '🏯 Japanese Castle'), ('🏰', '🏰 Castle'), ('💒', '💒 Wedding'), ('🗼', '🗼 Tokyo Tower'), ('🗽', '🗽 Liberty'), ('🗾', '🗾 Silhouette of Japan'), ('🌁', '🌁 Foggy'), ('🌃', '🌃 Night With Stars'), ('🌄', '🌄 Sunrise Over Mountains'), ('🌅', '🌅 Sunrise'), ('🌆', '🌆 Cityscape at Dusk'), ('🌇', '🌇 Sunset Over Buildings'), ('🌉', '🌉 Bridge at Night'), ('🌊', '🌊 Big Wave'), ('🗿', '🗿 Moyai'), ('🌌', '🌌 Milky Way'), ('🎠', '🎠 Carousel Horse'), ('🎡', '🎡 Ferris Wheel'), ('🎢', '🎢 Roller Coaster'), ('💈', '💈 Barber Pole'), ('🎪', '🎪 Circus Tent'), ('🎭', '🎭 Performing Arts'), ('🎨', '🎨 Palette'), ('🎰', '🎰 Slot Machine'), ('🚂', '🚂 Steam Locomotive'), ('🚃', '🚃 Railcar'), ('🚄', '🚄 Fast Train'), ('🚅', '🚅 Fast Train with Bullet Nose'), ('🚆', '🚆 Train'), ('🚇', '🚇 Metro'), ('🚈', '🚈 Light Rail'), ('🚉', '🚉 Station'), ('🚊', '🚊 Tram'), ('🚝', '🚝 Monorail'), ('🚞', '🚞 Mountain Railway'), ('🚋', '🚋 Tram Car'), ('🚌', '🚌 Bus'), ('🚍', '🚍 Bus'), ('🚎', '🚎 Trolleybus'), ('🚏', '🚏 Bus Stop'), ('🚐', '🚐 Minibus'), ('🚑', '🚑 Ambulance'), ('🚒', '🚒 Fire Engine'), ('🚓', '🚓 Police Car'), ('🚔', '🚔 Police Car'), ('🚕', '🚕 Taxi'), ('🚖', '🚖 Oncoming Taxi'), ('🚗', '🚗 Automobile'), ('🚘', '🚘 Automobile'), ('🚙', '🚙 Recreational Vehicle'), ('🚚', '🚚 Truck'), ('🚛', '🚛 Articulated Lorry'), ('🚜', '🚜 Tractor'), ('🚲', '🚲 Bicycle'), ('🚳', '🚳 No Bicycles'), ('🚨', '🚨 Alert Light'), ('🔱', '🔱 Trident'), ('🚣', '🚣 Rowboat'), ('🚤', '🚤 Speedboat'), ('🚢', '🚢 Ship'), ('💺', '💺 Seat'), ('🚁', '🚁 Helicopter'), ('🚟', '🚟 Suspension Railway'), ('🚠', '🚠 Sky Tram'), ('🚡', '🚡 Aerial Tramway'), ('🚀', '🚀 Rocket'), ('🏧', '🏧 ATM'), ('🚮', '🚮 Put Litter in Its Place'), ('🚥', '🚥 Horizontal Traffic Light'), ('🚦', '🚦 Traffic Light'), ('🚧', '🚧 Hazard Sign'), ('🚫', '🚫 Prohibited'), ('🚭', '🚭 No Smoking'), ('🚯', '🚯 Do Not Litter'), ('🚰', '🚰 Tap Water'), ('🚱', '🚱 Non-Potable Water'), ('🚷', '🚷 No Pedestrians'), ('🚸', '🚸 Children Crossing'), ('🚹', '🚹 Mens Symbol'), ('🚺', '🚺 Womens Symbol'), ('🚻', '🚻 Restroom'), ('🚼', '🚼 Baby Symbol'), ('🚾', '🚾 Water Closet'), ('🛂', '🛂 Passport Control'), ('🛃', '🛃 Customs'), ('🛄', '🛄 Baggage Claim'), ('🛅', '🛅 Left Luggage'), ('🚪', '🚪 Door'), ('🚽', '🚽 Toilet'), ('🚿', '🚿 Shower'), ('🛀', '🛀 Bath'), ('🛁', '🛁 Bathtub'), ('⏳', '⏳ Hourglass'), ('⏰', '⏰ Alarm Clock'), ('⏱', '⏱ Stopwatch'), ('⏲', '⏲ Timer Clock'), ('🕛', \"🕛 Twelve O'Clock\"), ('🕧', '🕧 Half Past Twelve'), ('🕐', \"🕐 One O'Clock\"), ('🕜', '🕜 Half Past One'), ('🕑', \"🕑 Two O'Clock\"), ('🕝', '🕝 Half Past Two'), ('🕒', \"🕒 Three O'Clock\"), ('🕞', '🕞 Half Past Three'), ('🕓', \"🕓 Four O'Clock\"), ('🕟', '🕟 Half Past Four'), ('🕔', \"🕔 Five O'Clock\"), ('🕠', '🕠 Half Past Five'), ('🕕', \"🕕 Six O'Clock\"), ('🕡', '🕡 Half Past Six'), ('🕖', \"🕖 Seven O'Clock\"), ('🕢', '🕢 Half Past Seven'), ('🕗', \"🕗 Eight O'Clock\"), ('🕣', '🕣 Half Past Eight'), ('🕘', \"🕘 Nine O'Clock\"), ('🕤', '🕤 Half Past Nine'), ('🕙', \"🕙 Ten O'Clock\"), ('🕥', '🕥 Half Past Ten'), ('🕚', \"🕚 Eleven O'Clock\"), ('🕦', '🕦 Half Past Eleven'), ('⛎', '⛎ Ophiuchus'), ('🌑', '🌑 New Moon'), ('🌒', '🌒 Waxing Crescent'), ('🌓', '🌓 First Quarter Moon Symbol'), ('🌔', '🌔 Waxing Gibbous'), ('🌕', '🌕 Full Moon'), ('🌖', '🌖 Waning Gibbous'), ('🌗', '🌗 Half Moon'), ('🌘', '🌘 Waning Crescent'), ('🌙', '🌙 Crescent Moon'), ('🌚', '🌚 New Moon With Face'), ('🌛', '🌛 First Quarter Moon With Face'), ('🌜', '🌜 Last Quarter Moon With Face'), ('🌝', '🌝 Full Moon With Face'), ('🌞', '🌞 Sun'), ('🌀', '🌀 Cyclone'), ('🌈', '🌈 Rainbow'), ('🌂', '🌂 Umbrella'), ('🌟', '🌟 Glowing Star'), ('🌠', '🌠 Shooting Star'), ('🔥', '🔥 Fire'), ('🎃', '🎃 Jack-O-Lantern'), ('🎄', '🎄 Presents Tree'), ('🎆', '🎆 Fireworks'), ('🎇', '🎇 Firework Sparkler'), ('✨', '✨ Sparkles'), ('🎈', '🎈 Balloon'), ('🎉', '🎉 Party Popper'), ('🎊', '🎊 Confetti Ball'), ('🎋', '🎋 Tanabata Tree'), ('🎌', '🎌 Crossed Flags'), ('🎍', '🎍 Pine Decoration'), ('🎎', '🎎 Japanese Dolls'), ('🎏', '🎏 Carp Streamer'), ('🎐', '🎐 Wind Chime'), ('🎑', '🎑 Moon Viewing Ceremony'), ('🎓', '🎓 Grad Hat'), ('🎯', '🎯 Bullseye'), ('🎴', '🎴 Flower Playing Cards'), ('🎀', '🎀 Ribbon'), ('🎁', '🎁 Wrapped Present'), ('🎫', '🎫 Ticket'), ('🏀', '🏀 Basketball'), ('🏈', '🏈 America Ball'), ('🏉', '🏉 Rugby Ball'), ('🎾', '🎾 Tennis'), ('🎱', '🎱 Billiards'), ('🎳', '🎳 Bowling'), ('🎣', '🎣 Fishing Pole and Fish'), ('🎽', '🎽 Running Shirt With Sash'), ('🎿', '🎿 Ski and Ski Boot'), ('🏂', '🏂 Snowboarder'), ('🏄', '🏄 Surfer'), ('🏇', '🏇 Horse Racing'), ('🏊', '🏊 Swimmer'), ('🚴', '🚴 Bicyclist'), ('🚵', '🚵 Mountain Bicyclist'), ('🏆', '🏆 Trophy'), ('🎮', '🎮 Video Game'), ('🎲', '🎲 Dice'), ('🃏', '🃏 Playing Card Black Joker'), ('🔇', '🔇 Speaker With Cancellation Stroke'), ('🔈', '🔈 Speaker'), ('🔉', '🔉 Speaker With One Sound Wave'), ('🔊', '🔊 Speaker With Three Sound Waves'), ('📢', '📢 Public Address Loudspeaker'), ('📣', '📣 Megaphone'), ('📯', '📯 Horn'), ('🔔', '🔔 Bell'), ('🔕', '🔕 No Bells'), ('🔀', '🔀 Shuffle'), ('🔁', '🔁 Repeat'), ('🔂', '🔂 Repeat Once'), ('⏩', '⏩ Fast Forward'), ('⏭', '⏭ Next Track'), ('⏯', '⏯ Play/Pause'), ('⏪', '⏪ Rewind'), ('⏮', '⏮ Previous Track'), ('🔼', '🔼 Up-Pointing Small Red Triangle'), ('⏫', '⏫ Up to Top'), ('🔽', '🔽 Down-Pointing Small Red Triangle'), ('⏬', '⏬ Down to Bottom'), ('🎼', '🎼 Musical Score'), ('🎵', '🎵 Musical Note'), ('🎶', '🎶 Music Notes'), ('🎤', '🎤 Microphone'), ('🎧', '🎧 Headphone'), ('🎷', '🎷 Saxophone'), ('🎸', '🎸 Guitar'), ('🎹', '🎹 Keyboard'), ('🎺', '🎺 Trumpet'), ('🎻', '🎻 Violin'), ('📻', '📻 Boom Box'), ('📱', '📱 Internet Phone'), ('📳', '📳 Vibration Mode'), ('📴', '📴 Mobile Phone Off'), ('📲', '📲 Download to Phone'), ('📵', '📵 No Mobile Phones'), ('📞', '📞 Old Phone'), ('🔟', '🔟 Keycap Ten'), ('📶', '📶 Antenna With Bars'), ('📟', '📟 Pager'), ('📠', '📠 Fax Machine'), ('🔋', '🔋 Battery'), ('🔌', '🔌 Plug'), ('💻', '💻 Personal Computer'), ('💽', '💽 Minidisc'), ('💾', '💾 Floppy'), ('💿', '💿 Compact Disc'), ('📀', '📀 DVD'), ('🎥', '🎥 Movie Camera'), ('🎦', '🎦 Cinema'), ('🎬', '🎬 Clapperboard'), ('📺', '📺 Television'), ('📷', '📷 Camera'), ('📹', '📹 Video Camera'), ('📼', '📼 Videocassette'), ('🔅', '🔅 Low Brightness Symbol'), ('🔆', '🔆 High Brightness Symbol'), ('🔍', '🔍 Magnifying Glass'), ('🔎', '🔎 Right-Pointing Magnifying Glass'), ('🔬', '🔬 Microscope'), ('🔭', '🔭 Telescope'), ('📡', '📡 Satellite Dish'), ('💡', '💡 Light Bulb'), ('🔦', '🔦 Electric Torch'), ('🏮', '🏮 Izakaya Lantern'), ('📔', '📔 Notebook With Decorative Cover'), ('📕', '📕 Closed Book'), ('📖', '📖 Open Book'), ('📗', '📗 Green Book'), ('📘', '📘 Blue Book'), ('📙', '📙 Orange Book'), ('📚', '📚 Books'), ('📓', '📓 Notebook'), ('📒', '📒 Ledger'), ('📃', '📃 Page With Curl'), ('📜', '📜 Scroll'), ('📄', '📄 Page Facing Up'), ('📰', '📰 Newspaper'), ('📑', '📑 Bookmark Tabs'), ('🔖', '🔖 Bookmark'), ('💰', '💰 Money Bag'), ('💴', '💴 Banknote With Yen Sign'), ('💵', '💵 Banknote With Dollar Sign'), ('💶', '💶 Banknote With Euro Sign'), ('💷', '💷 Banknote With Pound Sign'), ('💸', '💸 Flying Money'), ('💱', '💱 Currency Exchange'), ('💲', '💲 Heavy Dollar Sign'), ('💳', '💳 Credit Card'), ('💹', '💹 Upwards Trend in Yen'), ('📧', '📧 E-Mail Symbol'), ('📨', '📨 Incoming Envelope'), ('📩', '📩 Going Into Envelope'), ('📤', '📤 Outbox Tray'), ('📥', '📥 Inbox Tray'), ('📦', '📦 Package'), ('📫', '📫 Mailbox'), ('📪', '📪 Closed Mailbox With Lowered Flag'), ('📬', '📬 Open Mailbox With Raised Flag'), ('📭', '📭 Open Mailbox With Lowered Flag'), ('📮', '📮 Postbox'), ('📝', '📝 Memo'), ('💼', '💼 Briefcase'), ('📁', '📁 File Folder'), ('📂', '📂 Open File Folder'), ('📅', '📅 Calendar'), ('📆', '📆 Tear-Off Calendar'), ('📇', '📇 Card Index'), ('📈', '📈 Up Trend'), ('📉', '📉 Down Trend'), ('📊', '📊 Bar Chart'), ('📋', '📋 Clipboard'), ('📌', '📌 Pushpin'), ('📍', '📍 Location'), ('📎', '📎 Paperclip'), ('📏', '📏 Ruler'), ('📐', '📐 Triangle'), ('📛', '📛 Name Badge'), ('🔒', '🔒 Lock'), ('🔓', '🔓 Open Lock'), ('🔏', '🔏 Lock With Ink Pen'), ('🔐', '🔐 Closed Lock With Key'), ('🔑', '🔑 Key'), ('🔨', '🔨 Hammer'), ('🔧', '🔧 Spanner'), ('🔩', '🔩 Calipers'), ('🔗', '🔗 Link Symbol'), ('💉', '💉 Syringe'), ('💊', '💊 Pill'), ('🔪', '🔪 Chef Knife'), ('🔫', '🔫 Pistol'), ('🚬', '🚬 Durry'), ('🏁', '🏁 Start Flag'), ('🚩', '🚩 Triangular Flag on Post'), ('🇦🇫', '🇦🇫 Afghanistan'), ('🇦🇽', '🇦🇽 Åland Islands'), ('🇦🇱', '🇦🇱 Albania'), ('🇩🇿', '🇩🇿 Algeria'), ('🇦🇸', '🇦🇸 American Samoa'), ('🇦🇩', '🇦🇩 Andorra'), ('🇦🇴', '🇦🇴 Angola'), ('🇦🇮', '🇦🇮 Anguilla'), ('🇦🇶', '🇦🇶 Antarctica'), ('🇦🇬', '🇦🇬 Antigua & Barbuda'), ('🇦🇷', '🇦🇷 Argentina'), ('🇦🇲', '🇦🇲 Armenia'), ('🇦🇼', '🇦🇼 Aruba'), ('🇦🇨', '🇦🇨 Ascension Island'), ('🇦🇺', '🇦🇺 Australia'), ('🇦🇹', '🇦🇹 Austria'), ('🇦🇿', '🇦🇿 Azerbaijan'), ('🇧🇸', '🇧🇸 Bahamas'), ('🇧🇭', '🇧🇭 Bahrain'), ('🇧🇩', '🇧🇩 Bangladesh'), ('🇧🇧', '🇧🇧 Barbados'), ('🇧🇾', '🇧🇾 Belarus'), ('🇧🇪', '🇧🇪 Belgium'), ('🇧🇿', '🇧🇿 Belize'), ('🇧🇯', '🇧🇯 Benin'), ('🇧🇲', '🇧🇲 Bermuda'), ('🇧🇹', '🇧🇹 Bhutan'), ('🇧🇴', '🇧🇴 Bolivia'), ('🇧🇦', '🇧🇦 Bosnia & Herzegovina'), ('🇧🇼', '🇧🇼 Botswana'), ('🇧🇻', '🇧🇻 Bouvet Island'), ('🇧🇷', '🇧🇷 Brazil'), ('🇮🇴', '🇮🇴 British Indian Ocean Territory'), ('🇻🇬', '🇻🇬 British Virgin Islands'), ('🇧🇳', '🇧🇳 Brunei'), ('🇧🇬', '🇧🇬 Bulgaria'), ('🇧🇫', '🇧🇫 Burkina Faso'), ('🇧🇮', '🇧🇮 Burundi'), ('🇰🇭', '🇰🇭 Cambodia'), ('🇨🇲', '🇨🇲 Cameroon'), ('🇨🇦', '🇨🇦 Canada'), ('🇮🇨', '🇮🇨 Canary Islands'), ('🇨🇻', '🇨🇻 Cape Verde'), ('🇧🇶', '🇧🇶 Caribbean Netherlands'), ('🇰🇾', '🇰🇾 Cayman Islands'), ('🇨🇫', '🇨🇫 Central African Republic'), ('🇪🇦', '🇪🇦 Ceuta & Melilla'), ('🇹🇩', '🇹🇩 Chad'), ('🇨🇱', '🇨🇱 Chile'), ('🇨🇳', '🇨🇳 China'), ('🇨🇽', '🇨🇽 Christmas Island'), ('🇨🇵', '🇨🇵 Clipperton Island'), ('🇨🇨', '🇨🇨 Cocos Islands'), ('🇨🇴', '🇨🇴 Colombia'), ('🇰🇲', '🇰🇲 Comoros'), ('🇨🇬', '🇨🇬 Congo - Brazzaville'), ('🇨🇩', '🇨🇩 Congo - Kinshasa'), ('🇨🇰', '🇨🇰 Cook Islands'), ('🇨🇷', '🇨🇷 Costa Rica'), ('🇨🇮', '🇨🇮 Côte D’Ivoire'), ('🇭🇷', '🇭🇷 Croatia'), ('🇨🇺', '🇨🇺 Cuba'), ('🇨🇼', '🇨🇼 Curaçao'), ('🇨🇾', '🇨🇾 Cyprus'), ('🇨🇿', '🇨🇿 Czech Republic'), ('🇩🇰', '🇩🇰 Denmark'), ('🇩🇬', '🇩🇬 Diego Garcia'), ('🇩🇯', '🇩🇯 Djibouti'), ('🇩🇲', '🇩🇲 Dominica'), ('🇩🇴', '🇩🇴 Dominican Republic'), ('🇪🇨', '🇪🇨 Ecuador'), ('🇪🇬', '🇪🇬 Egypt'), ('🇸🇻', '🇸🇻 El Salvador'), ('🇬🇶', '🇬🇶 Equatorial Guinea'), ('🇪🇷', '🇪🇷 Eritrea'), ('🇪🇪', '🇪🇪 Estonia'), ('🇪🇹', '🇪🇹 Ethiopia'), ('🇪🇺', '🇪🇺 European Union'), ('🇫🇰', '🇫🇰 Falkland Islands'), ('🇫🇴', '🇫🇴 Faroe Islands'), ('🇫🇯', '🇫🇯 Fiji'), ('🇫🇮', '🇫🇮 Finland'), ('🇫🇷', '🇫🇷 France'), ('🇬🇫', '🇬🇫 French Guiana'), ('🇵🇫', '🇵🇫 French Polynesia'), ('🇹🇫', '🇹🇫 French Southern Territories'), ('🇬🇦', '🇬🇦 Gabon'), ('🇬🇲', '🇬🇲 Gambia'), ('🇬🇪', '🇬🇪 Georgia'), ('🇩🇪', '🇩🇪 Germany'), ('🇬🇭', '🇬🇭 Ghana'), ('🇬🇮', '🇬🇮 Gibraltar'), ('🇬🇷', '🇬🇷 Greece'), ('🇬🇱', '🇬🇱 Greenland'), ('🇬🇩', '🇬🇩 Grenada'), ('🇬🇵', '🇬🇵 Guadeloupe'), ('🇬🇺', '🇬🇺 Guam'), ('🇬🇹', '🇬🇹 Guatemala'), ('🇬🇬', '🇬🇬 Guernsey'), ('🇬🇳', '🇬🇳 Guinea'), ('🇬🇼', '🇬🇼 Guinea-Bissau'), ('🇬🇾', '🇬🇾 Guyana'), ('🇭🇹', '🇭🇹 Haiti'), ('🇭🇲', '🇭🇲 Heard & McDonald Islands'), ('🇭🇳', '🇭🇳 Honduras'), ('🇭🇰', '🇭🇰 Hong Kong'), ('🇭🇺', '🇭🇺 Hungary'), ('🇮🇸', '🇮🇸 Iceland'), ('🇮🇳', '🇮🇳 India'), ('🇮🇩', '🇮🇩 Indonesia'), ('🇮🇷', '🇮🇷 Iran'), ('🇮🇶', '🇮🇶 Iraq'), ('🇮🇪', '🇮🇪 Ireland'), ('🇮🇲', '🇮🇲 Isle of Man'), ('🇮🇱', '🇮🇱 Israel'), ('🇮🇹', '🇮🇹 Italy'), ('🇯🇲', '🇯🇲 Jamaica'), ('🇯🇵', '🇯🇵 Japan'), ('🇯🇪', '🇯🇪 Jersey'), ('🇯🇴', '🇯🇴 Jordan'), ('🇰🇿', '🇰🇿 Kazakhstan'), ('🇰🇪', '🇰🇪 Kenya'), ('🇰🇮', '🇰🇮 Kiribati'), ('🇽🇰', '🇽🇰 Kosovo'), ('🇰🇼', '🇰🇼 Kuwait'), ('🇰🇬', '🇰🇬 Kyrgyzstan'), ('🇱🇦', '🇱🇦 Laos'), ('🇱🇻', '🇱🇻 Latvia'), ('🇱🇧', '🇱🇧 Lebanon'), ('🇱🇸', '🇱🇸 Lesotho'), ('🇱🇷', '🇱🇷 Liberia'), ('🇱🇾', '🇱🇾 Libya'), ('🇱🇮', '🇱🇮 Liechtenstein'), ('🇱🇹', '🇱🇹 Lithuania'), ('🇱🇺', '🇱🇺 Luxembourg'), ('🇲🇴', '🇲🇴 Macau'), ('🇲🇰', '🇲🇰 Macedonia'), ('🇲🇬', '🇲🇬 Madagascar'), ('🇲🇼', '🇲🇼 Malawi'), ('🇲🇾', '🇲🇾 Malaysia'), ('🇲🇻', '🇲🇻 Maldives'), ('🇲🇱', '🇲🇱 Mali'), ('🇲🇹', '🇲🇹 Malta'), ('🇲🇭', '🇲🇭 Marshall Islands'), ('🇲🇶', '🇲🇶 Martinique'), ('🇲🇷', '🇲🇷 Mauritania'), ('🇲🇺', '🇲🇺 Mauritius'), ('🇾🇹', '🇾🇹 Mayotte'), ('🇲🇽', '🇲🇽 Mexico'), ('🇫🇲', '🇫🇲 Micronesia'), ('🇲🇩', '🇲🇩 Moldova'), ('🇲🇨', '🇲🇨 Monaco'), ('🇲🇳', '🇲🇳 Mongolia'), ('🇲🇪', '🇲🇪 Montenegro'), ('🇲🇸', '🇲🇸 Montserrat'), ('🇲🇦', '🇲🇦 Morocco'), ('🇲🇿', '🇲🇿 Mozambique'), ('🇲🇲', '🇲🇲 Myanmar'), ('🇳🇦', '🇳🇦 Namibia'), ('🇳🇷', '🇳🇷 Nauru'), ('🇳🇵', '🇳🇵 Nepal'), ('🇳🇱', '🇳🇱 Netherlands'), ('🇳🇨', '🇳🇨 New Caledonia'), ('🇳🇿', '🇳🇿 New Zealand'), ('🇳🇮', '🇳🇮 Nicaragua'), ('🇳🇪', '🇳🇪 Niger'), ('🇳🇬', '🇳🇬 Nigeria'), ('🇳🇺', '🇳🇺 Niue'), ('🇳🇫', '🇳🇫 Norfolk Island'), ('🇲🇵', '🇲🇵 Northern Mariana Islands'), ('🇰🇵', '🇰🇵 North Korea'), ('🇳🇴', '🇳🇴 Norway'), ('🇴🇲', '🇴🇲 Oman'), ('🇵🇰', '🇵🇰 Pakistan'), ('🇵🇼', '🇵🇼 Palau'), ('🇵🇸', '🇵🇸 Palestinian Territories'), ('🇵🇦', '🇵🇦 Panama'), ('🇵🇬', '🇵🇬 Papua New Guinea'), ('🇵🇾', '🇵🇾 Paraguay'), ('🇵🇪', '🇵🇪 Peru'), ('🇵🇭', '🇵🇭 Philippines'), ('🇵🇳', '🇵🇳 Pitcairn Islands'), ('🇵🇱', '🇵🇱 Poland'), ('🇵🇹', '🇵🇹 Portugal'), ('🇵🇷', '🇵🇷 Puerto Rico'), ('🇶🇦', '🇶🇦 Qatar'), ('🇷🇪', '🇷🇪 Réunion'), ('🇷🇴', '🇷🇴 Romania'), ('🇷🇺', '🇷🇺 Russia'), ('🇷🇼', '🇷🇼 Rwanda'), ('🇼🇸', '🇼🇸 Samoa'), ('🇸🇲', '🇸🇲 San Marino'), ('🇸🇹', '🇸🇹 São Tomé & Príncipe'), ('🇸🇦', '🇸🇦 Saudi Arabia'), ('🇸🇳', '🇸🇳 Senegal'), ('🇷🇸', '🇷🇸 Serbia'), ('🇸🇨', '🇸🇨 Seychelles'), ('🇸🇱', '🇸🇱 Sierra Leone'), ('🇸🇬', '🇸🇬 Singapore'), ('🇸🇽', '🇸🇽 Sint Maarten'), ('🇸🇰', '🇸🇰 Slovakia'), ('🇸🇮', '🇸🇮 Slovenia'), ('🇸🇧', '🇸🇧 Solomon Islands'), ('🇸🇴', '🇸🇴 Somalia'), ('🇿🇦', '🇿🇦 South Africa'), ('🇬🇸', '🇬🇸 South Georgia & South Sandwich Islands'), ('🇰🇷', '🇰🇷 South Korea'), ('🇸🇸', '🇸🇸 South Sudan'), ('🇪🇸', '🇪🇸 Spain'), ('🇱🇰', '🇱🇰 Sri Lanka'), ('🇧🇱', '🇧🇱 St. Barthélemy'), ('🇸🇭', '🇸🇭 St. Helena'), ('🇰🇳', '🇰🇳 St. Kitts & Nevis'), ('🇱🇨', '🇱🇨 St. Lucia'), ('🇲🇫', '🇲🇫 St. Martin'), ('🇵🇲', '🇵🇲 St. Pierre & Miquelon'), ('🇻🇨', '🇻🇨 St. Vincent & Grenadines'), ('🇸🇩', '🇸🇩 Sudan'), ('🇸🇷', '🇸🇷 Suriname'), ('🇸🇯', '🇸🇯 Svalbard & Jan Mayen'), ('🇸🇿', '🇸🇿 Swaziland'), ('🇸🇪', '🇸🇪 Sweden'), ('🇨🇭', '🇨🇭 Switzerland'), ('🇸🇾', '🇸🇾 Syria'), ('🇹🇼', '🇹🇼 Taiwan'), ('🇹🇯', '🇹🇯 Tajikistan'), ('🇹🇿', '🇹🇿 Tanzania'), ('🇹🇭', '🇹🇭 Thailand'), ('🇹🇱', '🇹🇱 Timor-Leste'), ('🇹🇬', '🇹🇬 Togo'), ('🇹🇰', '🇹🇰 Tokelau'), ('🇹🇴', '🇹🇴 Tonga'), ('🇹🇹', '🇹🇹 Trinidad & Tobago'), ('🇹🇦', '🇹🇦 Tristan Da Cunha'), ('🇹🇳', '🇹🇳 Tunisia'), ('🇹🇷', '🇹🇷 Turkey'), ('🇹🇲', '🇹🇲 Turkmenistan'), ('🇹🇨', '🇹🇨 Turks & Caicos Islands'), ('🇹🇻', '🇹🇻 Tuvalu'), ('🇺🇬', '🇺🇬 Uganda'), ('🇺🇦', '🇺🇦 Ukraine'), ('🇦🇪', '🇦🇪 United Arab Emirates'), ('🇬🇧', '🇬🇧 United Kingdom'), ('🇺🇸', '🇺🇸 United States'), ('🇺🇾', '🇺🇾 Uruguay'), ('🇺🇲', '🇺🇲 U.S. Outlying Islands'), ('🇻🇮', '🇻🇮 U.S. Virgin Islands'), ('🇺🇿', '🇺🇿 Uzbekistan'), ('🇻🇺', '🇻🇺 Vanuatu'), ('🇻🇦', '🇻🇦 Vatican City'), ('🇻🇪', '🇻🇪 Venezuela'), ('🇻🇳', '🇻🇳 Vietnam'), ('🇼🇫', '🇼🇫 Wallis & Futuna'), ('🇪🇭', '🇪🇭 Western Sahara'), ('🇾🇪', '🇾🇪 Yemen'), ('🇿🇲', '🇿🇲 Zambia'), ('🇿🇼', '🇿🇼 Zimbabwe'), ('🔃', '🔃 Clockwise Arrows'), ('🔄', '🔄 Anticlockwise Arrows'), ('🔙', '🔙 Back'), ('🔚', '🔚 End'), ('🔛', '🔛 On'), ('🔜', '🔜 Soon'), ('🔝', '🔝 Top'), ('🔰', '🔰 Beginner'), ('🔮', '🔮 Crystal Ball'), ('🔯', '🔯 Six Pointed Star With Middle Dot'), ('✅', '✅ White Heavy Check Mark'), ('❌', '❌ Cross'), ('❎', '❎ Negative Squared Cross Mark'), ('➕', '➕ Heavy Plus Sign'), ('➖', '➖ Heavy Minus Sign'), ('➗', '➗ Heavy Division Sign'), ('➰', '➰ Curly Loop'), ('➿', '➿ Double Curly Loop'), ('❓', '❓ Question'), ('❔', '❔ White Question Mark Ornament'), ('❕', '❕ White Exclamation Mark Ornament'), ('💯', '💯 Hundred Points'), ('🔞', '🔞 Over Eighteen'), ('🔠', '🔠 Latin Capital Letters'), ('🔡', '🔡 Latin Small Letters'), ('🔢', '🔢 Numbers'), ('🔣', '🔣 Symbols'), ('🔤', '🔤 Latin Letters'), ('🅰️', '🅰️ Squared A'), ('🆎', '🆎 Squared AB'), ('🅱️', '🅱️ Squared B'), ('🆑', '🆑 Squared CL'), ('🆒', '🆒 Cool Square'), ('🆓', '🆓 Squared Free'), ('🆔', '🆔 Squared ID'), ('🆕', '🆕 New Square'), ('🆖', '🆖 Squared NG'), ('🅾️', '🅾️ Squared O'), ('🆗', '🆗 OK Square'), ('🆘', '🆘 SOS Square'), ('🆙', '🆙 Squared Up!'), ('🆚', '🆚 Squared Vs'), ('🈁', '🈁 Squared Katakana Koko'), ('🈂️', '🈂️ Squared Katakana Sa'), ('🈷️', '🈷️ Squared 月 (Moon)'), ('🈶', '🈶 Squared 有 (Have)'), ('🉐', '🉐 Circled Ideograph Advantage'), ('🈹', '🈹 Squared CJK Unified Ideograph-5272'), ('🈲', '🈲 Squared CJK Unified Ideograph-7981'), ('🉑', '🉑 Circled 可 (Accept)'), ('🈸', '🈸 Squared CJK Unified Ideograph-7533'), ('🈴', '🈴 Squared CJK Unified Ideograph-5408'), ('🈳', '🈳 Squared CJK Unified Ideograph-7a7a'), ('🈺', '🈺 Squared CJK Unified Ideograph-55b6'), ('🈵', '🈵 Squared CJK Unified Ideograph-6e80'), ('🔶', '🔶 Large Orange Diamond'), ('🔷', '🔷 Large Blue Diamond'), ('🔸', '🔸 Small Orange Diamond'), ('🔹', '🔹 Small Blue Diamond'), ('🔺', '🔺 Up-Pointing Red Triangle'), ('🔻', '🔻 Down-Pointing Red Triangle'), ('💠', '💠 Diamond Shape With a Dot Inside'), ('🔘', '🔘 Radio Button'), ('🔲', '🔲 Black Square Button'), ('🔳', '🔳 White Square Button'), ('🔴', '🔴 Large Red Circle'), ('🔵', '🔵 Large Blue Circle'), ('😀', '😀 Grinning'), ('😗', '😗 Kissing'), ('😙', '😙 Smooch'), ('😑', '😑 True Neutral'), ('😮', '😮 Stunned'), ('😯', '😯 Hushed'), ('😴', '😴 Sleeping'), ('😛', '😛 Tongue'), ('😕', '😕 Confused'), ('😟', '😟 Worried'), ('😦', '😦 Frowning Face With Open Mouth'), ('😧', '😧 Anguished'), ('😬', '😬 Grimacing'), ('🙂', '🙂 Slightly Smiling'), ('🙁', '🙁 Slightly Frowning'), ('🕵', '🕵 Spy'), ('🗣', '🗣 Speaking Head in Silhouette'), ('🕴', '🕴 Man in Business Suit Levitating'), ('🖕', '🖕 Middle Finger'), ('🖖', '🖖 Vulcan Hand'), ('🖐', '🖐 Raised Hand With Fingers Splayed'), ('👁', '👁 Eye'), ('🕳', '🕳 Hole'), ('🗯', '🗯 Right Anger Bubble'), ('🕶', '🕶 Sunglasses'), ('🛍', '🛍 Shopping'), ('🐿', '🐿 Chipmunk'), ('🕊', '🕊 Peace Dove'), ('🕷', '🕷 Spider'), ('🕸', '🕸 Web'), ('🏵', '🏵 Rosette'), ('🌶', '🌶 Chilli'), ('🍽', '🍽 Fork and Knife With Plate'), ('🗺', '🗺 World Map'), ('🏔', '🏔 Snow Capped Mountain'), ('🏕', '🏕 Camping'), ('🏖', '🏖 Beach'), ('🏜', '🏜 Desert'), ('🏝', '🏝 Desert Island'), ('🏞', '🏞 National Park'), ('🏟', '🏟 Stadium'), ('🏛', '🏛 Architecture'), ('🏗', '🏗 Building Construction'), ('🏘', '🏘 House Buildings'), ('🏙', '🏙 Cityscape'), ('🏚', '🏚 Derelict House Building'), ('🖼', '🖼 Frame With Picture'), ('🛢', '🛢 Drum'), ('🛣', '🛣 Motorway'), ('🛤', '🛤 Railway Track'), ('🛳', '🛳 Passenger Ship'), ('🛥', '🛥 Boat'), ('🛩', '🛩 Airplane'), ('🛫', '🛫 Airplane Departure'), ('🛬', '🛬 Airplane Arriving'), ('🛰', '🛰 Satellite'), ('🛎', '🛎 Service Bell'), ('🛌', '🛌 Bed'), ('🛏', '🛏 Bed'), ('🛋', '🛋 Couch and Lamp'), ('🕰', '🕰 Mantelpiece'), ('🌡', '🌡 Thermometer'), ('🌤', '🌤 Small Cloud'), ('🌥', '🌥 White Sun Behind Cloud'), ('🌦', '🌦 White Sun Behind Cloud With Rain'), ('🌧', '🌧 Cloud With Rain'), ('🌨', '🌨 Cloud With Snow'), ('🌩', '🌩 Lightning'), ('🌪', '🌪 Tornado'), ('🌫', '🌫 Fog'), ('🌬', '🌬 Blowing'), ('🎖', '🎖 Medal'), ('🎗', '🎗 Ribbon'), ('🎞', '🎞 Film'), ('🎟', '🎟 Admission Tickets'), ('🏷', '🏷 Label'), ('🏌', '🏌 Golfer'), ('🏋', '🏋 Lifting'), ('🏎', '🏎 Racing Car'), ('🏍', '🏍 Racing Motorcycle'), ('🏅', '🏅 Medal'), ('🕹', '🕹 Joystick'), ('⏸', '⏸ Double Vertical Bar'), ('⏹', '⏹ Black Square for Stop'), ('⏺', '⏺ Black Circle for Record'), ('🎙', '🎙 Microphone'), ('🎚', '🎚 Level Slider'), ('🎛', '🎛 Control Knobs'), ('🖥', '🖥 Desktop'), ('🖨', '🖨 Printer'), ('🖱', '🖱 Three Button Mouse'), ('🖲', '🖲 Trackball'), ('📽', '📽 Film Projector'), ('📸', '📸 Camera With Flash'), ('🕯', '🕯 Candle'), ('🗞', '🗞 Newspaper'), ('🗳', '🗳 Ballot Box With Ballot'), ('🖋', '🖋 Fancy Pen'), ('🖊', '🖊 Lower Left Ballpoint Pen'), ('🖌', '🖌 Lower Left Paintbrush'), ('🖍', '🖍 Lower Left Crayon'), ('🗂', '🗂 Card Index Dividers'), ('🗒', '🗒 Spiral Note Pad'), ('🗓', '🗓 Spiral Calendar Pad'), ('🖇', '🖇 Linked Paperclips'), ('🗃', '🗃 Card File Box'), ('🗄', '🗄 File Cabinet'), ('🗑', '🗑 Wastebasket'), ('🗝', '🗝 Old Key'), ('🛠', '🛠 Tools'), ('🗜', '🗜 Compression'), ('🗡', '🗡 Dagger'), ('🛡', '🛡 Shield'), ('🏳', '🏳 White Flag'), ('🏴', '🏴 Black Flag'), ('🕉', '🕉 Om Symbol'), ('🗨', '🗨 Left Speech Bubble'), ('🤗', '🤗 Hugging'), ('🤔', '🤔 Thinking'), ('🙄', '🙄 Rolling Eyes'), ('🤐', '🤐 Hushed'), ('🤓', '🤓 Nerd'), ('🙃', '🙃 Upside Down'), ('🤒', '🤒 Sick'), ('🤕', '🤕 Hurt'), ('🤑', '🤑 Money'), ('🏻', '🏻 Emoji Modifier 1-2'), ('🏼', '🏼 Emoji Modifier 3'), ('🏽', '🏽 Emoji Modifier 4'), ('🏾', '🏾 Emoji Modifier 5'), ('🏿', '🏿 Emoji Modifier 6'), ('🤘', '🤘 Rock On'), ('📿', '📿 Prayer Beads'), ('🤖', '🤖 Robot'), ('🦁', '🦁 Lion'), ('🦄', '🦄 Unicorn'), ('🦃', '🦃 Turkey'), ('🦀', '🦀 Crab'), ('🦂', '🦂 Scorpion'), ('🧀', '🧀 Cheese'), ('🌭', '🌭 Hot Dog'), ('🌮', '🌮 Taco'), ('🌯', '🌯 Burrito'), ('🍿', '🍿 Popcorn'), ('🍾', '🍾 Popping Cork'), ('🏺', '🏺 Amphora'), ('🛐', '🛐 Place of Worship'), ('🕋', '🕋 Kaaba'), ('🕌', '🕌 Mosque'), ('🕍', '🕍 Synagogue'), ('🕎', '🕎 Menorah'), ('🏏', '🏏 Cricket'), ('🏐', '🏐 Volleyball'), ('🏑', '🏑 Field Hockey'), ('🏒', '🏒 Ice Hockey'), ('🏓', '🏓 Table Tennis'), ('🏸', '🏸 Badminton'), ('🏹', '🏹 Archer'), ('🤣', '🤣 ROFL Face'), ('🤤', '🤤 Drooling'), ('🤢', '🤢 Nauseated'), ('🤧', '🤧 Sneezing'), ('🤠', '🤠 Cowboy'), ('🤡', '🤡 Clown'), ('🤥', '🤥 Lying'), ('🤴', '🤴 Prince'), ('🤵', '🤵 Tuxedo Man'), ('🤰', '🤰 Pregnant'), ('🤶', '🤶 Mrs. Claus'), ('🤦', '🤦 Facepalm'), ('🤷', '🤷 Shrugging'), ('🕺', '🕺 Man Dancing'), ('🤺', '🤺 Fencing'), ('🤸', '🤸 Cartwheel'), ('🤼', '🤼 Wrestling'), ('🤽', '🤽 Water Polo'), ('🤾', '🤾 Handball'), ('🤹', '🤹 Juggling'), ('🤳', '🤳 Selfie'), ('🤞', '🤞 Luck Hand'), ('🤙', '🤙 Call Me Hand'), ('🤛', '🤛 Left-Facing Fist'), ('🤜', '🤜 Right-Facing Fist'), ('🤚', '🤚 Raised Back of Hand'), ('🤝', '🤝 Handshake'), ('🖤', '🖤 Black Heart'), ('🦍', '🦍 Gorilla'), ('🦊', '🦊 Fox'), ('🦌', '🦌 Deer'), ('🦏', '🦏 Rhinoceros'), ('🦇', '🦇 Bat'), ('🦅', '🦅 Eagle'), ('🦆', '🦆 Duck'), ('🦉', '🦉 Owl'), ('🦎', '🦎 Lizard'), ('🦈', '🦈 Shark'), ('🦐', '🦐 Shrimp'), ('🦑', '🦑 Squid'), ('🦋', '🦋 Butterfly'), ('🥀', '🥀 Wilted'), ('🥝', '🥝 Kiwifruit'), ('🥑', '🥑 Avocado'), ('🥔', '🥔 Potato'), ('🥕', '🥕 Carrot'), ('🥒', '🥒 Cucumber'), ('🥜', '🥜 Peanuts'), ('🥐', '🥐 Croissant'), ('🥖', '🥖 Baguette'), ('🥞', '🥞 Pancakes'), ('🥓', '🥓 Bacon'), ('🥙', '🥙 Stuffed Flatbread'), ('🥚', '🥚 Egg'), ('🥘', '🥘 Shallow Pan'), ('🥗', '🥗 Salad'), ('🥛', '🥛 Milk'), ('🥂', '🥂 Clinking Glasses'), ('🥃', '🥃 Tumbler'), ('🥄', '🥄 Spoon'), ('🛴', '🛴 Scooter'), ('🛵', '🛵 Motor Scooter'), ('🛑', '🛑 Stop Sign'), ('🛶', '🛶 Canoe'), ('🥇', '🥇 Gold Medal'), ('🥈', '🥈 Silver Medal'), ('🥉', '🥉 Bronze Medal'), ('🥊', '🥊 Boxing'), ('🥋', '🥋 Martial Arts'), ('🥅', '🥅 Goal Net'), ('🥁', '🥁 Drum'), ('🛒', '🛒 Shopping Cart'), ('\\U0001f929', '\\U0001f929 Star Struck'), ('\\U0001f928', '\\U0001f928 Raised Eyebrow'), ('\\U0001f92f', '\\U0001f92f Mind Blown'), ('\\U0001f92a', '\\U0001f92a Zany Face'), ('\\U0001f92c', '\\U0001f92c Swear Face'), ('\\U0001f92e', '\\U0001f92e Vomiting'), ('\\U0001f92b', '\\U0001f92b Shushing'), ('\\U0001f92d', '\\U0001f92d Hand Over Mouth'), ('\\U0001f9d0', '\\U0001f9d0 Monocle'), ('\\U0001f9d2', '\\U0001f9d2 Child'), ('\\U0001f9d1', '\\U0001f9d1 Adult'), ('\\U0001f9d3', '\\U0001f9d3 Older Adult'), ('\\U0001f9d5', '\\U0001f9d5 Headscarf'), ('\\U0001f9d4', '\\U0001f9d4 Bearded Person'), ('\\U0001f931', '\\U0001f931 Breast Feeding'), ('\\U0001f9d9', '\\U0001f9d9 Mage'), ('\\U0001f9da', '\\U0001f9da Fairy'), ('\\U0001f9db', '\\U0001f9db Vampire'), ('\\U0001f9dc', '\\U0001f9dc Merperson'), ('\\U0001f9dd', '\\U0001f9dd Elf'), ('\\U0001f9de', '\\U0001f9de Genie'), ('\\U0001f9df', '\\U0001f9df Zombie'), ('\\U0001f9d6', '\\U0001f9d6 Steamy Room'), ('\\U0001f9d7', '\\U0001f9d7 Person Climbing'), ('\\U0001f9d8', '\\U0001f9d8 Lotus Position'), ('\\U0001f91f', '\\U0001f91f Love-You Gesture'), ('\\U0001f932', '\\U0001f932 Palms Up Together'), ('\\U0001f9e0', '\\U0001f9e0 Brain'), ('\\U0001f9e1', '\\U0001f9e1 Orange Heart'), ('\\U0001f9e3', '\\U0001f9e3 Scarf'), ('\\U0001f9e4', '\\U0001f9e4 Gloves'), ('\\U0001f9e5', '\\U0001f9e5 Coat'), ('\\U0001f9e6', '\\U0001f9e6 Socks'), ('\\U0001f9e2', '\\U0001f9e2 Billed Cap'), ('\\U0001f993', '\\U0001f993 Zebra'), ('\\U0001f992', '\\U0001f992 Giraffe'), ('\\U0001f994', '\\U0001f994 Hedgehog'), ('\\U0001f995', '\\U0001f995 Long Neck'), ('\\U0001f996', '\\U0001f996 T-Rex'), ('\\U0001f997', '\\U0001f997 Cricket'), ('\\U0001f965', '\\U0001f965 Coconut'), ('\\U0001f966', '\\U0001f966 Broccoli'), ('\\U0001f968', '\\U0001f968 Pretzel'), ('\\U0001f969', '\\U0001f969 Cut of Meat'), ('\\U0001f96a', '\\U0001f96a Sandwich'), ('\\U0001f963', '\\U0001f963 Bowl With Spoon'), ('\\U0001f96b', '\\U0001f96b Canned'), ('\\U0001f95f', '\\U0001f95f Dumpling'), ('\\U0001f960', '\\U0001f960 Fortune Cookie'), ('\\U0001f961', '\\U0001f961 Takeout Box'), ('\\U0001f967', '\\U0001f967 Pie'), ('\\U0001f964', '\\U0001f964 Cup With Straw'), ('\\U0001f962', '\\U0001f962 Chopsticks'), ('\\U0001f6f8', '\\U0001f6f8 Flying Saucer'), ('\\U0001f6f7', '\\U0001f6f7 Sled'), ('\\U0001f94c', '\\U0001f94c Curling')], default=None, max_length=2, null=True, verbose_name='emoji'),\n        ),",
        "detail": "tabbycat.participants.migrations.0007_auto_20180909_2156",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.participants.migrations.0008_auto_20180401_1036",
        "description": "tabbycat.participants.migrations.0008_auto_20180401_1036",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('participants', '0007_auto_20180318_2355'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='team',\n            name='emoji',\n            field=models.CharField(blank=True, choices=[('☁️', '☁️'), ('❄️', '❄️'), ('♠️', '♠️'), ('♥️', '♥️'), ('♦️', '♦️'), ('♣️', '♣️'), ('✉️', '✉️'), ('✂️', '✂️'), ('☕', '☕'), ('⬛', '⬛'), ('⬜', '⬜'), ('⛑', '⛑'), ('⛰', '⛰'), ('⛪', '⛪'), ('⛺', '⛺'), ('⛵', '⛵'), ('⛔', '⛔'), ('⛅', '⛅'), ('⛈', '⛈'), ('⛱', '⛱'), ('⛄', '⛄'), ('⚽', '⚽'), ('⛸', '⛸'), ('⛏', '⛏'), ('😂', '😂'), ('😆', '😆'), ('😉', '😉'), ('😊', '😊'), ('😎', '😎'), ('😍', '😍'), ('😘', '😘'), ('😇', '😇'), ('😐', '😐'), ('😏', '😏'), ('😣', '😣'), ('😥', '😥'), ('😜', '😜'), ('😓', '😓'), ('😖', '😖'), ('😷', '😷'), ('😲', '😲'), ('😭', '😭'), ('😱', '😱'), ('😳', '😳'), ('😵', '😵'), ('😡', '😡'), ('👿', '👿'), ('👨', '👨'), ('👩', '👩'), ('👴', '👴'), ('👵', '👵'), ('👶', '👶'), ('👮', '👮'), ('👷', '👷'), ('👸', '👸'), ('💂', '💂'), ('🎅', '🎅'), ('👼', '👼'), ('👰', '👰'), ('🙅', '🙅'), ('🙆', '🙆'), ('💁', '💁'), ('🙋', '🙋'), ('🙇', '🙇'), ('🙌', '🙌'), ('🙏', '🙏'), ('💃', '💃'), ('👪', '👪'), ('👫', '👫'), ('👬', '👬'), ('👭', '👭'), ('💪', '💪'), ('👆', '👆'), ('✊', '✊'), ('✋', '✋'), ('👊', '👊'), ('👌', '👌'), ('👍', '👍'), ('👎', '👎'), ('👏', '👏'), ('💅', '💅'), ('👣', '👣'), ('👀', '👀'), ('👂', '👂'), ('👃', '👃'), ('👅', '👅'), ('👄', '👄'), ('💘', '💘'), ('💔', '💔'), ('💖', '💖'), ('💌', '💌'), ('💧', '💧'), ('💤', '💤'), ('💣', '💣'), ('💥', '💥'), ('💦', '💦'), ('💨', '💨'), ('💫', '💫'), ('👓', '👓'), ('👔', '👔'), ('👜', '👜'), ('👟', '👟'), ('👠', '👠'), ('👑', '👑'), ('👒', '👒'), ('🎩', '🎩'), ('💄', '💄'), ('💍', '💍'), ('💎', '💎'), ('👻', '👻'), ('💀', '💀'), ('👽', '👽'), ('👾', '👾'), ('💩', '💩'), ('🐵', '🐵'), ('🙈', '🙈'), ('🙉', '🙉'), ('🙊', '🙊'), ('🐶', '🐶'), ('🐺', '🐺'), ('🐯', '🐯'), ('🐴', '🐴'), ('🐮', '🐮'), ('🐑', '🐑'), ('🐭', '🐭'), ('🐹', '🐹'), ('🐰', '🐰'), ('🐻', '🐻'), ('🐨', '🐨'), ('🐼', '🐼'), ('🐔', '🐔'), ('🐣', '🐣'), ('🐤', '🐤'), ('🐦', '🐦'), ('🐧', '🐧'), ('🐸', '🐸'), ('🐢', '🐢'), ('🐍', '🐍'), ('🐲', '🐲'), ('🐳', '🐳'), ('🐬', '🐬'), ('🐠', '🐠'), ('🐙', '🐙'), ('🐚', '🐚'), ('🐌', '🐌'), ('🐛', '🐛'), ('🐝', '🐝'), ('💐', '💐'), ('🌸', '🌸'), ('🌹', '🌹'), ('🌻', '🌻'), ('🌷', '🌷'), ('🌱', '🌱'), ('🌴', '🌴'), ('🌵', '🌵'), ('🌿', '🌿'), ('🍀', '🍀'), ('🍁', '🍁'), ('🍇', '🍇'), ('🍉', '🍉'), ('🍋', '🍋'), ('🍌', '🍌'), ('🍍', '🍍'), ('🍎', '🍎'), ('🍑', '🍑'), ('🍒', '🍒'), ('🍓', '🍓'), ('🍆', '🍆'), ('🌽', '🌽'), ('🍄', '🍄'), ('🍞', '🍞'), ('🍔', '🍔'), ('🍟', '🍟'), ('🍕', '🍕'), ('🍙', '🍙'), ('🍩', '🍩'), ('🍪', '🍪'), ('🍰', '🍰'), ('🍭', '🍭'), ('🍼', '🍼'), ('🍷', '🍷'), ('🍹', '🍹'), ('🍺', '🍺'), ('🍴', '🍴'), ('🌋', '🌋'), ('🏠', '🏠'), ('🏢', '🏢'), ('🏥', '🏥'), ('🏰', '🏰'), ('🌊', '🌊'), ('🎡', '🎡'), ('🎢', '🎢'), ('🎪', '🎪'), ('🎨', '🎨'), ('🚃', '🚃'), ('🚄', '🚄'), ('🚝', '🚝'), ('🚍', '🚍'), ('🚔', '🚔'), ('🚘', '🚘'), ('🚲', '🚲'), ('🚨', '🚨'), ('🚣', '🚣'), ('🚁', '🚁'), ('🚀', '🚀'), ('🚦', '🚦'), ('🚧', '🚧'), ('🚫', '🚫'), ('🚷', '🚷'), ('🚻', '🚻'), ('🚽', '🚽'), ('🚿', '🚿'), ('🛀', '🛀'), ('⏳', '⏳'), ('⏰', '⏰'), ('🌑', '🌑'), ('🌕', '🌕'), ('🌗', '🌗'), ('🌞', '🌞'), ('🌈', '🌈'), ('🌟', '🌟'), ('🔥', '🔥'), ('🎃', '🎃'), ('🎄', '🎄'), ('🎈', '🎈'), ('🎉', '🎉'), ('🎓', '🎓'), ('🎯', '🎯'), ('🎀', '🎀'), ('🏀', '🏀'), ('🏈', '🏈'), ('🎾', '🎾'), ('🎱', '🎱'), ('🏊', '🏊'), ('🎮', '🎮'), ('🎲', '🎲'), ('📣', '📣'), ('📯', '📯'), ('🔔', '🔔'), ('🎶', '🎶'), ('🎤', '🎤'), ('🎹', '🎹'), ('🎺', '🎺'), ('🎻', '🎻'), ('📻', '📻'), ('📱', '📱'), ('📞', '📞'), ('🔋', '🔋'), ('🔌', '🔌'), ('💾', '💾'), ('💿', '💿'), ('🎬', '🎬'), ('📺', '📺'), ('📷', '📷'), ('🔍', '🔍'), ('🔭', '🔭'), ('💡', '💡'), ('📕', '📕'), ('📰', '📰'), ('💰', '💰'), ('💸', '💸'), ('📦', '📦'), ('📫', '📫'), ('💼', '💼'), ('📅', '📅'), ('📎', '📎'), ('📏', '📏'), ('📐', '📐'), ('🔒', '🔒'), ('🔑', '🔑'), ('🔧', '🔧'), ('🔩', '🔩'), ('💉', '💉'), ('💊', '💊'), ('🔪', '🔪'), ('🔫', '🔫'), ('🚬', '🚬'), ('🏁', '🏁'), ('🔮', '🔮'), ('❌', '❌'), ('❓', '❓'), ('🔞', '🔞'), ('🆒', '🆒'), ('🆗', '🆗'), ('🆘', '🆘'), ('😙', '😙'), ('😑', '😑'), ('😮', '😮'), ('😴', '😴'), ('😧', '😧'), ('😬', '😬'), ('🕵', '🕵'), ('🖕', '🖕'), ('🖖', '🖖'), ('👁', '👁'), ('🛍', '🛍'), ('🐿', '🐿'), ('🕊', '🕊'), ('🕷', '🕷'), ('🕸', '🕸'), ('🏵', '🏵'), ('🌶', '🌶'), ('🏕', '🏕'), ('🏛', '🏛'), ('🛢', '🛢'), ('🛥', '🛥'), ('🛩', '🛩'), ('🛎', '🛎'), ('🕰', '🕰'), ('🌡', '🌡'), ('🌩', '🌩'), ('🌪', '🌪'), ('🌬', '🌬'), ('🎖', '🎖'), ('🎗', '🎗'), ('🎞', '🎞'), ('🏷', '🏷'), ('🏋', '🏋'), ('🕹', '🕹'), ('🖥', '🖥'), ('🖨', '🖨'), ('🖲', '🖲'), ('📸', '📸'), ('🕯', '🕯'), ('🗞', '🗞'), ('🖋', '🖋'), ('🗑', '🗑'), ('🛠', '🛠'), ('🗡', '🗡'), ('🛡', '🛡'), ('🏳', '🏳'), ('🏴', '🏴'), ('🤗', '🤗'), ('🤔', '🤔'), ('🙄', '🙄'), ('🤐', '🤐'), ('🤓', '🤓'), ('🙃', '🙃'), ('🤒', '🤒'), ('🤕', '🤕'), ('🤑', '🤑'), ('🤘', '🤘'), ('📿', '📿'), ('🤖', '🤖'), ('🦁', '🦁'), ('🦄', '🦄'), ('🦀', '🦀'), ('🦂', '🦂'), ('🧀', '🧀'), ('🌭', '🌭'), ('🌮', '🌮'), ('🌯', '🌯'), ('🍿', '🍿'), ('🍾', '🍾'), ('🏏', '🏏'), ('🏐', '🏐'), ('🏓', '🏓'), ('🏹', '🏹'), ('🤣', '🤣'), ('🤤', '🤤'), ('🤢', '🤢'), ('🤧', '🤧'), ('🤠', '🤠'), ('🤡', '🤡'), ('🤥', '🤥'), ('🤴', '🤴'), ('🤵', '🤵'), ('🤰', '🤰'), ('🤶', '🤶'), ('🤦', '🤦'), ('🤷', '🤷'), ('🕺', '🕺'), ('🤺', '🤺'), ('🤸', '🤸'), ('🤼', '🤼'), ('🤹', '🤹'), ('🤳', '🤳'), ('🤞', '🤞'), ('🤙', '🤙'), ('🤝', '🤝'), ('🖤', '🖤'), ('🦊', '🦊'), ('🦇', '🦇'), ('🦅', '🦅'), ('🦆', '🦆'), ('🦉', '🦉'), ('🦎', '🦎'), ('🦈', '🦈'), ('🦐', '🦐'), ('🦑', '🦑'), ('🦋', '🦋'), ('🥝', '🥝'), ('🥑', '🥑'), ('🥔', '🥔'), ('🥕', '🥕'), ('🥒', '🥒'), ('🥜', '🥜'), ('🥐', '🥐'), ('🥖', '🥖'), ('🥞', '🥞'), ('🥚', '🥚'), ('🥗', '🥗'), ('🥛', '🥛'), ('🥃', '🥃'), ('🥄', '🥄'), ('🛶', '🛶'), ('🥊', '🥊'), ('🥋', '🥋'), ('🥅', '🥅'), ('🥁', '🥁'), ('🛒', '🛒')], default=None, max_length=2, null=True, verbose_name='emoji'),\n        ),",
        "detail": "tabbycat.participants.migrations.0008_auto_20180401_1036",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.participants.migrations.0008_auto_20181224_1719",
        "description": "tabbycat.participants.migrations.0008_auto_20181224_1719",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('participants', '0007_auto_20180909_2156'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='adjudicator',\n            name='adj_core',\n            field=models.BooleanField(blank=True, default=False, verbose_name='adjudication core'),\n        ),",
        "detail": "tabbycat.participants.migrations.0008_auto_20181224_1719",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.participants.migrations.0009_auto_20180331_2259",
        "description": "tabbycat.participants.migrations.0009_auto_20180331_2259",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('participants', '0008_auto_20180401_1036'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='team',\n            name='emoji',\n            field=models.CharField(blank=True, choices=[('☁️', '☁️'), ('❄️', '❄️'), ('♠️', '♠️'), ('♥️', '♥️'), ('♦️', '♦️'), ('♣️', '♣️'), ('✉️', '✉️'), ('✂️', '✂️'), ('☕', '☕'), ('⬛', '⬛'), ('⬜', '⬜'), ('⛑', '⛑'), ('⛰', '⛰'), ('⛪', '⛪'), ('⛺', '⛺'), ('⛵', '⛵'), ('⛔', '⛔'), ('⛅', '⛅'), ('⛈', '⛈'), ('⛱', '⛱'), ('⛄', '⛄'), ('⚽', '⚽'), ('⛸', '⛸'), ('⛏', '⛏'), ('😂', '😂'), ('😆', '😆'), ('😉', '😉'), ('😊', '😊'), ('😎', '😎'), ('😍', '😍'), ('😘', '😘'), ('😇', '😇'), ('😐', '😐'), ('😏', '😏'), ('😣', '😣'), ('😥', '😥'), ('😜', '😜'), ('😓', '😓'), ('😖', '😖'), ('😷', '😷'), ('😲', '😲'), ('😭', '😭'), ('😱', '😱'), ('😳', '😳'), ('😵', '😵'), ('😡', '😡'), ('👿', '👿'), ('👨', '👨'), ('👩', '👩'), ('👴', '👴'), ('👵', '👵'), ('👶', '👶'), ('👮', '👮'), ('👷', '👷'), ('👸', '👸'), ('💂', '💂'), ('🎅', '🎅'), ('👼', '👼'), ('👰', '👰'), ('🙅', '🙅'), ('🙆', '🙆'), ('💁', '💁'), ('🙋', '🙋'), ('🙇', '🙇'), ('🙌', '🙌'), ('🙏', '🙏'), ('💃', '💃'), ('👪', '👪'), ('👫', '👫'), ('👬', '👬'), ('👭', '👭'), ('💪', '💪'), ('👆', '👆'), ('✊', '✊'), ('✋', '✋'), ('👊', '👊'), ('👌', '👌'), ('👍', '👍'), ('👎', '👎'), ('👏', '👏'), ('💅', '💅'), ('👣', '👣'), ('👀', '👀'), ('👂', '👂'), ('👃', '👃'), ('👅', '👅'), ('👄', '👄'), ('💘', '💘'), ('💔', '💔'), ('💖', '💖'), ('💌', '💌'), ('💧', '💧'), ('💤', '💤'), ('💣', '💣'), ('💥', '💥'), ('💦', '💦'), ('💨', '💨'), ('💫', '💫'), ('👓', '👓'), ('👔', '👔'), ('👜', '👜'), ('👟', '👟'), ('👠', '👠'), ('👑', '👑'), ('👒', '👒'), ('🎩', '🎩'), ('💄', '💄'), ('💍', '💍'), ('💎', '💎'), ('👻', '👻'), ('💀', '💀'), ('👽', '👽'), ('👾', '👾'), ('💩', '💩'), ('🐵', '🐵'), ('🙈', '🙈'), ('🙉', '🙉'), ('🙊', '🙊'), ('🐶', '🐶'), ('🐺', '🐺'), ('🐯', '🐯'), ('🐴', '🐴'), ('🐮', '🐮'), ('🐑', '🐑'), ('🐭', '🐭'), ('🐹', '🐹'), ('🐰', '🐰'), ('🐻', '🐻'), ('🐨', '🐨'), ('🐼', '🐼'), ('🐔', '🐔'), ('🐣', '🐣'), ('🐤', '🐤'), ('🐦', '🐦'), ('🐧', '🐧'), ('🐸', '🐸'), ('🐢', '🐢'), ('🐍', '🐍'), ('🐲', '🐲'), ('🐳', '🐳'), ('🐬', '🐬'), ('🐠', '🐠'), ('🐙', '🐙'), ('🐚', '🐚'), ('🐌', '🐌'), ('🐛', '🐛'), ('🐝', '🐝'), ('💐', '💐'), ('🌸', '🌸'), ('🌹', '🌹'), ('🌻', '🌻'), ('🌷', '🌷'), ('🌱', '🌱'), ('🌴', '🌴'), ('🌵', '🌵'), ('🌿', '🌿'), ('🍀', '🍀'), ('🍁', '🍁'), ('🍇', '🍇'), ('🍉', '🍉'), ('🍋', '🍋'), ('🍌', '🍌'), ('🍍', '🍍'), ('🍎', '🍎'), ('🍑', '🍑'), ('🍒', '🍒'), ('🍓', '🍓'), ('🍆', '🍆'), ('🌽', '🌽'), ('🍄', '🍄'), ('🍞', '🍞'), ('🍔', '🍔'), ('🍟', '🍟'), ('🍕', '🍕'), ('🍙', '🍙'), ('🍩', '🍩'), ('🍪', '🍪'), ('🍰', '🍰'), ('🍭', '🍭'), ('🍼', '🍼'), ('🍷', '🍷'), ('🍹', '🍹'), ('🍺', '🍺'), ('🍴', '🍴'), ('🌋', '🌋'), ('🏠', '🏠'), ('🏢', '🏢'), ('🏥', '🏥'), ('🏰', '🏰'), ('🌊', '🌊'), ('🎡', '🎡'), ('🎢', '🎢'), ('🎪', '🎪'), ('🎨', '🎨'), ('🚃', '🚃'), ('🚄', '🚄'), ('🚝', '🚝'), ('🚍', '🚍'), ('🚔', '🚔'), ('🚘', '🚘'), ('🚲', '🚲'), ('🚨', '🚨'), ('🚣', '🚣'), ('🚁', '🚁'), ('🚀', '🚀'), ('🚦', '🚦'), ('🚧', '🚧'), ('🚫', '🚫'), ('🚷', '🚷'), ('🚻', '🚻'), ('🚽', '🚽'), ('🚿', '🚿'), ('🛀', '🛀'), ('⏳', '⏳'), ('⏰', '⏰'), ('🌑', '🌑'), ('🌕', '🌕'), ('🌗', '🌗'), ('🌞', '🌞'), ('🌈', '🌈'), ('🌟', '🌟'), ('🔥', '🔥'), ('🎃', '🎃'), ('🎄', '🎄'), ('🎈', '🎈'), ('🎉', '🎉'), ('🎓', '🎓'), ('🎯', '🎯'), ('🎀', '🎀'), ('🏀', '🏀'), ('🏈', '🏈'), ('🎾', '🎾'), ('🎱', '🎱'), ('🏊', '🏊'), ('🎮', '🎮'), ('🎲', '🎲'), ('📣', '📣'), ('📯', '📯'), ('🔔', '🔔'), ('🎶', '🎶'), ('🎤', '🎤'), ('🎹', '🎹'), ('🎺', '🎺'), ('🎻', '🎻'), ('📻', '📻'), ('📱', '📱'), ('📞', '📞'), ('🔋', '🔋'), ('🔌', '🔌'), ('💾', '💾'), ('💿', '💿'), ('🎬', '🎬'), ('📺', '📺'), ('📷', '📷'), ('🔍', '🔍'), ('🔭', '🔭'), ('💡', '💡'), ('📕', '📕'), ('📰', '📰'), ('💰', '💰'), ('💸', '💸'), ('📦', '📦'), ('📫', '📫'), ('💼', '💼'), ('📅', '📅'), ('📎', '📎'), ('📏', '📏'), ('📐', '📐'), ('🔒', '🔒'), ('🔑', '🔑'), ('🔧', '🔧'), ('🔩', '🔩'), ('💉', '💉'), ('💊', '💊'), ('🔪', '🔪'), ('🔫', '🔫'), ('🚬', '🚬'), ('🏁', '🏁'), ('🔮', '🔮'), ('❌', '❌'), ('❓', '❓'), ('🔞', '🔞'), ('🆒', '🆒'), ('🆗', '🆗'), ('🆘', '🆘'), ('😙', '😙'), ('😑', '😑'), ('😮', '😮'), ('😴', '😴'), ('😧', '😧'), ('😬', '😬'), ('🕵', '🕵'), ('🖖', '🖖'), ('🛍', '🛍'), ('🐿', '🐿'), ('🕊', '🕊'), ('🕷', '🕷'), ('🕸', '🕸'), ('🏵', '🏵'), ('🌶', '🌶'), ('🏛', '🏛'), ('🛢', '🛢'), ('🛥', '🛥'), ('🛩', '🛩'), ('🛎', '🛎'), ('🕰', '🕰'), ('🌡', '🌡'), ('🌩', '🌩'), ('🌪', '🌪'), ('🌬', '🌬'), ('🎖', '🎖'), ('🎞', '🎞'), ('🏷', '🏷'), ('🏋', '🏋'), ('🕹', '🕹'), ('🖥', '🖥'), ('🖨', '🖨'), ('🖲', '🖲'), ('🕯', '🕯'), ('🖋', '🖋'), ('🗑', '🗑'), ('🛠', '🛠'), ('🗡', '🗡'), ('🛡', '🛡'), ('🏳', '🏳'), ('🏴', '🏴'), ('🤗', '🤗'), ('🤔', '🤔'), ('🙄', '🙄'), ('🤐', '🤐'), ('🤓', '🤓'), ('🙃', '🙃'), ('🤒', '🤒'), ('🤕', '🤕'), ('🤑', '🤑'), ('🤘', '🤘'), ('📿', '📿'), ('🤖', '🤖'), ('🦁', '🦁'), ('🦄', '🦄'), ('🦀', '🦀'), ('🦂', '🦂'), ('🧀', '🧀'), ('🌭', '🌭'), ('🌮', '🌮'), ('🌯', '🌯'), ('🍿', '🍿'), ('🍾', '🍾'), ('🏏', '🏏'), ('🏐', '🏐'), ('🏓', '🏓'), ('🏹', '🏹'), ('\\U0001f923', '\\U0001f923'), ('\\U0001f924', '\\U0001f924'), ('\\U0001f922', '\\U0001f922'), ('\\U0001f927', '\\U0001f927'), ('\\U0001f920', '\\U0001f920'), ('\\U0001f921', '\\U0001f921'), ('\\U0001f925', '\\U0001f925'), ('\\U0001f934', '\\U0001f934'), ('\\U0001f935', '\\U0001f935'), ('\\U0001f930', '\\U0001f930'), ('\\U0001f936', '\\U0001f936'), ('\\U0001f926', '\\U0001f926'), ('\\U0001f937', '\\U0001f937'), ('\\U0001f57a', '\\U0001f57a'), ('\\U0001f93a', '\\U0001f93a'), ('\\U0001f938', '\\U0001f938'), ('\\U0001f93c', '\\U0001f93c'), ('\\U0001f939', '\\U0001f939'), ('\\U0001f933', '\\U0001f933'), ('\\U0001f91e', '\\U0001f91e'), ('\\U0001f919', '\\U0001f919'), ('\\U0001f91d', '\\U0001f91d'), ('\\U0001f5a4', '\\U0001f5a4'), ('\\U0001f98a', '\\U0001f98a'), ('\\U0001f987', '\\U0001f987'), ('\\U0001f985', '\\U0001f985'), ('\\U0001f986', '\\U0001f986'), ('\\U0001f989', '\\U0001f989'), ('\\U0001f98e', '\\U0001f98e'), ('\\U0001f988', '\\U0001f988'), ('\\U0001f990', '\\U0001f990'), ('\\U0001f991', '\\U0001f991'), ('\\U0001f98b', '\\U0001f98b'), ('\\U0001f95d', '\\U0001f95d'), ('\\U0001f951', '\\U0001f951'), ('\\U0001f954', '\\U0001f954'), ('\\U0001f955', '\\U0001f955'), ('\\U0001f952', '\\U0001f952'), ('\\U0001f95c', '\\U0001f95c'), ('\\U0001f950', '\\U0001f950'), ('\\U0001f956', '\\U0001f956'), ('\\U0001f95e', '\\U0001f95e'), ('\\U0001f95a', '\\U0001f95a'), ('\\U0001f957', '\\U0001f957'), ('\\U0001f95b', '\\U0001f95b'), ('\\U0001f943', '\\U0001f943'), ('\\U0001f944', '\\U0001f944'), ('\\U0001f6f6', '\\U0001f6f6'), ('\\U0001f94a', '\\U0001f94a'), ('\\U0001f94b', '\\U0001f94b'), ('\\U0001f945', '\\U0001f945'), ('\\U0001f941', '\\U0001f941'), ('\\U0001f6d2', '\\U0001f6d2')], default=None, max_length=2, null=True, verbose_name='emoji'),\n        ),",
        "detail": "tabbycat.participants.migrations.0009_auto_20180331_2259",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.participants.migrations.0009_auto_20190227_2310",
        "description": "tabbycat.participants.migrations.0009_auto_20190227_2310",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('participants', '0008_auto_20181224_1719'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='team',\n            name='emoji',\n            field=models.CharField(blank=True, choices=[('☺️', '☺️ White Smiling'), ('☹', '☹ White Frowning'), ('☝️', '☝️ White Up Pointing Index'), ('✌️', '✌️ Victory Hand'), ('✍', '✍ Writing Hand'), ('❤️', '❤️ Heavy Black Heart'), ('❣', '❣ Heart Exclamation Mark'), ('☠', '☠ Skull and Crossbones'), ('♨️', '♨️ Hot Springs'), ('✈️', '✈️ Airplane'), ('⌛', '⌛ Hourglass'), ('⌚', '⌚ Watch'), ('♈', '♈ Aries'), ('♉', '♉ Taurus'), ('♊', '♊ Gemini'), ('♋', '♋ Cancer'), ('♌', '♌ Leo'), ('♍', '♍ Virgo'), ('♎', '♎ Libra'), ('♏', '♏ Scorpius'), ('♐', '♐ Sagittarius'), ('♑', '♑ Capricorn'), ('♒', '♒ Aquarius'), ('♓', '♓ Pisces'), ('☀️', '☀️ Black Sun With Rays'), ('☁️', '☁️ Cloud'), ('☂', '☂ Umbrella'), ('❄️', '❄️ Snowflake'), ('☃', '☃ Snowman'), ('☄️', '☄️ Comet'), ('♠️', '♠️ Spade Suit'), ('♥️', '♥️ Heart Suit'), ('♦️', '♦️ Diamond Suit'), ('♣️', '♣️ Club Suit'), ('▶️', '▶️ Black Right-Pointing Triangle'), ('◀️', '◀️ Black Left-Pointing Triangle'), ('☎️', '☎️ Black Telephone'), ('⌨', '⌨ Keyboard'), ('✉️', '✉️ Envelope'), ('✏️', '✏️ Pencil'), ('✒️', '✒️ Black Nib'), ('✂️', '✂️ Scissors'), ('↗️', '↗️ North East Arrow'), ('➡️', '➡️ Black Rightwards Arrow'), ('↘️', '↘️ South East Arrow'), ('↙️', '↙️ South West Arrow'), ('↖️', '↖️ North West Arrow'), ('↕️', '↕️ Up Down Arrow'), ('↔️', '↔️ Left Right Arrow'), ('↩️', '↩️ Leftwards Arrow With Hook'), ('↪️', '↪️ Rightwards Arrow With Hook'), ('✡', '✡ Star of David'), ('☸', '☸ Wheel of Dharma'), ('☯', '☯ Yin Yang'), ('✝', '✝ Latin Cross'), ('☦', '☦ Orthodox Cross'), ('☪', '☪ Star and Crescent'), ('☮', '☮ Peace Symbol'), ('☢', '☢ Radioactive Sign'), ('☣', '☣ Biohazard Sign'), ('☑️', '☑️ Ballot Box With Check'), ('✔️', '✔️ Heavy Check Mark'), ('✖️', '✖️ Heavy Multiplication X'), ('✳️', '✳️ Eight Spoked Asterisk'), ('✴️', '✴️ Eight Pointed Black Star'), ('❇️', '❇️ Sparkle'), ('‼️', '‼️ Double Exclamation Mark'), ('〰️', '〰️ Wavy Dash'), ('©️', '©️ Copyright Sign'), ('®️', '®️ Registered Sign'), ('™️', '™️ Trade Mark Sign'), ('Ⓜ️', 'Ⓜ️ Capital M'), ('㊗️', '㊗️ Congratulations'), ('㊙️', '㊙️ Secret'), ('▪️', '▪️ Black Square'), ('▫️', '▫️ White Square'), ('#⃣️', '#⃣️ Keycap Number Sign'), ('*⃣', '*⃣ Keycap Asterisk'), ('0⃣️', '0⃣️ Keycap Digit Zero'), ('1⃣️', '1⃣️ Keycap Digit One'), ('2⃣️', '2⃣️ Keycap Digit Two'), ('3⃣️', '3⃣️ Keycap Digit Three'), ('4⃣️', '4⃣️ Keycap Digit Four'), ('5⃣️', '5⃣️ Keycap Digit Five'), ('6⃣️', '6⃣️ Keycap Digit Six'), ('7⃣️', '7⃣️ Keycap Digit Seven'), ('8⃣️', '8⃣️ Keycap Digit Eight'), ('9⃣️', '9⃣️ Keycap Digit Nine'), ('⁉️', '⁉️ Exclamation Question Mark'), ('ℹ️', 'ℹ️ Information Source'), ('⤴️', '⤴️ Right-Curve-Up'), ('⤵️', '⤵️ Right-Curve-Down'), ('♻️', '♻️ Recycling'), ('〽️', '〽️ Part Alternation Mark'), ('◻️', '◻️ White Medium Square'), ('◼️', '◼️ Black Medium Square'), ('◽', '◽ White Medium Small Square'), ('◾', '◾ Black Medium Small Square'), ('☕', '☕ Hot Beverage'), ('⚠️', '⚠️ Warning Sign'), ('☔', '☔ Umbrella With Rain Drops'), ('⏏', '⏏ Eject Symbol'), ('⬆️', '⬆️ Upwards Black Arrow'), ('⬇️', '⬇️ Downwards Black Arrow'), ('⬅️', '⬅️ Leftwards Black Arrow'), ('⚡', '⚡ High Voltage'), ('☘', '☘ Shamrock'), ('⚓', '⚓ Anchor'), ('♿', '♿ Wheelchair Symbol'), ('⚒', '⚒ Hammer and Pick'), ('⚙', '⚙ Gear'), ('⚗', '⚗ Alembic'), ('⚖', '⚖ Scales'), ('⚔', '⚔ Crossed Swords'), ('⚰', '⚰ Coffin'), ('⚱', '⚱ Funeral Urn'), ('⚜', '⚜ Fleur-De-Lis'), ('⚛', '⚛ Atom Symbol'), ('⚪', '⚪ Medium White Circle'), ('⚫', '⚫ Medium Black Circle'), ('🀄', '🀄 Mahjong Tile Red Dragon'), ('⭐', '⭐ White Medium Star'), ('⬛', '⬛ Black Square'), ('⬜', '⬜ White Square'), ('⛑', '⛑ Rescue Hat'), ('⛰', '⛰ Mountain'), ('⛪', '⛪ Church'), ('⛲', '⛲ Fountain'), ('⛺', '⛺ Tent'), ('⛽', '⛽ Fuel Pump'), ('⛵', '⛵ Sailboat'), ('⛴', '⛴ Ferry'), ('⛔', '⛔ No Entry'), ('⛅', '⛅ Overcast'), ('⛈', '⛈ Storm'), ('⛱', '⛱ Umbrella'), ('⛄', '⛄ Snowman'), ('⚽', '⚽ Soccer'), ('⚾', '⚾ Baseball'), ('⛳', '⛳ Hole in One'), ('⛸', '⛸ Ice Skate'), ('⛷', '⛷ Skier'), ('⛹', '⛹ Person With Ball'), ('⛏', '⛏ Pick'), ('⛓', '⛓ Chains'), ('⛩', '⛩ Shinto Shrine'), ('⭕', '⭕ Heavy Large Circle'), ('❗', '❗ Heavy Exclamation Mark'), ('🅿️', '🅿️ Squared P'), ('🈯', '🈯 Squared 指 (Finger)'), ('🈚', '🈚 Squared CJK Unified Ideograph-7121'), ('😁', '😁 Smiling Eyes'), ('😂', '😂 Joy Tears'), ('😃', '😃 Smiling Face With Open Mouth'), ('😄', '😄 Smiling Face With Open Mouth and Smiling Eyes'), ('😅', '😅 Cold Sweat'), ('😆', '😆 Closed Eyes'), ('😉', '😉 Winky'), ('😊', '😊 Smiling Eyes'), ('😋', '😋 Face Savouring Delicious Food'), ('😎', '😎 Wearing Sunglasses'), ('😍', '😍 Heart Eyes'), ('😘', '😘 Kissy'), ('😚', '😚 Kissing Face With Closed Eyes'), ('😇', '😇 Halo'), ('😐', '😐 Neutral'), ('😶', '😶 No Mouth'), ('😏', '😏 Smirking'), ('😣', '😣 Persevering'), ('😥', '😥 Disappointed'), ('😪', '😪 Sleepy'), ('😫', '😫 Tired'), ('😌', '😌 Relieved'), ('😜', '😜 Tongue Out'), ('😝', '😝 Tongue Out Closed Eyes'), ('😒', '😒 Unamused'), ('😓', '😓 Cold Sweat'), ('😔', '😔 Pensive'), ('😖', '😖 Confounded'), ('😷', '😷 Medical Mask'), ('😲', '😲 Astonished'), ('😞', '😞 Disappointed'), ('😤', '😤 Face With Look of Triumph'), ('😢', '😢 Crying'), ('😭', '😭 Sobbing'), ('😨', '😨 Fearful'), ('😩', '😩 Weary'), ('😰', '😰 Open Mouth Cold Sweat'), ('😱', '😱 Screaming'), ('😳', '😳 Flushed'), ('😵', '😵 Dizzy'), ('😡', '😡 Pouting'), ('😠', '😠 Angry'), ('👿', '👿 Imp'), ('😈', '😈 Smiling Face With Horns'), ('👦', '👦 Boy'), ('👧', '👧 Girl'), ('👨', '👨 Generic Man'), ('👩', '👩 Generic Woman'), ('👴', '👴 Older Man'), ('👵', '👵 Older Woman'), ('👶', '👶 Baby'), ('👱', '👱 Person With Blond Hair'), ('👮', '👮 Police Officer'), ('👲', '👲 Man With Gua Pi Mao'), ('👳', '👳 Man With Turban'), ('👷', '👷 Trade Worker'), ('👸', '👸 Princess'), ('💂', '💂 Guardsman'), ('🎅', '🎅 Santa Claus'), ('👼', '👼 Baby Angel'), ('👯', '👯 Bunny Women'), ('💆', '💆 Face Massage'), ('💇', '💇 Haircut'), ('👰', '👰 Bride'), ('🙍', '🙍 Person Frowning'), ('🙎', '🙎 Person With Pouting'), ('🙅', '🙅 Block Gesture'), ('🙆', '🙆 OK Gesture'), ('💁', '💁 Sass Gesture'), ('🙋', '🙋 Raised Hand'), ('🙇', '🙇 Deep Bow'), ('🙌', '🙌 Praise Hands'), ('🙏', '🙏 Prayer Hands'), ('👤', '👤 Bust in Silhouette'), ('👥', '👥 Busts in Silhouette'), ('🚶', '🚶 Pedestrian'), ('🏃', '🏃 Runner'), ('💃', '💃 Dancer'), ('💏', '💏 Kiss'), ('💑', '💑 Heteronormative Couple'), ('👪', '👪 Hetero Family'), ('👫', '👫 Man & Woman'), ('👬', '👬 Two Men'), ('👭', '👭 Two Women'), ('💪', '💪 Biceps'), ('👈', '👈 Left Pointing Backhand'), ('👉', '👉 Right Pointing Backhand'), ('👆', '👆 Pointing Hand'), ('👇', '👇 Down Pointing Backhand'), ('✊', '✊ Power Hand'), ('✋', '✋ Palm Hand'), ('👊', '👊 Fist Hand'), ('👌', '👌 OK Hand'), ('👍', '👍 Thumbs Up'), ('👎', '👎 Thumbs Down'), ('👋', '👋 Waving Hand Sign'), ('👏', '👏 Clappy Hands'), ('👐', '👐 Open Hands Sign'), ('💅', '💅 Nail Polish'), ('👣', '👣 Footprints'), ('👀', '👀 Eyes'), ('👂', '👂 Ear'), ('👃', '👃 Nose'), ('👅', '👅 Lick'), ('👄', '👄 Mouth'), ('💋', '💋 Kiss Mark'), ('💘', '💘 Cupid Arrow'), ('💓', '💓 Beating Heart'), ('💔', '💔 Broken Heart'), ('💕', '💕 Two Hearts'), ('💖', '💖 Sparkly Heart'), ('💗', '💗 Growing Heart'), ('💙', '💙 Blue Heart'), ('💚', '💚 Green Heart'), ('💛', '💛 Yellow Heart'), ('💜', '💜 Purple Heart'), ('💝', '💝 Heart With Ribbon'), ('💞', '💞 Revolving Hearts'), ('💟', '💟 Heart Decoration'), ('💌', '💌 Love Letter'), ('💧', '💧 Droplet'), ('💤', '💤 ZZZ'), ('💢', '💢 Anger'), ('💣', '💣 Bomb'), ('💥', '💥 Sparks'), ('💦', '💦 Splashing'), ('💨', '💨 Dash'), ('💫', '💫 Shooting Star'), ('💬', '💬 Speech Bubble'), ('💭', '💭 Thought Bubble'), ('👓', '👓 Eyeglasses'), ('👔', '👔 Necktie'), ('👕', '👕 T-Shirt'), ('👖', '👖 Jeans'), ('👗', '👗 Dress'), ('👘', '👘 Kimono'), ('👙', '👙 Bikini'), ('👚', '👚 Womans Clothes'), ('👛', '👛 Purse'), ('👜', '👜 Handbag'), ('👝', '👝 Pouch'), ('🎒', '🎒 Backpack'), ('👞', '👞 Mans Shoe'), ('👟', '👟 Running Shoe'), ('👠', '👠 Heels'), ('👡', '👡 Womans Sandal'), ('👢', '👢 Womans Boots'), ('👑', '👑 Crown'), ('👒', \"👒 Lady's Hat\"), ('🎩', '🎩 Top Hat'), ('💄', '💄 Lipstick'), ('💍', '💍 Ring'), ('💎', '💎 Gem'), ('👹', '👹 Japanese Ogre'), ('👺', '👺 Japanese Goblin'), ('👻', '👻 Ghost'), ('💀', '💀 Skull'), ('👽', '👽 Alien'), ('👾', '👾 Space Invader'), ('💩', '💩 Pile of Poo'), ('🐵', '🐵 Monkey'), ('🙈', '🙈 See No Evil'), ('🙉', '🙉 Hear No Evil'), ('🙊', '🙊 Speak No Evil'), ('🐒', '🐒 Monkey'), ('🐶', '🐶 Dog'), ('🐕', '🐕 Dog'), ('🐩', '🐩 Poodle'), ('🐺', '🐺 Wolf'), ('🐱', '🐱 Cat'), ('😸', '😸 Grinning Cat with Smiling Eyes'), ('😹', '😹 Cat with Tears of Joy'), ('😺', '😺 Smiling Cat with Open Mouth'), ('😻', '😻 Smiling Cat with Heart Eyes'), ('😼', '😼 Cat with Wry Smile'), ('😽', '😽 Kissing Cat with Closed Eyes'), ('😾', '😾 Pouting Cat Face'), ('😿', '😿 Crying Cat Face'), ('🙀', '🙀 Weary Cat Face'), ('🐈', '🐈 Cat'), ('🐯', '🐯 Tiger'), ('🐅', '🐅 Tiger'), ('🐆', '🐆 Leopard'), ('🐴', '🐴 Horse'), ('🐎', '🐎 Horse'), ('🐮', '🐮 Cow'), ('🐂', '🐂 Ox'), ('🐃', '🐃 Water Buffalo'), ('🐄', '🐄 Cow'), ('🐷', '🐷 Pig'), ('🐖', '🐖 Pig'), ('🐗', '🐗 Boar'), ('🐽', '🐽 Pig Nose'), ('🐏', '🐏 Ram'), ('🐑', '🐑 Sheep'), ('🐐', '🐐 Goat'), ('🐪', '🐪 Dromedary Camel'), ('🐫', '🐫 Bactrian Camel'), ('🐘', '🐘 Elephant'), ('🐭', '🐭 Mouse'), ('🐁', '🐁 Mouse'), ('🐀', '🐀 Rat'), ('🐹', '🐹 Hamster'), ('🐰', '🐰 Rabbit'), ('🐇', '🐇 Rabbit'), ('🐻', '🐻 Bear'), ('🐨', '🐨 Koala'), ('🐼', '🐼 Panda'), ('🐾', '🐾 Paw Prints'), ('🐔', '🐔 Chicken'), ('🐓', '🐓 Rooster'), ('🐣', '🐣 Hatching'), ('🐤', '🐤 Chick'), ('🐥', '🐥 Front-Facing Baby Chick'), ('🐦', '🐦 Bird'), ('🐧', '🐧 Penguin'), ('🐸', '🐸 Frog'), ('🐊', '🐊 Crocodile'), ('🐢', '🐢 Turtle'), ('🐍', '🐍 Snake'), ('🐲', '🐲 Dragon Face'), ('🐉', '🐉 Dragon'), ('🐳', '🐳 Whale'), ('🐋', '🐋 Whale'), ('🐬', '🐬 Dolphin'), ('🐟', '🐟 Fish'), ('🐠', '🐠 Fish'), ('🐡', '🐡 Blowfish'), ('🐙', '🐙 Octopus'), ('🐚', '🐚 Shell'), ('🐌', '🐌 Snail'), ('🐛', '🐛 Bug'), ('🐜', '🐜 Ant'), ('🐝', '🐝 Honeybee'), ('🐞', '🐞 Lady Beetle'), ('💐', '💐 Bouquet'), ('🌸', '🌸 Sakura'), ('💮', '💮 White Flower'), ('🌹', '🌹 Rose'), ('🌺', '🌺 Hibiscus'), ('🌻', '🌻 Sunflower'), ('🌼', '🌼 Blossom'), ('🌷', '🌷 Tulip'), ('🌱', '🌱 Seedling'), ('🌲', '🌲 Evergreen Tree'), ('🌳', '🌳 Deciduous Tree'), ('🌴', '🌴 Palm Tree'), ('🌵', '🌵 Cactus'), ('🌾', '🌾 Ear of Rice'), ('🌿', '🌿 Herb'), ('🍀', '🍀 Clover'), ('🍁', '🍁 Maple Leaf'), ('🍂', '🍂 Fallen Leaf'), ('🍃', '🍃 Blown Leaves'), ('🍇', '🍇 Grapes'), ('🍈', '🍈 Melon'), ('🍉', '🍉 Watermelon'), ('🍊', '🍊 Tangerine'), ('🍋', '🍋 Lemon'), ('🍌', '🍌 Banana'), ('🍍', '🍍 Pineapple'), ('🍎', '🍎 Red Apple'), ('🍏', '🍏 Green Apple'), ('🍐', '🍐 Pear'), ('🍑', '🍑 Peach'), ('🍒', '🍒 Cherries'), ('🍓', '🍓 Strawberry'), ('🍅', '🍅 Tomato'), ('🍆', '🍆 Eggplant'), ('🌽', '🌽 Corn'), ('🍄', '🍄 Mushroom'), ('🌰', '🌰 Chestnut'), ('🍞', '🍞 Bread'), ('🍖', '🍖 Meat on Bone'), ('🍗', '🍗 Poultry Leg'), ('🍔', '🍔 Hamburger'), ('🍟', '🍟 Fries'), ('🍕', '🍕 Pizza'), ('🍲', '🍲 Pot of Food'), ('🍱', '🍱 Bento Box'), ('🍘', '🍘 Rice Cracker'), ('🍙', '🍙 Rice Ball'), ('🍚', '🍚 Cooked Rice'), ('🍛', '🍛 Curry and Rice'), ('🍜', '🍜 Steaming Bowl'), ('🍝', '🍝 Spaghetti'), ('🍠', '🍠 Sweet Potato'), ('🍢', '🍢 Oden'), ('🍣', '🍣 Sushi'), ('🍤', '🍤 Fried Shrimp'), ('🍥', '🍥 Fish Cake With Swirl Design'), ('🍡', '🍡 Dango'), ('🍦', '🍦 Soft Ice Cream'), ('🍧', '🍧 Shaved Ice'), ('🍨', '🍨 Ice Cream'), ('🍩', '🍩 Doughnut'), ('🍪', '🍪 Cookie'), ('🎂', '🎂 Birthday Cake'), ('🍰', '🍰 Shortcake'), ('🍫', '🍫 Chocolate Bar'), ('🍬', '🍬 Candy'), ('🍭', '🍭 Lollipop'), ('🍮', '🍮 Custard'), ('🍯', '🍯 Honey Pot'), ('🍼', '🍼 Baby Bottle'), ('🍵', '🍵 Teacup Without Handle'), ('🍶', '🍶 Sake Bottle and Cup'), ('🍷', '🍷 Wine Glass'), ('🍸', '🍸 Cocktail Glass'), ('🍹', '🍹 Tropical Drink'), ('🍺', '🍺 Beer'), ('🍻', '🍻 Clinking Beer Mugs'), ('🍴', '🍴 Fork & Knife'), ('🍳', '🍳 Cooking'), ('🌍', '🌍 Earth Globe Europe-Africa'), ('🌎', '🌎 Earth Globe Americas'), ('🌏', '🌏 Earth Globe Asia-Australia'), ('🌐', '🌐 Globe With Meridians'), ('🌋', '🌋 Volcano'), ('🗻', '🗻 Mount Fuji'), ('🏠', '🏠 House'), ('🏡', '🏡 House With Garden'), ('🏢', '🏢 Office'), ('🏣', '🏣 Japanese Post Office'), ('🏤', '🏤 European Post Office'), ('🏥', '🏥 Hospital'), ('🏦', '🏦 Bank'), ('🏨', '🏨 Hotel'), ('🏩', '🏩 Love Hotel'), ('🏪', '🏪 Convenience Store'), ('🏫', '🏫 School'), ('🏬', '🏬 Department Store'), ('🏭', '🏭 Factory'), ('🏯', '🏯 Japanese Castle'), ('🏰', '🏰 Castle'), ('💒', '💒 Wedding'), ('🗼', '🗼 Tokyo Tower'), ('🗽', '🗽 Liberty'), ('🗾', '🗾 Silhouette of Japan'), ('🌁', '🌁 Foggy'), ('🌃', '🌃 Night With Stars'), ('🌄', '🌄 Sunrise Over Mountains'), ('🌅', '🌅 Sunrise'), ('🌆', '🌆 Cityscape at Dusk'), ('🌇', '🌇 Sunset Over Buildings'), ('🌉', '🌉 Bridge at Night'), ('🌊', '🌊 Big Wave'), ('🗿', '🗿 Moyai'), ('🌌', '🌌 Milky Way'), ('🎠', '🎠 Carousel Horse'), ('🎡', '🎡 Ferris Wheel'), ('🎢', '🎢 Roller Coaster'), ('💈', '💈 Barber Pole'), ('🎪', '🎪 Circus Tent'), ('🎭', '🎭 Performing Arts'), ('🎨', '🎨 Palette'), ('🎰', '🎰 Slot Machine'), ('🚂', '🚂 Steam Locomotive'), ('🚃', '🚃 Railcar'), ('🚄', '🚄 Fast Train'), ('🚅', '🚅 Fast Train with Bullet Nose'), ('🚆', '🚆 Train'), ('🚇', '🚇 Metro'), ('🚈', '🚈 Light Rail'), ('🚉', '🚉 Station'), ('🚊', '🚊 Tram'), ('🚝', '🚝 Monorail'), ('🚞', '🚞 Mountain Railway'), ('🚋', '🚋 Tram Car'), ('🚌', '🚌 Bus'), ('🚍', '🚍 Bus'), ('🚎', '🚎 Trolleybus'), ('🚏', '🚏 Bus Stop'), ('🚐', '🚐 Minibus'), ('🚑', '🚑 Ambulance'), ('🚒', '🚒 Fire Engine'), ('🚓', '🚓 Police Car'), ('🚔', '🚔 Police Car'), ('🚕', '🚕 Taxi'), ('🚖', '🚖 Oncoming Taxi'), ('🚗', '🚗 Automobile'), ('🚘', '🚘 Automobile'), ('🚙', '🚙 Recreational Vehicle'), ('🚚', '🚚 Delivery Truck'), ('🚛', '🚛 Articulated Lorry'), ('🚜', '🚜 Tractor'), ('🚲', '🚲 Bicycle'), ('🚳', '🚳 No Bicycles'), ('🚨', '🚨 Alert Light'), ('🔱', '🔱 Trident'), ('🚣', '🚣 Rowboat'), ('🚤', '🚤 Speedboat'), ('🚢', '🚢 Ship'), ('💺', '💺 Seat'), ('🚁', '🚁 Helicopter'), ('🚟', '🚟 Suspension Railway'), ('🚠', '🚠 Sky Tram'), ('🚡', '🚡 Aerial Tramway'), ('🚀', '🚀 Rocket'), ('🏧', '🏧 ATM'), ('🚮', '🚮 Put Litter in Its Place'), ('🚥', '🚥 Horizontal Traffic Light'), ('🚦', '🚦 Traffic Light'), ('🚧', '🚧 Hazard Sign'), ('🚫', '🚫 Prohibited'), ('🚭', '🚭 No Smoking'), ('🚯', '🚯 Do Not Litter'), ('🚰', '🚰 Tap Water'), ('🚱', '🚱 Non-Potable Water'), ('🚷', '🚷 No Pedestrians'), ('🚸', '🚸 Children Crossing'), ('🚹', '🚹 Mens Symbol'), ('🚺', '🚺 Womens Symbol'), ('🚻', '🚻 Restroom'), ('🚼', '🚼 Baby Symbol'), ('🚾', '🚾 Water Closet'), ('🛂', '🛂 Passport Control'), ('🛃', '🛃 Customs'), ('🛄', '🛄 Baggage Claim'), ('🛅', '🛅 Left Luggage'), ('🚪', '🚪 Door'), ('🚽', '🚽 Toilet'), ('🚿', '🚿 Shower'), ('🛀', '🛀 Bath'), ('🛁', '🛁 Bathtub'), ('⏳', '⏳ Hourglass'), ('⏰', '⏰ Alarm Clock'), ('⏱', '⏱ Stopwatch'), ('⏲', '⏲ Timer Clock'), ('🕛', \"🕛 Twelve O'Clock\"), ('🕧', '🕧 Half Past Twelve'), ('🕐', \"🕐 One O'Clock\"), ('🕜', '🕜 Half Past One'), ('🕑', \"🕑 Two O'Clock\"), ('🕝', '🕝 Half Past Two'), ('🕒', \"🕒 Three O'Clock\"), ('🕞', '🕞 Half Past Three'), ('🕓', \"🕓 Four O'Clock\"), ('🕟', '🕟 Half Past Four'), ('🕔', \"🕔 Five O'Clock\"), ('🕠', '🕠 Half Past Five'), ('🕕', \"🕕 Six O'Clock\"), ('🕡', '🕡 Half Past Six'), ('🕖', \"🕖 Seven O'Clock\"), ('🕢', '🕢 Half Past Seven'), ('🕗', \"🕗 Eight O'Clock\"), ('🕣', '🕣 Half Past Eight'), ('🕘', \"🕘 Nine O'Clock\"), ('🕤', '🕤 Half Past Nine'), ('🕙', \"🕙 Ten O'Clock\"), ('🕥', '🕥 Half Past Ten'), ('🕚', \"🕚 Eleven O'Clock\"), ('🕦', '🕦 Half Past Eleven'), ('⛎', '⛎ Ophiuchus'), ('🌑', '🌑 New Moon'), ('🌒', '🌒 Waxing Crescent'), ('🌓', '🌓 First Quarter Moon Symbol'), ('🌔', '🌔 Waxing Gibbous'), ('🌕', '🌕 Full Moon'), ('🌖', '🌖 Waning Gibbous'), ('🌗', '🌗 Half Moon'), ('🌘', '🌘 Waning Crescent'), ('🌙', '🌙 Crescent Moon'), ('🌚', '🌚 New Moon With Face'), ('🌛', '🌛 First Quarter Moon With Face'), ('🌜', '🌜 Last Quarter Moon With Face'), ('🌝', '🌝 Full Moon With Face'), ('🌞', '🌞 Sun'), ('🌀', '🌀 Cyclone'), ('🌈', '🌈 Rainbow'), ('🌂', '🌂 Umbrella'), ('🌟', '🌟 Glowing Star'), ('🌠', '🌠 Shooting Star'), ('🔥', '🔥 Fire'), ('🎃', '🎃 Jack-O-Lantern'), ('🎄', '🎄 Presents Tree'), ('🎆', '🎆 Fireworks'), ('🎇', '🎇 Firework Sparkler'), ('✨', '✨ Sparkles'), ('🎈', '🎈 Balloon'), ('🎉', '🎉 Party Popper'), ('🎊', '🎊 Confetti Ball'), ('🎋', '🎋 Tanabata Tree'), ('🎌', '🎌 Crossed Flags'), ('🎍', '🎍 Pine Decoration'), ('🎎', '🎎 Japanese Dolls'), ('🎏', '🎏 Carp Streamer'), ('🎐', '🎐 Wind Chime'), ('🎑', '🎑 Moon Viewing Ceremony'), ('🎓', '🎓 Grad Cap'), ('🎯', '🎯 Bullseye'), ('🎴', '🎴 Flower Playing Cards'), ('🎀', '🎀 Ribbon'), ('🎁', '🎁 Wrapped Present'), ('🎫', '🎫 Ticket'), ('🏀', '🏀 Basketball'), ('🏈', '🏈 America Ball'), ('🏉', '🏉 Rugby Ball'), ('🎾', '🎾 Tennis'), ('🎱', '🎱 Billiards'), ('🎳', '🎳 Bowling'), ('🎣', '🎣 Fishing Pole and Fish'), ('🎽', '🎽 Running Shirt With Sash'), ('🎿', '🎿 Ski and Ski Boot'), ('🏂', '🏂 Snowboarder'), ('🏄', '🏄 Surfer'), ('🏇', '🏇 Horse Racing'), ('🏊', '🏊 Swimmer'), ('🚴', '🚴 Bicyclist'), ('🚵', '🚵 Mountain Bicyclist'), ('🏆', '🏆 Trophy'), ('🎮', '🎮 Video Game'), ('🎲', '🎲 Dice'), ('🃏', '🃏 Playing Card Black Joker'), ('🔇', '🔇 Speaker With Cancellation Stroke'), ('🔈', '🔈 Speaker'), ('🔉', '🔉 Speaker With One Sound Wave'), ('🔊', '🔊 Speaker With Three Sound Waves'), ('📢', '📢 Public Address Loudspeaker'), ('📣', '📣 Megaphone'), ('📯', '📯 Horn'), ('🔔', '🔔 Bell'), ('🔕', '🔕 No Bells'), ('🔀', '🔀 Shuffle'), ('🔁', '🔁 Repeat'), ('🔂', '🔂 Repeat Once'), ('⏩', '⏩ Fast Forward'), ('⏭', '⏭ Next Track'), ('⏯', '⏯ Play/Pause'), ('⏪', '⏪ Rewind'), ('⏮', '⏮ Previous Track'), ('🔼', '🔼 Up-Pointing Small Red Triangle'), ('⏫', '⏫ Up to Top'), ('🔽', '🔽 Down-Pointing Small Red Triangle'), ('⏬', '⏬ Down to Bottom'), ('🎼', '🎼 Musical Score'), ('🎵', '🎵 Musical Note'), ('🎶', '🎶 Music Notes'), ('🎤', '🎤 Microphone'), ('🎧', '🎧 Headphone'), ('🎷', '🎷 Saxophone'), ('🎸', '🎸 Guitar'), ('🎹', '🎹 Keyboard'), ('🎺', '🎺 Trumpet'), ('🎻', '🎻 Violin'), ('📻', '📻 Boom Box'), ('📱', '📱 Mobile Phone'), ('📳', '📳 Vibration Mode'), ('📴', '📴 Mobile Phone Off'), ('📲', '📲 Download to Phone'), ('📵', '📵 No Mobile Phones'), ('📞', '📞 Old Phone'), ('🔟', '🔟 Keycap Ten'), ('📶', '📶 Antenna With Bars'), ('📟', '📟 Pager'), ('📠', '📠 Fax Machine'), ('🔋', '🔋 Battery'), ('🔌', '🔌 Plug'), ('💻', '💻 Personal Computer'), ('💽', '💽 Minidisc'), ('💾', '💾 Floppy'), ('💿', '💿 Compact Disc'), ('📀', '📀 DVD'), ('🎥', '🎥 Movie Camera'), ('🎦', '🎦 Cinema'), ('🎬', '🎬 Clapperboard'), ('📺', '📺 Television'), ('📷', '📷 Camera'), ('📹', '📹 Video Camera'), ('📼', '📼 Videocassette'), ('🔅', '🔅 Low Brightness Symbol'), ('🔆', '🔆 High Brightness Symbol'), ('🔍', '🔍 Magnifying Glass'), ('🔎', '🔎 Right-Pointing Magnifying Glass'), ('🔬', '🔬 Microscope'), ('🔭', '🔭 Telescope'), ('📡', '📡 Satellite Dish'), ('💡', '💡 Light Bulb'), ('🔦', '🔦 Electric Torch'), ('🏮', '🏮 Izakaya Lantern'), ('📔', '📔 Notebook With Decorative Cover'), ('📕', '📕 Closed Book'), ('📖', '📖 Open Book'), ('📗', '📗 Green Book'), ('📘', '📘 Blue Book'), ('📙', '📙 Orange Book'), ('📚', '📚 Books'), ('📓', '📓 Notebook'), ('📒', '📒 Ledger'), ('📃', '📃 Page With Curl'), ('📜', '📜 Scroll'), ('📄', '📄 Page Facing Up'), ('📰', '📰 Newspaper'), ('📑', '📑 Bookmark Tabs'), ('🔖', '🔖 Bookmark'), ('💰', '💰 Money Bag'), ('💴', '💴 Banknote With Yen Sign'), ('💵', '💵 Banknote With Dollar Sign'), ('💶', '💶 Banknote With Euro Sign'), ('💷', '💷 Banknote With Pound Sign'), ('💸', '💸 Flying Money'), ('💱', '💱 Currency Exchange'), ('💲', '💲 Heavy Dollar Sign'), ('💳', '💳 Credit Card'), ('💹', '💹 Upwards Trend in Yen'), ('📧', '📧 E-Mail Symbol'), ('📨', '📨 Incoming Envelope'), ('📩', '📩 Going Into Envelope'), ('📤', '📤 Outbox Tray'), ('📥', '📥 Inbox Tray'), ('📦', '📦 Package'), ('📫', '📫 Mailbox'), ('📪', '📪 Closed Mailbox With Lowered Flag'), ('📬', '📬 Open Mailbox With Raised Flag'), ('📭', '📭 Open Mailbox With Lowered Flag'), ('📮', '📮 Postbox'), ('📝', '📝 Memo'), ('💼', '💼 Briefcase'), ('📁', '📁 File Folder'), ('📂', '📂 Open File Folder'), ('📅', '📅 Calendar'), ('📆', '📆 Tear-Off Calendar'), ('📇', '📇 Card Index'), ('📈', '📈 Up Trend'), ('📉', '📉 Down Trend'), ('📊', '📊 Bar Chart'), ('📋', '📋 Clipboard'), ('📌', '📌 Pushpin'), ('📍', '📍 Location'), ('📎', '📎 Paperclip'), ('📏', '📏 Ruler'), ('📐', '📐 Triangle'), ('📛', '📛 Name Badge'), ('🔒', '🔒 Lock'), ('🔓', '🔓 Open Lock'), ('🔏', '🔏 Lock With Ink Pen'), ('🔐', '🔐 Closed Lock With Key'), ('🔑', '🔑 Key'), ('🔨', '🔨 Hammer'), ('🔧', '🔧 Spanner'), ('🔩', '🔩 Calipers'), ('🔗', '🔗 Link Symbol'), ('💉', '💉 Syringe'), ('💊', '💊 Pill'), ('🔪', '🔪 Chef Knife'), ('🔫', '🔫 Pistol'), ('🚬', '🚬 Durry'), ('🏁', '🏁 Start Flag'), ('🚩', '🚩 Triangular Flag on Post'), ('🇦🇫', '🇦🇫 Afghanistan'), ('🇦🇽', '🇦🇽 Åland Islands'), ('🇦🇱', '🇦🇱 Albania'), ('🇩🇿', '🇩🇿 Algeria'), ('🇦🇸', '🇦🇸 American Samoa'), ('🇦🇩', '🇦🇩 Andorra'), ('🇦🇴', '🇦🇴 Angola'), ('🇦🇮', '🇦🇮 Anguilla'), ('🇦🇶', '🇦🇶 Antarctica'), ('🇦🇬', '🇦🇬 Antigua & Barbuda'), ('🇦🇷', '🇦🇷 Argentina'), ('🇦🇲', '🇦🇲 Armenia'), ('🇦🇼', '🇦🇼 Aruba'), ('🇦🇨', '🇦🇨 Ascension Island'), ('🇦🇺', '🇦🇺 Australia'), ('🇦🇹', '🇦🇹 Austria'), ('🇦🇿', '🇦🇿 Azerbaijan'), ('🇧🇸', '🇧🇸 Bahamas'), ('🇧🇭', '🇧🇭 Bahrain'), ('🇧🇩', '🇧🇩 Bangladesh'), ('🇧🇧', '🇧🇧 Barbados'), ('🇧🇾', '🇧🇾 Belarus'), ('🇧🇪', '🇧🇪 Belgium'), ('🇧🇿', '🇧🇿 Belize'), ('🇧🇯', '🇧🇯 Benin'), ('🇧🇲', '🇧🇲 Bermuda'), ('🇧🇹', '🇧🇹 Bhutan'), ('🇧🇴', '🇧🇴 Bolivia'), ('🇧🇦', '🇧🇦 Bosnia & Herzegovina'), ('🇧🇼', '🇧🇼 Botswana'), ('🇧🇻', '🇧🇻 Bouvet Island'), ('🇧🇷', '🇧🇷 Brazil'), ('🇮🇴', '🇮🇴 British Indian Ocean Territory'), ('🇻🇬', '🇻🇬 British Virgin Islands'), ('🇧🇳', '🇧🇳 Brunei'), ('🇧🇬', '🇧🇬 Bulgaria'), ('🇧🇫', '🇧🇫 Burkina Faso'), ('🇧🇮', '🇧🇮 Burundi'), ('🇰🇭', '🇰🇭 Cambodia'), ('🇨🇲', '🇨🇲 Cameroon'), ('🇨🇦', '🇨🇦 Canada'), ('🇮🇨', '🇮🇨 Canary Islands'), ('🇨🇻', '🇨🇻 Cape Verde'), ('🇧🇶', '🇧🇶 Caribbean Netherlands'), ('🇰🇾', '🇰🇾 Cayman Islands'), ('🇨🇫', '🇨🇫 Central African Republic'), ('🇪🇦', '🇪🇦 Ceuta & Melilla'), ('🇹🇩', '🇹🇩 Chad'), ('🇨🇱', '🇨🇱 Chile'), ('🇨🇳', '🇨🇳 China'), ('🇨🇽', '🇨🇽 Christmas Island'), ('🇨🇵', '🇨🇵 Clipperton Island'), ('🇨🇨', '🇨🇨 Cocos Islands'), ('🇨🇴', '🇨🇴 Colombia'), ('🇰🇲', '🇰🇲 Comoros'), ('🇨🇬', '🇨🇬 Congo - Brazzaville'), ('🇨🇩', '🇨🇩 Congo - Kinshasa'), ('🇨🇰', '🇨🇰 Cook Islands'), ('🇨🇷', '🇨🇷 Costa Rica'), ('🇨🇮', '🇨🇮 Côte D’Ivoire'), ('🇭🇷', '🇭🇷 Croatia'), ('🇨🇺', '🇨🇺 Cuba'), ('🇨🇼', '🇨🇼 Curaçao'), ('🇨🇾', '🇨🇾 Cyprus'), ('🇨🇿', '🇨🇿 Czech Republic'), ('🇩🇰', '🇩🇰 Denmark'), ('🇩🇬', '🇩🇬 Diego Garcia'), ('🇩🇯', '🇩🇯 Djibouti'), ('🇩🇲', '🇩🇲 Dominica'), ('🇩🇴', '🇩🇴 Dominican Republic'), ('🇪🇨', '🇪🇨 Ecuador'), ('🇪🇬', '🇪🇬 Egypt'), ('🇸🇻', '🇸🇻 El Salvador'), ('🇬🇶', '🇬🇶 Equatorial Guinea'), ('🇪🇷', '🇪🇷 Eritrea'), ('🇪🇪', '🇪🇪 Estonia'), ('🇪🇹', '🇪🇹 Ethiopia'), ('🇪🇺', '🇪🇺 European Union'), ('🇫🇰', '🇫🇰 Falkland Islands'), ('🇫🇴', '🇫🇴 Faroe Islands'), ('🇫🇯', '🇫🇯 Fiji'), ('🇫🇮', '🇫🇮 Finland'), ('🇫🇷', '🇫🇷 France'), ('🇬🇫', '🇬🇫 French Guiana'), ('🇵🇫', '🇵🇫 French Polynesia'), ('🇹🇫', '🇹🇫 French Southern Territories'), ('🇬🇦', '🇬🇦 Gabon'), ('🇬🇲', '🇬🇲 Gambia'), ('🇬🇪', '🇬🇪 Georgia'), ('🇩🇪', '🇩🇪 Germany'), ('🇬🇭', '🇬🇭 Ghana'), ('🇬🇮', '🇬🇮 Gibraltar'), ('🇬🇷', '🇬🇷 Greece'), ('🇬🇱', '🇬🇱 Greenland'), ('🇬🇩', '🇬🇩 Grenada'), ('🇬🇵', '🇬🇵 Guadeloupe'), ('🇬🇺', '🇬🇺 Guam'), ('🇬🇹', '🇬🇹 Guatemala'), ('🇬🇬', '🇬🇬 Guernsey'), ('🇬🇳', '🇬🇳 Guinea'), ('🇬🇼', '🇬🇼 Guinea-Bissau'), ('🇬🇾', '🇬🇾 Guyana'), ('🇭🇹', '🇭🇹 Haiti'), ('🇭🇲', '🇭🇲 Heard & McDonald Islands'), ('🇭🇳', '🇭🇳 Honduras'), ('🇭🇰', '🇭🇰 Hong Kong'), ('🇭🇺', '🇭🇺 Hungary'), ('🇮🇸', '🇮🇸 Iceland'), ('🇮🇳', '🇮🇳 India'), ('🇮🇩', '🇮🇩 Indonesia'), ('🇮🇷', '🇮🇷 Iran'), ('🇮🇶', '🇮🇶 Iraq'), ('🇮🇪', '🇮🇪 Ireland'), ('🇮🇲', '🇮🇲 Isle of Man'), ('🇮🇱', '🇮🇱 Israel'), ('🇮🇹', '🇮🇹 Italy'), ('🇯🇲', '🇯🇲 Jamaica'), ('🇯🇵', '🇯🇵 Japan'), ('🇯🇪', '🇯🇪 Jersey'), ('🇯🇴', '🇯🇴 Jordan'), ('🇰🇿', '🇰🇿 Kazakhstan'), ('🇰🇪', '🇰🇪 Kenya'), ('🇰🇮', '🇰🇮 Kiribati'), ('🇽🇰', '🇽🇰 Kosovo'), ('🇰🇼', '🇰🇼 Kuwait'), ('🇰🇬', '🇰🇬 Kyrgyzstan'), ('🇱🇦', '🇱🇦 Laos'), ('🇱🇻', '🇱🇻 Latvia'), ('🇱🇧', '🇱🇧 Lebanon'), ('🇱🇸', '🇱🇸 Lesotho'), ('🇱🇷', '🇱🇷 Liberia'), ('🇱🇾', '🇱🇾 Libya'), ('🇱🇮', '🇱🇮 Liechtenstein'), ('🇱🇹', '🇱🇹 Lithuania'), ('🇱🇺', '🇱🇺 Luxembourg'), ('🇲🇴', '🇲🇴 Macau'), ('🇲🇰', '🇲🇰 Macedonia'), ('🇲🇬', '🇲🇬 Madagascar'), ('🇲🇼', '🇲🇼 Malawi'), ('🇲🇾', '🇲🇾 Malaysia'), ('🇲🇻', '🇲🇻 Maldives'), ('🇲🇱', '🇲🇱 Mali'), ('🇲🇹', '🇲🇹 Malta'), ('🇲🇭', '🇲🇭 Marshall Islands'), ('🇲🇶', '🇲🇶 Martinique'), ('🇲🇷', '🇲🇷 Mauritania'), ('🇲🇺', '🇲🇺 Mauritius'), ('🇾🇹', '🇾🇹 Mayotte'), ('🇲🇽', '🇲🇽 Mexico'), ('🇫🇲', '🇫🇲 Micronesia'), ('🇲🇩', '🇲🇩 Moldova'), ('🇲🇨', '🇲🇨 Monaco'), ('🇲🇳', '🇲🇳 Mongolia'), ('🇲🇪', '🇲🇪 Montenegro'), ('🇲🇸', '🇲🇸 Montserrat'), ('🇲🇦', '🇲🇦 Morocco'), ('🇲🇿', '🇲🇿 Mozambique'), ('🇲🇲', '🇲🇲 Myanmar'), ('🇳🇦', '🇳🇦 Namibia'), ('🇳🇷', '🇳🇷 Nauru'), ('🇳🇵', '🇳🇵 Nepal'), ('🇳🇱', '🇳🇱 Netherlands'), ('🇳🇨', '🇳🇨 New Caledonia'), ('🇳🇿', '🇳🇿 New Zealand'), ('🇳🇮', '🇳🇮 Nicaragua'), ('🇳🇪', '🇳🇪 Niger'), ('🇳🇬', '🇳🇬 Nigeria'), ('🇳🇺', '🇳🇺 Niue'), ('🇳🇫', '🇳🇫 Norfolk Island'), ('🇲🇵', '🇲🇵 Northern Mariana Islands'), ('🇰🇵', '🇰🇵 North Korea'), ('🇳🇴', '🇳🇴 Norway'), ('🇴🇲', '🇴🇲 Oman'), ('🇵🇰', '🇵🇰 Pakistan'), ('🇵🇼', '🇵🇼 Palau'), ('🇵🇸', '🇵🇸 Palestinian Territories'), ('🇵🇦', '🇵🇦 Panama'), ('🇵🇬', '🇵🇬 Papua New Guinea'), ('🇵🇾', '🇵🇾 Paraguay'), ('🇵🇪', '🇵🇪 Peru'), ('🇵🇭', '🇵🇭 Philippines'), ('🇵🇳', '🇵🇳 Pitcairn Islands'), ('🇵🇱', '🇵🇱 Poland'), ('🇵🇹', '🇵🇹 Portugal'), ('🇵🇷', '🇵🇷 Puerto Rico'), ('🇶🇦', '🇶🇦 Qatar'), ('🇷🇪', '🇷🇪 Réunion'), ('🇷🇴', '🇷🇴 Romania'), ('🇷🇺', '🇷🇺 Russia'), ('🇷🇼', '🇷🇼 Rwanda'), ('🇼🇸', '🇼🇸 Samoa'), ('🇸🇲', '🇸🇲 San Marino'), ('🇸🇹', '🇸🇹 São Tomé & Príncipe'), ('🇸🇦', '🇸🇦 Saudi Arabia'), ('🇸🇳', '🇸🇳 Senegal'), ('🇷🇸', '🇷🇸 Serbia'), ('🇸🇨', '🇸🇨 Seychelles'), ('🇸🇱', '🇸🇱 Sierra Leone'), ('🇸🇬', '🇸🇬 Singapore'), ('🇸🇽', '🇸🇽 Sint Maarten'), ('🇸🇰', '🇸🇰 Slovakia'), ('🇸🇮', '🇸🇮 Slovenia'), ('🇸🇧', '🇸🇧 Solomon Islands'), ('🇸🇴', '🇸🇴 Somalia'), ('🇿🇦', '🇿🇦 South Africa'), ('🇬🇸', '🇬🇸 South Georgia & South Sandwich Islands'), ('🇰🇷', '🇰🇷 South Korea'), ('🇸🇸', '🇸🇸 South Sudan'), ('🇪🇸', '🇪🇸 Spain'), ('🇱🇰', '🇱🇰 Sri Lanka'), ('🇧🇱', '🇧🇱 St. Barthélemy'), ('🇸🇭', '🇸🇭 St. Helena'), ('🇰🇳', '🇰🇳 St. Kitts & Nevis'), ('🇱🇨', '🇱🇨 St. Lucia'), ('🇲🇫', '🇲🇫 St. Martin'), ('🇵🇲', '🇵🇲 St. Pierre & Miquelon'), ('🇻🇨', '🇻🇨 St. Vincent & Grenadines'), ('🇸🇩', '🇸🇩 Sudan'), ('🇸🇷', '🇸🇷 Suriname'), ('🇸🇯', '🇸🇯 Svalbard & Jan Mayen'), ('🇸🇿', '🇸🇿 Swaziland'), ('🇸🇪', '🇸🇪 Sweden'), ('🇨🇭', '🇨🇭 Switzerland'), ('🇸🇾', '🇸🇾 Syria'), ('🇹🇼', '🇹🇼 Taiwan'), ('🇹🇯', '🇹🇯 Tajikistan'), ('🇹🇿', '🇹🇿 Tanzania'), ('🇹🇭', '🇹🇭 Thailand'), ('🇹🇱', '🇹🇱 Timor-Leste'), ('🇹🇬', '🇹🇬 Togo'), ('🇹🇰', '🇹🇰 Tokelau'), ('🇹🇴', '🇹🇴 Tonga'), ('🇹🇹', '🇹🇹 Trinidad & Tobago'), ('🇹🇦', '🇹🇦 Tristan Da Cunha'), ('🇹🇳', '🇹🇳 Tunisia'), ('🇹🇷', '🇹🇷 Turkey'), ('🇹🇲', '🇹🇲 Turkmenistan'), ('🇹🇨', '🇹🇨 Turks & Caicos Islands'), ('🇹🇻', '🇹🇻 Tuvalu'), ('🇺🇬', '🇺🇬 Uganda'), ('🇺🇦', '🇺🇦 Ukraine'), ('🇦🇪', '🇦🇪 United Arab Emirates'), ('🇬🇧', '🇬🇧 United Kingdom'), ('🇺🇸', '🇺🇸 United States'), ('🇺🇾', '🇺🇾 Uruguay'), ('🇺🇲', '🇺🇲 U.S. Outlying Islands'), ('🇻🇮', '🇻🇮 U.S. Virgin Islands'), ('🇺🇿', '🇺🇿 Uzbekistan'), ('🇻🇺', '🇻🇺 Vanuatu'), ('🇻🇦', '🇻🇦 Vatican City'), ('🇻🇪', '🇻🇪 Venezuela'), ('🇻🇳', '🇻🇳 Vietnam'), ('🇼🇫', '🇼🇫 Wallis & Futuna'), ('🇪🇭', '🇪🇭 Western Sahara'), ('🇾🇪', '🇾🇪 Yemen'), ('🇿🇲', '🇿🇲 Zambia'), ('🇿🇼', '🇿🇼 Zimbabwe'), ('🔃', '🔃 Clockwise Arrows'), ('🔄', '🔄 Anticlockwise Arrows'), ('🔙', '🔙 Back'), ('🔚', '🔚 End'), ('🔛', '🔛 On'), ('🔜', '🔜 Soon'), ('🔝', '🔝 Top'), ('🔰', '🔰 Beginner'), ('🔮', '🔮 Crystal Ball'), ('🔯', '🔯 Six Pointed Star With Middle Dot'), ('✅', '✅ White Heavy Check Mark'), ('❌', '❌ Cross'), ('❎', '❎ Negative Squared Cross Mark'), ('➕', '➕ Heavy Plus Sign'), ('➖', '➖ Heavy Minus Sign'), ('➗', '➗ Heavy Division Sign'), ('➰', '➰ Curly Loop'), ('➿', '➿ Double Curly Loop'), ('❓', '❓ Question'), ('❔', '❔ White Question Mark Ornament'), ('❕', '❕ White Exclamation Mark Ornament'), ('💯', '💯 Hundred Points'), ('🔞', '🔞 Over Eighteen'), ('🔠', '🔠 Latin Capital Letters'), ('🔡', '🔡 Latin Small Letters'), ('🔢', '🔢 Numbers'), ('🔣', '🔣 Symbols'), ('🔤', '🔤 Latin Letters'), ('🅰️', '🅰️ Squared A'), ('🆎', '🆎 Squared AB'), ('🅱️', '🅱️ Squared B'), ('🆑', '🆑 Squared CL'), ('🆒', '🆒 Cool Square'), ('🆓', '🆓 Squared Free'), ('🆔', '🆔 Squared ID'), ('🆕', '🆕 New Square'), ('🆖', '🆖 Squared NG'), ('🅾️', '🅾️ Squared O'), ('🆗', '🆗 OK Square'), ('🆘', '🆘 SOS Square'), ('🆙', '🆙 Squared Up!'), ('🆚', '🆚 Squared Vs'), ('🈁', '🈁 Squared Katakana Koko'), ('🈂️', '🈂️ Squared Katakana Sa'), ('🈷️', '🈷️ Squared 月 (Moon)'), ('🈶', '🈶 Squared 有 (Have)'), ('🉐', '🉐 Circled Ideograph Advantage'), ('🈹', '🈹 Squared CJK Unified Ideograph-5272'), ('🈲', '🈲 Squared CJK Unified Ideograph-7981'), ('🉑', '🉑 Circled 可 (Accept)'), ('🈸', '🈸 Squared CJK Unified Ideograph-7533'), ('🈴', '🈴 Squared CJK Unified Ideograph-5408'), ('🈳', '🈳 Squared CJK Unified Ideograph-7a7a'), ('🈺', '🈺 Squared CJK Unified Ideograph-55b6'), ('🈵', '🈵 Squared CJK Unified Ideograph-6e80'), ('🔶', '🔶 Large Orange Diamond'), ('🔷', '🔷 Large Blue Diamond'), ('🔸', '🔸 Small Orange Diamond'), ('🔹', '🔹 Small Blue Diamond'), ('🔺', '🔺 Up-Pointing Red Triangle'), ('🔻', '🔻 Down-Pointing Red Triangle'), ('💠', '💠 Diamond Shape With a Dot Inside'), ('🔘', '🔘 Radio Button'), ('🔲', '🔲 Black Square Button'), ('🔳', '🔳 White Square Button'), ('🔴', '🔴 Large Red Circle'), ('🔵', '🔵 Large Blue Circle'), ('😀', '😀 Grinning'), ('😗', '😗 Kissing'), ('😙', '😙 Smooch'), ('😑', '😑 True Neutral'), ('😮', '😮 Stunned'), ('😯', '😯 Hushed'), ('😴', '😴 Sleeping'), ('😛', '😛 Tongue'), ('😕', '😕 Confused'), ('😟', '😟 Worried'), ('😦', '😦 Frowning Face With Open Mouth'), ('😧', '😧 Anguished'), ('😬', '😬 Grimacing'), ('🙂', '🙂 Slightly Smiling'), ('🙁', '🙁 Slightly Frowning'), ('🕵', '🕵 Spy'), ('🗣', '🗣 Speaking Head in Silhouette'), ('🕴', '🕴 Man in Business Suit Levitating'), ('🖕', '🖕 Middle Finger'), ('🖖', '🖖 Vulcan Hand'), ('🖐', '🖐 Raised Hand With Fingers Splayed'), ('👁', '👁 Eye'), ('🕳', '🕳 Hole'), ('🗯', '🗯 Right Anger Bubble'), ('🕶', '🕶 Sunglasses'), ('🛍', '🛍 Shopping'), ('🐿', '🐿 Chipmunk'), ('🕊', '🕊 Peace Dove'), ('🕷', '🕷 Spider'), ('🕸', '🕸 Spider Web'), ('🏵', '🏵 Rosette'), ('🌶', '🌶 Chilli'), ('🍽', '🍽 Fork and Knife With Plate'), ('🗺', '🗺 World Map'), ('🏔', '🏔 Snow Capped Mountain'), ('🏕', '🏕 Camping'), ('🏖', '🏖 Beach'), ('🏜', '🏜 Desert'), ('🏝', '🏝 Desert Island'), ('🏞', '🏞 National Park'), ('🏟', '🏟 Stadium'), ('🏛', '🏛 Architecture'), ('🏗', '🏗 Building Construction'), ('🏘', '🏘 House Buildings'), ('🏙', '🏙 Cityscape'), ('🏚', '🏚 Derelict House Building'), ('🖼', '🖼 Frame With Picture'), ('🛢', '🛢 Oil Drum'), ('🛣', '🛣 Motorway'), ('🛤', '🛤 Railway Track'), ('🛳', '🛳 Passenger Ship'), ('🛥', '🛥 Boat'), ('🛩', '🛩 Airplane'), ('🛫', '🛫 Airplane Departure'), ('🛬', '🛬 Airplane Arriving'), ('🛰', '🛰 Satellite'), ('🛎', '🛎 Service Bell'), ('🛌', '🛌 Bed'), ('🛏', '🛏 Bed'), ('🛋', '🛋 Couch and Lamp'), ('🕰', '🕰 Mantelpiece'), ('🌡', '🌡 Thermometer'), ('🌤', '🌤 Small Cloud'), ('🌥', '🌥 White Sun Behind Cloud'), ('🌦', '🌦 White Sun Behind Cloud With Rain'), ('🌧', '🌧 Cloud With Rain'), ('🌨', '🌨 Cloud With Snow'), ('🌩', '🌩 Lightning'), ('🌪', '🌪 Tornado'), ('🌫', '🌫 Fog'), ('🌬', '🌬 Blowing'), ('🎖', '🎖 Medal'), ('🎗', '🎗 Ribbon'), ('🎞', '🎞 Film'), ('🎟', '🎟 Admission Tickets'), ('🏷', '🏷 Label'), ('🏌', '🏌 Golfer'), ('🏋', '🏋 Lifting'), ('🏎', '🏎 Racing Car'), ('🏍', '🏍 Racing Motorcycle'), ('🏅', '🏅 Medal'), ('🕹', '🕹 Joystick'), ('⏸', '⏸ Double Vertical Bar'), ('⏹', '⏹ Black Square for Stop'), ('⏺', '⏺ Black Circle for Record'), ('🎙', '🎙 Microphone'), ('🎚', '🎚 Level Slider'), ('🎛', '🎛 Control Knobs'), ('🖥', '🖥 Desktop'), ('🖨', '🖨 Printer'), ('🖱', '🖱 Three Button Mouse'), ('🖲', '🖲 Trackball'), ('📽', '📽 Film Projector'), ('📸', '📸 Camera With Flash'), ('🕯', '🕯 Candle'), ('🗞', '🗞 Newspaper'), ('🗳', '🗳 Ballot Box With Ballot'), ('🖋', '🖋 Fancy Pen'), ('🖊', '🖊 Lower Left Ballpoint Pen'), ('🖌', '🖌 Lower Left Paintbrush'), ('🖍', '🖍 Lower Left Crayon'), ('🗂', '🗂 Card Index Dividers'), ('🗒', '🗒 Spiral Note Pad'), ('🗓', '🗓 Spiral Calendar Pad'), ('🖇', '🖇 Linked Paperclips'), ('🗃', '🗃 Card File Box'), ('🗄', '🗄 File Cabinet'), ('🗑', '🗑 Wastebasket'), ('🗝', '🗝 Old Key'), ('🛠', '🛠 Tools'), ('🗜', '🗜 Compression'), ('🗡', '🗡 Dagger'), ('🛡', '🛡 Shield'), ('🏳', '🏳 White Flag'), ('🏴', '🏴 Black Flag'), ('🕉', '🕉 Om Symbol'), ('🗨', '🗨 Left Speech Bubble'), ('🤗', '🤗 Hugging'), ('🤔', '🤔 Thinking'), ('🙄', '🙄 Rolling Eyes'), ('🤐', '🤐 Hushed'), ('🤓', '🤓 Nerd'), ('🙃', '🙃 Upside Down'), ('🤒', '🤒 Sick'), ('🤕', '🤕 Hurt'), ('🤑', '🤑 Money'), ('🏻', '🏻 Emoji Modifier 1-2'), ('🏼', '🏼 Emoji Modifier 3'), ('🏽', '🏽 Emoji Modifier 4'), ('🏾', '🏾 Emoji Modifier 5'), ('🏿', '🏿 Emoji Modifier 6'), ('🤘', '🤘 Rock On'), ('📿', '📿 Prayer Beads'), ('🤖', '🤖 Robot'), ('🦁', '🦁 Lion'), ('🦄', '🦄 Unicorn'), ('🦃', '🦃 Turkey'), ('🦀', '🦀 Crab'), ('🦂', '🦂 Scorpion'), ('🧀', '🧀 Cheese'), ('🌭', '🌭 Hot Dog'), ('🌮', '🌮 Taco'), ('🌯', '🌯 Burrito'), ('🍿', '🍿 Popcorn'), ('🍾', '🍾 Popping Cork'), ('🏺', '🏺 Amphora'), ('🛐', '🛐 Place of Worship'), ('🕋', '🕋 Kaaba'), ('🕌', '🕌 Mosque'), ('🕍', '🕍 Synagogue'), ('🕎', '🕎 Menorah'), ('🏏', '🏏 Cricket Ball'), ('🏐', '🏐 Volleyball'), ('🏑', '🏑 Field Hockey'), ('🏒', '🏒 Ice Hockey'), ('🏓', '🏓 Table Tennis'), ('🏸', '🏸 Badminton'), ('🏹', '🏹 Archer'), ('🤣', '🤣 ROFL Face'), ('🤤', '🤤 Drooling'), ('🤢', '🤢 Nauseated'), ('🤧', '🤧 Sneezing'), ('🤠', '🤠 Cowboy'), ('🤡', '🤡 Clown'), ('🤥', '🤥 Lying'), ('🤴', '🤴 Prince'), ('🤵', '🤵 Tuxedo Man'), ('🤰', '🤰 Pregnant'), ('🤶', '🤶 Mrs. Claus'), ('🤦', '🤦 Facepalm'), ('🤷', '🤷 Shrugging'), ('🕺', '🕺 Man Dancing'), ('🤺', '🤺 Fencing'), ('🤸', '🤸 Cartwheel'), ('🤼', '🤼 Wrestling'), ('🤽', '🤽 Water Polo'), ('🤾', '🤾 Handball'), ('🤹', '🤹 Juggling'), ('🤳', '🤳 Selfie'), ('🤞', '🤞 Luck Hand'), ('🤙', '🤙 Call Me Hand'), ('🤛', '🤛 Left-Facing Fist'), ('🤜', '🤜 Right-Facing Fist'), ('🤚', '🤚 Raised Back of Hand'), ('🤝', '🤝 Handshake'), ('🖤', '🖤 Black Heart'), ('🦍', '🦍 Gorilla'), ('🦊', '🦊 Fox'), ('🦌', '🦌 Deer'), ('🦏', '🦏 Rhinoceros'), ('🦇', '🦇 Bat'), ('🦅', '🦅 Eagle'), ('🦆', '🦆 Duck'), ('🦉', '🦉 Owl'), ('🦎', '🦎 Lizard'), ('🦈', '🦈 Shark'), ('🦐', '🦐 Shrimp'), ('🦑', '🦑 Squid'), ('🦋', '🦋 Butterfly'), ('🥀', '🥀 Wilted'), ('🥝', '🥝 Kiwifruit'), ('🥑', '🥑 Avocado'), ('🥔', '🥔 Potato'), ('🥕', '🥕 Carrot'), ('🥒', '🥒 Cucumber'), ('🥜', '🥜 Peanuts'), ('🥐', '🥐 Croissant'), ('🥖', '🥖 Baguette'), ('🥞', '🥞 Pancakes'), ('🥓', '🥓 Bacon'), ('🥙', '🥙 Stuffed Flatbread'), ('🥚', '🥚 Egg'), ('🥘', '🥘 Shallow Pan'), ('🥗', '🥗 Salad'), ('🥛', '🥛 Milk'), ('🥂', '🥂 Clinking Glasses'), ('🥃', '🥃 Tumbler'), ('🥄', '🥄 Spoon'), ('🛴', '🛴 Scooter'), ('🛵', '🛵 Motor Scooter'), ('🛑', '🛑 Stop Sign'), ('🛶', '🛶 Canoe'), ('🥇', '🥇 Gold Medal'), ('🥈', '🥈 Silver Medal'), ('🥉', '🥉 Bronze Medal'), ('🥊', '🥊 Boxing'), ('🥋', '🥋 Martial Arts'), ('🥅', '🥅 Goal Net'), ('🥁', '🥁 Drum'), ('🛒', '🛒 Shopping Cart'), ('\\U0001f929', '\\U0001f929 Star Struck'), ('\\U0001f928', '\\U0001f928 Raised Eyebrow'), ('\\U0001f92f', '\\U0001f92f Mind Blown'), ('\\U0001f92a', '\\U0001f92a Zany Face'), ('\\U0001f92c', '\\U0001f92c Swear Face'), ('\\U0001f92e', '\\U0001f92e Vomiting'), ('\\U0001f92b', '\\U0001f92b Shushing'), ('\\U0001f92d', '\\U0001f92d Hand Over Mouth'), ('\\U0001f9d0', '\\U0001f9d0 Monocle'), ('\\U0001f9d2', '\\U0001f9d2 Child'), ('\\U0001f9d1', '\\U0001f9d1 Adult'), ('\\U0001f9d3', '\\U0001f9d3 Older Adult'), ('\\U0001f9d5', '\\U0001f9d5 Headscarf'), ('\\U0001f9d4', '\\U0001f9d4 Bearded Person'), ('\\U0001f931', '\\U0001f931 Breast Feeding'), ('\\U0001f9d9', '\\U0001f9d9 Mage'), ('\\U0001f9da', '\\U0001f9da Fairy'), ('\\U0001f9db', '\\U0001f9db Vampire'), ('\\U0001f9dc', '\\U0001f9dc Merperson'), ('\\U0001f9dd', '\\U0001f9dd Elf'), ('\\U0001f9de', '\\U0001f9de Genie'), ('\\U0001f9df', '\\U0001f9df Zombie'), ('\\U0001f9d6', '\\U0001f9d6 Steamy Room'), ('\\U0001f9d7', '\\U0001f9d7 Person Climbing'), ('\\U0001f9d8', '\\U0001f9d8 Lotus Position'), ('\\U0001f91f', '\\U0001f91f Love-You Gesture'), ('\\U0001f932', '\\U0001f932 Palms Up Together'), ('\\U0001f9e0', '\\U0001f9e0 Brain'), ('\\U0001f9e1', '\\U0001f9e1 Orange Heart'), ('\\U0001f9e3', '\\U0001f9e3 Scarf'), ('\\U0001f9e4', '\\U0001f9e4 Gloves'), ('\\U0001f9e5', '\\U0001f9e5 Coat'), ('\\U0001f9e6', '\\U0001f9e6 Socks'), ('\\U0001f9e2', '\\U0001f9e2 Billed Cap'), ('\\U0001f993', '\\U0001f993 Zebra'), ('\\U0001f992', '\\U0001f992 Giraffe'), ('\\U0001f994', '\\U0001f994 Hedgehog'), ('\\U0001f995', '\\U0001f995 Long Neck'), ('\\U0001f996', '\\U0001f996 T-Rex'), ('\\U0001f997', '\\U0001f997 Cricket'), ('\\U0001f965', '\\U0001f965 Coconut'), ('\\U0001f966', '\\U0001f966 Broccoli'), ('\\U0001f968', '\\U0001f968 Pretzel'), ('\\U0001f969', '\\U0001f969 Cut of Meat'), ('\\U0001f96a', '\\U0001f96a Sandwich'), ('\\U0001f963', '\\U0001f963 Bowl With Spoon'), ('\\U0001f96b', '\\U0001f96b Canned'), ('\\U0001f95f', '\\U0001f95f Dumpling'), ('\\U0001f960', '\\U0001f960 Fortune Cookie'), ('\\U0001f961', '\\U0001f961 Takeout Box'), ('\\U0001f967', '\\U0001f967 Pie'), ('\\U0001f964', '\\U0001f964 Cup With Straw'), ('\\U0001f962', '\\U0001f962 Chopsticks'), ('\\U0001f6f8', '\\U0001f6f8 Flying Saucer'), ('\\U0001f6f7', '\\U0001f6f7 Sled'), ('\\U0001f94c', '\\U0001f94c Curling')], default=None, max_length=2, null=True, verbose_name='emoji'),\n        ),",
        "detail": "tabbycat.participants.migrations.0009_auto_20190227_2310",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.participants.migrations.0010_auto_20180409_1118",
        "description": "tabbycat.participants.migrations.0010_auto_20180409_1118",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('participants', '0010_auto_20180409_1945'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='team',\n            name='emoji',\n            field=models.CharField(blank=True, choices=[('☺️', '☺️'), ('☹', '☹'), ('☝️', '☝️'), ('✌️', '✌️'), ('✍', '✍'), ('❤️', '❤️'), ('❣', '❣'), ('☠', '☠'), ('♨️', '♨️'), ('✈️', '✈️'), ('⌛', '⌛'), ('⌚', '⌚'), ('♈', '♈'), ('♉', '♉'), ('♊', '♊'), ('♋', '♋'), ('♌', '♌'), ('♍', '♍'), ('♎', '♎'), ('♏', '♏'), ('♐', '♐'), ('♑', '♑'), ('♒', '♒'), ('♓', '♓'), ('☀️', '☀️'), ('☁️', '☁️'), ('☂', '☂'), ('❄️', '❄️'), ('☃', '☃'), ('☄️', '☄️'), ('♠️', '♠️'), ('♥️', '♥️'), ('♦️', '♦️'), ('♣️', '♣️'), ('▶️', '▶️'), ('◀️', '◀️'), ('☎️', '☎️'), ('⌨', '⌨'), ('✉️', '✉️'), ('✏️', '✏️'), ('✒️', '✒️'), ('✂️', '✂️'), ('↗️', '↗️'), ('➡️', '➡️'), ('↘️', '↘️'), ('↙️', '↙️'), ('↖️', '↖️'), ('↕️', '↕️'), ('↔️', '↔️'), ('↩️', '↩️'), ('↪️', '↪️'), ('✡', '✡'), ('☸', '☸'), ('☯', '☯'), ('✝', '✝'), ('☦', '☦'), ('☪', '☪'), ('☮', '☮'), ('☢', '☢'), ('☣', '☣'), ('☑️', '☑️'), ('✔️', '✔️'), ('✖️', '✖️'), ('✳️', '✳️'), ('✴️', '✴️'), ('❇️', '❇️'), ('‼️', '‼️'), ('〰️', '〰️'), ('©️', '©️'), ('®️', '®️'), ('™️', '™️'), ('Ⓜ️', 'Ⓜ️'), ('㊗️', '㊗️'), ('㊙️', '㊙️'), ('▪️', '▪️'), ('▫️', '▫️'), ('#⃣️', '#⃣️'), ('*⃣', '*⃣'), ('0⃣️', '0⃣️'), ('1⃣️', '1⃣️'), ('2⃣️', '2⃣️'), ('3⃣️', '3⃣️'), ('4⃣️', '4⃣️'), ('5⃣️', '5⃣️'), ('6⃣️', '6⃣️'), ('7⃣️', '7⃣️'), ('8⃣️', '8⃣️'), ('9⃣️', '9⃣️'), ('⁉️', '⁉️'), ('ℹ️', 'ℹ️'), ('⤴️', '⤴️'), ('⤵️', '⤵️'), ('♻️', '♻️'), ('〽️', '〽️'), ('◻️', '◻️'), ('◼️', '◼️'), ('◽', '◽'), ('◾', '◾'), ('☕', '☕'), ('⚠️', '⚠️'), ('☔', '☔'), ('⏏', '⏏'), ('⬆️', '⬆️'), ('⬇️', '⬇️'), ('⬅️', '⬅️'), ('⚡', '⚡'), ('☘', '☘'), ('⚓', '⚓'), ('♿', '♿'), ('⚒', '⚒'), ('⚙', '⚙'), ('⚗', '⚗'), ('⚖', '⚖'), ('⚔', '⚔'), ('⚰', '⚰'), ('⚱', '⚱'), ('⚜', '⚜'), ('⚛', '⚛'), ('⚪', '⚪'), ('⚫', '⚫'), ('🀄', '🀄'), ('⭐', '⭐'), ('⬛', '⬛'), ('⬜', '⬜'), ('⛑', '⛑'), ('⛰', '⛰'), ('⛪', '⛪'), ('⛲', '⛲'), ('⛺', '⛺'), ('⛽', '⛽'), ('⛵', '⛵'), ('⛴', '⛴'), ('⛔', '⛔'), ('⛅', '⛅'), ('⛈', '⛈'), ('⛱', '⛱'), ('⛄', '⛄'), ('⚽', '⚽'), ('⚾', '⚾'), ('⛳', '⛳'), ('⛸', '⛸'), ('⛷', '⛷'), ('⛹', '⛹'), ('⛏', '⛏'), ('⛓', '⛓'), ('⛩', '⛩'), ('⭕', '⭕'), ('❗', '❗'), ('🅿️', '🅿️'), ('🈯', '🈯'), ('🈚', '🈚'), ('😁', '😁'), ('😂', '😂'), ('😃', '😃'), ('😄', '😄'), ('😅', '😅'), ('😆', '😆'), ('😉', '😉'), ('😊', '😊'), ('😋', '😋'), ('😎', '😎'), ('😍', '😍'), ('😘', '😘'), ('😚', '😚'), ('😇', '😇'), ('😐', '😐'), ('😶', '😶'), ('😏', '😏'), ('😣', '😣'), ('😥', '😥'), ('😪', '😪'), ('😫', '😫'), ('😌', '😌'), ('😜', '😜'), ('😝', '😝'), ('😒', '😒'), ('😓', '😓'), ('😔', '😔'), ('😖', '😖'), ('😷', '😷'), ('😲', '😲'), ('😞', '😞'), ('😤', '😤'), ('😢', '😢'), ('😭', '😭'), ('😨', '😨'), ('😩', '😩'), ('😰', '😰'), ('😱', '😱'), ('😳', '😳'), ('😵', '😵'), ('😡', '😡'), ('😠', '😠'), ('👿', '👿'), ('😈', '😈'), ('👦', '👦'), ('👧', '👧'), ('👨', '👨'), ('👩', '👩'), ('👴', '👴'), ('👵', '👵'), ('👶', '👶'), ('👱', '👱'), ('👮', '👮'), ('👲', '👲'), ('👳', '👳'), ('👷', '👷'), ('👸', '👸'), ('💂', '💂'), ('🎅', '🎅'), ('👼', '👼'), ('👯', '👯'), ('💆', '💆'), ('💇', '💇'), ('👰', '👰'), ('🙍', '🙍'), ('🙎', '🙎'), ('🙅', '🙅'), ('🙆', '🙆'), ('💁', '💁'), ('🙋', '🙋'), ('🙇', '🙇'), ('🙌', '🙌'), ('🙏', '🙏'), ('👤', '👤'), ('👥', '👥'), ('🚶', '🚶'), ('🏃', '🏃'), ('💃', '💃'), ('💏', '💏'), ('💑', '💑'), ('👪', '👪'), ('👫', '👫'), ('👬', '👬'), ('👭', '👭'), ('💪', '💪'), ('👈', '👈'), ('👉', '👉'), ('👆', '👆'), ('👇', '👇'), ('✊', '✊'), ('✋', '✋'), ('👊', '👊'), ('👌', '👌'), ('👍', '👍'), ('👎', '👎'), ('👋', '👋'), ('👏', '👏'), ('👐', '👐'), ('💅', '💅'), ('👣', '👣'), ('👀', '👀'), ('👂', '👂'), ('👃', '👃'), ('👅', '👅'), ('👄', '👄'), ('💋', '💋'), ('💘', '💘'), ('💓', '💓'), ('💔', '💔'), ('💕', '💕'), ('💖', '💖'), ('💗', '💗'), ('💙', '💙'), ('💚', '💚'), ('💛', '💛'), ('💜', '💜'), ('💝', '💝'), ('💞', '💞'), ('💟', '💟'), ('💌', '💌'), ('💧', '💧'), ('💤', '💤'), ('💢', '💢'), ('💣', '💣'), ('💥', '💥'), ('💦', '💦'), ('💨', '💨'), ('💫', '💫'), ('💬', '💬'), ('💭', '💭'), ('👓', '👓'), ('👔', '👔'), ('👕', '👕'), ('👖', '👖'), ('👗', '👗'), ('👘', '👘'), ('👙', '👙'), ('👚', '👚'), ('👛', '👛'), ('👜', '👜'), ('👝', '👝'), ('🎒', '🎒'), ('👞', '👞'), ('👟', '👟'), ('👠', '👠'), ('👡', '👡'), ('👢', '👢'), ('👑', '👑'), ('👒', '👒'), ('🎩', '🎩'), ('💄', '💄'), ('💍', '💍'), ('💎', '💎'), ('👹', '👹'), ('👺', '👺'), ('👻', '👻'), ('💀', '💀'), ('👽', '👽'), ('👾', '👾'), ('💩', '💩'), ('🐵', '🐵'), ('🙈', '🙈'), ('🙉', '🙉'), ('🙊', '🙊'), ('🐒', '🐒'), ('🐶', '🐶'), ('🐕', '🐕'), ('🐩', '🐩'), ('🐺', '🐺'), ('🐱', '🐱'), ('😸', '😸'), ('😹', '😹'), ('😺', '😺'), ('😻', '😻'), ('😼', '😼'), ('😽', '😽'), ('😾', '😾'), ('😿', '😿'), ('🙀', '🙀'), ('🐈', '🐈'), ('🐯', '🐯'), ('🐅', '🐅'), ('🐆', '🐆'), ('🐴', '🐴'), ('🐎', '🐎'), ('🐮', '🐮'), ('🐂', '🐂'), ('🐃', '🐃'), ('🐄', '🐄'), ('🐷', '🐷'), ('🐖', '🐖'), ('🐗', '🐗'), ('🐽', '🐽'), ('🐏', '🐏'), ('🐑', '🐑'), ('🐐', '🐐'), ('🐪', '🐪'), ('🐫', '🐫'), ('🐘', '🐘'), ('🐭', '🐭'), ('🐁', '🐁'), ('🐀', '🐀'), ('🐹', '🐹'), ('🐰', '🐰'), ('🐇', '🐇'), ('🐻', '🐻'), ('🐨', '🐨'), ('🐼', '🐼'), ('🐾', '🐾'), ('🐔', '🐔'), ('🐓', '🐓'), ('🐣', '🐣'), ('🐤', '🐤'), ('🐥', '🐥'), ('🐦', '🐦'), ('🐧', '🐧'), ('🐸', '🐸'), ('🐊', '🐊'), ('🐢', '🐢'), ('🐍', '🐍'), ('🐲', '🐲'), ('🐉', '🐉'), ('🐳', '🐳'), ('🐋', '🐋'), ('🐬', '🐬'), ('🐟', '🐟'), ('🐠', '🐠'), ('🐡', '🐡'), ('🐙', '🐙'), ('🐚', '🐚'), ('🐌', '🐌'), ('🐛', '🐛'), ('🐜', '🐜'), ('🐝', '🐝'), ('🐞', '🐞'), ('💐', '💐'), ('🌸', '🌸'), ('💮', '💮'), ('🌹', '🌹'), ('🌺', '🌺'), ('🌻', '🌻'), ('🌼', '🌼'), ('🌷', '🌷'), ('🌱', '🌱'), ('🌲', '🌲'), ('🌳', '🌳'), ('🌴', '🌴'), ('🌵', '🌵'), ('🌾', '🌾'), ('🌿', '🌿'), ('🍀', '🍀'), ('🍁', '🍁'), ('🍂', '🍂'), ('🍃', '🍃'), ('🍇', '🍇'), ('🍈', '🍈'), ('🍉', '🍉'), ('🍊', '🍊'), ('🍋', '🍋'), ('🍌', '🍌'), ('🍍', '🍍'), ('🍎', '🍎'), ('🍏', '🍏'), ('🍐', '🍐'), ('🍑', '🍑'), ('🍒', '🍒'), ('🍓', '🍓'), ('🍅', '🍅'), ('🍆', '🍆'), ('🌽', '🌽'), ('🍄', '🍄'), ('🌰', '🌰'), ('🍞', '🍞'), ('🍖', '🍖'), ('🍗', '🍗'), ('🍔', '🍔'), ('🍟', '🍟'), ('🍕', '🍕'), ('🍲', '🍲'), ('🍱', '🍱'), ('🍘', '🍘'), ('🍙', '🍙'), ('🍚', '🍚'), ('🍛', '🍛'), ('🍜', '🍜'), ('🍝', '🍝'), ('🍠', '🍠'), ('🍢', '🍢'), ('🍣', '🍣'), ('🍤', '🍤'), ('🍥', '🍥'), ('🍡', '🍡'), ('🍦', '🍦'), ('🍧', '🍧'), ('🍨', '🍨'), ('🍩', '🍩'), ('🍪', '🍪'), ('🎂', '🎂'), ('🍰', '🍰'), ('🍫', '🍫'), ('🍬', '🍬'), ('🍭', '🍭'), ('🍮', '🍮'), ('🍯', '🍯'), ('🍼', '🍼'), ('🍵', '🍵'), ('🍶', '🍶'), ('🍷', '🍷'), ('🍸', '🍸'), ('🍹', '🍹'), ('🍺', '🍺'), ('🍻', '🍻'), ('🍴', '🍴'), ('🍳', '🍳'), ('🌍', '🌍'), ('🌎', '🌎'), ('🌏', '🌏'), ('🌐', '🌐'), ('🌋', '🌋'), ('🗻', '🗻'), ('🏠', '🏠'), ('🏡', '🏡'), ('🏢', '🏢'), ('🏣', '🏣'), ('🏤', '🏤'), ('🏥', '🏥'), ('🏦', '🏦'), ('🏨', '🏨'), ('🏩', '🏩'), ('🏪', '🏪'), ('🏫', '🏫'), ('🏬', '🏬'), ('🏭', '🏭'), ('🏯', '🏯'), ('🏰', '🏰'), ('💒', '💒'), ('🗼', '🗼'), ('🗽', '🗽'), ('🗾', '🗾'), ('🌁', '🌁'), ('🌃', '🌃'), ('🌄', '🌄'), ('🌅', '🌅'), ('🌆', '🌆'), ('🌇', '🌇'), ('🌉', '🌉'), ('🌊', '🌊'), ('🗿', '🗿'), ('🌌', '🌌'), ('🎠', '🎠'), ('🎡', '🎡'), ('🎢', '🎢'), ('💈', '💈'), ('🎪', '🎪'), ('🎭', '🎭'), ('🎨', '🎨'), ('🎰', '🎰'), ('🚂', '🚂'), ('🚃', '🚃'), ('🚄', '🚄'), ('🚅', '🚅'), ('🚆', '🚆'), ('🚇', '🚇'), ('🚈', '🚈'), ('🚉', '🚉'), ('🚊', '🚊'), ('🚝', '🚝'), ('🚞', '🚞'), ('🚋', '🚋'), ('🚌', '🚌'), ('🚍', '🚍'), ('🚎', '🚎'), ('🚏', '🚏'), ('🚐', '🚐'), ('🚑', '🚑'), ('🚒', '🚒'), ('🚓', '🚓'), ('🚔', '🚔'), ('🚕', '🚕'), ('🚖', '🚖'), ('🚗', '🚗'), ('🚘', '🚘'), ('🚙', '🚙'), ('🚚', '🚚'), ('🚛', '🚛'), ('🚜', '🚜'), ('🚲', '🚲'), ('🚳', '🚳'), ('🚨', '🚨'), ('🔱', '🔱'), ('🚣', '🚣'), ('🚤', '🚤'), ('🚢', '🚢'), ('💺', '💺'), ('🚁', '🚁'), ('🚟', '🚟'), ('🚠', '🚠'), ('🚡', '🚡'), ('🚀', '🚀'), ('🏧', '🏧'), ('🚮', '🚮'), ('🚥', '🚥'), ('🚦', '🚦'), ('🚧', '🚧'), ('🚫', '🚫'), ('🚭', '🚭'), ('🚯', '🚯'), ('🚰', '🚰'), ('🚱', '🚱'), ('🚷', '🚷'), ('🚸', '🚸'), ('🚹', '🚹'), ('🚺', '🚺'), ('🚻', '🚻'), ('🚼', '🚼'), ('🚾', '🚾'), ('🛂', '🛂'), ('🛃', '🛃'), ('🛄', '🛄'), ('🛅', '🛅'), ('🚪', '🚪'), ('🚽', '🚽'), ('🚿', '🚿'), ('🛀', '🛀'), ('🛁', '🛁'), ('⏳', '⏳'), ('⏰', '⏰'), ('⏱', '⏱'), ('⏲', '⏲'), ('🕛', '🕛'), ('🕧', '🕧'), ('🕐', '🕐'), ('🕜', '🕜'), ('🕑', '🕑'), ('🕝', '🕝'), ('🕒', '🕒'), ('🕞', '🕞'), ('🕓', '🕓'), ('🕟', '🕟'), ('🕔', '🕔'), ('🕠', '🕠'), ('🕕', '🕕'), ('🕡', '🕡'), ('🕖', '🕖'), ('🕢', '🕢'), ('🕗', '🕗'), ('🕣', '🕣'), ('🕘', '🕘'), ('🕤', '🕤'), ('🕙', '🕙'), ('🕥', '🕥'), ('🕚', '🕚'), ('🕦', '🕦'), ('⛎', '⛎'), ('🌑', '🌑'), ('🌒', '🌒'), ('🌓', '🌓'), ('🌔', '🌔'), ('🌕', '🌕'), ('🌖', '🌖'), ('🌗', '🌗'), ('🌘', '🌘'), ('🌙', '🌙'), ('🌚', '🌚'), ('🌛', '🌛'), ('🌜', '🌜'), ('🌝', '🌝'), ('🌞', '🌞'), ('🌀', '🌀'), ('🌈', '🌈'), ('🌂', '🌂'), ('🌟', '🌟'), ('🌠', '🌠'), ('🔥', '🔥'), ('🎃', '🎃'), ('🎄', '🎄'), ('🎆', '🎆'), ('🎇', '🎇'), ('✨', '✨'), ('🎈', '🎈'), ('🎉', '🎉'), ('🎊', '🎊'), ('🎋', '🎋'), ('🎌', '🎌'), ('🎍', '🎍'), ('🎎', '🎎'), ('🎏', '🎏'), ('🎐', '🎐'), ('🎑', '🎑'), ('🎓', '🎓'), ('🎯', '🎯'), ('🎴', '🎴'), ('🎀', '🎀'), ('🎁', '🎁'), ('🎫', '🎫'), ('🏀', '🏀'), ('🏈', '🏈'), ('🏉', '🏉'), ('🎾', '🎾'), ('🎱', '🎱'), ('🎳', '🎳'), ('🎣', '🎣'), ('🎽', '🎽'), ('🎿', '🎿'), ('🏂', '🏂'), ('🏄', '🏄'), ('🏇', '🏇'), ('🏊', '🏊'), ('🚴', '🚴'), ('🚵', '🚵'), ('🏆', '🏆'), ('🎮', '🎮'), ('🎲', '🎲'), ('🃏', '🃏'), ('🔇', '🔇'), ('🔈', '🔈'), ('🔉', '🔉'), ('🔊', '🔊'), ('📢', '📢'), ('📣', '📣'), ('📯', '📯'), ('🔔', '🔔'), ('🔕', '🔕'), ('🔀', '🔀'), ('🔁', '🔁'), ('🔂', '🔂'), ('⏩', '⏩'), ('⏭', '⏭'), ('⏯', '⏯'), ('⏪', '⏪'), ('⏮', '⏮'), ('🔼', '🔼'), ('⏫', '⏫'), ('🔽', '🔽'), ('⏬', '⏬'), ('🎼', '🎼'), ('🎵', '🎵'), ('🎶', '🎶'), ('🎤', '🎤'), ('🎧', '🎧'), ('🎷', '🎷'), ('🎸', '🎸'), ('🎹', '🎹'), ('🎺', '🎺'), ('🎻', '🎻'), ('📻', '📻'), ('📱', '📱'), ('📳', '📳'), ('📴', '📴'), ('📲', '📲'), ('📵', '📵'), ('📞', '📞'), ('🔟', '🔟'), ('📶', '📶'), ('📟', '📟'), ('📠', '📠'), ('🔋', '🔋'), ('🔌', '🔌'), ('💻', '💻'), ('💽', '💽'), ('💾', '💾'), ('💿', '💿'), ('📀', '📀'), ('🎥', '🎥'), ('🎦', '🎦'), ('🎬', '🎬'), ('📺', '📺'), ('📷', '📷'), ('📹', '📹'), ('📼', '📼'), ('🔅', '🔅'), ('🔆', '🔆'), ('🔍', '🔍'), ('🔎', '🔎'), ('🔬', '🔬'), ('🔭', '🔭'), ('📡', '📡'), ('💡', '💡'), ('🔦', '🔦'), ('🏮', '🏮'), ('📔', '📔'), ('📕', '📕'), ('📖', '📖'), ('📗', '📗'), ('📘', '📘'), ('📙', '📙'), ('📚', '📚'), ('📓', '📓'), ('📒', '📒'), ('📃', '📃'), ('📜', '📜'), ('📄', '📄'), ('📰', '📰'), ('📑', '📑'), ('🔖', '🔖'), ('💰', '💰'), ('💴', '💴'), ('💵', '💵'), ('💶', '💶'), ('💷', '💷'), ('💸', '💸'), ('💱', '💱'), ('💲', '💲'), ('💳', '💳'), ('💹', '💹'), ('📧', '📧'), ('📨', '📨'), ('📩', '📩'), ('📤', '📤'), ('📥', '📥'), ('📦', '📦'), ('📫', '📫'), ('📪', '📪'), ('📬', '📬'), ('📭', '📭'), ('📮', '📮'), ('📝', '📝'), ('💼', '💼'), ('📁', '📁'), ('📂', '📂'), ('📅', '📅'), ('📆', '📆'), ('📇', '📇'), ('📈', '📈'), ('📉', '📉'), ('📊', '📊'), ('📋', '📋'), ('📌', '📌'), ('📍', '📍'), ('📎', '📎'), ('📏', '📏'), ('📐', '📐'), ('📛', '📛'), ('🔒', '🔒'), ('🔓', '🔓'), ('🔏', '🔏'), ('🔐', '🔐'), ('🔑', '🔑'), ('🔨', '🔨'), ('🔧', '🔧'), ('🔩', '🔩'), ('🔗', '🔗'), ('💉', '💉'), ('💊', '💊'), ('🔪', '🔪'), ('🔫', '🔫'), ('🚬', '🚬'), ('🏁', '🏁'), ('🚩', '🚩'), ('🇦🇫', '🇦🇫'), ('🇦🇽', '🇦🇽'), ('🇦🇱', '🇦🇱'), ('🇩🇿', '🇩🇿'), ('🇦🇸', '🇦🇸'), ('🇦🇩', '🇦🇩'), ('🇦🇴', '🇦🇴'), ('🇦🇮', '🇦🇮'), ('🇦🇶', '🇦🇶'), ('🇦🇬', '🇦🇬'), ('🇦🇷', '🇦🇷'), ('🇦🇲', '🇦🇲'), ('🇦🇼', '🇦🇼'), ('🇦🇨', '🇦🇨'), ('🇦🇺', '🇦🇺'), ('🇦🇹', '🇦🇹'), ('🇦🇿', '🇦🇿'), ('🇧🇸', '🇧🇸'), ('🇧🇭', '🇧🇭'), ('🇧🇩', '🇧🇩'), ('🇧🇧', '🇧🇧'), ('🇧🇾', '🇧🇾'), ('🇧🇪', '🇧🇪'), ('🇧🇿', '🇧🇿'), ('🇧🇯', '🇧🇯'), ('🇧🇲', '🇧🇲'), ('🇧🇹', '🇧🇹'), ('🇧🇴', '🇧🇴'), ('🇧🇦', '🇧🇦'), ('🇧🇼', '🇧🇼'), ('🇧🇻', '🇧🇻'), ('🇧🇷', '🇧🇷'), ('🇮🇴', '🇮🇴'), ('🇻🇬', '🇻🇬'), ('🇧🇳', '🇧🇳'), ('🇧🇬', '🇧🇬'), ('🇧🇫', '🇧🇫'), ('🇧🇮', '🇧🇮'), ('🇰🇭', '🇰🇭'), ('🇨🇲', '🇨🇲'), ('🇨🇦', '🇨🇦'), ('🇮🇨', '🇮🇨'), ('🇨🇻', '🇨🇻'), ('🇧🇶', '🇧🇶'), ('🇰🇾', '🇰🇾'), ('🇨🇫', '🇨🇫'), ('🇪🇦', '🇪🇦'), ('🇹🇩', '🇹🇩'), ('🇨🇱', '🇨🇱'), ('🇨🇳', '🇨🇳'), ('🇨🇽', '🇨🇽'), ('🇨🇵', '🇨🇵'), ('🇨🇨', '🇨🇨'), ('🇨🇴', '🇨🇴'), ('🇰🇲', '🇰🇲'), ('🇨🇬', '🇨🇬'), ('🇨🇩', '🇨🇩'), ('🇨🇰', '🇨🇰'), ('🇨🇷', '🇨🇷'), ('🇨🇮', '🇨🇮'), ('🇭🇷', '🇭🇷'), ('🇨🇺', '🇨🇺'), ('🇨🇼', '🇨🇼'), ('🇨🇾', '🇨🇾'), ('🇨🇿', '🇨🇿'), ('🇩🇰', '🇩🇰'), ('🇩🇬', '🇩🇬'), ('🇩🇯', '🇩🇯'), ('🇩🇲', '🇩🇲'), ('🇩🇴', '🇩🇴'), ('🇪🇨', '🇪🇨'), ('🇪🇬', '🇪🇬'), ('🇸🇻', '🇸🇻'), ('🇬🇶', '🇬🇶'), ('🇪🇷', '🇪🇷'), ('🇪🇪', '🇪🇪'), ('🇪🇹', '🇪🇹'), ('🇪🇺', '🇪🇺'), ('🇫🇰', '🇫🇰'), ('🇫🇴', '🇫🇴'), ('🇫🇯', '🇫🇯'), ('🇫🇮', '🇫🇮'), ('🇫🇷', '🇫🇷'), ('🇬🇫', '🇬🇫'), ('🇵🇫', '🇵🇫'), ('🇹🇫', '🇹🇫'), ('🇬🇦', '🇬🇦'), ('🇬🇲', '🇬🇲'), ('🇬🇪', '🇬🇪'), ('🇩🇪', '🇩🇪'), ('🇬🇭', '🇬🇭'), ('🇬🇮', '🇬🇮'), ('🇬🇷', '🇬🇷'), ('🇬🇱', '🇬🇱'), ('🇬🇩', '🇬🇩'), ('🇬🇵', '🇬🇵'), ('🇬🇺', '🇬🇺'), ('🇬🇹', '🇬🇹'), ('🇬🇬', '🇬🇬'), ('🇬🇳', '🇬🇳'), ('🇬🇼', '🇬🇼'), ('🇬🇾', '🇬🇾'), ('🇭🇹', '🇭🇹'), ('🇭🇲', '🇭🇲'), ('🇭🇳', '🇭🇳'), ('🇭🇰', '🇭🇰'), ('🇭🇺', '🇭🇺'), ('🇮🇸', '🇮🇸'), ('🇮🇳', '🇮🇳'), ('🇮🇩', '🇮🇩'), ('🇮🇷', '🇮🇷'), ('🇮🇶', '🇮🇶'), ('🇮🇪', '🇮🇪'), ('🇮🇲', '🇮🇲'), ('🇮🇱', '🇮🇱'), ('🇮🇹', '🇮🇹'), ('🇯🇲', '🇯🇲'), ('🇯🇵', '🇯🇵'), ('🇯🇪', '🇯🇪'), ('🇯🇴', '🇯🇴'), ('🇰🇿', '🇰🇿'), ('🇰🇪', '🇰🇪'), ('🇰🇮', '🇰🇮'), ('🇽🇰', '🇽🇰'), ('🇰🇼', '🇰🇼'), ('🇰🇬', '🇰🇬'), ('🇱🇦', '🇱🇦'), ('🇱🇻', '🇱🇻'), ('🇱🇧', '🇱🇧'), ('🇱🇸', '🇱🇸'), ('🇱🇷', '🇱🇷'), ('🇱🇾', '🇱🇾'), ('🇱🇮', '🇱🇮'), ('🇱🇹', '🇱🇹'), ('🇱🇺', '🇱🇺'), ('🇲🇴', '🇲🇴'), ('🇲🇰', '🇲🇰'), ('🇲🇬', '🇲🇬'), ('🇲🇼', '🇲🇼'), ('🇲🇾', '🇲🇾'), ('🇲🇻', '🇲🇻'), ('🇲🇱', '🇲🇱'), ('🇲🇹', '🇲🇹'), ('🇲🇭', '🇲🇭'), ('🇲🇶', '🇲🇶'), ('🇲🇷', '🇲🇷'), ('🇲🇺', '🇲🇺'), ('🇾🇹', '🇾🇹'), ('🇲🇽', '🇲🇽'), ('🇫🇲', '🇫🇲'), ('🇲🇩', '🇲🇩'), ('🇲🇨', '🇲🇨'), ('🇲🇳', '🇲🇳'), ('🇲🇪', '🇲🇪'), ('🇲🇸', '🇲🇸'), ('🇲🇦', '🇲🇦'), ('🇲🇿', '🇲🇿'), ('🇲🇲', '🇲🇲'), ('🇳🇦', '🇳🇦'), ('🇳🇷', '🇳🇷'), ('🇳🇵', '🇳🇵'), ('🇳🇱', '🇳🇱'), ('🇳🇨', '🇳🇨'), ('🇳🇿', '🇳🇿'), ('🇳🇮', '🇳🇮'), ('🇳🇪', '🇳🇪'), ('🇳🇬', '🇳🇬'), ('🇳🇺', '🇳🇺'), ('🇳🇫', '🇳🇫'), ('🇲🇵', '🇲🇵'), ('🇰🇵', '🇰🇵'), ('🇳🇴', '🇳🇴'), ('🇴🇲', '🇴🇲'), ('🇵🇰', '🇵🇰'), ('🇵🇼', '🇵🇼'), ('🇵🇸', '🇵🇸'), ('🇵🇦', '🇵🇦'), ('🇵🇬', '🇵🇬'), ('🇵🇾', '🇵🇾'), ('🇵🇪', '🇵🇪'), ('🇵🇭', '🇵🇭'), ('🇵🇳', '🇵🇳'), ('🇵🇱', '🇵🇱'), ('🇵🇹', '🇵🇹'), ('🇵🇷', '🇵🇷'), ('🇶🇦', '🇶🇦'), ('🇷🇪', '🇷🇪'), ('🇷🇴', '🇷🇴'), ('🇷🇺', '🇷🇺'), ('🇷🇼', '🇷🇼'), ('🇼🇸', '🇼🇸'), ('🇸🇲', '🇸🇲'), ('🇸🇹', '🇸🇹'), ('🇸🇦', '🇸🇦'), ('🇸🇳', '🇸🇳'), ('🇷🇸', '🇷🇸'), ('🇸🇨', '🇸🇨'), ('🇸🇱', '🇸🇱'), ('🇸🇬', '🇸🇬'), ('🇸🇽', '🇸🇽'), ('🇸🇰', '🇸🇰'), ('🇸🇮', '🇸🇮'), ('🇸🇧', '🇸🇧'), ('🇸🇴', '🇸🇴'), ('🇿🇦', '🇿🇦'), ('🇬🇸', '🇬🇸'), ('🇰🇷', '🇰🇷'), ('🇸🇸', '🇸🇸'), ('🇪🇸', '🇪🇸'), ('🇱🇰', '🇱🇰'), ('🇧🇱', '🇧🇱'), ('🇸🇭', '🇸🇭'), ('🇰🇳', '🇰🇳'), ('🇱🇨', '🇱🇨'), ('🇲🇫', '🇲🇫'), ('🇵🇲', '🇵🇲'), ('🇻🇨', '🇻🇨'), ('🇸🇩', '🇸🇩'), ('🇸🇷', '🇸🇷'), ('🇸🇯', '🇸🇯'), ('🇸🇿', '🇸🇿'), ('🇸🇪', '🇸🇪'), ('🇨🇭', '🇨🇭'), ('🇸🇾', '🇸🇾'), ('🇹🇼', '🇹🇼'), ('🇹🇯', '🇹🇯'), ('🇹🇿', '🇹🇿'), ('🇹🇭', '🇹🇭'), ('🇹🇱', '🇹🇱'), ('🇹🇬', '🇹🇬'), ('🇹🇰', '🇹🇰'), ('🇹🇴', '🇹🇴'), ('🇹🇹', '🇹🇹'), ('🇹🇦', '🇹🇦'), ('🇹🇳', '🇹🇳'), ('🇹🇷', '🇹🇷'), ('🇹🇲', '🇹🇲'), ('🇹🇨', '🇹🇨'), ('🇹🇻', '🇹🇻'), ('🇺🇬', '🇺🇬'), ('🇺🇦', '🇺🇦'), ('🇦🇪', '🇦🇪'), ('🇬🇧', '🇬🇧'), ('🇺🇸', '🇺🇸'), ('🇺🇾', '🇺🇾'), ('🇺🇲', '🇺🇲'), ('🇻🇮', '🇻🇮'), ('🇺🇿', '🇺🇿'), ('🇻🇺', '🇻🇺'), ('🇻🇦', '🇻🇦'), ('🇻🇪', '🇻🇪'), ('🇻🇳', '🇻🇳'), ('🇼🇫', '🇼🇫'), ('🇪🇭', '🇪🇭'), ('🇾🇪', '🇾🇪'), ('🇿🇲', '🇿🇲'), ('🇿🇼', '🇿🇼'), ('🔃', '🔃'), ('🔄', '🔄'), ('🔙', '🔙'), ('🔚', '🔚'), ('🔛', '🔛'), ('🔜', '🔜'), ('🔝', '🔝'), ('🔰', '🔰'), ('🔮', '🔮'), ('🔯', '🔯'), ('✅', '✅'), ('❌', '❌'), ('❎', '❎'), ('➕', '➕'), ('➖', '➖'), ('➗', '➗'), ('➰', '➰'), ('➿', '➿'), ('❓', '❓'), ('❔', '❔'), ('❕', '❕'), ('💯', '💯'), ('🔞', '🔞'), ('🔠', '🔠'), ('🔡', '🔡'), ('🔢', '🔢'), ('🔣', '🔣'), ('🔤', '🔤'), ('🅰️', '🅰️'), ('🆎', '🆎'), ('🅱️', '🅱️'), ('🆑', '🆑'), ('🆒', '🆒'), ('🆓', '🆓'), ('🆔', '🆔'), ('🆕', '🆕'), ('🆖', '🆖'), ('🅾️', '🅾️'), ('🆗', '🆗'), ('🆘', '🆘'), ('🆙', '🆙'), ('🆚', '🆚'), ('🈁', '🈁'), ('🈂️', '🈂️'), ('🈷️', '🈷️'), ('🈶', '🈶'), ('🉐', '🉐'), ('🈹', '🈹'), ('🈲', '🈲'), ('🉑', '🉑'), ('🈸', '🈸'), ('🈴', '🈴'), ('🈳', '🈳'), ('🈺', '🈺'), ('🈵', '🈵'), ('🔶', '🔶'), ('🔷', '🔷'), ('🔸', '🔸'), ('🔹', '🔹'), ('🔺', '🔺'), ('🔻', '🔻'), ('💠', '💠'), ('🔘', '🔘'), ('🔲', '🔲'), ('🔳', '🔳'), ('🔴', '🔴'), ('🔵', '🔵'), ('😀', '😀'), ('😗', '😗'), ('😙', '😙'), ('😑', '😑'), ('😮', '😮'), ('😯', '😯'), ('😴', '😴'), ('😛', '😛'), ('😕', '😕'), ('😟', '😟'), ('😦', '😦'), ('😧', '😧'), ('😬', '😬'), ('🙂', '🙂'), ('🙁', '🙁'), ('🕵', '🕵'), ('🗣', '🗣'), ('🕴', '🕴'), ('🖕', '🖕'), ('🖖', '🖖'), ('🖐', '🖐'), ('👁', '👁'), ('🕳', '🕳'), ('🗯', '🗯'), ('🕶', '🕶'), ('🛍', '🛍'), ('🐿', '🐿'), ('🕊', '🕊'), ('🕷', '🕷'), ('🕸', '🕸'), ('🏵', '🏵'), ('🌶', '🌶'), ('🍽', '🍽'), ('🗺', '🗺'), ('🏔', '🏔'), ('🏕', '🏕'), ('🏖', '🏖'), ('🏜', '🏜'), ('🏝', '🏝'), ('🏞', '🏞'), ('🏟', '🏟'), ('🏛', '🏛'), ('🏗', '🏗'), ('🏘', '🏘'), ('🏙', '🏙'), ('🏚', '🏚'), ('🖼', '🖼'), ('🛢', '🛢'), ('🛣', '🛣'), ('🛤', '🛤'), ('🛳', '🛳'), ('🛥', '🛥'), ('🛩', '🛩'), ('🛫', '🛫'), ('🛬', '🛬'), ('🛰', '🛰'), ('🛎', '🛎'), ('🛌', '🛌'), ('🛏', '🛏'), ('🛋', '🛋'), ('🕰', '🕰'), ('🌡', '🌡'), ('🌤', '🌤'), ('🌥', '🌥'), ('🌦', '🌦'), ('🌧', '🌧'), ('🌨', '🌨'), ('🌩', '🌩'), ('🌪', '🌪'), ('🌫', '🌫'), ('🌬', '🌬'), ('🎖', '🎖'), ('🎗', '🎗'), ('🎞', '🎞'), ('🎟', '🎟'), ('🏷', '🏷'), ('🏌', '🏌'), ('🏋', '🏋'), ('🏎', '🏎'), ('🏍', '🏍'), ('🏅', '🏅'), ('🕹', '🕹'), ('⏸', '⏸'), ('⏹', '⏹'), ('⏺', '⏺'), ('🎙', '🎙'), ('🎚', '🎚'), ('🎛', '🎛'), ('🖥', '🖥'), ('🖨', '🖨'), ('🖱', '🖱'), ('🖲', '🖲'), ('📽', '📽'), ('📸', '📸'), ('🕯', '🕯'), ('🗞', '🗞'), ('🗳', '🗳'), ('🖋', '🖋'), ('🖊', '🖊'), ('🖌', '🖌'), ('🖍', '🖍'), ('🗂', '🗂'), ('🗒', '🗒'), ('🗓', '🗓'), ('🖇', '🖇'), ('🗃', '🗃'), ('🗄', '🗄'), ('🗑', '🗑'), ('🗝', '🗝'), ('🛠', '🛠'), ('🗜', '🗜'), ('🗡', '🗡'), ('🛡', '🛡'), ('🏳', '🏳'), ('🏴', '🏴'), ('🕉', '🕉'), ('🗨', '🗨'), ('🤗', '🤗'), ('🤔', '🤔'), ('🙄', '🙄'), ('🤐', '🤐'), ('🤓', '🤓'), ('🙃', '🙃'), ('🤒', '🤒'), ('🤕', '🤕'), ('🤑', '🤑'), ('🏻', '🏻'), ('🏼', '🏼'), ('🏽', '🏽'), ('🏾', '🏾'), ('🏿', '🏿'), ('🤘', '🤘'), ('📿', '📿'), ('🤖', '🤖'), ('🦁', '🦁'), ('🦄', '🦄'), ('🦃', '🦃'), ('🦀', '🦀'), ('🦂', '🦂'), ('🧀', '🧀'), ('🌭', '🌭'), ('🌮', '🌮'), ('🌯', '🌯'), ('🍿', '🍿'), ('🍾', '🍾'), ('🏺', '🏺'), ('🛐', '🛐'), ('🕋', '🕋'), ('🕌', '🕌'), ('🕍', '🕍'), ('🕎', '🕎'), ('🏏', '🏏'), ('🏐', '🏐'), ('🏑', '🏑'), ('🏒', '🏒'), ('🏓', '🏓'), ('🏸', '🏸'), ('🏹', '🏹'), ('\\U0001f923', '\\U0001f923'), ('\\U0001f924', '\\U0001f924'), ('\\U0001f922', '\\U0001f922'), ('\\U0001f927', '\\U0001f927'), ('\\U0001f920', '\\U0001f920'), ('\\U0001f921', '\\U0001f921'), ('\\U0001f925', '\\U0001f925'), ('\\U0001f934', '\\U0001f934'), ('\\U0001f935', '\\U0001f935'), ('\\U0001f930', '\\U0001f930'), ('\\U0001f936', '\\U0001f936'), ('\\U0001f926', '\\U0001f926'), ('\\U0001f937', '\\U0001f937'), ('\\U0001f57a', '\\U0001f57a'), ('\\U0001f93a', '\\U0001f93a'), ('\\U0001f938', '\\U0001f938'), ('\\U0001f93c', '\\U0001f93c'), ('\\U0001f93d', '\\U0001f93d'), ('\\U0001f93e', '\\U0001f93e'), ('\\U0001f939', '\\U0001f939'), ('\\U0001f933', '\\U0001f933'), ('\\U0001f91e', '\\U0001f91e'), ('\\U0001f919', '\\U0001f919'), ('\\U0001f91b', '\\U0001f91b'), ('\\U0001f91c', '\\U0001f91c'), ('\\U0001f91a', '\\U0001f91a'), ('\\U0001f91d', '\\U0001f91d'), ('\\U0001f5a4', '\\U0001f5a4'), ('\\U0001f98d', '\\U0001f98d'), ('\\U0001f98a', '\\U0001f98a'), ('\\U0001f98c', '\\U0001f98c'), ('\\U0001f98f', '\\U0001f98f'), ('\\U0001f987', '\\U0001f987'), ('\\U0001f985', '\\U0001f985'), ('\\U0001f986', '\\U0001f986'), ('\\U0001f989', '\\U0001f989'), ('\\U0001f98e', '\\U0001f98e'), ('\\U0001f988', '\\U0001f988'), ('\\U0001f990', '\\U0001f990'), ('\\U0001f991', '\\U0001f991'), ('\\U0001f98b', '\\U0001f98b'), ('\\U0001f940', '\\U0001f940'), ('\\U0001f95d', '\\U0001f95d'), ('\\U0001f951', '\\U0001f951'), ('\\U0001f954', '\\U0001f954'), ('\\U0001f955', '\\U0001f955'), ('\\U0001f952', '\\U0001f952'), ('\\U0001f95c', '\\U0001f95c'), ('\\U0001f950', '\\U0001f950'), ('\\U0001f956', '\\U0001f956'), ('\\U0001f95e', '\\U0001f95e'), ('\\U0001f953', '\\U0001f953'), ('\\U0001f959', '\\U0001f959'), ('\\U0001f95a', '\\U0001f95a'), ('\\U0001f958', '\\U0001f958'), ('\\U0001f957', '\\U0001f957'), ('\\U0001f95b', '\\U0001f95b'), ('\\U0001f942', '\\U0001f942'), ('\\U0001f943', '\\U0001f943'), ('\\U0001f944', '\\U0001f944'), ('\\U0001f6f4', '\\U0001f6f4'), ('\\U0001f6f5', '\\U0001f6f5'), ('\\U0001f6d1', '\\U0001f6d1'), ('\\U0001f6f6', '\\U0001f6f6'), ('\\U0001f947', '\\U0001f947'), ('\\U0001f948', '\\U0001f948'), ('\\U0001f949', '\\U0001f949'), ('\\U0001f94a', '\\U0001f94a'), ('\\U0001f94b', '\\U0001f94b'), ('\\U0001f945', '\\U0001f945'), ('\\U0001f941', '\\U0001f941'), ('\\U0001f6d2', '\\U0001f6d2')], default=None, max_length=2, null=True, verbose_name='emoji'),\n        ),",
        "detail": "tabbycat.participants.migrations.0010_auto_20180409_1118",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.participants.migrations.0010_auto_20180409_1945",
        "description": "tabbycat.participants.migrations.0010_auto_20180409_1945",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('participants', '0009_auto_20180331_2259'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='team',\n            name='emoji',\n            field=models.CharField(blank=True, choices=[('☁️', '☁️'), ('❄️', '❄️'), ('♠️', '♠️'), ('♥️', '♥️'), ('♦️', '♦️'), ('♣️', '♣️'), ('✉️', '✉️'), ('✂️', '✂️'), ('☕', '☕'), ('⚡', '⚡'), ('☘', '☘'), ('⚓', '⚓'), ('⚙', '⚙'), ('⚗', '⚗'), ('⚔', '⚔'), ('⬛', '⬛'), ('⬜', '⬜'), ('⛑', '⛑'), ('⛰', '⛰'), ('⛪', '⛪'), ('⛺', '⛺'), ('⛵', '⛵'), ('⛔', '⛔'), ('⛅', '⛅'), ('⛈', '⛈'), ('⛱', '⛱'), ('⛄', '⛄'), ('⚽', '⚽'), ('⛳', '⛳'), ('⛸', '⛸'), ('⛏', '⛏'), ('😂', '😂'), ('😆', '😆'), ('😉', '😉'), ('😊', '😊'), ('😎', '😎'), ('😍', '😍'), ('😘', '😘'), ('😇', '😇'), ('😐', '😐'), ('😏', '😏'), ('😣', '😣'), ('😥', '😥'), ('😜', '😜'), ('😓', '😓'), ('😖', '😖'), ('😷', '😷'), ('😲', '😲'), ('😭', '😭'), ('😱', '😱'), ('😳', '😳'), ('😵', '😵'), ('😡', '😡'), ('👿', '👿'), ('👶', '👶'), ('👮', '👮'), ('🎅', '🎅'), ('👼', '👼'), ('🙅', '🙅'), ('🙆', '🙆'), ('💁', '💁'), ('🙋', '🙋'), ('🙇', '🙇'), ('🙌', '🙌'), ('🙏', '🙏'), ('💃', '💃'), ('💪', '💪'), ('👆', '👆'), ('✊', '✊'), ('✋', '✋'), ('👊', '👊'), ('👌', '👌'), ('👍', '👍'), ('👎', '👎'), ('👏', '👏'), ('💅', '💅'), ('👣', '👣'), ('👀', '👀'), ('👂', '👂'), ('👃', '👃'), ('👅', '👅'), ('👄', '👄'), ('💘', '💘'), ('💔', '💔'), ('💖', '💖'), ('💌', '💌'), ('💧', '💧'), ('💤', '💤'), ('💣', '💣'), ('💥', '💥'), ('💦', '💦'), ('💨', '💨'), ('💫', '💫'), ('💬', '💬'), ('💭', '💭'), ('👓', '👓'), ('👔', '👔'), ('👖', '👖'), ('👜', '👜'), ('🎒', '🎒'), ('👟', '👟'), ('👠', '👠'), ('👑', '👑'), ('👒', '👒'), ('🎩', '🎩'), ('💄', '💄'), ('💍', '💍'), ('💎', '💎'), ('👻', '👻'), ('💀', '💀'), ('👽', '👽'), ('👾', '👾'), ('💩', '💩'), ('🐵', '🐵'), ('🙈', '🙈'), ('🙉', '🙉'), ('🙊', '🙊'), ('🐶', '🐶'), ('🐺', '🐺'), ('🐯', '🐯'), ('🐴', '🐴'), ('🐮', '🐮'), ('🐑', '🐑'), ('🐭', '🐭'), ('🐹', '🐹'), ('🐰', '🐰'), ('🐻', '🐻'), ('🐨', '🐨'), ('🐼', '🐼'), ('🐾', '🐾'), ('🐔', '🐔'), ('🐣', '🐣'), ('🐤', '🐤'), ('🐦', '🐦'), ('🐧', '🐧'), ('🐸', '🐸'), ('🐢', '🐢'), ('🐍', '🐍'), ('🐲', '🐲'), ('🐳', '🐳'), ('🐬', '🐬'), ('🐠', '🐠'), ('🐙', '🐙'), ('🐚', '🐚'), ('🐌', '🐌'), ('🐛', '🐛'), ('🐜', '🐜'), ('🐝', '🐝'), ('💐', '💐'), ('🌸', '🌸'), ('🌹', '🌹'), ('🌻', '🌻'), ('🌷', '🌷'), ('🌱', '🌱'), ('🌲', '🌲'), ('🌳', '🌳'), ('🌴', '🌴'), ('🌵', '🌵'), ('🌿', '🌿'), ('🍀', '🍀'), ('🍁', '🍁'), ('🍃', '🍃'), ('🍇', '🍇'), ('🍋', '🍋'), ('🍌', '🍌'), ('🍍', '🍍'), ('🍎', '🍎'), ('🍑', '🍑'), ('🍒', '🍒'), ('🍓', '🍓'), ('🍆', '🍆'), ('🌽', '🌽'), ('🍄', '🍄'), ('🌰', '🌰'), ('🍞', '🍞'), ('🍔', '🍔'), ('🍟', '🍟'), ('🍕', '🍕'), ('🍙', '🍙'), ('🍝', '🍝'), ('🍠', '🍠'), ('🍩', '🍩'), ('🍪', '🍪'), ('🍰', '🍰'), ('🍭', '🍭'), ('🍼', '🍼'), ('🍷', '🍷'), ('🍹', '🍹'), ('🍴', '🍴'), ('🌋', '🌋'), ('🏠', '🏠'), ('🏢', '🏢'), ('🏥', '🏥'), ('🏰', '🏰'), ('🌊', '🌊'), ('🌌', '🌌'), ('🎠', '🎠'), ('🎡', '🎡'), ('🎢', '🎢'), ('🎪', '🎪'), ('🎨', '🎨'), ('🚃', '🚃'), ('🚄', '🚄'), ('🚝', '🚝'), ('🚍', '🚍'), ('🚔', '🚔'), ('🚘', '🚘'), ('🚲', '🚲'), ('🚨', '🚨'), ('🚣', '🚣'), ('🚤', '🚤'), ('🚁', '🚁'), ('🚠', '🚠'), ('🚀', '🚀'), ('🚦', '🚦'), ('🚧', '🚧'), ('🚫', '🚫'), ('🚰', '🚰'), ('🚷', '🚷'), ('🚻', '🚻'), ('🚽', '🚽'), ('🚿', '🚿'), ('🛀', '🛀'), ('⏳', '⏳'), ('⏰', '⏰'), ('🌑', '🌑'), ('🌕', '🌕'), ('🌗', '🌗'), ('🌞', '🌞'), ('🌈', '🌈'), ('🌟', '🌟'), ('🔥', '🔥'), ('🎃', '🎃'), ('🎄', '🎄'), ('🎆', '🎆'), ('🎈', '🎈'), ('🎉', '🎉'), ('🎓', '🎓'), ('🎯', '🎯'), ('🎀', '🎀'), ('🏀', '🏀'), ('🏈', '🏈'), ('🎾', '🎾'), ('🎱', '🎱'), ('🏊', '🏊'), ('🎮', '🎮'), ('🎲', '🎲'), ('📣', '📣'), ('📯', '📯'), ('🔔', '🔔'), ('🎼', '🎼'), ('🎶', '🎶'), ('🎤', '🎤'), ('🎧', '🎧'), ('🎷', '🎷'), ('🎸', '🎸'), ('🎹', '🎹'), ('🎺', '🎺'), ('🎻', '🎻'), ('📻', '📻'), ('📱', '📱'), ('📞', '📞'), ('📟', '📟'), ('📠', '📠'), ('🔋', '🔋'), ('🔌', '🔌'), ('💾', '💾'), ('💿', '💿'), ('🎬', '🎬'), ('📺', '📺'), ('📷', '📷'), ('🔍', '🔍'), ('🔬', '🔬'), ('🔭', '🔭'), ('💡', '💡'), ('📕', '📕'), ('📰', '📰'), ('💰', '💰'), ('💸', '💸'), ('📦', '📦'), ('📫', '📫'), ('💼', '💼'), ('📅', '📅'), ('📇', '📇'), ('📌', '📌'), ('📎', '📎'), ('📏', '📏'), ('📐', '📐'), ('🔒', '🔒'), ('🔑', '🔑'), ('🔨', '🔨'), ('🔧', '🔧'), ('🔩', '🔩'), ('💉', '💉'), ('💊', '💊'), ('🔪', '🔪'), ('🔫', '🔫'), ('🚬', '🚬'), ('🏁', '🏁'), ('🔮', '🔮'), ('❌', '❌'), ('❓', '❓'), ('🆒', '🆒'), ('🆕', '🆕'), ('🆗', '🆗'), ('🆘', '🆘'), ('😙', '😙'), ('😑', '😑'), ('😮', '😮'), ('😴', '😴'), ('😧', '😧'), ('😬', '😬'), ('🕵', '🕵'), ('🖖', '🖖'), ('🕶', '🕶'), ('🛍', '🛍'), ('🐿', '🐿'), ('🕊', '🕊'), ('🕷', '🕷'), ('🕸', '🕸'), ('🏵', '🏵'), ('🌶', '🌶'), ('🏕', '🏕'), ('🏛', '🏛'), ('🏗', '🏗'), ('🛢', '🛢'), ('🛥', '🛥'), ('🛩', '🛩'), ('🛰', '🛰'), ('🛎', '🛎'), ('🕰', '🕰'), ('🌡', '🌡'), ('🌩', '🌩'), ('🌪', '🌪'), ('🌬', '🌬'), ('🎖', '🎖'), ('🎞', '🎞'), ('🏷', '🏷'), ('🏋', '🏋'), ('🕹', '🕹'), ('🖥', '🖥'), ('🖨', '🖨'), ('🖲', '🖲'), ('📽', '📽'), ('🕯', '🕯'), ('🖋', '🖋'), ('🗑', '🗑'), ('🗝', '🗝'), ('🛠', '🛠'), ('🗜', '🗜'), ('🗡', '🗡'), ('🛡', '🛡'), ('🏳', '🏳'), ('🏴', '🏴'), ('🤗', '🤗'), ('🤔', '🤔'), ('🙄', '🙄'), ('🤐', '🤐'), ('🤓', '🤓'), ('🙃', '🙃'), ('🤒', '🤒'), ('🤕', '🤕'), ('🤑', '🤑'), ('🤘', '🤘'), ('📿', '📿'), ('🤖', '🤖'), ('🦁', '🦁'), ('🦄', '🦄'), ('🦃', '🦃'), ('🦀', '🦀'), ('🦂', '🦂'), ('🧀', '🧀'), ('🌭', '🌭'), ('🌮', '🌮'), ('🌯', '🌯'), ('🍿', '🍿'), ('🍾', '🍾'), ('🏏', '🏏'), ('🏐', '🏐'), ('🏓', '🏓'), ('🏹', '🏹'), ('🤣', '🤣'), ('🤤', '🤤'), ('🤢', '🤢'), ('🤧', '🤧'), ('🤠', '🤠'), ('🤡', '🤡'), ('🤥', '🤥'), ('🤴', '🤴'), ('🤵', '🤵'), ('🤰', '🤰'), ('🤶', '🤶'), ('🤦', '🤦'), ('🤷', '🤷'), ('🕺', '🕺'), ('🤺', '🤺'), ('🤸', '🤸'), ('🤼', '🤼'), ('🤹', '🤹'), ('🤳', '🤳'), ('🤞', '🤞'), ('🤙', '🤙'), ('🤝', '🤝'), ('🖤', '🖤'), ('🦊', '🦊'), ('🦇', '🦇'), ('🦅', '🦅'), ('🦆', '🦆'), ('🦉', '🦉'), ('🦎', '🦎'), ('🦈', '🦈'), ('🦐', '🦐'), ('🦑', '🦑'), ('🦋', '🦋'), ('🥝', '🥝'), ('🥑', '🥑'), ('🥔', '🥔'), ('🥕', '🥕'), ('🥒', '🥒'), ('🥜', '🥜'), ('🥐', '🥐'), ('🥖', '🥖'), ('🥞', '🥞'), ('🥚', '🥚'), ('🥗', '🥗'), ('🥛', '🥛'), ('🥃', '🥃'), ('🥄', '🥄'), ('🛴', '🛴'), ('🛶', '🛶'), ('🥊', '🥊'), ('🥋', '🥋'), ('🥅', '🥅'), ('🥁', '🥁'), ('🛒', '🛒')], default=None, max_length=2, null=True, verbose_name='emoji'),\n        ),",
        "detail": "tabbycat.participants.migrations.0010_auto_20180409_1945",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.participants.migrations.0011_remove_league_fields",
        "description": "tabbycat.participants.migrations.0011_remove_league_fields",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('participants', '0009_auto_20190227_2310'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='team',\n            name='division',\n        ),\n        migrations.RemoveField(",
        "detail": "tabbycat.participants.migrations.0011_remove_league_fields",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.participants.migrations.0012_auto_20190907_1144",
        "description": "tabbycat.participants.migrations.0012_auto_20190907_1144",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('participants', '0011_remove_league_fields'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='team',\n            name='emoji',\n            field=models.CharField(blank=True, choices=[('☺️', '☺️ White Smiling'), ('☹', '☹ White Frowning'), ('☝️', '☝️ White Up Pointing Index'), ('✌️', '✌️ Victory Hand'), ('✍', '✍ Writing Hand'), ('❤️', '❤️ Heavy Black Heart'), ('❣', '❣ Heart Exclamation Mark'), ('☠', '☠ Skull and Crossbones'), ('♨️', '♨️ Hot Springs'), ('✈️', '✈️ Airplane'), ('⌛', '⌛ Hourglass'), ('⌚', '⌚ Watch'), ('♈', '♈ Aries'), ('♉', '♉ Taurus'), ('♊', '♊ Gemini'), ('♋', '♋ Cancer'), ('♌', '♌ Leo'), ('♍', '♍ Virgo'), ('♎', '♎ Libra'), ('♏', '♏ Scorpius'), ('♐', '♐ Sagittarius'), ('♑', '♑ Capricorn'), ('♒', '♒ Aquarius'), ('♓', '♓ Pisces'), ('☀️', '☀️ Black Sun With Rays'), ('☁️', '☁️ Cloud'), ('☂', '☂ Umbrella'), ('❄️', '❄️ Snowflake'), ('☃', '☃ Snowman'), ('☄️', '☄️ Comet'), ('♠️', '♠️ Spade Suit'), ('♥️', '♥️ Heart Suit'), ('♦️', '♦️ Diamond Suit'), ('♣️', '♣️ Club Suit'), ('▶️', '▶️ Black Right-Pointing Triangle'), ('◀️', '◀️ Black Left-Pointing Triangle'), ('☎️', '☎️ Black Telephone'), ('⌨', '⌨ Keyboard'), ('✉️', '✉️ Envelope'), ('✏️', '✏️ Pencil'), ('✒️', '✒️ Black Nib'), ('✂️', '✂️ Scissors'), ('↗️', '↗️ North East Arrow'), ('➡️', '➡️ Black Rightwards Arrow'), ('↘️', '↘️ South East Arrow'), ('↙️', '↙️ South West Arrow'), ('↖️', '↖️ North West Arrow'), ('↕️', '↕️ Up Down Arrow'), ('↔️', '↔️ Left Right Arrow'), ('↩️', '↩️ Leftwards Arrow With Hook'), ('↪️', '↪️ Rightwards Arrow With Hook'), ('✡', '✡ Star of David'), ('☸', '☸ Wheel of Dharma'), ('☯', '☯ Yin Yang'), ('✝', '✝ Latin Cross'), ('☦', '☦ Orthodox Cross'), ('☪', '☪ Star and Crescent'), ('☮', '☮ Peace Symbol'), ('☢', '☢ Radioactive Sign'), ('☣', '☣ Biohazard Sign'), ('☑️', '☑️ Ballot Box With Check'), ('✔️', '✔️ Heavy Check Mark'), ('✖️', '✖️ Heavy Multiplication X'), ('✳️', '✳️ Eight Spoked Asterisk'), ('✴️', '✴️ Eight Pointed Black Star'), ('❇️', '❇️ Sparkle'), ('‼️', '‼️ Double Exclamation Mark'), ('〰️', '〰️ Wavy Dash'), ('©️', '©️ Copyright Sign'), ('®️', '®️ Registered Sign'), ('™️', '™️ Trade Mark Sign'), ('Ⓜ️', 'Ⓜ️ Capital M'), ('㊗️', '㊗️ Congratulations'), ('㊙️', '㊙️ Secret'), ('▪️', '▪️ Black Square'), ('▫️', '▫️ White Square'), ('#⃣️', '#⃣️ Keycap Number Sign'), ('*⃣', '*⃣ Keycap Asterisk'), ('0⃣️', '0⃣️ Keycap Digit Zero'), ('1⃣️', '1⃣️ Keycap Digit One'), ('2⃣️', '2⃣️ Keycap Digit Two'), ('3⃣️', '3⃣️ Keycap Digit Three'), ('4⃣️', '4⃣️ Keycap Digit Four'), ('5⃣️', '5⃣️ Keycap Digit Five'), ('6⃣️', '6⃣️ Keycap Digit Six'), ('7⃣️', '7⃣️ Keycap Digit Seven'), ('8⃣️', '8⃣️ Keycap Digit Eight'), ('9⃣️', '9⃣️ Keycap Digit Nine'), ('⁉️', '⁉️ Exclamation Question Mark'), ('ℹ️', 'ℹ️ Information Source'), ('⤴️', '⤴️ Right-Curve-Up'), ('⤵️', '⤵️ Right-Curve-Down'), ('♻️', '♻️ Recycling'), ('〽️', '〽️ Part Alternation Mark'), ('◻️', '◻️ White Medium Square'), ('◼️', '◼️ Black Medium Square'), ('◽', '◽ White Medium Small Square'), ('◾', '◾ Black Medium Small Square'), ('☕', '☕ Hot Beverage'), ('⚠️', '⚠️ Warning Sign'), ('☔', '☔ Umbrella With Rain Drops'), ('⏏', '⏏ Eject Symbol'), ('⬆️', '⬆️ Upwards Black Arrow'), ('⬇️', '⬇️ Downwards Black Arrow'), ('⬅️', '⬅️ Leftwards Black Arrow'), ('⚡', '⚡ High Voltage'), ('☘', '☘ Shamrock'), ('⚓', '⚓ Anchor'), ('♿', '♿ Wheelchair Symbol'), ('⚒', '⚒ Hammer and Pick'), ('⚙', '⚙ Gear'), ('⚗', '⚗ Alembic'), ('⚖', '⚖ Scales'), ('⚔', '⚔ Crossed Swords'), ('⚰', '⚰ Coffin'), ('⚱', '⚱ Funeral Urn'), ('⚜', '⚜ Fleur-De-Lis'), ('⚛', '⚛ Atom Symbol'), ('⚪', '⚪ Medium White Circle'), ('⚫', '⚫ Medium Black Circle'), ('🀄', '🀄 Mahjong Tile Red Dragon'), ('⭐', '⭐ White Medium Star'), ('⬛', '⬛ Black Square'), ('⬜', '⬜ White Square'), ('⛑', '⛑ Rescue Hat'), ('⛰', '⛰ Mountain'), ('⛪', '⛪ Church'), ('⛲', '⛲ Fountain'), ('⛺', '⛺ Tent'), ('⛽', '⛽ Fuel Pump'), ('⛵', '⛵ Sailboat'), ('⛴', '⛴ Ferry'), ('⛔', '⛔ No Entry'), ('⛅', '⛅ Overcast'), ('⛈', '⛈ Storm'), ('⛱', '⛱ Umbrella'), ('⛄', '⛄ Snowman'), ('⚽', '⚽ Soccer'), ('⚾', '⚾ Baseball'), ('⛳', '⛳ Hole in One'), ('⛸', '⛸ Ice Skate'), ('⛷', '⛷ Skier'), ('⛹', '⛹ Person With Ball'), ('⛏', '⛏ Pick'), ('⛓', '⛓ Chains'), ('⛩', '⛩ Shinto Shrine'), ('⭕', '⭕ Heavy Large Circle'), ('❗', '❗ Heavy Exclamation Mark'), ('🅿️', '🅿️ Squared P'), ('🈯', '🈯 Squared 指 (Finger)'), ('🈚', '🈚 Squared CJK Unified Ideograph-7121'), ('😁', '😁 Smiling Eyes'), ('😂', '😂 Joy Tears'), ('😃', '😃 Smiling Face With Open Mouth'), ('😄', '😄 Smiling Face With Open Mouth and Smiling Eyes'), ('😅', '😅 Cold Sweat'), ('😆', '😆 Closed Eyes'), ('😉', '😉 Winky'), ('😊', '😊 Smiling Eyes'), ('😋', '😋 Face Savouring Delicious Food'), ('😎', '😎 Shaded Eyes'), ('😍', '😍 Heart Eyes'), ('😘', '😘 Kissy'), ('😚', '😚 Kissing Face With Closed Eyes'), ('😇', '😇 Halo'), ('😐', '😐 Neutral'), ('😶', '😶 No Mouth'), ('😏', '😏 Smirking'), ('😣', '😣 Persevering'), ('😥', '😥 Disappointed'), ('😪', '😪 Sleepy'), ('😫', '😫 Tired'), ('😌', '😌 Relieved'), ('😜', '😜 Tongue Out'), ('😝', '😝 Tongue Out Closed Eyes'), ('😒', '😒 Unamused'), ('😓', '😓 Cold Sweat'), ('😔', '😔 Pensive'), ('😖', '😖 Confounded'), ('😷', '😷 Medical Mask'), ('😲', '😲 Astonished'), ('😞', '😞 Disappointed'), ('😤', '😤 Face With Look of Triumph'), ('😢', '😢 Crying'), ('😭', '😭 Sobbing'), ('😨', '😨 Fearful'), ('😩', '😩 Weary'), ('😰', '😰 Open Mouth Cold Sweat'), ('😱', '😱 Screaming'), ('😳', '😳 Flushed'), ('😵', '😵 Dizzy'), ('😡', '😡 Pouting'), ('😠', '😠 Angry'), ('👿', '👿 Imp'), ('😈', '😈 Smiling Face With Horns'), ('👦', '👦 Boy'), ('👧', '👧 Girl'), ('👨', '👨 Generic Man'), ('👩', '👩 Generic Woman'), ('👴', '👴 Older Man'), ('👵', '👵 Older Woman'), ('👶', '👶 Baby'), ('👱', '👱 Person With Blond Hair'), ('👮', '👮 Police Officer'), ('👲', '👲 Man With Gua Pi Mao'), ('👳', '👳 Man With Turban'), ('👷', '👷 Trade Worker'), ('👸', '👸 Princess'), ('💂', '💂 Guardsman'), ('🎅', '🎅 Santa Claus'), ('👼', '👼 Baby Angel'), ('👯', '👯 Bunny Women'), ('💆', '💆 Face Massage'), ('💇', '💇 Haircut'), ('👰', '👰 Bride'), ('🙍', '🙍 Person Frowning'), ('🙎', '🙎 Person With Pouting'), ('🙅', '🙅 Block Gesture'), ('🙆', '🙆 OK Gesture'), ('💁', '💁 Sass Gesture'), ('🙋', '🙋 Raised Hand'), ('🙇', '🙇 Deep Bow'), ('🙌', '🙌 Praise Hands'), ('🙏', '🙏 Prayer Hands'), ('👤', '👤 Bust in Silhouette'), ('👥', '👥 Busts in Silhouette'), ('🚶', '🚶 Pedestrian'), ('🏃', '🏃 Runner'), ('💃', '💃 Dancer'), ('💏', '💏 Kiss'), ('💑', '💑 Heteronormative Couple'), ('👪', '👪 Hetero Family'), ('👫', '👫 Man & Woman'), ('👬', '👬 Two Men'), ('👭', '👭 Two Women'), ('💪', '💪 Biceps'), ('👈', '👈 Left Pointing Backhand'), ('👉', '👉 Right Pointing Backhand'), ('👆', '👆 Pointing Hand'), ('👇', '👇 Down Pointing Backhand'), ('✊', '✊ Power Hand'), ('✋', '✋ Palm Hand'), ('👊', '👊 Fist Hand'), ('👌', '👌 OK Hand'), ('👍', '👍 Thumbs Up'), ('👎', '👎 Thumbs Down'), ('👋', '👋 Waving Hand Sign'), ('👏', '👏 Clappy Hands'), ('👐', '👐 Open Hands Sign'), ('💅', '💅 Nail Polish'), ('👣', '👣 Footprints'), ('👀', '👀 Eyes'), ('👂', '👂 Ear'), ('👃', '👃 Nose'), ('👅', '👅 Lick'), ('👄', '👄 Mouth'), ('💋', '💋 Kiss Mark'), ('💘', '💘 Cupid Arrow'), ('💓', '💓 Beating Heart'), ('💔', '💔 Broken Heart'), ('💕', '💕 Two Hearts'), ('💖', '💖 Sparkly Heart'), ('💗', '💗 Growing Heart'), ('💙', '💙 Blue Heart'), ('💚', '💚 Green Heart'), ('💛', '💛 Yellow Heart'), ('💜', '💜 Purple Heart'), ('💝', '💝 Heart With Ribbon'), ('💞', '💞 Revolving Hearts'), ('💟', '💟 Heart Decoration'), ('💌', '💌 Love Letter'), ('💧', '💧 Droplet'), ('💤', '💤 ZZZ'), ('💢', '💢 Anger'), ('💣', '💣 Bomb'), ('💥', '💥 Sparks'), ('💦', '💦 Splashing'), ('💨', '💨 Dash'), ('💫', '💫 Shooting Star'), ('💬', '💬 Speech Bubble'), ('💭', '💭 Thinky Cloud'), ('👓', '👓 Eyeglasses'), ('👔', '👔 Business Casual'), ('👕', '👕 T-Shirt'), ('👖', '👖 Jeans'), ('👗', '👗 Dress'), ('👘', '👘 Kimono'), ('👙', '👙 Bikini'), ('👚', '👚 Womans Clothes'), ('👛', '👛 Purse'), ('👜', '👜 Handbag'), ('👝', '👝 Pouch'), ('🎒', '🎒 Backpack'), ('👞', '👞 Mans Shoe'), ('👟', '👟 Running Shoe'), ('👠', '👠 Heels'), ('👡', '👡 Womans Sandal'), ('👢', '👢 Womans Boots'), ('👑', '👑 Crown'), ('👒', \"👒 Lady's Hat\"), ('🎩', '🎩 Top Hat'), ('💄', '💄 Lipstick'), ('💍', '💍 Proposal'), ('💎', '💎 Gem'), ('👹', '👹 Japanese Ogre'), ('👺', '👺 Japanese Goblin'), ('👻', '👻 Ghost'), ('💀', '💀 Skull'), ('👽', '👽 Alien'), ('👾', '👾 Space Invader'), ('💩', '💩 Pile of Poo'), ('🐵', '🐵 Monkey'), ('🙈', '🙈 See No Evil'), ('🙉', '🙉 Hear No Evil'), ('🙊', '🙊 Speak No Evil'), ('🐒', '🐒 Monkey'), ('🐶', '🐶 Dog'), ('🐕', '🐕 Dog'), ('🐩', '🐩 Poodle'), ('🐺', '🐺 Wolf'), ('🐱', '🐱 Cat'), ('😸', '😸 Grinning Cat with Smiling Eyes'), ('😹', '😹 Cat with Tears of Joy'), ('😺', '😺 Smiling Cat with Open Mouth'), ('😻', '😻 Smiling Cat with Heart Eyes'), ('😼', '😼 Cat with Wry Smile'), ('😽', '😽 Kissing Cat with Closed Eyes'), ('😾', '😾 Pouting Cat Face'), ('😿', '😿 Crying Cat Face'), ('🙀', '🙀 Weary Cat Face'), ('🐈', '🐈 Cat'), ('🐯', '🐯 Tiger'), ('🐅', '🐅 Tiger'), ('🐆', '🐆 Leopard'), ('🐴', '🐴 Horse'), ('🐎', '🐎 Horse'), ('🐮', '🐮 Cow'), ('🐂', '🐂 Ox'), ('🐃', '🐃 Water Buffalo'), ('🐄', '🐄 Cow'), ('🐷', '🐷 Pig'), ('🐖', '🐖 Pig'), ('🐗', '🐗 Boar'), ('🐽', '🐽 Pig Nose'), ('🐏', '🐏 Ram'), ('🐑', '🐑 Sheep'), ('🐐', '🐐 Goat'), ('🐪', '🐪 Dromedary Camel'), ('🐫', '🐫 Bactrian Camel'), ('🐘', '🐘 Elephant'), ('🐭', '🐭 Mouse'), ('🐁', '🐁 Mouse'), ('🐀', '🐀 Rat'), ('🐹', '🐹 Hamster'), ('🐰', '🐰 Rabbit'), ('🐇', '🐇 Rabbit'), ('🐻', '🐻 Bear'), ('🐨', '🐨 Koala'), ('🐼', '🐼 Panda'), ('🐾', '🐾 Paw Prints'), ('🐔', '🐔 Chicken'), ('🐓', '🐓 Rooster'), ('🐣', '🐣 Hatching'), ('🐤', '🐤 Chick'), ('🐥', '🐥 Front-Facing Baby Chick'), ('🐦', '🐦 Bird'), ('🐧', '🐧 Penguin'), ('🐸', '🐸 Frog'), ('🐊', '🐊 Croc'), ('🐢', '🐢 Turtle'), ('🐍', '🐍 Slithering'), ('🐲', '🐲 Dragon'), ('🐉', '🐉 Dragon'), ('🐳', '🐳 Whale'), ('🐋', '🐋 Whale'), ('🐬', '🐬 Dolphin'), ('🐟', '🐟 Fish'), ('🐠', '🐠 Fish'), ('🐡', '🐡 Blowfish'), ('🐙', '🐙 Octopus'), ('🐚', '🐚 Shell'), ('🐌', '🐌 Snail'), ('🐛', '🐛 Bug'), ('🐜', '🐜 Ant'), ('🐝', '🐝 Honeybee'), ('🐞', '🐞 Lady Beetle'), ('💐', '💐 Bouquet'), ('🌸', '🌸 Sakura'), ('💮', '💮 White Flower'), ('🌹', '🌹 Rose'), ('🌺', '🌺 Hibiscus'), ('🌻', '🌻 Sunflower'), ('🌼', '🌼 Blossom'), ('🌷', '🌷 Tulip'), ('🌱', '🌱 Seedling'), ('🌲', '🌲 Evergreen Tree'), ('🌳', '🌳 Deciduous Tree'), ('🌴', '🌴 Palm Tree'), ('🌵', '🌵 Cactus'), ('🌾', '🌾 Ear of Rice'), ('🌿', '🌿 Herb'), ('🍀', '🍀 Clover'), ('🍁', '🍁 Maple Leaf'), ('🍂', '🍂 Fallen Leaf'), ('🍃', '🍃 Blown Leaves'), ('🍇', '🍇 Grapes'), ('🍈', '🍈 Melon'), ('🍉', '🍉 Watermelon'), ('🍊', '🍊 Tangerine'), ('🍋', '🍋 Lemon'), ('🍌', '🍌 Banana'), ('🍍', '🍍 Pineapple'), ('🍎', '🍎 Red Apple'), ('🍏', '🍏 Green Apple'), ('🍐', '🍐 Pear'), ('🍑', '🍑 Peach'), ('🍒', '🍒 Cherries'), ('🍓', '🍓 Strawberry'), ('🍅', '🍅 Tomato'), ('🍆', '🍆 Eggplant'), ('🌽', '🌽 Corn'), ('🍄', '🍄 Mushroom'), ('🌰', '🌰 Chestnut'), ('🍞', '🍞 Bread'), ('🍖', '🍖 Meat on Bone'), ('🍗', '🍗 Poultry Leg'), ('🍔', '🍔 Hamburger'), ('🍟', '🍟 Fries'), ('🍕', '🍕 Pizza'), ('🍲', '🍲 Pot of Food'), ('🍱', '🍱 Bento Box'), ('🍘', '🍘 Rice Cracker'), ('🍙', '🍙 Rice Ball'), ('🍚', '🍚 Cooked Rice'), ('🍛', '🍛 Curry and Rice'), ('🍜', '🍜 Steaming Bowl'), ('🍝', '🍝 Spaghetti'), ('🍠', '🍠 Sweet Potato'), ('🍢', '🍢 Oden'), ('🍣', '🍣 Sushi'), ('🍤', '🍤 Fried Shrimp'), ('🍥', '🍥 Fish Cake With Swirl Design'), ('🍡', '🍡 Dango'), ('🍦', '🍦 Ice Cream'), ('🍧', '🍧 Shaved Ice'), ('🍨', '🍨 Ice Cream'), ('🍩', '🍩 Doughnut'), ('🍪', '🍪 Cookie'), ('🎂', '🎂 Birthday Cake'), ('🍰', '🍰 Shortcake'), ('🍫', '🍫 Chocolate Bar'), ('🍬', '🍬 Candy'), ('🍭', '🍭 Lollipop'), ('🍮', '🍮 Custard'), ('🍯', '🍯 Honey Pot'), ('🍼', '🍼 Baby Bottle'), ('🍵', '🍵 Teacup Without Handle'), ('🍶', '🍶 Sake Bottle and Cup'), ('🍷', '🍷 Wine Glass'), ('🍸', '🍸 Cocktail Glass'), ('🍹', '🍹 Tropical Drink'), ('🍺', '🍺 Beer'), ('🍻', '🍻 Clinking Beer Mugs'), ('🍴', '🍴 Fork & Knife'), ('🍳', '🍳 Cooking'), ('🌍', '🌍 Earth Globe Europe-Africa'), ('🌎', '🌎 Earth Globe Americas'), ('🌏', '🌏 Earth Globe Asia-Australia'), ('🌐', '🌐 Globe With Meridians'), ('🌋', '🌋 Volcano'), ('🗻', '🗻 Mount Fuji'), ('🏠', '🏠 House'), ('🏡', '🏡 House With Garden'), ('🏢', '🏢 Office'), ('🏣', '🏣 Japanese Post Office'), ('🏤', '🏤 European Post Office'), ('🏥', '🏥 Hospital'), ('🏦', '🏦 Bank'), ('🏨', '🏨 Hotel'), ('🏩', '🏩 Love Hotel'), ('🏪', '🏪 Convenience Store'), ('🏫', '🏫 School'), ('🏬', '🏬 Department Store'), ('🏭', '🏭 Factory'), ('🏯', '🏯 Japanese Castle'), ('🏰', '🏰 Castle'), ('💒', '💒 Wedding'), ('🗼', '🗼 Tokyo Tower'), ('🗽', '🗽 Liberty'), ('🗾', '🗾 Silhouette of Japan'), ('🌁', '🌁 Foggy'), ('🌃', '🌃 Night With Stars'), ('🌄', '🌄 Sunrise Over Mountains'), ('🌅', '🌅 Sunrise'), ('🌆', '🌆 Cityscape at Dusk'), ('🌇', '🌇 Sunset Over Buildings'), ('🌉', '🌉 Bridge at Night'), ('🌊', '🌊 Big Wave'), ('🗿', '🗿 Moyai'), ('🌌', '🌌 Milky Way'), ('🎠', '🎠 Carousel Horse'), ('🎡', '🎡 Ferris Wheel'), ('🎢', '🎢 Roller Coaster'), ('💈', '💈 Barber Pole'), ('🎪', '🎪 Circus Tent'), ('🎭', '🎭 Performing Arts'), ('🎨', '🎨 Palette'), ('🎰', '🎰 Slot Machine'), ('🚂', '🚂 Steam Locomotive'), ('🚃', '🚃 Railcar'), ('🚄', '🚄 Fast Train'), ('🚅', '🚅 Fast Train with Bullet Nose'), ('🚆', '🚆 Train'), ('🚇', '🚇 Metro'), ('🚈', '🚈 Light Rail'), ('🚉', '🚉 Station'), ('🚊', '🚊 Tram'), ('🚝', '🚝 Monorail'), ('🚞', '🚞 Mountain Railway'), ('🚋', '🚋 Tram Car'), ('🚌', '🚌 Bus'), ('🚍', '🚍 Bus'), ('🚎', '🚎 Trolleybus'), ('🚏', '🚏 Bus Stop'), ('🚐', '🚐 Minibus'), ('🚑', '🚑 Ambulance'), ('🚒', '🚒 Fire Engine'), ('🚓', '🚓 Police Car'), ('🚔', '🚔 Police Car'), ('🚕', '🚕 Taxi'), ('🚖', '🚖 Oncoming Taxi'), ('🚗', '🚗 Automobile'), ('🚘', '🚘 Automobile'), ('🚙', '🚙 Recreational Vehicle'), ('🚚', '🚚 Truck'), ('🚛', '🚛 Articulated Lorry'), ('🚜', '🚜 Tractor'), ('🚲', '🚲 Bicycle'), ('🚳', '🚳 No Bicycles'), ('🚨', '🚨 Alert Light'), ('🔱', '🔱 Trident'), ('🚣', '🚣 Rowboat'), ('🚤', '🚤 Speedboat'), ('🚢', '🚢 Ship'), ('💺', '💺 Seat'), ('🚁', '🚁 Helicopter'), ('🚟', '🚟 Suspension Railway'), ('🚠', '🚠 Sky Tram'), ('🚡', '🚡 Aerial Tramway'), ('🚀', '🚀 Rocket'), ('🏧', '🏧 ATM'), ('🚮', '🚮 Put Litter in Its Place'), ('🚥', '🚥 Horizontal Traffic Light'), ('🚦', '🚦 Traffic Light'), ('🚧', '🚧 Hazard Sign'), ('🚫', '🚫 Prohibited'), ('🚭', '🚭 No Smoking'), ('🚯', '🚯 Do Not Litter'), ('🚰', '🚰 Tap Water'), ('🚱', '🚱 Non-Potable Water'), ('🚷', '🚷 No Pedestrians'), ('🚸', '🚸 Children Crossing'), ('🚹', '🚹 Mens Symbol'), ('🚺', '🚺 Womens Symbol'), ('🚻', '🚻 Restroom'), ('🚼', '🚼 Baby Symbol'), ('🚾', '🚾 Water Closet'), ('🛂', '🛂 Passport Control'), ('🛃', '🛃 Customs'), ('🛄', '🛄 Baggage Claim'), ('🛅', '🛅 Left Luggage'), ('🚪', '🚪 Door'), ('🚽', '🚽 Toilet'), ('🚿', '🚿 Shower'), ('🛀', '🛀 Bath'), ('🛁', '🛁 Bathtub'), ('⏳', '⏳ Hourglass'), ('⏰', '⏰ Alarm Clock'), ('⏱', '⏱ Stopwatch'), ('⏲', '⏲ Timer Clock'), ('🕛', \"🕛 Twelve O'Clock\"), ('🕧', '🕧 Half Past Twelve'), ('🕐', \"🕐 One O'Clock\"), ('🕜', '🕜 Half Past One'), ('🕑', \"🕑 Two O'Clock\"), ('🕝', '🕝 Half Past Two'), ('🕒', \"🕒 Three O'Clock\"), ('🕞', '🕞 Half Past Three'), ('🕓', \"🕓 Four O'Clock\"), ('🕟', '🕟 Half Past Four'), ('🕔', \"🕔 Five O'Clock\"), ('🕠', '🕠 Half Past Five'), ('🕕', \"🕕 Six O'Clock\"), ('🕡', '🕡 Half Past Six'), ('🕖', \"🕖 Seven O'Clock\"), ('🕢', '🕢 Half Past Seven'), ('🕗', \"🕗 Eight O'Clock\"), ('🕣', '🕣 Half Past Eight'), ('🕘', \"🕘 Nine O'Clock\"), ('🕤', '🕤 Half Past Nine'), ('🕙', \"🕙 Ten O'Clock\"), ('🕥', '🕥 Half Past Ten'), ('🕚', \"🕚 Eleven O'Clock\"), ('🕦', '🕦 Half Past Eleven'), ('⛎', '⛎ Ophiuchus'), ('🌑', '🌑 New Moon'), ('🌒', '🌒 Waxing Crescent'), ('🌓', '🌓 First Quarter Moon Symbol'), ('🌔', '🌔 Waxing Gibbous'), ('🌕', '🌕 Full Moon'), ('🌖', '🌖 Waning Gibbous'), ('🌗', '🌗 Half Moon'), ('🌘', '🌘 Waning Crescent'), ('🌙', '🌙 Crescent Moon'), ('🌚', '🌚 New Moon With Face'), ('🌛', '🌛 First Quarter Moon With Face'), ('🌜', '🌜 Last Quarter Moon With Face'), ('🌝', '🌝 Full Moon With Face'), ('🌞', '🌞 Sun'), ('🌀', '🌀 Cyclone'), ('🌈', '🌈 Rainbow'), ('🌂', '🌂 Umbrella'), ('🌟', '🌟 Glowing Star'), ('🌠', '🌠 Shooting Star'), ('🔥', '🔥 Fire'), ('🎃', '🎃 Jack-O-Lantern'), ('🎄', '🎄 Presents Tree'), ('🎆', '🎆 Fireworks'), ('🎇', '🎇 Firework Sparkler'), ('✨', '✨ Sparkles'), ('🎈', '🎈 Balloon'), ('🎉', '🎉 Party Pop'), ('🎊', '🎊 Confetti Ball'), ('🎋', '🎋 Tanabata Tree'), ('🎌', '🎌 Crossed Flags'), ('🎍', '🎍 Pine Decoration'), ('🎎', '🎎 Japanese Dolls'), ('🎏', '🎏 Carp Streamer'), ('🎐', '🎐 Wind Chime'), ('🎑', '🎑 Moon Viewing Ceremony'), ('🎓', '🎓 Grad Cap'), ('🎯', '🎯 Bullseye'), ('🎴', '🎴 Flower Playing Cards'), ('🎀', '🎀 Ribbon'), ('🎁', '🎁 Wrapped Present'), ('🎫', '🎫 Ticket'), ('🏀', '🏀 Basketball'), ('🏈', '🏈 America Ball'), ('🏉', '🏉 Rugby Ball'), ('🎾', '🎾 Tennis'), ('🎱', '🎱 Billiards'), ('🎳', '🎳 Bowling'), ('🎣', '🎣 Fishing Pole and Fish'), ('🎽', '🎽 Running Shirt With Sash'), ('🎿', '🎿 Ski and Ski Boot'), ('🏂', '🏂 Snowboarder'), ('🏄', '🏄 Surfer'), ('🏇', '🏇 Horse Racing'), ('🏊', '🏊 Swimmer'), ('🚴', '🚴 Bicyclist'), ('🚵', '🚵 Mountain Bicyclist'), ('🏆', '🏆 Trophy'), ('🎮', '🎮 Video Game'), ('🎲', '🎲 Random Cube'), ('🃏', '🃏 Playing Card Black Joker'), ('🔇', '🔇 Speaker With Cancellation Stroke'), ('🔈', '🔈 Speaker'), ('🔉', '🔉 Speaker With One Sound Wave'), ('🔊', '🔊 Speaker With Three Sound Waves'), ('📢', '📢 Public Address Loudspeaker'), ('📣', '📣 Loud Phone'), ('📯', '📯 Horn'), ('🔔', '🔔 Bell'), ('🔕', '🔕 No Bells'), ('🔀', '🔀 Shuffle'), ('🔁', '🔁 Repeat'), ('🔂', '🔂 Repeat Once'), ('⏩', '⏩ Fast Forward'), ('⏭', '⏭ Next Track'), ('⏯', '⏯ Play/Pause'), ('⏪', '⏪ Rewind'), ('⏮', '⏮ Previous Track'), ('🔼', '🔼 Up-Pointing Small Red Triangle'), ('⏫', '⏫ Up to Top'), ('🔽', '🔽 Down-Pointing Small Red Triangle'), ('⏬', '⏬ Down to Bottom'), ('🎼', '🎼 Musical Score'), ('🎵', '🎵 Musical Note'), ('🎶', '🎶 Music Notes'), ('🎤', '🎤 Microphone'), ('🎧', '🎧 Headphone'), ('🎷', '🎷 Saxophone'), ('🎸', '🎸 Guitar'), ('🎹', '🎹 Keyboard'), ('🎺', '🎺 Trumpet'), ('🎻', '🎻 Violin'), ('📻', '📻 Boom Box'), ('📱', '📱 Internet Phone'), ('📳', '📳 Vibration Mode'), ('📴', '📴 Mobile Phone Off'), ('📲', '📲 Download to Phone'), ('📵', '📵 No Mobile Phones'), ('📞', '📞 Old Phone'), ('🔟', '🔟 Keycap Ten'), ('📶', '📶 Antenna With Bars'), ('📟', '📟 Pager'), ('📠', '📠 Fax Machine'), ('🔋', '🔋 Battery'), ('🔌', '🔌 Plug'), ('💻', '💻 Personal Computer'), ('💽', '💽 Minidisc'), ('💾', '💾 Floppy'), ('💿', '💿 Compact Disc'), ('📀', '📀 DVD'), ('🎥', '🎥 Movie Camera'), ('🎦', '🎦 Cinema'), ('🎬', '🎬 Clapper'), ('📺', '📺 Television'), ('📷', '📷 Camera'), ('📹', '📹 Video Camera'), ('📼', '📼 Videocassette'), ('🔅', '🔅 Low Brightness Symbol'), ('🔆', '🔆 High Brightness Symbol'), ('🔍', '🔍 Bigger Glass'), ('🔎', '🔎 Right-Pointing Magnifying Glass'), ('🔬', '🔬 Microscope'), ('🔭', '🔭 Telescope'), ('📡', '📡 Satellite Dish'), ('💡', '💡 Light Bulb'), ('🔦', '🔦 Electric Torch'), ('🏮', '🏮 Izakaya Lantern'), ('📔', '📔 Notebook With Decorative Cover'), ('📕', '📕 Closed Book'), ('📖', '📖 Open Book'), ('📗', '📗 Green Book'), ('📘', '📘 Blue Book'), ('📙', '📙 Orange Book'), ('📚', '📚 Books'), ('📓', '📓 Notebook'), ('📒', '📒 Ledger'), ('📃', '📃 Page With Curl'), ('📜', '📜 Scroll'), ('📄', '📄 Page Facing Up'), ('📰', '📰 Newspaper'), ('📑', '📑 Bookmark Tabs'), ('🔖', '🔖 Bookmark'), ('💰', '💰 Money Bag'), ('💴', '💴 Banknote With Yen Sign'), ('💵', '💵 Banknote With Dollar Sign'), ('💶', '💶 Banknote With Euro Sign'), ('💷', '💷 Banknote With Pound Sign'), ('💸', '💸 Flying Money'), ('💱', '💱 Currency Exchange'), ('💲', '💲 Heavy Dollar Sign'), ('💳', '💳 Credit Card'), ('💹', '💹 Upwards Trend in Yen'), ('📧', '📧 E-Mail Symbol'), ('📨', '📨 Incoming Envelope'), ('📩', '📩 Going Into Envelope'), ('📤', '📤 Outbox Tray'), ('📥', '📥 Inbox Tray'), ('📦', '📦 Package'), ('📫', '📫 Mailbox'), ('📪', '📪 Closed Mailbox With Lowered Flag'), ('📬', '📬 Open Mailbox With Raised Flag'), ('📭', '📭 Open Mailbox With Lowered Flag'), ('📮', '📮 Postbox'), ('📝', '📝 Memo'), ('💼', '💼 Briefcase'), ('📁', '📁 File Folder'), ('📂', '📂 Open File Folder'), ('📅', '📅 Dated'), ('📆', '📆 Tear-Off Calendar'), ('📇', '📇 Card Index'), ('📈', '📈 Up Trend'), ('📉', '📉 Down Trend'), ('📊', '📊 Bar Chart'), ('📋', '📋 Clipboard'), ('📌', '📌 Pushpin'), ('📍', '📍 Location'), ('📎', '📎 Paperclip'), ('📏', '📏 Straight Line'), ('📐', '📐 Three Sides'), ('📛', '📛 Name Badge'), ('🔒', '🔒 Lock'), ('🔓', '🔓 Open Lock'), ('🔏', '🔏 Lock With Ink Pen'), ('🔐', '🔐 Closed Lock With Key'), ('🔑', '🔑 Key'), ('🔨', '🔨 Hammer'), ('🔧', '🔧 Spanner'), ('🔩', '🔩 Calipers'), ('🔗', '🔗 Link Symbol'), ('💉', '💉 Syringe'), ('💊', '💊 Pill'), ('🔪', '🔪 Chef Knife'), ('🔫', '🔫 Pistol'), ('🚬', '🚬 Durry'), ('🏁', '🏁 Get Set Go'), ('🚩', '🚩 Triangular Flag on Post'), ('🇦🇫', '🇦🇫 Afghanistan'), ('🇦🇽', '🇦🇽 Åland Islands'), ('🇦🇱', '🇦🇱 Albania'), ('🇩🇿', '🇩🇿 Algeria'), ('🇦🇸', '🇦🇸 American Samoa'), ('🇦🇩', '🇦🇩 Andorra'), ('🇦🇴', '🇦🇴 Angola'), ('🇦🇮', '🇦🇮 Anguilla'), ('🇦🇶', '🇦🇶 Antarctica'), ('🇦🇬', '🇦🇬 Antigua & Barbuda'), ('🇦🇷', '🇦🇷 Argentina'), ('🇦🇲', '🇦🇲 Armenia'), ('🇦🇼', '🇦🇼 Aruba'), ('🇦🇨', '🇦🇨 Ascension Island'), ('🇦🇺', '🇦🇺 Australia'), ('🇦🇹', '🇦🇹 Austria'), ('🇦🇿', '🇦🇿 Azerbaijan'), ('🇧🇸', '🇧🇸 Bahamas'), ('🇧🇭', '🇧🇭 Bahrain'), ('🇧🇩', '🇧🇩 Bangladesh'), ('🇧🇧', '🇧🇧 Barbados'), ('🇧🇾', '🇧🇾 Belarus'), ('🇧🇪', '🇧🇪 Belgium'), ('🇧🇿', '🇧🇿 Belize'), ('🇧🇯', '🇧🇯 Benin'), ('🇧🇲', '🇧🇲 Bermuda'), ('🇧🇹', '🇧🇹 Bhutan'), ('🇧🇴', '🇧🇴 Bolivia'), ('🇧🇦', '🇧🇦 Bosnia & Herzegovina'), ('🇧🇼', '🇧🇼 Botswana'), ('🇧🇻', '🇧🇻 Bouvet Island'), ('🇧🇷', '🇧🇷 Brazil'), ('🇮🇴', '🇮🇴 British Indian Ocean Territory'), ('🇻🇬', '🇻🇬 British Virgin Islands'), ('🇧🇳', '🇧🇳 Brunei'), ('🇧🇬', '🇧🇬 Bulgaria'), ('🇧🇫', '🇧🇫 Burkina Faso'), ('🇧🇮', '🇧🇮 Burundi'), ('🇰🇭', '🇰🇭 Cambodia'), ('🇨🇲', '🇨🇲 Cameroon'), ('🇨🇦', '🇨🇦 Canada'), ('🇮🇨', '🇮🇨 Canary Islands'), ('🇨🇻', '🇨🇻 Cape Verde'), ('🇧🇶', '🇧🇶 Caribbean Netherlands'), ('🇰🇾', '🇰🇾 Cayman Islands'), ('🇨🇫', '🇨🇫 Central African Republic'), ('🇪🇦', '🇪🇦 Ceuta & Melilla'), ('🇹🇩', '🇹🇩 Chad'), ('🇨🇱', '🇨🇱 Chile'), ('🇨🇳', '🇨🇳 China'), ('🇨🇽', '🇨🇽 Christmas Island'), ('🇨🇵', '🇨🇵 Clipperton Island'), ('🇨🇨', '🇨🇨 Cocos Islands'), ('🇨🇴', '🇨🇴 Colombia'), ('🇰🇲', '🇰🇲 Comoros'), ('🇨🇬', '🇨🇬 Congo - Brazzaville'), ('🇨🇩', '🇨🇩 Congo - Kinshasa'), ('🇨🇰', '🇨🇰 Cook Islands'), ('🇨🇷', '🇨🇷 Costa Rica'), ('🇨🇮', '🇨🇮 Côte D’Ivoire'), ('🇭🇷', '🇭🇷 Croatia'), ('🇨🇺', '🇨🇺 Cuba'), ('🇨🇼', '🇨🇼 Curaçao'), ('🇨🇾', '🇨🇾 Cyprus'), ('🇨🇿', '🇨🇿 Czech Republic'), ('🇩🇰', '🇩🇰 Denmark'), ('🇩🇬', '🇩🇬 Diego Garcia'), ('🇩🇯', '🇩🇯 Djibouti'), ('🇩🇲', '🇩🇲 Dominica'), ('🇩🇴', '🇩🇴 Dominican Republic'), ('🇪🇨', '🇪🇨 Ecuador'), ('🇪🇬', '🇪🇬 Egypt'), ('🇸🇻', '🇸🇻 El Salvador'), ('🇬🇶', '🇬🇶 Equatorial Guinea'), ('🇪🇷', '🇪🇷 Eritrea'), ('🇪🇪', '🇪🇪 Estonia'), ('🇪🇹', '🇪🇹 Ethiopia'), ('🇪🇺', '🇪🇺 European Union'), ('🇫🇰', '🇫🇰 Falkland Islands'), ('🇫🇴', '🇫🇴 Faroe Islands'), ('🇫🇯', '🇫🇯 Fiji'), ('🇫🇮', '🇫🇮 Finland'), ('🇫🇷', '🇫🇷 France'), ('🇬🇫', '🇬🇫 French Guiana'), ('🇵🇫', '🇵🇫 French Polynesia'), ('🇹🇫', '🇹🇫 French Southern Territories'), ('🇬🇦', '🇬🇦 Gabon'), ('🇬🇲', '🇬🇲 Gambia'), ('🇬🇪', '🇬🇪 Georgia'), ('🇩🇪', '🇩🇪 Germany'), ('🇬🇭', '🇬🇭 Ghana'), ('🇬🇮', '🇬🇮 Gibraltar'), ('🇬🇷', '🇬🇷 Greece'), ('🇬🇱', '🇬🇱 Greenland'), ('🇬🇩', '🇬🇩 Grenada'), ('🇬🇵', '🇬🇵 Guadeloupe'), ('🇬🇺', '🇬🇺 Guam'), ('🇬🇹', '🇬🇹 Guatemala'), ('🇬🇬', '🇬🇬 Guernsey'), ('🇬🇳', '🇬🇳 Guinea'), ('🇬🇼', '🇬🇼 Guinea-Bissau'), ('🇬🇾', '🇬🇾 Guyana'), ('🇭🇹', '🇭🇹 Haiti'), ('🇭🇲', '🇭🇲 Heard & McDonald Islands'), ('🇭🇳', '🇭🇳 Honduras'), ('🇭🇰', '🇭🇰 Hong Kong'), ('🇭🇺', '🇭🇺 Hungary'), ('🇮🇸', '🇮🇸 Iceland'), ('🇮🇳', '🇮🇳 India'), ('🇮🇩', '🇮🇩 Indonesia'), ('🇮🇷', '🇮🇷 Iran'), ('🇮🇶', '🇮🇶 Iraq'), ('🇮🇪', '🇮🇪 Ireland'), ('🇮🇲', '🇮🇲 Isle of Man'), ('🇮🇱', '🇮🇱 Israel'), ('🇮🇹', '🇮🇹 Italy'), ('🇯🇲', '🇯🇲 Jamaica'), ('🇯🇵', '🇯🇵 Japan'), ('🇯🇪', '🇯🇪 Jersey'), ('🇯🇴', '🇯🇴 Jordan'), ('🇰🇿', '🇰🇿 Kazakhstan'), ('🇰🇪', '🇰🇪 Kenya'), ('🇰🇮', '🇰🇮 Kiribati'), ('🇽🇰', '🇽🇰 Kosovo'), ('🇰🇼', '🇰🇼 Kuwait'), ('🇰🇬', '🇰🇬 Kyrgyzstan'), ('🇱🇦', '🇱🇦 Laos'), ('🇱🇻', '🇱🇻 Latvia'), ('🇱🇧', '🇱🇧 Lebanon'), ('🇱🇸', '🇱🇸 Lesotho'), ('🇱🇷', '🇱🇷 Liberia'), ('🇱🇾', '🇱🇾 Libya'), ('🇱🇮', '🇱🇮 Liechtenstein'), ('🇱🇹', '🇱🇹 Lithuania'), ('🇱🇺', '🇱🇺 Luxembourg'), ('🇲🇴', '🇲🇴 Macau'), ('🇲🇰', '🇲🇰 Macedonia'), ('🇲🇬', '🇲🇬 Madagascar'), ('🇲🇼', '🇲🇼 Malawi'), ('🇲🇾', '🇲🇾 Malaysia'), ('🇲🇻', '🇲🇻 Maldives'), ('🇲🇱', '🇲🇱 Mali'), ('🇲🇹', '🇲🇹 Malta'), ('🇲🇭', '🇲🇭 Marshall Islands'), ('🇲🇶', '🇲🇶 Martinique'), ('🇲🇷', '🇲🇷 Mauritania'), ('🇲🇺', '🇲🇺 Mauritius'), ('🇾🇹', '🇾🇹 Mayotte'), ('🇲🇽', '🇲🇽 Mexico'), ('🇫🇲', '🇫🇲 Micronesia'), ('🇲🇩', '🇲🇩 Moldova'), ('🇲🇨', '🇲🇨 Monaco'), ('🇲🇳', '🇲🇳 Mongolia'), ('🇲🇪', '🇲🇪 Montenegro'), ('🇲🇸', '🇲🇸 Montserrat'), ('🇲🇦', '🇲🇦 Morocco'), ('🇲🇿', '🇲🇿 Mozambique'), ('🇲🇲', '🇲🇲 Myanmar'), ('🇳🇦', '🇳🇦 Namibia'), ('🇳🇷', '🇳🇷 Nauru'), ('🇳🇵', '🇳🇵 Nepal'), ('🇳🇱', '🇳🇱 Netherlands'), ('🇳🇨', '🇳🇨 New Caledonia'), ('🇳🇿', '🇳🇿 New Zealand'), ('🇳🇮', '🇳🇮 Nicaragua'), ('🇳🇪', '🇳🇪 Niger'), ('🇳🇬', '🇳🇬 Nigeria'), ('🇳🇺', '🇳🇺 Niue'), ('🇳🇫', '🇳🇫 Norfolk Island'), ('🇲🇵', '🇲🇵 Northern Mariana Islands'), ('🇰🇵', '🇰🇵 North Korea'), ('🇳🇴', '🇳🇴 Norway'), ('🇴🇲', '🇴🇲 Oman'), ('🇵🇰', '🇵🇰 Pakistan'), ('🇵🇼', '🇵🇼 Palau'), ('🇵🇸', '🇵🇸 Palestinian Territories'), ('🇵🇦', '🇵🇦 Panama'), ('🇵🇬', '🇵🇬 Papua New Guinea'), ('🇵🇾', '🇵🇾 Paraguay'), ('🇵🇪', '🇵🇪 Peru'), ('🇵🇭', '🇵🇭 Philippines'), ('🇵🇳', '🇵🇳 Pitcairn Islands'), ('🇵🇱', '🇵🇱 Poland'), ('🇵🇹', '🇵🇹 Portugal'), ('🇵🇷', '🇵🇷 Puerto Rico'), ('🇶🇦', '🇶🇦 Qatar'), ('🇷🇪', '🇷🇪 Réunion'), ('🇷🇴', '🇷🇴 Romania'), ('🇷🇺', '🇷🇺 Russia'), ('🇷🇼', '🇷🇼 Rwanda'), ('🇼🇸', '🇼🇸 Samoa'), ('🇸🇲', '🇸🇲 San Marino'), ('🇸🇹', '🇸🇹 São Tomé & Príncipe'), ('🇸🇦', '🇸🇦 Saudi Arabia'), ('🇸🇳', '🇸🇳 Senegal'), ('🇷🇸', '🇷🇸 Serbia'), ('🇸🇨', '🇸🇨 Seychelles'), ('🇸🇱', '🇸🇱 Sierra Leone'), ('🇸🇬', '🇸🇬 Singapore'), ('🇸🇽', '🇸🇽 Sint Maarten'), ('🇸🇰', '🇸🇰 Slovakia'), ('🇸🇮', '🇸🇮 Slovenia'), ('🇸🇧', '🇸🇧 Solomon Islands'), ('🇸🇴', '🇸🇴 Somalia'), ('🇿🇦', '🇿🇦 South Africa'), ('🇬🇸', '🇬🇸 South Georgia & South Sandwich Islands'), ('🇰🇷', '🇰🇷 South Korea'), ('🇸🇸', '🇸🇸 South Sudan'), ('🇪🇸', '🇪🇸 Spain'), ('🇱🇰', '🇱🇰 Sri Lanka'), ('🇧🇱', '🇧🇱 St. Barthélemy'), ('🇸🇭', '🇸🇭 St. Helena'), ('🇰🇳', '🇰🇳 St. Kitts & Nevis'), ('🇱🇨', '🇱🇨 St. Lucia'), ('🇲🇫', '🇲🇫 St. Martin'), ('🇵🇲', '🇵🇲 St. Pierre & Miquelon'), ('🇻🇨', '🇻🇨 St. Vincent & Grenadines'), ('🇸🇩', '🇸🇩 Sudan'), ('🇸🇷', '🇸🇷 Suriname'), ('🇸🇯', '🇸🇯 Svalbard & Jan Mayen'), ('🇸🇿', '🇸🇿 Swaziland'), ('🇸🇪', '🇸🇪 Sweden'), ('🇨🇭', '🇨🇭 Switzerland'), ('🇸🇾', '🇸🇾 Syria'), ('🇹🇼', '🇹🇼 Taiwan'), ('🇹🇯', '🇹🇯 Tajikistan'), ('🇹🇿', '🇹🇿 Tanzania'), ('🇹🇭', '🇹🇭 Thailand'), ('🇹🇱', '🇹🇱 Timor-Leste'), ('🇹🇬', '🇹🇬 Togo'), ('🇹🇰', '🇹🇰 Tokelau'), ('🇹🇴', '🇹🇴 Tonga'), ('🇹🇹', '🇹🇹 Trinidad & Tobago'), ('🇹🇦', '🇹🇦 Tristan Da Cunha'), ('🇹🇳', '🇹🇳 Tunisia'), ('🇹🇷', '🇹🇷 Turkey'), ('🇹🇲', '🇹🇲 Turkmenistan'), ('🇹🇨', '🇹🇨 Turks & Caicos Islands'), ('🇹🇻', '🇹🇻 Tuvalu'), ('🇺🇬', '🇺🇬 Uganda'), ('🇺🇦', '🇺🇦 Ukraine'), ('🇦🇪', '🇦🇪 United Arab Emirates'), ('🇬🇧', '🇬🇧 United Kingdom'), ('🇺🇸', '🇺🇸 United States'), ('🇺🇾', '🇺🇾 Uruguay'), ('🇺🇲', '🇺🇲 U.S. Outlying Islands'), ('🇻🇮', '🇻🇮 U.S. Virgin Islands'), ('🇺🇿', '🇺🇿 Uzbekistan'), ('🇻🇺', '🇻🇺 Vanuatu'), ('🇻🇦', '🇻🇦 Vatican City'), ('🇻🇪', '🇻🇪 Venezuela'), ('🇻🇳', '🇻🇳 Vietnam'), ('🇼🇫', '🇼🇫 Wallis & Futuna'), ('🇪🇭', '🇪🇭 Western Sahara'), ('🇾🇪', '🇾🇪 Yemen'), ('🇿🇲', '🇿🇲 Zambia'), ('🇿🇼', '🇿🇼 Zimbabwe'), ('🔃', '🔃 Clockwise Arrows'), ('🔄', '🔄 Anticlockwise Arrows'), ('🔙', '🔙 Back'), ('🔚', '🔚 End'), ('🔛', '🔛 On'), ('🔜', '🔜 Soon'), ('🔝', '🔝 Top'), ('🔰', '🔰 Beginner'), ('🔮', '🔮 Crystal Ball'), ('🔯', '🔯 Six Pointed Star With Middle Dot'), ('✅', '✅ White Heavy Check Mark'), ('❌', '❌ Cross'), ('❎', '❎ Negative Squared Cross Mark'), ('➕', '➕ Heavy Plus Sign'), ('➖', '➖ Heavy Minus Sign'), ('➗', '➗ Heavy Division Sign'), ('➰', '➰ Curly Loop'), ('➿', '➿ Double Curly Loop'), ('❓', '❓ Question'), ('❔', '❔ White Question Mark Ornament'), ('❕', '❕ White Exclamation Mark Ornament'), ('💯', '💯 Hundred Points'), ('🔞', '🔞 Over Eighteen'), ('🔠', '🔠 Latin Capital Letters'), ('🔡', '🔡 Latin Small Letters'), ('🔢', '🔢 Numbers'), ('🔣', '🔣 Symbols'), ('🔤', '🔤 Latin Letters'), ('🅰️', '🅰️ Squared A'), ('🆎', '🆎 Squared AB'), ('🅱️', '🅱️ Squared B'), ('🆑', '🆑 Squared CL'), ('🆒', '🆒 Cool Square'), ('🆓', '🆓 Squared Free'), ('🆔', '🆔 Squared ID'), ('🆕', '🆕 New Square'), ('🆖', '🆖 Squared NG'), ('🅾️', '🅾️ Squared O'), ('🆗', '🆗 OK Square'), ('🆘', '🆘 SOS Square'), ('🆙', '🆙 Squared Up!'), ('🆚', '🆚 Squared Vs'), ('🈁', '🈁 Squared Katakana Koko'), ('🈂️', '🈂️ Squared Katakana Sa'), ('🈷️', '🈷️ Squared 月 (Moon)'), ('🈶', '🈶 Squared 有 (Have)'), ('🉐', '🉐 Circled Ideograph Advantage'), ('🈹', '🈹 Squared CJK Unified Ideograph-5272'), ('🈲', '🈲 Squared CJK Unified Ideograph-7981'), ('🉑', '🉑 Circled 可 (Accept)'), ('🈸', '🈸 Squared CJK Unified Ideograph-7533'), ('🈴', '🈴 Squared CJK Unified Ideograph-5408'), ('🈳', '🈳 Squared CJK Unified Ideograph-7a7a'), ('🈺', '🈺 Squared CJK Unified Ideograph-55b6'), ('🈵', '🈵 Squared CJK Unified Ideograph-6e80'), ('🔶', '🔶 Large Orange Diamond'), ('🔷', '🔷 Large Blue Diamond'), ('🔸', '🔸 Small Orange Diamond'), ('🔹', '🔹 Small Blue Diamond'), ('🔺', '🔺 Up-Pointing Red Triangle'), ('🔻', '🔻 Down-Pointing Red Triangle'), ('💠', '💠 Diamond Shape With a Dot Inside'), ('🔘', '🔘 Radio Button'), ('🔲', '🔲 Black Square Button'), ('🔳', '🔳 White Square Button'), ('🔴', '🔴 Large Red Circle'), ('🔵', '🔵 Large Blue Circle'), ('😀', '😀 Grinning'), ('😗', '😗 Kissing'), ('😙', '😙 Smooch'), ('😑', '😑 True Neutral'), ('😮', '😮 Stunned'), ('😯', '😯 Hushed'), ('😴', '😴 Sleepy'), ('😛', '😛 Tongue'), ('😕', '😕 Confused'), ('😟', '😟 Worried'), ('😦', '😦 Frowning Face With Open Mouth'), ('😧', '😧 Anguish Face'), ('😬', '😬 Grimace'), ('🙂', '🙂 Slightly Smiling'), ('🙁', '🙁 Slightly Frowning'), ('🕵', '🕵 Spy'), ('🗣', '🗣 Speaking Head in Silhouette'), ('🕴', '🕴 Man in Business Suit Levitating'), ('🖕', '🖕 Middle Finger'), ('🖖', '🖖 Vulcan Hand'), ('🖐', '🖐 Raised Hand With Fingers Splayed'), ('👁', '👁 Eye'), ('🕳', '🕳 Hole'), ('🗯', '🗯 Right Anger Bubble'), ('🕶', '🕶 Sunglasses'), ('🛍', '🛍 Shopping'), ('🐿', '🐿 Chipmunk'), ('🕊', '🕊 Peace Dove'), ('🕷', '🕷 Spider'), ('🕸', '🕸 Spider Web'), ('🏵', '🏵 Rosette'), ('🌶', '🌶 Chilli'), ('🍽', '🍽 Fork and Knife With Plate'), ('🗺', '🗺 World Map'), ('🏔', '🏔 Snow Capped Mountain'), ('🏕', '🏕 Camping'), ('🏖', '🏖 Beach'), ('🏜', '🏜 Desert'), ('🏝', '🏝 Desert Island'), ('🏞', '🏞 National Park'), ('🏟', '🏟 Stadium'), ('🏛', '🏛 Architecture'), ('🏗', '🏗 Building Construction'), ('🏘', '🏘 House Buildings'), ('🏙', '🏙 Cityscape'), ('🏚', '🏚 Derelict House Building'), ('🖼', '🖼 Frame With Picture'), ('🛢', '🛢 Oil Drum'), ('🛣', '🛣 Motorway'), ('🛤', '🛤 Railway Track'), ('🛳', '🛳 Passenger Ship'), ('🛥', '🛥 Boat'), ('🛩', '🛩 Airplane'), ('🛫', '🛫 Airplane Departure'), ('🛬', '🛬 Airplane Arriving'), ('🛰', '🛰 Satellite'), ('🛎', '🛎 Service Bell'), ('🛌', '🛌 Bed'), ('🛏', '🛏 Bed'), ('🛋', '🛋 Couch and Lamp'), ('🕰', '🕰 Mantelpiece'), ('🌡', '🌡 Thermometer'), ('🌤', '🌤 Small Cloud'), ('🌥', '🌥 White Sun Behind Cloud'), ('🌦', '🌦 White Sun Behind Cloud With Rain'), ('🌧', '🌧 Cloud With Rain'), ('🌨', '🌨 Cloud With Snow'), ('🌩', '🌩 Lightning'), ('🌪', '🌪 Tornado'), ('🌫', '🌫 Fog'), ('🌬', '🌬 Blowing'), ('🎖', '🎖 Medal'), ('🎗', '🎗 Ribbon'), ('🎞', '🎞 Film'), ('🎟', '🎟 Admission Tickets'), ('🏷', '🏷 Label'), ('🏌', '🏌 Golfer'), ('🏋', '🏋 Lifting'), ('🏎', '🏎 Racing Car'), ('🏍', '🏍 Racing Motorcycle'), ('🏅', '🏅 Medal'), ('🕹', '🕹 Joystick'), ('⏸', '⏸ Double Vertical Bar'), ('⏹', '⏹ Black Square for Stop'), ('⏺', '⏺ Black Circle for Record'), ('🎙', '🎙 Microphone'), ('🎚', '🎚 Level Slider'), ('🎛', '🎛 Control Knobs'), ('🖥', '🖥 Desktop'), ('🖨', '🖨 Printer'), ('🖱', '🖱 Three Button Mouse'), ('🖲', '🖲 Trackball'), ('📽', '📽 Film Projector'), ('📸', '📸 Camera With Flash'), ('🕯', '🕯 Candle'), ('🗞', '🗞 Newspaper'), ('🗳', '🗳 Ballot Box With Ballot'), ('🖋', '🖋 Fancy Pen'), ('🖊', '🖊 Lower Left Ballpoint Pen'), ('🖌', '🖌 Lower Left Paintbrush'), ('🖍', '🖍 Lower Left Crayon'), ('🗂', '🗂 Card Index Dividers'), ('🗒', '🗒 Spiral Note Pad'), ('🗓', '🗓 Spiral Calendar Pad'), ('🖇', '🖇 Linked Paperclips'), ('🗃', '🗃 Card File Box'), ('🗄', '🗄 File Cabinet'), ('🗑', '🗑 Wastebasket'), ('🗝', '🗝 Old Key'), ('🛠', '🛠 Tools'), ('🗜', '🗜 Compression'), ('🗡', '🗡 Dagger'), ('🛡', '🛡 Shield'), ('🏳', '🏳 White Flag'), ('🏴', '🏴 Black Flag'), ('🕉', '🕉 Om Symbol'), ('🗨', '🗨 Left Speech Bubble'), ('🤗', '🤗 Hugging'), ('🤔', '🤔 Thinking'), ('🙄', '🙄 Rolling Eyes'), ('🤐', '🤐 Hushed'), ('🤓', '🤓 Nerd'), ('🙃', '🙃 Upside Down'), ('🤒', '🤒 Sick'), ('🤕', '🤕 Hurt Head'), ('🤑', '🤑 Money'), ('🏻', '🏻 Emoji Modifier 1-2'), ('🏼', '🏼 Emoji Modifier 3'), ('🏽', '🏽 Emoji Modifier 4'), ('🏾', '🏾 Emoji Modifier 5'), ('🏿', '🏿 Emoji Modifier 6'), ('🤘', '🤘 Rock On'), ('📿', '📿 Prayer Beads'), ('🤖', '🤖 Robot'), ('🦁', '🦁 Lion'), ('🦄', '🦄 Unicorn'), ('🦃', '🦃 Turkey'), ('🦀', '🦀 Crab'), ('🦂', '🦂 Scorpion'), ('🧀', '🧀 Mouse Trap'), ('🌭', '🌭 Hot Dog'), ('🌮', '🌮 Taco'), ('🌯', '🌯 Burrito'), ('🍿', '🍿 Popcorn'), ('🍾', '🍾 Popping Cork'), ('🏺', '🏺 Amphora'), ('🛐', '🛐 Place of Worship'), ('🕋', '🕋 Kaaba'), ('🕌', '🕌 Mosque'), ('🕍', '🕍 Synagogue'), ('🕎', '🕎 Menorah'), ('🏏', '🏏 Bat and Ball'), ('🏐', '🏐 Volleyball'), ('🏑', '🏑 Field Hockey'), ('🏒', '🏒 Ice Hockey'), ('🏓', '🏓 Table Tennis'), ('🏸', '🏸 Badminton'), ('🏹', '🏹 Archer'), ('🤣', '🤣 ROFL Face'), ('🤤', '🤤 Drooling'), ('🤢', '🤢 Nauseated'), ('🤧', '🤧 Sneezing'), ('🤠', '🤠 Cowboy'), ('🤡', '🤡 Clown'), ('🤥', '🤥 Lying'), ('🤴', '🤴 Prince'), ('🤵', '🤵 Tuxedo Man'), ('🤰', '🤰 Pregnant'), ('🤶', '🤶 Mrs. Claus'), ('🤦', '🤦 Facepalm'), ('🤷', '🤷 Shrugging'), ('🕺', '🕺 Man Dancing'), ('🤺', '🤺 Fencing'), ('🤸', '🤸 Cartwheel'), ('🤼', '🤼 Wrestling'), ('🤽', '🤽 Water Polo'), ('🤾', '🤾 Handball'), ('🤹', '🤹 Juggling'), ('🤳', '🤳 Selfie'), ('🤞', '🤞 Luck Hand'), ('🤙', '🤙 Call Me Hand'), ('🤛', '🤛 Left-Facing Fist'), ('🤜', '🤜 Right-Facing Fist'), ('🤚', '🤚 Raised Back of Hand'), ('🤝', '🤝 Business Hi'), ('🖤', '🖤 Black Heart'), ('🦍', '🦍 Gorilla'), ('🦊', '🦊 Fox'), ('🦌', '🦌 Deer'), ('🦏', '🦏 Rhinoceros'), ('🦇', '🦇 Bat'), ('🦅', '🦅 Eagle'), ('🦆', '🦆 Duck'), ('🦉', '🦉 Owl'), ('🦎', '🦎 Lizard'), ('🦈', '🦈 Shark'), ('🦐', '🦐 Shrimp'), ('🦑', '🦑 Squid'), ('🦋', '🦋 Butterfly'), ('🥀', '🥀 Wilted'), ('🥝', '🥝 Kiwifruit'), ('🥑', '🥑 Pricey Fruit'), ('🥔', '🥔 Potato'), ('🥕', '🥕 Carrot'), ('🥒', '🥒 Cucumber'), ('🥜', '🥜 Peanuts'), ('🥐', '🥐 Croissant'), ('🥖', '🥖 Bread Sword'), ('🥞', '🥞 Pancakes'), ('🥓', '🥓 Bacon'), ('🥙', '🥙 Stuffed Flatbread'), ('🥚', '🥚 Chicken Rock'), ('🥘', '🥘 Shallow Pan'), ('🥗', '🥗 Salad'), ('🥛', '🥛 Cow Juice'), ('🥂', '🥂 Clinking Glasses'), ('🥃', '🥃 Tumbler'), ('🥄', '🥄 Spoon'), ('🛴', '🛴 Scoot Scoot'), ('🛵', '🛵 Motor Scooter'), ('🛑', '🛑 Stop Sign'), ('🛶', '🛶 Canoe'), ('🥇', '🥇 Gold Medal'), ('🥈', '🥈 Silver Medal'), ('🥉', '🥉 Participation'), ('🥊', '🥊 Boxing'), ('🥋', '🥋 Martial Arts'), ('🥅', '🥅 Hashtag Goals'), ('🥁', '🥁 Drum Roll'), ('🛒', '🛒 Food Ute'), ('\\U0001f929', '\\U0001f929 Star Struck'), ('\\U0001f928', '\\U0001f928 Unexpected Face'), ('\\U0001f92f', '\\U0001f92f Mind Blown'), ('\\U0001f92a', '\\U0001f92a Zany Face'), ('\\U0001f92c', '\\U0001f92c Swear Face'), ('\\U0001f92e', '\\U0001f92e Vomiting'), ('\\U0001f92b', '\\U0001f92b Shushing'), ('\\U0001f92d', '\\U0001f92d Hand Over Mouth'), ('\\U0001f9d0', '\\U0001f9d0 Monocle'), ('\\U0001f9d2', '\\U0001f9d2 Child Face'), ('\\U0001f9d1', '\\U0001f9d1 Adult'), ('\\U0001f9d3', '\\U0001f9d3 Older Adult'), ('\\U0001f9d5', '\\U0001f9d5 Headscarf'), ('\\U0001f9d4', '\\U0001f9d4 Bearded Person'), ('\\U0001f931', '\\U0001f931 Breast Feeding'), ('\\U0001f9d9', '\\U0001f9d9 Mage'), ('\\U0001f9da', '\\U0001f9da Fairy'), ('\\U0001f9db', '\\U0001f9db Vampire'), ('\\U0001f9dc', '\\U0001f9dc Merperson'), ('\\U0001f9dd', '\\U0001f9dd Cosplay'), ('\\U0001f9de', '\\U0001f9de Genie'), ('\\U0001f9df', '\\U0001f9df Unalive'), ('\\U0001f9d6', '\\U0001f9d6 Steamy Room'), ('\\U0001f9d7', '\\U0001f9d7 Person Climbing'), ('\\U0001f9d8', '\\U0001f9d8 Lotus Position'), ('\\U0001f91f', '\\U0001f91f Love-You Gesture'), ('\\U0001f932', '\\U0001f932 Palms Up Together'), ('\\U0001f9e0', '\\U0001f9e0 Big Brain'), ('\\U0001f9e1', '\\U0001f9e1 Orange Heart'), ('\\U0001f9e3', '\\U0001f9e3 Neck Hider'), ('\\U0001f9e4', '\\U0001f9e4 Hand Socks'), ('\\U0001f9e5', '\\U0001f9e5 Coat'), ('\\U0001f9e6', '\\U0001f9e6 Feet Gloves'), ('\\U0001f9e2', '\\U0001f9e2 Billed Cap'), ('\\U0001f993', '\\U0001f993 Zebra'), ('\\U0001f992', '\\U0001f992 Giraffe'), ('\\U0001f994', '\\U0001f994 Spikehog'), ('\\U0001f995', '\\U0001f995 Long Neck'), ('\\U0001f996', '\\U0001f996 Big Roar'), ('\\U0001f997', '\\U0001f997 Cricket'), ('\\U0001f965', '\\U0001f965 Coconut'), ('\\U0001f966', '\\U0001f966 Tiny Tree'), ('\\U0001f968', '\\U0001f968 Twisty Bread'), ('\\U0001f969', '\\U0001f969 Cut of Meat'), ('\\U0001f96a', '\\U0001f96a Sandwich'), ('\\U0001f963', '\\U0001f963 Bowl With Spoon'), ('\\U0001f96b', '\\U0001f96b Canned Good'), ('\\U0001f95f', '\\U0001f95f Dumpling'), ('\\U0001f960', '\\U0001f960 Tasty Future'), ('\\U0001f961', '\\U0001f961 Takeout Box'), ('\\U0001f967', '\\U0001f967 Pie'), ('\\U0001f964', '\\U0001f964 Cup With Straw'), ('\\U0001f962', '\\U0001f962 Chopsticks'), ('\\U0001f6f8', '\\U0001f6f8 Alien Plane'), ('\\U0001f6f7', '\\U0001f6f7 Sled'), ('\\U0001f94c', '\\U0001f94c Curling'), ('\\U0001f970', '\\U0001f970 Smiling Face With 3 Hearts'), ('\\U0001f975', '\\U0001f975 Overheated'), ('\\U0001f976', '\\U0001f976 Freezing Face'), ('\\U0001f974', '\\U0001f974 Woozy Face'), ('\\U0001f973', '\\U0001f973 Party Face'), ('\\U0001f97a', '\\U0001f97a Pleading Face'), ('\\U0001f9b5', '\\U0001f9b5 Leg'), ('\\U0001f9b6', '\\U0001f9b6 Foot'), ('\\U0001f9b7', '\\U0001f9b7 Tooth'), ('\\U0001f9b4', '\\U0001f9b4 Bone'), ('\\U0001f9b8', '\\U0001f9b8 Superhero'), ('\\U0001f9b9', '\\U0001f9b9 Supervillain'), ('\\U0001f99d', '\\U0001f99d Trash Bandit'), ('\\U0001f999', '\\U0001f999 Llama'), ('\\U0001f99b', '\\U0001f99b Hippopotamus'), ('\\U0001f998', '\\U0001f998 Kangaroo'), ('\\U0001f9a1', '\\U0001f9a1 Badger'), ('\\U0001f9a2', '\\U0001f9a2 Swan'), ('\\U0001f99a', '\\U0001f99a Peacock'), ('\\U0001f99c', '\\U0001f99c Parrot'), ('\\U0001f99f', '\\U0001f99f Mosquito'), ('\\U0001f9a0', '\\U0001f9a0 Microbe'), ('\\U0001f96d', '\\U0001f96d Mango'), ('\\U0001f96c', '\\U0001f96c Leafy Green'), ('\\U0001f96f', '\\U0001f96f Bagel'), ('\\U0001f9c2', '\\U0001f9c2 Salty'), ('\\U0001f96e', '\\U0001f96e Moon Cake'), ('\\U0001f99e', '\\U0001f99e Lobster'), ('\\U0001f9c1', '\\U0001f9c1 Cupcake'), ('\\U0001f9ed', '\\U0001f9ed Compass'), ('\\U0001f9f1', '\\U0001f9f1 Brick'), ('\\U0001f6f9', '\\U0001f6f9 Skateboard'), ('\\U0001f9f3', '\\U0001f9f3 Baggage'), ('\\U0001f9e8', '\\U0001f9e8 Firework'), ('\\U0001f9e7', '\\U0001f9e7 Red Envelope'), ('\\U0001f94e', '\\U0001f94e Softball'), ('\\U0001f94f', '\\U0001f94f Throwing Disc'), ('\\U0001f94d', '\\U0001f94d Lacrosse'), ('\\U0001f9ff', '\\U0001f9ff Nazar Amulet'), ('\\U0001f9e9', '\\U0001f9e9 Puzzle Piece'), ('\\U0001f9f8', '\\U0001f9f8 Teddy Bear'), ('\\U0001f9f5', '\\U0001f9f5 Thread'), ('\\U0001f9f6', '\\U0001f9f6 Yarn Ball'), ('\\U0001f97d', '\\U0001f97d The Goggles'), ('\\U0001f97c', '\\U0001f97c Lab Coat'), ('\\U0001f97e', '\\U0001f97e Hiking Boot'), ('\\U0001f97f', '\\U0001f97f Flat Shoe'), ('\\U0001f9ee', '\\U0001f9ee Abacus'), ('\\U0001f9fe', '\\U0001f9fe Receipt'), ('\\U0001f9f0', '\\U0001f9f0 Toolbox'), ('\\U0001f9f2', '\\U0001f9f2 Magnet'), ('\\U0001f9ea', '\\U0001f9ea Test Tube'), ('\\U0001f9eb', '\\U0001f9eb Petri Dish'), ('\\U0001f9ec', '\\U0001f9ec DNA'), ('\\U0001f9f4', '\\U0001f9f4 Lotion'), ('\\U0001f9f7', '\\U0001f9f7 Safety Pin'), ('\\U0001f9f9', '\\U0001f9f9 Broom'), ('\\U0001f9fa', '\\U0001f9fa Basket'), ('\\U0001f9fb', '\\U0001f9fb Roll of Paper'), ('\\U0001f9fc', '\\U0001f9fc Soap'), ('\\U0001f9fd', '\\U0001f9fd Fun sponge'), ('\\U0001f9ef', '\\U0001f9ef Anti-fire Can')], default=None, max_length=2, null=True, verbose_name='emoji'),\n        ),",
        "detail": "tabbycat.participants.migrations.0012_auto_20190907_1144",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.participants.migrations.0013_rename_test_score",
        "description": "tabbycat.participants.migrations.0013_rename_test_score",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('participants', '0012_auto_20190907_1144'),\n    ]\n    operations = [\n        migrations.RenameField(\n            model_name='adjudicator',\n            old_name='test_score',\n            new_name='base_score',\n        ),",
        "detail": "tabbycat.participants.migrations.0013_rename_test_score",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.participants.migrations.0014_auto_20200613_2006",
        "description": "tabbycat.participants.migrations.0014_auto_20200613_2006",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('adjallocation', '0008_auto_20181019_2059'),\n        ('participants', '0013_rename_test_score'),\n    ]\n    operations = [\n        migrations.RenameField(\n            model_name='adjudicator',\n            old_name='conflicts',\n            new_name='team_conflicts',",
        "detail": "tabbycat.participants.migrations.0014_auto_20200613_2006",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.participants.migrations.0015_auto_20200614_1831",
        "description": "tabbycat.participants.migrations.0015_auto_20200614_1831",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('participants', '0014_auto_20200613_2006'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='team',\n            name='emoji',\n            field=models.CharField(blank=True, choices=[('☺️', '☺️ White Smiling'), ('☹', '☹ White Frowning'), ('☝️', '☝️ White Up Pointing Index'), ('✌️', '✌️ Victory Hand'), ('✍', '✍ Writing Hand'), ('❤️', '❤️ Heavy Black Heart'), ('❣', '❣ Heart Exclamation Mark'), ('☠', '☠ Skull and Crossbones'), ('♨️', '♨️ Hot Springs'), ('✈️', '✈️ Airplane'), ('⌛', '⌛ Hourglass'), ('⌚', '⌚ Watch'), ('♈', '♈ Aries'), ('♉', '♉ Taurus'), ('♊', '♊ Gemini'), ('♋', '♋ Cancer'), ('♌', '♌ Leo'), ('♍', '♍ Virgo'), ('♎', '♎ Libra'), ('♏', '♏ Scorpius'), ('♐', '♐ Sagittarius'), ('♑', '♑ Capricorn'), ('♒', '♒ Aquarius'), ('♓', '♓ Pisces'), ('☀️', '☀️ Black Sun With Rays'), ('☁️', '☁️ Cloud'), ('☂', '☂ Umbrella'), ('❄️', '❄️ Snowflake'), ('☃', '☃ Snowman'), ('☄️', '☄️ Comet'), ('♠️', '♠️ Spade Suit'), ('♥️', '♥️ Heart Suit'), ('♦️', '♦️ Diamond Suit'), ('♣️', '♣️ Club Suit'), ('▶️', '▶️ Black Right-Pointing Triangle'), ('◀️', '◀️ Black Left-Pointing Triangle'), ('☎️', '☎️ Black Telephone'), ('⌨', '⌨ Keyboard'), ('✉️', '✉️ Envelope'), ('✏️', '✏️ Pencil'), ('✒️', '✒️ Black Nib'), ('✂️', '✂️ Scissors'), ('↗️', '↗️ North East Arrow'), ('➡️', '➡️ Black Rightwards Arrow'), ('↘️', '↘️ South East Arrow'), ('↙️', '↙️ South West Arrow'), ('↖️', '↖️ North West Arrow'), ('↕️', '↕️ Up Down Arrow'), ('↔️', '↔️ Left Right Arrow'), ('↩️', '↩️ Leftwards Arrow With Hook'), ('↪️', '↪️ Rightwards Arrow With Hook'), ('✡', '✡ Star of David'), ('☸', '☸ Wheel of Dharma'), ('☯', '☯ Yin Yang'), ('✝', '✝ Latin Cross'), ('☦', '☦ Orthodox Cross'), ('☪', '☪ Star and Crescent'), ('☮', '☮ Peace Symbol'), ('☢', '☢ Radioactive Sign'), ('☣', '☣ Biohazard Sign'), ('☑️', '☑️ Ballot Box With Check'), ('✔️', '✔️ Heavy Check Mark'), ('✖️', '✖️ Heavy Multiplication X'), ('✳️', '✳️ Eight Spoked Asterisk'), ('✴️', '✴️ Eight Pointed Black Star'), ('❇️', '❇️ Sparkle'), ('‼️', '‼️ Double Exclamation Mark'), ('〰️', '〰️ Wavy Dash'), ('©️', '©️ Copyright Sign'), ('®️', '®️ Registered Sign'), ('™️', '™️ Trade Mark Sign'), ('Ⓜ️', 'Ⓜ️ Capital M'), ('㊗️', '㊗️ Congratulations'), ('㊙️', '㊙️ Secret'), ('▪️', '▪️ Black Square'), ('▫️', '▫️ White Square'), ('#⃣️', '#⃣️ Keycap Number Sign'), ('*⃣', '*⃣ Keycap Asterisk'), ('0⃣️', '0⃣️ Keycap Digit Zero'), ('1⃣️', '1⃣️ Keycap Digit One'), ('2⃣️', '2⃣️ Keycap Digit Two'), ('3⃣️', '3⃣️ Keycap Digit Three'), ('4⃣️', '4⃣️ Keycap Digit Four'), ('5⃣️', '5⃣️ Keycap Digit Five'), ('6⃣️', '6⃣️ Keycap Digit Six'), ('7⃣️', '7⃣️ Keycap Digit Seven'), ('8⃣️', '8⃣️ Keycap Digit Eight'), ('9⃣️', '9⃣️ Keycap Digit Nine'), ('⁉️', '⁉️ Exclamation Question Mark'), ('ℹ️', 'ℹ️ Information Source'), ('⤴️', '⤴️ Right-Curve-Up'), ('⤵️', '⤵️ Right-Curve-Down'), ('♻️', '♻️ Recycling'), ('〽️', '〽️ Part Alternation Mark'), ('◻️', '◻️ White Medium Square'), ('◼️', '◼️ Black Medium Square'), ('◽', '◽ White Medium Small Square'), ('◾', '◾ Black Medium Small Square'), ('☕', '☕ Hot Beverage'), ('⚠️', '⚠️ Warning Sign'), ('☔', '☔ Umbrella With Rain Drops'), ('⏏', '⏏ Eject Symbol'), ('⬆️', '⬆️ Upwards Black Arrow'), ('⬇️', '⬇️ Downwards Black Arrow'), ('⬅️', '⬅️ Leftwards Black Arrow'), ('⚡', '⚡ High Voltage'), ('☘', '☘ Shamrock'), ('⚓', '⚓ Anchor'), ('♿', '♿ Wheelchair Symbol'), ('⚒', '⚒ Hammer and Pick'), ('⚙', '⚙ Gear'), ('⚗', '⚗ Alembic'), ('⚖', '⚖ Scales'), ('⚔', '⚔ Crossed Swords'), ('⚰', '⚰ Coffin'), ('⚱', '⚱ Funeral Urn'), ('⚜', '⚜ Fleur-De-Lis'), ('⚛', '⚛ Atom Symbol'), ('⚪', '⚪ Medium White Circle'), ('⚫', '⚫ Medium Black Circle'), ('🀄', '🀄 Mahjong Tile Red Dragon'), ('⭐', '⭐ White Medium Star'), ('⬛', '⬛ Black Square'), ('⬜', '⬜ White Square'), ('⛑', '⛑ Rescue Hat'), ('⛰', '⛰ Mountain'), ('⛪', '⛪ Church'), ('⛲', '⛲ Fountain'), ('⛺', '⛺ Tent'), ('⛽', '⛽ Fuel Pump'), ('⛵', '⛵ Sailboat'), ('⛴', '⛴ Ferry'), ('⛔', '⛔ No Entry'), ('⛅', '⛅ Overcast'), ('⛈', '⛈ Storm'), ('⛱', '⛱ Umbrella'), ('⛄', '⛄ Snowman'), ('⚽', '⚽ Soccer'), ('⚾', '⚾ Baseball'), ('⛳', '⛳ Hole in One'), ('⛸', '⛸ Ice Skate'), ('⛷', '⛷ Skier'), ('⛹', '⛹ Person With Ball'), ('⛏', '⛏ Pick'), ('⛓', '⛓ Chains'), ('⛩', '⛩ Shinto Shrine'), ('⭕', '⭕ Heavy Large Circle'), ('❗', '❗ Heavy Exclamation Mark'), ('🅿️', '🅿️ Squared P'), ('🈯', '🈯 Squared 指 (Finger)'), ('🈚', '🈚 Squared CJK Unified Ideograph-7121'), ('😁', '😁 Smiling Eyes'), ('😂', '😂 Joy Tears'), ('😃', '😃 Smiling Face With Open Mouth'), ('😄', '😄 Smiling Face With Open Mouth and Smiling Eyes'), ('😅', '😅 Cold Sweat'), ('😆', '😆 Closed Eyes'), ('😉', '😉 Winky'), ('😊', '😊 Smiling Eyes'), ('😋', '😋 Face Savouring Delicious Food'), ('😎', '😎 Shaded Eyes'), ('😍', '😍 Heart Eyes'), ('😘', '😘 Kissy'), ('😚', '😚 Kissing Face With Closed Eyes'), ('😇', '😇 Halo'), ('😐', '😐 Neutral'), ('😶', '😶 No Mouth'), ('😏', '😏 Smirking'), ('😣', '😣 Persevering'), ('😥', '😥 Disappointed'), ('😪', '😪 Sleepy'), ('😫', '😫 Tired'), ('😌', '😌 Relieved'), ('😜', '😜 Tongue Out'), ('😝', '😝 Tongue Out Closed Eyes'), ('😒', '😒 Unamused'), ('😓', '😓 Cold Sweat'), ('😔', '😔 Pensive'), ('😖', '😖 Confounded'), ('😷', '😷 Medical Mask'), ('😲', '😲 Astonished'), ('😞', '😞 Disappointed'), ('😤', '😤 Face With Look of Triumph'), ('😢', '😢 Crying'), ('😭', '😭 Sobbing'), ('😨', '😨 Fearful'), ('😩', '😩 Weary'), ('😰', '😰 Open Mouth Cold Sweat'), ('😱', '😱 Screaming'), ('😳', '😳 Flushed'), ('😵', '😵 Dizzy'), ('😡', '😡 Pouting'), ('😠', '😠 Angry'), ('👿', '👿 Imp'), ('😈', '😈 Smiling Face With Horns'), ('👦', '👦 Boy'), ('👧', '👧 Girl'), ('👨', '👨 Generic Man'), ('👩', '👩 Generic Woman'), ('👴', '👴 Older Man'), ('👵', '👵 Older Woman'), ('👶', '👶 Baby'), ('👱', '👱 Person With Blond Hair'), ('👮', '👮 Police Officer'), ('👲', '👲 Man With Gua Pi Mao'), ('👳', '👳 Man With Turban'), ('👷', '👷 Trade Worker'), ('👸', '👸 Princess'), ('💂', '💂 Guardsman'), ('🎅', '🎅 Santa Claus'), ('👼', '👼 Baby Angel'), ('👯', '👯 Bunny Women'), ('💆', '💆 Face Massage'), ('💇', '💇 Haircut'), ('👰', '👰 Bride'), ('🙍', '🙍 Person Frowning'), ('🙎', '🙎 Person With Pouting'), ('🙅', '🙅 Block Gesture'), ('🙆', '🙆 OK Gesture'), ('💁', '💁 Sass Gesture'), ('🙋', '🙋 Raised Hand'), ('🙇', '🙇 Deep Bow'), ('🙌', '🙌 Praise Hands'), ('🙏', '🙏 Prayer Hands'), ('👤', '👤 Bust in Silhouette'), ('👥', '👥 Busts in Silhouette'), ('🚶', '🚶 Pedestrian'), ('🏃', '🏃 Runner'), ('💃', '💃 Dancer'), ('💏', '💏 Kiss'), ('💑', '💑 Heteronormative Couple'), ('👪', '👪 Hetero Family'), ('👫', '👫 Man & Woman'), ('👬', '👬 Two Men'), ('👭', '👭 Two Women'), ('💪', '💪 Biceps'), ('👈', '👈 Left Pointing Backhand'), ('👉', '👉 Right Pointing Backhand'), ('👆', '👆 Pointing Hand'), ('👇', '👇 Down Pointing Backhand'), ('✊', '✊ Power Hand'), ('✋', '✋ Palm Hand'), ('👊', '👊 Fist Hand'), ('👌', '👌 OK Hand'), ('👍', '👍 Thumbs Up'), ('👎', '👎 Thumbs Down'), ('👋', '👋 Waving Hand Sign'), ('👏', '👏 Clappy Hands'), ('👐', '👐 Open Hands Sign'), ('💅', '💅 Nail Polish'), ('👣', '👣 Footprints'), ('👀', '👀 Eyes'), ('👂', '👂 Ear'), ('👃', '👃 Nose'), ('👅', '👅 Lick'), ('👄', '👄 Mouth'), ('💋', '💋 Kiss Mark'), ('💘', '💘 Cupid Arrow'), ('💓', '💓 Beating Heart'), ('💔', '💔 Broken Heart'), ('💕', '💕 Two Hearts'), ('💖', '💖 Sparkly Heart'), ('💗', '💗 Growing Heart'), ('💙', '💙 Blue Heart'), ('💚', '💚 Green Heart'), ('💛', '💛 Yellow Heart'), ('💜', '💜 Purple Heart'), ('💝', '💝 Heart With Ribbon'), ('💞', '💞 Revolving Hearts'), ('💟', '💟 Heart Decoration'), ('💌', '💌 Love Letter'), ('💧', '💧 Droplet'), ('💤', '💤 ZZZ'), ('💢', '💢 Anger'), ('💣', '💣 Bomb'), ('💥', '💥 Sparks'), ('💦', '💦 Splashing'), ('💨', '💨 Dash'), ('💫', '💫 Shooting Star'), ('💬', '💬 Speech Bubble'), ('💭', '💭 Thinky Cloud'), ('👓', '👓 Eyeglasses'), ('👔', '👔 Business Casual'), ('👕', '👕 T-Shirt'), ('👖', '👖 Jeans'), ('👗', '👗 Dress'), ('👘', '👘 Kimono'), ('👙', '👙 Bikini'), ('👚', '👚 Womans Clothes'), ('👛', '👛 Purse'), ('👜', '👜 Handbag'), ('👝', '👝 Pouch'), ('🎒', '🎒 Backpack'), ('👞', '👞 Mans Shoe'), ('👟', '👟 Running Shoe'), ('👠', '👠 Heels'), ('👡', '👡 Womans Sandal'), ('👢', '👢 Womans Boots'), ('👑', '👑 Crown'), ('👒', \"👒 Lady's Hat\"), ('🎩', '🎩 Top Hat'), ('💄', '💄 Lipstick'), ('💍', '💍 Proposal'), ('💎', '💎 Gem'), ('👹', '👹 Japanese Ogre'), ('👺', '👺 Japanese Goblin'), ('👻', '👻 Ghost'), ('💀', '💀 Skull'), ('👽', '👽 Alien'), ('👾', '👾 Space Invader'), ('💩', '💩 Pile of Poo'), ('🐵', '🐵 Monkey'), ('🙈', '🙈 See No Evil'), ('🙉', '🙉 Hear No Evil'), ('🙊', '🙊 Speak No Evil'), ('🐒', '🐒 Monkey'), ('🐶', '🐶 Dog'), ('🐕', '🐕 Dog'), ('🐩', '🐩 Poodle'), ('🐺', '🐺 Wolf'), ('🐱', '🐱 Cat'), ('😸', '😸 Grinning Cat with Smiling Eyes'), ('😹', '😹 Cat with Tears of Joy'), ('😺', '😺 Smiling Cat with Open Mouth'), ('😻', '😻 Smiling Cat with Heart Eyes'), ('😼', '😼 Cat with Wry Smile'), ('😽', '😽 Kissing Cat with Closed Eyes'), ('😾', '😾 Pouting Cat Face'), ('😿', '😿 Crying Cat Face'), ('🙀', '🙀 Weary Cat Face'), ('🐈', '🐈 Cat'), ('🐯', '🐯 Tiger'), ('🐅', '🐅 Tiger'), ('🐆', '🐆 Leopard'), ('🐴', '🐴 Horse'), ('🐎', '🐎 Horse'), ('🐮', '🐮 Cow'), ('🐂', '🐂 Ox'), ('🐃', '🐃 Water Buffalo'), ('🐄', '🐄 Cow'), ('🐷', '🐷 Pig'), ('🐖', '🐖 Pig'), ('🐗', '🐗 Boar'), ('🐽', '🐽 Pig Nose'), ('🐏', '🐏 Ram'), ('🐑', '🐑 Sheep'), ('🐐', '🐐 Goat'), ('🐪', '🐪 Dromedary Camel'), ('🐫', '🐫 Bactrian Camel'), ('🐘', '🐘 Elephant'), ('🐭', '🐭 Mouse'), ('🐁', '🐁 Mouse'), ('🐀', '🐀 Rat'), ('🐹', '🐹 Hamster'), ('🐰', '🐰 Rabbit'), ('🐇', '🐇 Rabbit'), ('🐻', '🐻 Bear'), ('🐨', '🐨 Koala'), ('🐼', '🐼 Panda'), ('🐾', '🐾 Paw Prints'), ('🐔', '🐔 Chicken'), ('🐓', '🐓 Rooster'), ('🐣', '🐣 Hatching'), ('🐤', '🐤 Chick'), ('🐥', '🐥 Front-Facing Baby Chick'), ('🐦', '🐦 Bird'), ('🐧', '🐧 Penguin'), ('🐸', '🐸 Frog'), ('🐊', '🐊 Croc'), ('🐢', '🐢 Turtle'), ('🐍', '🐍 Slithering'), ('🐲', '🐲 Dragon'), ('🐉', '🐉 Dragon'), ('🐳', '🐳 Whale'), ('🐋', '🐋 Whale'), ('🐬', '🐬 Dolphin'), ('🐟', '🐟 Fish'), ('🐠', '🐠 Fish'), ('🐡', '🐡 Blowfish'), ('🐙', '🐙 Octopus'), ('🐚', '🐚 Shell'), ('🐌', '🐌 Snail'), ('🐛', '🐛 Bug'), ('🐜', '🐜 Ant'), ('🐝', '🐝 Honeybee'), ('🐞', '🐞 Lady Beetle'), ('💐', '💐 Bouquet'), ('🌸', '🌸 Sakura'), ('💮', '💮 White Flower'), ('🌹', '🌹 Rose'), ('🌺', '🌺 Hibiscus'), ('🌻', '🌻 Sunflower'), ('🌼', '🌼 Blossom'), ('🌷', '🌷 Tulip'), ('🌱', '🌱 Seedling'), ('🌲', '🌲 Evergreen Tree'), ('🌳', '🌳 Deciduous Tree'), ('🌴', '🌴 Palm Tree'), ('🌵', '🌵 Cactus'), ('🌾', '🌾 Ear of Rice'), ('🌿', '🌿 Herb'), ('🍀', '🍀 Clover'), ('🍁', '🍁 Maple Leaf'), ('🍂', '🍂 Fallen Leaf'), ('🍃', '🍃 Blown Leaves'), ('🍇', '🍇 Grapes'), ('🍈', '🍈 Melon'), ('🍉', '🍉 Watermelon'), ('🍊', '🍊 Tangerine'), ('🍋', '🍋 Lemon'), ('🍌', '🍌 Banana'), ('🍍', '🍍 Pineapple'), ('🍎', '🍎 Red Apple'), ('🍏', '🍏 Green Apple'), ('🍐', '🍐 Pear'), ('🍑', '🍑 Peach'), ('🍒', '🍒 Cherries'), ('🍓', '🍓 Strawberry'), ('🍅', '🍅 Tomato'), ('🍆', '🍆 Eggplant'), ('🌽', '🌽 Corn'), ('🍄', '🍄 Mushroom'), ('🌰', '🌰 Chestnut'), ('🍞', '🍞 Bread'), ('🍖', '🍖 Meat on Bone'), ('🍗', '🍗 Poultry Leg'), ('🍔', '🍔 Hamburger'), ('🍟', '🍟 Fries'), ('🍕', '🍕 Pizza'), ('🍲', '🍲 Pot of Food'), ('🍱', '🍱 Bento Box'), ('🍘', '🍘 Rice Cracker'), ('🍙', '🍙 Rice Ball'), ('🍚', '🍚 Cooked Rice'), ('🍛', '🍛 Curry and Rice'), ('🍜', '🍜 Steaming Bowl'), ('🍝', '🍝 Spaghetti'), ('🍠', '🍠 Sweet Potato'), ('🍢', '🍢 Oden'), ('🍣', '🍣 Sushi'), ('🍤', '🍤 Fried Shrimp'), ('🍥', '🍥 Fish Cake With Swirl Design'), ('🍡', '🍡 Dango'), ('🍦', '🍦 Ice Cream'), ('🍧', '🍧 Shaved Ice'), ('🍨', '🍨 Ice Cream'), ('🍩', '🍩 Doughnut'), ('🍪', '🍪 Cookie'), ('🎂', '🎂 Birthday Cake'), ('🍰', '🍰 Shortcake'), ('🍫', '🍫 Chocolate Bar'), ('🍬', '🍬 Candy'), ('🍭', '🍭 Lollipop'), ('🍮', '🍮 Custard'), ('🍯', '🍯 Honey Pot'), ('🍼', '🍼 Baby Bottle'), ('🍵', '🍵 Teacup Without Handle'), ('🍶', '🍶 Sake Bottle and Cup'), ('🍷', '🍷 Wine Glass'), ('🍸', '🍸 Cocktail Glass'), ('🍹', '🍹 Tropical Drink'), ('🍺', '🍺 Beer'), ('🍻', '🍻 Clinking Beer Mugs'), ('🍴', '🍴 Fork & Knife'), ('🍳', '🍳 Cooking'), ('🌍', '🌍 Earth Globe Europe-Africa'), ('🌎', '🌎 Earth Globe Americas'), ('🌏', '🌏 Earth Globe Asia-Australia'), ('🌐', '🌐 Globe With Meridians'), ('🌋', '🌋 Volcano'), ('🗻', '🗻 Mount Fuji'), ('🏠', '🏠 House'), ('🏡', '🏡 House With Garden'), ('🏢', '🏢 Office'), ('🏣', '🏣 Japanese Post Office'), ('🏤', '🏤 European Post Office'), ('🏥', '🏥 Hospital'), ('🏦', '🏦 Bank'), ('🏨', '🏨 Hotel'), ('🏩', '🏩 Love Hotel'), ('🏪', '🏪 Convenience Store'), ('🏫', '🏫 School'), ('🏬', '🏬 Department Store'), ('🏭', '🏭 Factory'), ('🏯', '🏯 Japanese Castle'), ('🏰', '🏰 Castle'), ('💒', '💒 Wedding'), ('🗼', '🗼 Tokyo Tower'), ('🗽', '🗽 Liberty'), ('🗾', '🗾 Silhouette of Japan'), ('🌁', '🌁 Foggy'), ('🌃', '🌃 Night With Stars'), ('🌄', '🌄 Sunrise Over Mountains'), ('🌅', '🌅 Sunrise'), ('🌆', '🌆 Cityscape at Dusk'), ('🌇', '🌇 Sunset Over Buildings'), ('🌉', '🌉 Bridge at Night'), ('🌊', '🌊 Big Wave'), ('🗿', '🗿 Moyai'), ('🌌', '🌌 Milky Way'), ('🎠', '🎠 Carousel Horse'), ('🎡', '🎡 Ferris Wheel'), ('🎢', '🎢 Roller Coaster'), ('💈', '💈 Barber Pole'), ('🎪', '🎪 Circus Tent'), ('🎭', '🎭 Performing Arts'), ('🎨', '🎨 Palette'), ('🎰', '🎰 Slot Machine'), ('🚂', '🚂 Steam Locomotive'), ('🚃', '🚃 Railcar'), ('🚄', '🚄 Fast Train'), ('🚅', '🚅 Fast Train with Bullet Nose'), ('🚆', '🚆 Train'), ('🚇', '🚇 Metro'), ('🚈', '🚈 Light Rail'), ('🚉', '🚉 Station'), ('🚊', '🚊 Tram'), ('🚝', '🚝 Monorail'), ('🚞', '🚞 Mountain Railway'), ('🚋', '🚋 Tram Car'), ('🚌', '🚌 Bus'), ('🚍', '🚍 Bus'), ('🚎', '🚎 Trolleybus'), ('🚏', '🚏 Bus Stop'), ('🚐', '🚐 Minibus'), ('🚑', '🚑 Ambulance'), ('🚒', '🚒 Fire Engine'), ('🚓', '🚓 Police Car'), ('🚔', '🚔 Police Car'), ('🚕', '🚕 Taxi'), ('🚖', '🚖 Oncoming Taxi'), ('🚗', '🚗 Automobile'), ('🚘', '🚘 Automobile'), ('🚙', '🚙 Recreational Vehicle'), ('🚚', '🚚 Truck'), ('🚛', '🚛 Articulated Lorry'), ('🚜', '🚜 Tractor'), ('🚲', '🚲 Bicycle'), ('🚳', '🚳 No Bicycles'), ('🚨', '🚨 Alert Light'), ('🔱', '🔱 Trident'), ('🚣', '🚣 Rowboat'), ('🚤', '🚤 Speedboat'), ('🚢', '🚢 Ship'), ('💺', '💺 Seat'), ('🚁', '🚁 Helicopter'), ('🚟', '🚟 Suspension Railway'), ('🚠', '🚠 Sky Tram'), ('🚡', '🚡 Aerial Tramway'), ('🚀', '🚀 Rocket'), ('🏧', '🏧 ATM'), ('🚮', '🚮 Put Litter in Its Place'), ('🚥', '🚥 Horizontal Traffic Light'), ('🚦', '🚦 Traffic Light'), ('🚧', '🚧 Hazard Sign'), ('🚫', '🚫 Prohibited'), ('🚭', '🚭 No Smoking'), ('🚯', '🚯 Do Not Litter'), ('🚰', '🚰 Tap Water'), ('🚱', '🚱 Non-Potable Water'), ('🚷', '🚷 No Pedestrians'), ('🚸', '🚸 Children Crossing'), ('🚹', '🚹 Mens Symbol'), ('🚺', '🚺 Womens Symbol'), ('🚻', '🚻 Restroom'), ('🚼', '🚼 Baby Symbol'), ('🚾', '🚾 Water Closet'), ('🛂', '🛂 Passport Control'), ('🛃', '🛃 Customs'), ('🛄', '🛄 Baggage Claim'), ('🛅', '🛅 Left Luggage'), ('🚪', '🚪 Door'), ('🚽', '🚽 Toilet'), ('🚿', '🚿 Shower'), ('🛀', '🛀 Bath'), ('🛁', '🛁 Bathtub'), ('⏳', '⏳ Hourglass'), ('⏰', '⏰ Alarm Clock'), ('⏱', '⏱ Stopwatch'), ('⏲', '⏲ Timer Clock'), ('🕛', \"🕛 Twelve O'Clock\"), ('🕧', '🕧 Half Past Twelve'), ('🕐', \"🕐 One O'Clock\"), ('🕜', '🕜 Half Past One'), ('🕑', \"🕑 Two O'Clock\"), ('🕝', '🕝 Half Past Two'), ('🕒', \"🕒 Three O'Clock\"), ('🕞', '🕞 Half Past Three'), ('🕓', \"🕓 Four O'Clock\"), ('🕟', '🕟 Half Past Four'), ('🕔', \"🕔 Five O'Clock\"), ('🕠', '🕠 Half Past Five'), ('🕕', \"🕕 Six O'Clock\"), ('🕡', '🕡 Half Past Six'), ('🕖', \"🕖 Seven O'Clock\"), ('🕢', '🕢 Half Past Seven'), ('🕗', \"🕗 Eight O'Clock\"), ('🕣', '🕣 Half Past Eight'), ('🕘', \"🕘 Nine O'Clock\"), ('🕤', '🕤 Half Past Nine'), ('🕙', \"🕙 Ten O'Clock\"), ('🕥', '🕥 Half Past Ten'), ('🕚', \"🕚 Eleven O'Clock\"), ('🕦', '🕦 Half Past Eleven'), ('⛎', '⛎ Ophiuchus'), ('🌑', '🌑 New Moon'), ('🌒', '🌒 Waxing Crescent'), ('🌓', '🌓 First Quarter Moon Symbol'), ('🌔', '🌔 Waxing Gibbous'), ('🌕', '🌕 Full Moon'), ('🌖', '🌖 Waning Gibbous'), ('🌗', '🌗 Half Moon'), ('🌘', '🌘 Waning Crescent'), ('🌙', '🌙 Crescent Moon'), ('🌚', '🌚 New Moon With Face'), ('🌛', '🌛 First Quarter Moon With Face'), ('🌜', '🌜 Last Quarter Moon With Face'), ('🌝', '🌝 Full Moon With Face'), ('🌞', '🌞 Sun'), ('🌀', '🌀 Cyclone'), ('🌈', '🌈 Rainbow'), ('🌂', '🌂 Umbrella'), ('🌟', '🌟 Glowing Star'), ('🌠', '🌠 Shooting Star'), ('🔥', '🔥 Fire'), ('🎃', '🎃 Jack-O-Lantern'), ('🎄', '🎄 Presents Tree'), ('🎆', '🎆 Fireworks'), ('🎇', '🎇 Firework Sparkler'), ('✨', '✨ Sparkles'), ('🎈', '🎈 Balloon'), ('🎉', '🎉 Party Pop'), ('🎊', '🎊 Confetti Ball'), ('🎋', '🎋 Tanabata Tree'), ('🎌', '🎌 Crossed Flags'), ('🎍', '🎍 Pine Decoration'), ('🎎', '🎎 Japanese Dolls'), ('🎏', '🎏 Carp Streamer'), ('🎐', '🎐 Wind Chime'), ('🎑', '🎑 Moon Viewing Ceremony'), ('🎓', '🎓 Grad Cap'), ('🎯', '🎯 Bullseye'), ('🎴', '🎴 Flower Playing Cards'), ('🎀', '🎀 Ribbon'), ('🎁', '🎁 Wrapped Present'), ('🎫', '🎫 Ticket'), ('🏀', '🏀 Basketball'), ('🏈', '🏈 America Ball'), ('🏉', '🏉 Rugby Ball'), ('🎾', '🎾 Tennis'), ('🎱', '🎱 Billiards'), ('🎳', '🎳 Bowling'), ('🎣', '🎣 Fishing Pole and Fish'), ('🎽', '🎽 Running Shirt With Sash'), ('🎿', '🎿 Ski and Ski Boot'), ('🏂', '🏂 Snowboarder'), ('🏄', '🏄 Surfer'), ('🏇', '🏇 Horse Racing'), ('🏊', '🏊 Swimmer'), ('🚴', '🚴 Bicyclist'), ('🚵', '🚵 Mountain Bicyclist'), ('🏆', '🏆 Trophy'), ('🎮', '🎮 Video Game'), ('🎲', '🎲 Random Cube'), ('🃏', '🃏 Playing Card Black Joker'), ('🔇', '🔇 Speaker With Cancellation Stroke'), ('🔈', '🔈 Speaker'), ('🔉', '🔉 Speaker With One Sound Wave'), ('🔊', '🔊 Speaker With Three Sound Waves'), ('📢', '📢 Public Address Loudspeaker'), ('📣', '📣 Loud Phone'), ('📯', '📯 Horn'), ('🔔', '🔔 Bell'), ('🔕', '🔕 No Bells'), ('🔀', '🔀 Shuffle'), ('🔁', '🔁 Repeat'), ('🔂', '🔂 Repeat Once'), ('⏩', '⏩ Fast Forward'), ('⏭', '⏭ Next Track'), ('⏯', '⏯ Play/Pause'), ('⏪', '⏪ Rewind'), ('⏮', '⏮ Previous Track'), ('🔼', '🔼 Up-Pointing Small Red Triangle'), ('⏫', '⏫ Up to Top'), ('🔽', '🔽 Down-Pointing Small Red Triangle'), ('⏬', '⏬ Down to Bottom'), ('🎼', '🎼 Musical Score'), ('🎵', '🎵 Musical Note'), ('🎶', '🎶 Music Notes'), ('🎤', '🎤 Microphone'), ('🎧', '🎧 Headphone'), ('🎷', '🎷 Saxophone'), ('🎸', '🎸 Guitar'), ('🎹', '🎹 Keyboard'), ('🎺', '🎺 Trumpet'), ('🎻', '🎻 Violin'), ('📻', '📻 Boom Box'), ('📱', '📱 Internet Phone'), ('📳', '📳 Vibration Mode'), ('📴', '📴 Mobile Phone Off'), ('📲', '📲 Download to Phone'), ('📵', '📵 No Mobile Phones'), ('📞', '📞 Old Phone'), ('🔟', '🔟 Keycap Ten'), ('📶', '📶 Antenna With Bars'), ('📟', '📟 Pager'), ('📠', '📠 Fax Machine'), ('🔋', '🔋 Battery'), ('🔌', '🔌 Plug'), ('💻', '💻 Personal Computer'), ('💽', '💽 Minidisc'), ('💾', '💾 Floppy'), ('💿', '💿 Compact Disc'), ('📀', '📀 DVD'), ('🎥', '🎥 Movie Camera'), ('🎦', '🎦 Cinema'), ('🎬', '🎬 Clapper'), ('📺', '📺 Television'), ('📷', '📷 Camera'), ('📹', '📹 Video Camera'), ('📼', '📼 Videocassette'), ('🔅', '🔅 Low Brightness Symbol'), ('🔆', '🔆 High Brightness Symbol'), ('🔍', '🔍 Bigger Glass'), ('🔎', '🔎 Right-Pointing Magnifying Glass'), ('🔬', '🔬 Microscope'), ('🔭', '🔭 Telescope'), ('📡', '📡 Satellite Dish'), ('💡', '💡 Light Bulb'), ('🔦', '🔦 Electric Torch'), ('🏮', '🏮 Izakaya Lantern'), ('📔', '📔 Notebook With Decorative Cover'), ('📕', '📕 Closed Book'), ('📖', '📖 Open Book'), ('📗', '📗 Green Book'), ('📘', '📘 Blue Book'), ('📙', '📙 Orange Book'), ('📚', '📚 Books'), ('📓', '📓 Notebook'), ('📒', '📒 Ledger'), ('📃', '📃 Page With Curl'), ('📜', '📜 Scroll'), ('📄', '📄 Page Facing Up'), ('📰', '📰 Newspaper'), ('📑', '📑 Bookmark Tabs'), ('🔖', '🔖 Bookmark'), ('💰', '💰 Money Bag'), ('💴', '💴 Banknote With Yen Sign'), ('💵', '💵 Banknote With Dollar Sign'), ('💶', '💶 Banknote With Euro Sign'), ('💷', '💷 Banknote With Pound Sign'), ('💸', '💸 Flying Money'), ('💱', '💱 Currency Exchange'), ('💲', '💲 Heavy Dollar Sign'), ('💳', '💳 Credit Card'), ('💹', '💹 Upwards Trend in Yen'), ('📧', '📧 E-Mail Symbol'), ('📨', '📨 Incoming Envelope'), ('📩', '📩 Going Into Envelope'), ('📤', '📤 Outbox Tray'), ('📥', '📥 Inbox Tray'), ('📦', '📦 Package'), ('📫', '📫 Mailbox'), ('📪', '📪 Closed Mailbox With Lowered Flag'), ('📬', '📬 Open Mailbox With Raised Flag'), ('📭', '📭 Open Mailbox With Lowered Flag'), ('📮', '📮 Postbox'), ('📝', '📝 Memo'), ('💼', '💼 Briefcase'), ('📁', '📁 File Folder'), ('📂', '📂 Open File Folder'), ('📅', '📅 Dated'), ('📆', '📆 Tear-Off Calendar'), ('📇', '📇 Card Index'), ('📈', '📈 Up Trend'), ('📉', '📉 Down Trend'), ('📊', '📊 Bar Chart'), ('📋', '📋 Clipboard'), ('📌', '📌 Pushpin'), ('📍', '📍 Location'), ('📎', '📎 Paperclip'), ('📏', '📏 Straight Line'), ('📐', '📐 Three Sides'), ('📛', '📛 Name Badge'), ('🔒', '🔒 Lock'), ('🔓', '🔓 Open Lock'), ('🔏', '🔏 Lock With Ink Pen'), ('🔐', '🔐 Closed Lock With Key'), ('🔑', '🔑 Key'), ('🔨', '🔨 Hammer'), ('🔧', '🔧 Spanner'), ('🔩', '🔩 Calipers'), ('🔗', '🔗 Link Symbol'), ('💉', '💉 Syringe'), ('💊', '💊 Pill'), ('🔪', '🔪 Chef Knife'), ('🔫', '🔫 Pistol'), ('🚬', '🚬 Durry'), ('🏁', '🏁 Get Set Go'), ('🚩', '🚩 Triangular Flag on Post'), ('🇦🇫', '🇦🇫 Afghanistan'), ('🇦🇽', '🇦🇽 Åland Islands'), ('🇦🇱', '🇦🇱 Albania'), ('🇩🇿', '🇩🇿 Algeria'), ('🇦🇸', '🇦🇸 American Samoa'), ('🇦🇩', '🇦🇩 Andorra'), ('🇦🇴', '🇦🇴 Angola'), ('🇦🇮', '🇦🇮 Anguilla'), ('🇦🇶', '🇦🇶 Antarctica'), ('🇦🇬', '🇦🇬 Antigua & Barbuda'), ('🇦🇷', '🇦🇷 Argentina'), ('🇦🇲', '🇦🇲 Armenia'), ('🇦🇼', '🇦🇼 Aruba'), ('🇦🇨', '🇦🇨 Ascension Island'), ('🇦🇺', '🇦🇺 Australia'), ('🇦🇹', '🇦🇹 Austria'), ('🇦🇿', '🇦🇿 Azerbaijan'), ('🇧🇸', '🇧🇸 Bahamas'), ('🇧🇭', '🇧🇭 Bahrain'), ('🇧🇩', '🇧🇩 Bangladesh'), ('🇧🇧', '🇧🇧 Barbados'), ('🇧🇾', '🇧🇾 Belarus'), ('🇧🇪', '🇧🇪 Belgium'), ('🇧🇿', '🇧🇿 Belize'), ('🇧🇯', '🇧🇯 Benin'), ('🇧🇲', '🇧🇲 Bermuda'), ('🇧🇹', '🇧🇹 Bhutan'), ('🇧🇴', '🇧🇴 Bolivia'), ('🇧🇦', '🇧🇦 Bosnia & Herzegovina'), ('🇧🇼', '🇧🇼 Botswana'), ('🇧🇻', '🇧🇻 Bouvet Island'), ('🇧🇷', '🇧🇷 Brazil'), ('🇮🇴', '🇮🇴 British Indian Ocean Territory'), ('🇻🇬', '🇻🇬 British Virgin Islands'), ('🇧🇳', '🇧🇳 Brunei'), ('🇧🇬', '🇧🇬 Bulgaria'), ('🇧🇫', '🇧🇫 Burkina Faso'), ('🇧🇮', '🇧🇮 Burundi'), ('🇰🇭', '🇰🇭 Cambodia'), ('🇨🇲', '🇨🇲 Cameroon'), ('🇨🇦', '🇨🇦 Canada'), ('🇮🇨', '🇮🇨 Canary Islands'), ('🇨🇻', '🇨🇻 Cape Verde'), ('🇧🇶', '🇧🇶 Caribbean Netherlands'), ('🇰🇾', '🇰🇾 Cayman Islands'), ('🇨🇫', '🇨🇫 Central African Republic'), ('🇪🇦', '🇪🇦 Ceuta & Melilla'), ('🇹🇩', '🇹🇩 Chad'), ('🇨🇱', '🇨🇱 Chile'), ('🇨🇳', '🇨🇳 China'), ('🇨🇽', '🇨🇽 Christmas Island'), ('🇨🇵', '🇨🇵 Clipperton Island'), ('🇨🇨', '🇨🇨 Cocos Islands'), ('🇨🇴', '🇨🇴 Colombia'), ('🇰🇲', '🇰🇲 Comoros'), ('🇨🇬', '🇨🇬 Congo - Brazzaville'), ('🇨🇩', '🇨🇩 Congo - Kinshasa'), ('🇨🇰', '🇨🇰 Cook Islands'), ('🇨🇷', '🇨🇷 Costa Rica'), ('🇨🇮', '🇨🇮 Côte D’Ivoire'), ('🇭🇷', '🇭🇷 Croatia'), ('🇨🇺', '🇨🇺 Cuba'), ('🇨🇼', '🇨🇼 Curaçao'), ('🇨🇾', '🇨🇾 Cyprus'), ('🇨🇿', '🇨🇿 Czech Republic'), ('🇩🇰', '🇩🇰 Denmark'), ('🇩🇬', '🇩🇬 Diego Garcia'), ('🇩🇯', '🇩🇯 Djibouti'), ('🇩🇲', '🇩🇲 Dominica'), ('🇩🇴', '🇩🇴 Dominican Republic'), ('🇪🇨', '🇪🇨 Ecuador'), ('🇪🇬', '🇪🇬 Egypt'), ('🇸🇻', '🇸🇻 El Salvador'), ('🇬🇶', '🇬🇶 Equatorial Guinea'), ('🇪🇷', '🇪🇷 Eritrea'), ('🇪🇪', '🇪🇪 Estonia'), ('🇪🇹', '🇪🇹 Ethiopia'), ('🇪🇺', '🇪🇺 European Union'), ('🇫🇰', '🇫🇰 Falkland Islands'), ('🇫🇴', '🇫🇴 Faroe Islands'), ('🇫🇯', '🇫🇯 Fiji'), ('🇫🇮', '🇫🇮 Finland'), ('🇫🇷', '🇫🇷 France'), ('🇬🇫', '🇬🇫 French Guiana'), ('🇵🇫', '🇵🇫 French Polynesia'), ('🇹🇫', '🇹🇫 French Southern Territories'), ('🇬🇦', '🇬🇦 Gabon'), ('🇬🇲', '🇬🇲 Gambia'), ('🇬🇪', '🇬🇪 Georgia'), ('🇩🇪', '🇩🇪 Germany'), ('🇬🇭', '🇬🇭 Ghana'), ('🇬🇮', '🇬🇮 Gibraltar'), ('🇬🇷', '🇬🇷 Greece'), ('🇬🇱', '🇬🇱 Greenland'), ('🇬🇩', '🇬🇩 Grenada'), ('🇬🇵', '🇬🇵 Guadeloupe'), ('🇬🇺', '🇬🇺 Guam'), ('🇬🇹', '🇬🇹 Guatemala'), ('🇬🇬', '🇬🇬 Guernsey'), ('🇬🇳', '🇬🇳 Guinea'), ('🇬🇼', '🇬🇼 Guinea-Bissau'), ('🇬🇾', '🇬🇾 Guyana'), ('🇭🇹', '🇭🇹 Haiti'), ('🇭🇲', '🇭🇲 Heard & McDonald Islands'), ('🇭🇳', '🇭🇳 Honduras'), ('🇭🇰', '🇭🇰 Hong Kong'), ('🇭🇺', '🇭🇺 Hungary'), ('🇮🇸', '🇮🇸 Iceland'), ('🇮🇳', '🇮🇳 India'), ('🇮🇩', '🇮🇩 Indonesia'), ('🇮🇷', '🇮🇷 Iran'), ('🇮🇶', '🇮🇶 Iraq'), ('🇮🇪', '🇮🇪 Ireland'), ('🇮🇲', '🇮🇲 Isle of Man'), ('🇮🇱', '🇮🇱 Israel'), ('🇮🇹', '🇮🇹 Italy'), ('🇯🇲', '🇯🇲 Jamaica'), ('🇯🇵', '🇯🇵 Japan'), ('🇯🇪', '🇯🇪 Jersey'), ('🇯🇴', '🇯🇴 Jordan'), ('🇰🇿', '🇰🇿 Kazakhstan'), ('🇰🇪', '🇰🇪 Kenya'), ('🇰🇮', '🇰🇮 Kiribati'), ('🇽🇰', '🇽🇰 Kosovo'), ('🇰🇼', '🇰🇼 Kuwait'), ('🇰🇬', '🇰🇬 Kyrgyzstan'), ('🇱🇦', '🇱🇦 Laos'), ('🇱🇻', '🇱🇻 Latvia'), ('🇱🇧', '🇱🇧 Lebanon'), ('🇱🇸', '🇱🇸 Lesotho'), ('🇱🇷', '🇱🇷 Liberia'), ('🇱🇾', '🇱🇾 Libya'), ('🇱🇮', '🇱🇮 Liechtenstein'), ('🇱🇹', '🇱🇹 Lithuania'), ('🇱🇺', '🇱🇺 Luxembourg'), ('🇲🇴', '🇲🇴 Macau'), ('🇲🇰', '🇲🇰 Macedonia'), ('🇲🇬', '🇲🇬 Madagascar'), ('🇲🇼', '🇲🇼 Malawi'), ('🇲🇾', '🇲🇾 Malaysia'), ('🇲🇻', '🇲🇻 Maldives'), ('🇲🇱', '🇲🇱 Mali'), ('🇲🇹', '🇲🇹 Malta'), ('🇲🇭', '🇲🇭 Marshall Islands'), ('🇲🇶', '🇲🇶 Martinique'), ('🇲🇷', '🇲🇷 Mauritania'), ('🇲🇺', '🇲🇺 Mauritius'), ('🇾🇹', '🇾🇹 Mayotte'), ('🇲🇽', '🇲🇽 Mexico'), ('🇫🇲', '🇫🇲 Micronesia'), ('🇲🇩', '🇲🇩 Moldova'), ('🇲🇨', '🇲🇨 Monaco'), ('🇲🇳', '🇲🇳 Mongolia'), ('🇲🇪', '🇲🇪 Montenegro'), ('🇲🇸', '🇲🇸 Montserrat'), ('🇲🇦', '🇲🇦 Morocco'), ('🇲🇿', '🇲🇿 Mozambique'), ('🇲🇲', '🇲🇲 Myanmar'), ('🇳🇦', '🇳🇦 Namibia'), ('🇳🇷', '🇳🇷 Nauru'), ('🇳🇵', '🇳🇵 Nepal'), ('🇳🇱', '🇳🇱 Netherlands'), ('🇳🇨', '🇳🇨 New Caledonia'), ('🇳🇿', '🇳🇿 New Zealand'), ('🇳🇮', '🇳🇮 Nicaragua'), ('🇳🇪', '🇳🇪 Niger'), ('🇳🇬', '🇳🇬 Nigeria'), ('🇳🇺', '🇳🇺 Niue'), ('🇳🇫', '🇳🇫 Norfolk Island'), ('🇲🇵', '🇲🇵 Northern Mariana Islands'), ('🇰🇵', '🇰🇵 North Korea'), ('🇳🇴', '🇳🇴 Norway'), ('🇴🇲', '🇴🇲 Oman'), ('🇵🇰', '🇵🇰 Pakistan'), ('🇵🇼', '🇵🇼 Palau'), ('🇵🇸', '🇵🇸 Palestinian Territories'), ('🇵🇦', '🇵🇦 Panama'), ('🇵🇬', '🇵🇬 Papua New Guinea'), ('🇵🇾', '🇵🇾 Paraguay'), ('🇵🇪', '🇵🇪 Peru'), ('🇵🇭', '🇵🇭 Philippines'), ('🇵🇳', '🇵🇳 Pitcairn Islands'), ('🇵🇱', '🇵🇱 Poland'), ('🇵🇹', '🇵🇹 Portugal'), ('🇵🇷', '🇵🇷 Puerto Rico'), ('🇶🇦', '🇶🇦 Qatar'), ('🇷🇪', '🇷🇪 Réunion'), ('🇷🇴', '🇷🇴 Romania'), ('🇷🇺', '🇷🇺 Russia'), ('🇷🇼', '🇷🇼 Rwanda'), ('🇼🇸', '🇼🇸 Samoa'), ('🇸🇲', '🇸🇲 San Marino'), ('🇸🇹', '🇸🇹 São Tomé & Príncipe'), ('🇸🇦', '🇸🇦 Saudi Arabia'), ('🇸🇳', '🇸🇳 Senegal'), ('🇷🇸', '🇷🇸 Serbia'), ('🇸🇨', '🇸🇨 Seychelles'), ('🇸🇱', '🇸🇱 Sierra Leone'), ('🇸🇬', '🇸🇬 Singapore'), ('🇸🇽', '🇸🇽 Sint Maarten'), ('🇸🇰', '🇸🇰 Slovakia'), ('🇸🇮', '🇸🇮 Slovenia'), ('🇸🇧', '🇸🇧 Solomon Islands'), ('🇸🇴', '🇸🇴 Somalia'), ('🇿🇦', '🇿🇦 South Africa'), ('🇬🇸', '🇬🇸 South Georgia & South Sandwich Islands'), ('🇰🇷', '🇰🇷 South Korea'), ('🇸🇸', '🇸🇸 South Sudan'), ('🇪🇸', '🇪🇸 Spain'), ('🇱🇰', '🇱🇰 Sri Lanka'), ('🇧🇱', '🇧🇱 St. Barthélemy'), ('🇸🇭', '🇸🇭 St. Helena'), ('🇰🇳', '🇰🇳 St. Kitts & Nevis'), ('🇱🇨', '🇱🇨 St. Lucia'), ('🇲🇫', '🇲🇫 St. Martin'), ('🇵🇲', '🇵🇲 St. Pierre & Miquelon'), ('🇻🇨', '🇻🇨 St. Vincent & Grenadines'), ('🇸🇩', '🇸🇩 Sudan'), ('🇸🇷', '🇸🇷 Suriname'), ('🇸🇯', '🇸🇯 Svalbard & Jan Mayen'), ('🇸🇿', '🇸🇿 Swaziland'), ('🇸🇪', '🇸🇪 Sweden'), ('🇨🇭', '🇨🇭 Switzerland'), ('🇸🇾', '🇸🇾 Syria'), ('🇹🇼', '🇹🇼 Taiwan'), ('🇹🇯', '🇹🇯 Tajikistan'), ('🇹🇿', '🇹🇿 Tanzania'), ('🇹🇭', '🇹🇭 Thailand'), ('🇹🇱', '🇹🇱 Timor-Leste'), ('🇹🇬', '🇹🇬 Togo'), ('🇹🇰', '🇹🇰 Tokelau'), ('🇹🇴', '🇹🇴 Tonga'), ('🇹🇹', '🇹🇹 Trinidad & Tobago'), ('🇹🇦', '🇹🇦 Tristan Da Cunha'), ('🇹🇳', '🇹🇳 Tunisia'), ('🇹🇷', '🇹🇷 Turkey'), ('🇹🇲', '🇹🇲 Turkmenistan'), ('🇹🇨', '🇹🇨 Turks & Caicos Islands'), ('🇹🇻', '🇹🇻 Tuvalu'), ('🇺🇬', '🇺🇬 Uganda'), ('🇺🇦', '🇺🇦 Ukraine'), ('🇦🇪', '🇦🇪 United Arab Emirates'), ('🇬🇧', '🇬🇧 United Kingdom'), ('🇺🇸', '🇺🇸 United States'), ('🇺🇾', '🇺🇾 Uruguay'), ('🇺🇲', '🇺🇲 U.S. Outlying Islands'), ('🇻🇮', '🇻🇮 U.S. Virgin Islands'), ('🇺🇿', '🇺🇿 Uzbekistan'), ('🇻🇺', '🇻🇺 Vanuatu'), ('🇻🇦', '🇻🇦 Vatican City'), ('🇻🇪', '🇻🇪 Venezuela'), ('🇻🇳', '🇻🇳 Vietnam'), ('🇼🇫', '🇼🇫 Wallis & Futuna'), ('🇪🇭', '🇪🇭 Western Sahara'), ('🇾🇪', '🇾🇪 Yemen'), ('🇿🇲', '🇿🇲 Zambia'), ('🇿🇼', '🇿🇼 Zimbabwe'), ('🔃', '🔃 Clockwise Arrows'), ('🔄', '🔄 Anticlockwise Arrows'), ('🔙', '🔙 Back'), ('🔚', '🔚 End'), ('🔛', '🔛 On'), ('🔜', '🔜 Soon'), ('🔝', '🔝 Top'), ('🔰', '🔰 Beginner'), ('🔮', '🔮 Crystal Ball'), ('🔯', '🔯 Six Pointed Star With Middle Dot'), ('✅', '✅ White Heavy Check Mark'), ('❌', '❌ Cross'), ('❎', '❎ Negative Squared Cross Mark'), ('➕', '➕ Heavy Plus Sign'), ('➖', '➖ Heavy Minus Sign'), ('➗', '➗ Heavy Division Sign'), ('➰', '➰ Curly Loop'), ('➿', '➿ Double Curly Loop'), ('❓', '❓ Question'), ('❔', '❔ White Question Mark Ornament'), ('❕', '❕ White Exclamation Mark Ornament'), ('💯', '💯 Hundred Points'), ('🔞', '🔞 Over Eighteen'), ('🔠', '🔠 Latin Capital Letters'), ('🔡', '🔡 Latin Small Letters'), ('🔢', '🔢 Numbers'), ('🔣', '🔣 Symbols'), ('🔤', '🔤 Latin Letters'), ('🅰️', '🅰️ Squared A'), ('🆎', '🆎 Squared AB'), ('🅱️', '🅱️ Squared B'), ('🆑', '🆑 Squared CL'), ('🆒', '🆒 Cool Square'), ('🆓', '🆓 Squared Free'), ('🆔', '🆔 Squared ID'), ('🆕', '🆕 New Square'), ('🆖', '🆖 Squared NG'), ('🅾️', '🅾️ Squared O'), ('🆗', '🆗 OK Square'), ('🆘', '🆘 SOS Square'), ('🆙', '🆙 Squared Up!'), ('🆚', '🆚 Squared Vs'), ('🈁', '🈁 Squared Katakana Koko'), ('🈂️', '🈂️ Squared Katakana Sa'), ('🈷️', '🈷️ Squared 月 (Moon)'), ('🈶', '🈶 Squared 有 (Have)'), ('🉐', '🉐 Circled Ideograph Advantage'), ('🈹', '🈹 Squared CJK Unified Ideograph-5272'), ('🈲', '🈲 Squared CJK Unified Ideograph-7981'), ('🉑', '🉑 Circled 可 (Accept)'), ('🈸', '🈸 Squared CJK Unified Ideograph-7533'), ('🈴', '🈴 Squared CJK Unified Ideograph-5408'), ('🈳', '🈳 Squared CJK Unified Ideograph-7a7a'), ('🈺', '🈺 Squared CJK Unified Ideograph-55b6'), ('🈵', '🈵 Squared CJK Unified Ideograph-6e80'), ('🔶', '🔶 Large Orange Diamond'), ('🔷', '🔷 Large Blue Diamond'), ('🔸', '🔸 Small Orange Diamond'), ('🔹', '🔹 Small Blue Diamond'), ('🔺', '🔺 Up-Pointing Red Triangle'), ('🔻', '🔻 Down-Pointing Red Triangle'), ('💠', '💠 Diamond Shape With a Dot Inside'), ('🔘', '🔘 Radio Button'), ('🔲', '🔲 Black Square Button'), ('🔳', '🔳 White Square Button'), ('🔴', '🔴 Large Red Circle'), ('🔵', '🔵 Large Blue Circle'), ('😀', '😀 Grinning'), ('😗', '😗 Kissing'), ('😙', '😙 Smooch'), ('😑', '😑 True Neutral'), ('😮', '😮 Stunned'), ('😯', '😯 Hushed'), ('😴', '😴 Sleepy'), ('😛', '😛 Tongue'), ('😕', '😕 Confused'), ('😟', '😟 Worried'), ('😦', '😦 Frowning Face With Open Mouth'), ('😧', '😧 Anguish Face'), ('😬', '😬 Grimace'), ('🙂', '🙂 Slightly Smiling'), ('🙁', '🙁 Slightly Frowning'), ('🕵', '🕵 Spy'), ('🗣', '🗣 Speaking Head in Silhouette'), ('🕴', '🕴 Man in Business Suit Levitating'), ('🖕', '🖕 Middle Finger'), ('🖖', '🖖 Vulcan Hand'), ('🖐', '🖐 Raised Hand With Fingers Splayed'), ('👁', '👁 Eye'), ('🕳', '🕳 Hole'), ('🗯', '🗯 Right Anger Bubble'), ('🕶', '🕶 Sunglasses'), ('🛍', '🛍 Shopping'), ('🐿', '🐿 Chipmunk'), ('🕊', '🕊 Peace Dove'), ('🕷', '🕷 Spider'), ('🕸', '🕸 Spider Web'), ('🏵', '🏵 Rosette'), ('🌶', '🌶 Chilli'), ('🍽', '🍽 Fork and Knife With Plate'), ('🗺', '🗺 World Map'), ('🏔', '🏔 Snow Capped Mountain'), ('🏕', '🏕 Camping'), ('🏖', '🏖 Beach'), ('🏜', '🏜 Desert'), ('🏝', '🏝 Desert Island'), ('🏞', '🏞 National Park'), ('🏟', '🏟 Stadium'), ('🏛', '🏛 Architecture'), ('🏗', '🏗 Building Construction'), ('🏘', '🏘 House Buildings'), ('🏙', '🏙 Cityscape'), ('🏚', '🏚 Derelict House Building'), ('🖼', '🖼 Frame With Picture'), ('🛢', '🛢 Oil Drum'), ('🛣', '🛣 Motorway'), ('🛤', '🛤 Railway Track'), ('🛳', '🛳 Passenger Ship'), ('🛥', '🛥 Boat'), ('🛩', '🛩 Airplane'), ('🛫', '🛫 Airplane Departure'), ('🛬', '🛬 Airplane Arriving'), ('🛰', '🛰 Satellite'), ('🛎', '🛎 Service Bell'), ('🛌', '🛌 Bed'), ('🛏', '🛏 Bed'), ('🛋', '🛋 Couch and Lamp'), ('🕰', '🕰 Mantelpiece'), ('🌡', '🌡 Thermometer'), ('🌤', '🌤 Small Cloud'), ('🌥', '🌥 White Sun Behind Cloud'), ('🌦', '🌦 White Sun Behind Cloud With Rain'), ('🌧', '🌧 Cloud With Rain'), ('🌨', '🌨 Cloud With Snow'), ('🌩', '🌩 Lightning'), ('🌪', '🌪 Tornado'), ('🌫', '🌫 Fog'), ('🌬', '🌬 Blowing'), ('🎖', '🎖 Medal'), ('🎗', '🎗 Ribbon'), ('🎞', '🎞 Film'), ('🎟', '🎟 Admission Tickets'), ('🏷', '🏷 Label'), ('🏌', '🏌 Golfer'), ('🏋', '🏋 Lifting'), ('🏎', '🏎 Racing Car'), ('🏍', '🏍 Racing Motorcycle'), ('🏅', '🏅 Medal'), ('🕹', '🕹 Joystick'), ('⏸', '⏸ Double Vertical Bar'), ('⏹', '⏹ Black Square for Stop'), ('⏺', '⏺ Black Circle for Record'), ('🎙', '🎙 Microphone'), ('🎚', '🎚 Level Slider'), ('🎛', '🎛 Control Knobs'), ('🖥', '🖥 Desktop'), ('🖨', '🖨 Printer'), ('🖱', '🖱 Three Button Mouse'), ('🖲', '🖲 Trackball'), ('📽', '📽 Film Projector'), ('📸', '📸 Camera With Flash'), ('🕯', '🕯 Candle'), ('🗞', '🗞 Newspaper'), ('🗳', '🗳 Ballot Box With Ballot'), ('🖋', '🖋 Fancy Pen'), ('🖊', '🖊 Lower Left Ballpoint Pen'), ('🖌', '🖌 Lower Left Paintbrush'), ('🖍', '🖍 Lower Left Crayon'), ('🗂', '🗂 Card Index Dividers'), ('🗒', '🗒 Spiral Note Pad'), ('🗓', '🗓 Spiral Calendar Pad'), ('🖇', '🖇 Linked Paperclips'), ('🗃', '🗃 Card File Box'), ('🗄', '🗄 File Cabinet'), ('🗑', '🗑 Wastebasket'), ('🗝', '🗝 Old Key'), ('🛠', '🛠 Tools'), ('🗜', '🗜 Compression'), ('🗡', '🗡 Dagger'), ('🛡', '🛡 Shield'), ('🏳', '🏳 White Flag'), ('🏴', '🏴 Black Flag'), ('🕉', '🕉 Om Symbol'), ('🗨', '🗨 Left Speech Bubble'), ('🤗', '🤗 Hugging'), ('🤔', '🤔 Thinking'), ('🙄', '🙄 Rolling Eyes'), ('🤐', '🤐 Hushed'), ('🤓', '🤓 Nerd'), ('🙃', '🙃 Upside Down'), ('🤒', '🤒 Sick'), ('🤕', '🤕 Hurt Head'), ('🤑', '🤑 Money'), ('🏻', '🏻 Emoji Modifier 1-2'), ('🏼', '🏼 Emoji Modifier 3'), ('🏽', '🏽 Emoji Modifier 4'), ('🏾', '🏾 Emoji Modifier 5'), ('🏿', '🏿 Emoji Modifier 6'), ('🤘', '🤘 Rock On'), ('📿', '📿 Prayer Beads'), ('🤖', '🤖 Robot'), ('🦁', '🦁 Lion'), ('🦄', '🦄 Unicorn'), ('🦃', '🦃 Turkey'), ('🦀', '🦀 Crab'), ('🦂', '🦂 Scorpion'), ('🧀', '🧀 Mouse Trap'), ('🌭', '🌭 Hot Dog'), ('🌮', '🌮 Taco'), ('🌯', '🌯 Burrito'), ('🍿', '🍿 Popcorn'), ('🍾', '🍾 Popping Cork'), ('🏺', '🏺 Amphora'), ('🛐', '🛐 Place of Worship'), ('🕋', '🕋 Kaaba'), ('🕌', '🕌 Mosque'), ('🕍', '🕍 Synagogue'), ('🕎', '🕎 Menorah'), ('🏏', '🏏 Bat and Ball'), ('🏐', '🏐 Volleyball'), ('🏑', '🏑 Field Hockey'), ('🏒', '🏒 Ice Hockey'), ('🏓', '🏓 Table Tennis'), ('🏸', '🏸 Badminton'), ('🏹', '🏹 Archer'), ('🤣', '🤣 ROFL Face'), ('🤤', '🤤 Drooling'), ('🤢', '🤢 Nauseated'), ('🤧', '🤧 Sneezing'), ('🤠', '🤠 Cowboy'), ('🤡', '🤡 Clown'), ('🤥', '🤥 Lying'), ('🤴', '🤴 Prince'), ('🤵', '🤵 Tuxedo Man'), ('🤰', '🤰 Pregnant'), ('🤶', '🤶 Mrs. Claus'), ('🤦', '🤦 Facepalm'), ('🤷', '🤷 Shrugging'), ('🕺', '🕺 Man Dancing'), ('🤺', '🤺 Fencing'), ('🤸', '🤸 Cartwheel'), ('🤼', '🤼 Wrestling'), ('🤽', '🤽 Water Polo'), ('🤾', '🤾 Handball'), ('🤹', '🤹 Juggling'), ('🤳', '🤳 Selfie'), ('🤞', '🤞 Luck Hand'), ('🤙', '🤙 Call Me Hand'), ('🤛', '🤛 Left-Facing Fist'), ('🤜', '🤜 Right-Facing Fist'), ('🤚', '🤚 Raised Back of Hand'), ('🤝', '🤝 Business Hi'), ('🖤', '🖤 Black Heart'), ('🦍', '🦍 Gorilla'), ('🦊', '🦊 Fox'), ('🦌', '🦌 Deer'), ('🦏', '🦏 Rhinoceros'), ('🦇', '🦇 Bat'), ('🦅', '🦅 Eagle'), ('🦆', '🦆 Duck'), ('🦉', '🦉 Owl'), ('🦎', '🦎 Lizard'), ('🦈', '🦈 Shark'), ('🦐', '🦐 Shrimp'), ('🦑', '🦑 Squid'), ('🦋', '🦋 Butterfly'), ('🥀', '🥀 Wilted'), ('🥝', '🥝 Kiwifruit'), ('🥑', '🥑 Pricey Fruit'), ('🥔', '🥔 Potato'), ('🥕', '🥕 Carrot'), ('🥒', '🥒 Cucumber'), ('🥜', '🥜 Peanuts'), ('🥐', '🥐 Croissant'), ('🥖', '🥖 Bread Sword'), ('🥞', '🥞 Pancakes'), ('🥓', '🥓 Bacon'), ('🥙', '🥙 Stuffed Flatbread'), ('🥚', '🥚 Chicken Rock'), ('🥘', '🥘 Shallow Pan'), ('🥗', '🥗 Salad'), ('🥛', '🥛 Cow Juice'), ('🥂', '🥂 Clinking Glasses'), ('🥃', '🥃 Tumbler'), ('🥄', '🥄 Spoon'), ('🛴', '🛴 Scoot Scoot'), ('🛵', '🛵 Motor Scooter'), ('🛑', '🛑 Stop Sign'), ('🛶', '🛶 Canoe'), ('🥇', '🥇 Gold Medal'), ('🥈', '🥈 Silver Medal'), ('🥉', '🥉 Participation'), ('🥊', '🥊 Boxing'), ('🥋', '🥋 Martial Arts'), ('🥅', '🥅 Hashtag Goals'), ('🥁', '🥁 Drum Roll'), ('🛒', '🛒 Food Ute'), ('🤩', '🤩 Star Struck'), ('🤨', '🤨 Unexpected Face'), ('🤯', '🤯 Mind Blown'), ('🤪', '🤪 Zany Face'), ('🤬', '🤬 Swear Face'), ('🤮', '🤮 Vomiting'), ('🤫', '🤫 Shushing'), ('🤭', '🤭 Hand Over Mouth'), ('🧐', '🧐 Monocle'), ('🧒', '🧒 Child Face'), ('🧑', '🧑 Adult'), ('🧓', '🧓 Older Adult'), ('🧕', '🧕 Headscarf'), ('🧔', '🧔 Bearded Person'), ('🤱', '🤱 Breast Feeding'), ('🧙', '🧙 Mage'), ('🧚', '🧚 Fairy'), ('🧛', '🧛 Vampire'), ('🧜', '🧜 Merperson'), ('🧝', '🧝 Cosplay'), ('🧞', '🧞 Genie'), ('🧟', '🧟 Unalive'), ('🧖', '🧖 Steamy Room'), ('🧗', '🧗 Person Climbing'), ('🧘', '🧘 Lotus Position'), ('🤟', '🤟 Love-You Gesture'), ('🤲', '🤲 Palms Up Together'), ('🧠', '🧠 Big Brain'), ('🧡', '🧡 Orange Heart'), ('🧣', '🧣 Neck Hider'), ('🧤', '🧤 Hand Socks'), ('🧥', '🧥 Coat'), ('🧦', '🧦 Feet Gloves'), ('🧢', '🧢 Billed Cap'), ('🦓', '🦓 Zebra'), ('🦒', '🦒 Giraffe'), ('🦔', '🦔 Spikehog'), ('🦕', '🦕 Long Neck'), ('🦖', '🦖 Big Roar'), ('🦗', '🦗 Cricket'), ('🥥', '🥥 Coconut'), ('🥦', '🥦 Tiny Tree'), ('🥨', '🥨 Twisty Bread'), ('🥩', '🥩 Cut of Meat'), ('🥪', '🥪 Sandwich'), ('🥣', '🥣 Bowl With Spoon'), ('🥫', '🥫 Canned Good'), ('🥟', '🥟 Dumpling'), ('🥠', '🥠 Tasty Future'), ('🥡', '🥡 Takeout Box'), ('🥧', '🥧 Pie'), ('🥤', '🥤 Cup With Straw'), ('🥢', '🥢 Chopsticks'), ('🛸', '🛸 Alien Plane'), ('🛷', '🛷 Sled'), ('🥌', '🥌 Curling'), ('🥰', '🥰 Smiling Face With 3 Hearts'), ('🥵', '🥵 Overheated'), ('🥶', '🥶 Freezing Face'), ('🥴', '🥴 Woozy Face'), ('🥳', '🥳 Party Face'), ('🥺', '🥺 Pleading Face'), ('🦵', '🦵 Leg'), ('🦶', '🦶 Foot'), ('🦷', '🦷 Tooth'), ('🦴', '🦴 Bone'), ('🦸', '🦸 Superhero'), ('🦹', '🦹 Supervillain'), ('🦝', '🦝 Trash Bandit'), ('🦙', '🦙 Llama'), ('🦛', '🦛 Hippopotamus'), ('🦘', '🦘 Kangaroo'), ('🦡', '🦡 Badger'), ('🦢', '🦢 Swan'), ('🦚', '🦚 Peacock'), ('🦜', '🦜 Parrot'), ('🦟', '🦟 Mosquito'), ('🦠', '🦠 Microbe'), ('🥭', '🥭 Mango'), ('🥬', '🥬 Leafy Green'), ('🥯', '🥯 Bagel'), ('🧂', '🧂 Salty'), ('🥮', '🥮 Moon Cake'), ('🦞', '🦞 Lobster'), ('🧁', '🧁 Cupcake'), ('🧭', '🧭 Compass'), ('🧱', '🧱 Brick'), ('🛹', '🛹 Skateboard'), ('🧳', '🧳 Baggage'), ('🧨', '🧨 Firework'), ('🧧', '🧧 Red Envelope'), ('🥎', '🥎 Softball'), ('🥏', '🥏 Throwing Disc'), ('🥍', '🥍 Lacrosse'), ('🧿', '🧿 Nazar Amulet'), ('🧩', '🧩 Puzzle Piece'), ('🧸', '🧸 Teddy Bear'), ('🧵', '🧵 Thread'), ('🧶', '🧶 Yarn Ball'), ('🥽', '🥽 The Goggles'), ('🥼', '🥼 Lab Coat'), ('🥾', '🥾 Hiking Boot'), ('🥿', '🥿 Flat Shoe'), ('🧮', '🧮 Abacus'), ('🧾', '🧾 Receipt'), ('🧰', '🧰 Toolbox'), ('🧲', '🧲 Magnet'), ('🧪', '🧪 Test Tube'), ('🧫', '🧫 Petri Dish'), ('🧬', '🧬 DNA'), ('🧴', '🧴 Lotion'), ('🧷', '🧷 Safety Pin'), ('🧹', '🧹 Broom'), ('🧺', '🧺 Basket'), ('🧻', '🧻 Roll of Paper'), ('🧼', '🧼 Soap'), ('🧽', '🧽 Fun sponge'), ('🧯', '🧯 Anti-fire Can')], default=None, max_length=3, null=True, verbose_name='emoji'),\n        ),",
        "detail": "tabbycat.participants.migrations.0015_auto_20200614_1831",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.participants.migrations.0016_auto_20200705_1317",
        "description": "tabbycat.participants.migrations.0016_auto_20200705_1317",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('participants', '0015_auto_20200614_1831'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='person',\n            name='email',\n            field=models.EmailField(blank=True, max_length=254, null=True, verbose_name='email address'),\n        ),",
        "detail": "tabbycat.participants.migrations.0016_auto_20200705_1317",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.participants.migrations.0017_auto_20200724_0231",
        "description": "tabbycat.participants.migrations.0017_auto_20200724_0231",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        # originally depended on 0016_auto_20200705_1317; changed to 0014 so\n        # that it can be placed on the hotfix branch\n        ('participants', '0014_auto_20200613_2006'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='team',\n            name='long_name',",
        "detail": "tabbycat.participants.migrations.0017_auto_20200724_0231",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.participants.migrations.0018_merge_20200904_1733",
        "description": "tabbycat.participants.migrations.0018_merge_20200904_1733",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('participants', '0017_auto_20200724_0231'),\n        ('participants', '0016_auto_20200705_1317'),\n    ]\n    operations = [\n    ]",
        "detail": "tabbycat.participants.migrations.0018_merge_20200904_1733",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.participants.migrations.0019_auto_20201216_1415",
        "description": "tabbycat.participants.migrations.0019_auto_20201216_1415",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('participants', '0018_merge_20200904_1733'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='team',\n            name='short_name',\n            field=models.CharField(editable=False, help_text='The decoded name shown in the draw, including institution name. (This is autogenerated.)', max_length=56, verbose_name='short name'),\n        ),",
        "detail": "tabbycat.participants.migrations.0019_auto_20201216_1415",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.participants.migrations.0020_person_code_name",
        "description": "tabbycat.participants.migrations.0020_person_code_name",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('participants', '0019_auto_20201216_1415'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='person',\n            name='code_name',\n            field=models.CharField(blank=True, default='', help_text='Name used to obscure real name on public-facing pages', max_length=25, verbose_name='code name'),\n        ),",
        "detail": "tabbycat.participants.migrations.0020_person_code_name",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.participants.migrations.0021_team_seed",
        "description": "tabbycat.participants.migrations.0021_team_seed",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('participants', '0020_person_code_name'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='team',\n            name='seed',\n            field=models.PositiveIntegerField(blank=True, help_text='Used as initial ranking to power-pair the first round', null=True, verbose_name='seed'),\n        ),",
        "detail": "tabbycat.participants.migrations.0021_team_seed",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.participants.migrations.0022_rename_team_tournament_institution_short_reference_participant_tournam_160efa_idx_and_more",
        "description": "tabbycat.participants.migrations.0022_rename_team_tournament_institution_short_reference_participant_tournam_160efa_idx_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('adjallocation', '0010_alter_adjudicatoradjudicatorconflict_unique_together_and_more'),\n        ('breakqual', '0006_alter_breakcategory_unique_together_and_more'),\n        ('participants', '0021_team_seed'),\n        ('tournaments', '0012_alter_round_unique_together_and_more'),\n    ]\n    operations = [\n        migrations.RenameIndex(\n            model_name='team',",
        "detail": "tabbycat.participants.migrations.0022_rename_team_tournament_institution_short_reference_participant_tournam_160efa_idx_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.participants.migrations.0023_alter_unique_together_and_team_emoji",
        "description": "tabbycat.participants.migrations.0023_alter_unique_together_and_team_emoji",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\n            \"participants\",\n            \"0022_rename_team_tournament_institution_short_reference_participant_tournam_160efa_idx_and_more\",\n        ),\n    ]\n    operations = [\n        migrations.AlterUniqueTogether(\n            name=\"institution\",",
        "detail": "tabbycat.participants.migrations.0023_alter_unique_together_and_team_emoji",
        "documentation": {}
    },
    {
        "label": "team_record_link",
        "kind": 2,
        "importPath": "tabbycat.participants.templatetags.participant_link",
        "description": "tabbycat.participants.templatetags.participant_link",
        "peekOfCode": "def team_record_link(context, team, admin, style=True):\n    \"\"\"Team record links are used often, so this template tag just reduces\n    clutter in templates, in particular in translated strings.\"\"\"\n    if not team or not context['tournament']:\n        return \"\"\n    if use_team_code_names(context['tournament'], admin, user=context['user']):\n        name = team.code_name\n    else:\n        name = team.short_name\n    if admin:",
        "detail": "tabbycat.participants.templatetags.participant_link",
        "documentation": {}
    },
    {
        "label": "adj_record_link",
        "kind": 2,
        "importPath": "tabbycat.participants.templatetags.participant_link",
        "description": "tabbycat.participants.templatetags.participant_link",
        "peekOfCode": "def adj_record_link(context, adj, admin):\n    if not adj or not context['tournament']:\n        return \"\"\n    if admin:\n        url = reverse_tournament('participants-adjudicator-record', context['tournament'], kwargs={'pk': adj.pk})\n    else:\n        url = reverse_tournament('participants-public-adjudicator-record', context['tournament'], kwargs={'pk': adj.pk})\n    return mark_safe(url)",
        "detail": "tabbycat.participants.templatetags.participant_link",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 5,
        "importPath": "tabbycat.participants.templatetags.participant_link",
        "description": "tabbycat.participants.templatetags.participant_link",
        "peekOfCode": "register = template.Library()\n@register.simple_tag(takes_context=True)\ndef team_record_link(context, team, admin, style=True):\n    \"\"\"Team record links are used often, so this template tag just reduces\n    clutter in templates, in particular in translated strings.\"\"\"\n    if not team or not context['tournament']:\n        return \"\"\n    if use_team_code_names(context['tournament'], admin, user=context['user']):\n        name = team.code_name\n    else:",
        "detail": "tabbycat.participants.templatetags.participant_link",
        "documentation": {}
    },
    {
        "label": "team_name_for_data_entry",
        "kind": 2,
        "importPath": "tabbycat.participants.templatetags.team_name_for_data_entry",
        "description": "tabbycat.participants.templatetags.team_name_for_data_entry",
        "peekOfCode": "def team_name_for_data_entry(team, config):\n    \"\"\"Returns the team name appropriate for data entry.\n    `config` is the value returned by options.utils.use_team_code_names_data_entry();\n    see that docstring for more details.\"\"\"\n    if not team:\n        return \"\"\n    if config == 'code':\n        return team.code_name\n    elif config == 'both':\n        return mark_safe(gettext(\"%(code_name)s <em>(%(real_name)s)</em>\") % {",
        "detail": "tabbycat.participants.templatetags.team_name_for_data_entry",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 5,
        "importPath": "tabbycat.participants.templatetags.team_name_for_data_entry",
        "description": "tabbycat.participants.templatetags.team_name_for_data_entry",
        "peekOfCode": "register = template.Library()\n@register.simple_tag\ndef team_name_for_data_entry(team, config):\n    \"\"\"Returns the team name appropriate for data entry.\n    `config` is the value returned by options.utils.use_team_code_names_data_entry();\n    see that docstring for more details.\"\"\"\n    if not team:\n        return \"\"\n    if config == 'code':\n        return team.code_name",
        "detail": "tabbycat.participants.templatetags.team_name_for_data_entry",
        "documentation": {}
    },
    {
        "label": "TestParticipantLookup",
        "kind": 6,
        "importPath": "tabbycat.participants.tests.test_lookup",
        "description": "tabbycat.participants.tests.test_lookup",
        "peekOfCode": "class TestParticipantLookup(TestCase):\n    def setUp(self):\n        self.tournament = Tournament.objects.create(slug=\"main\")\n        self.region = Region.objects.create()\n        self.institution = Institution.objects.create(name=\"An Institution\", code=\"Inst\",\n                region=self.region)\n        # team1 uses institution prefix, team2 does not\n        self.team1 = Team.objects.create(institution=self.institution, reference=\"The First\",\n                short_reference=\"1\", use_institution_prefix=True, tournament=self.tournament)\n        self.team2 = Team.objects.create(institution=self.institution, reference=\"The Second\",",
        "detail": "tabbycat.participants.tests.test_lookup",
        "documentation": {}
    },
    {
        "label": "TestInstitution",
        "kind": 6,
        "importPath": "tabbycat.participants.tests.test_models",
        "description": "tabbycat.participants.tests.test_models",
        "peekOfCode": "class TestInstitution(BaseMinimalTournamentTestCase):\n    def test_objects(self):\n        self.assertEqual(4, Institution.objects.count())\nclass TestAdjudicator(BaseMinimalTournamentTestCase):\n    def test_objects(self):\n        self.assertEqual(8, Adjudicator.objects.count())",
        "detail": "tabbycat.participants.tests.test_models",
        "documentation": {}
    },
    {
        "label": "TestAdjudicator",
        "kind": 6,
        "importPath": "tabbycat.participants.tests.test_models",
        "description": "tabbycat.participants.tests.test_models",
        "peekOfCode": "class TestAdjudicator(BaseMinimalTournamentTestCase):\n    def test_objects(self):\n        self.assertEqual(8, Adjudicator.objects.count())",
        "detail": "tabbycat.participants.tests.test_models",
        "documentation": {}
    },
    {
        "label": "PublicParticipantsViewTestCase",
        "kind": 6,
        "importPath": "tabbycat.participants.tests.test_views",
        "description": "tabbycat.participants.tests.test_views",
        "peekOfCode": "class PublicParticipantsViewTestCase(ConditionalTableViewTestsMixin, TestCase):\n    view_toggle_preference = 'public_features__public_participants'\n    view_name = 'participants-public-list'\n    def expected_row_counts(self):\n        return [\n            self.tournament.adjudicator_set.count(),\n            Speaker.objects.filter(team__tournament=self.tournament).count(),\n        ]",
        "detail": "tabbycat.participants.tests.test_views",
        "documentation": {}
    },
    {
        "label": "RegionAdmin",
        "kind": 6,
        "importPath": "tabbycat.participants.admin",
        "description": "tabbycat.participants.admin",
        "peekOfCode": "class RegionAdmin(ModelAdmin):\n    pass\n# ==============================================================================\n# Institution\n# ==============================================================================\n@admin.register(Institution)\nclass InstitutionAdmin(ModelAdmin):\n    list_display = ('name', 'code', 'region')\n    list_select_related = ('region',)\n    ordering = ('name', )",
        "detail": "tabbycat.participants.admin",
        "documentation": {}
    },
    {
        "label": "InstitutionAdmin",
        "kind": 6,
        "importPath": "tabbycat.participants.admin",
        "description": "tabbycat.participants.admin",
        "peekOfCode": "class InstitutionAdmin(ModelAdmin):\n    list_display = ('name', 'code', 'region')\n    list_select_related = ('region',)\n    ordering = ('name', )\n    search_fields = ('name', )\n# ==============================================================================\n# Speaker\n# ==============================================================================\n@admin.register(Speaker)\nclass SpeakerAdmin(ModelAdmin):",
        "detail": "tabbycat.participants.admin",
        "documentation": {}
    },
    {
        "label": "SpeakerAdmin",
        "kind": 6,
        "importPath": "tabbycat.participants.admin",
        "description": "tabbycat.participants.admin",
        "peekOfCode": "class SpeakerAdmin(ModelAdmin):\n    list_filter = ('team__tournament', 'team__institution')\n    list_display = ('name', 'team', 'gender')\n    search_fields = ('name', 'team__short_name', 'team__long_name',\n                     'team__institution__name', 'team__institution__code')\n    raw_id_fields = ('team', )\n# ==============================================================================\n# Speaker\n# ==============================================================================\n@admin.register(SpeakerCategory)",
        "detail": "tabbycat.participants.admin",
        "documentation": {}
    },
    {
        "label": "SpeakerCategoryAdmin",
        "kind": 6,
        "importPath": "tabbycat.participants.admin",
        "description": "tabbycat.participants.admin",
        "peekOfCode": "class SpeakerCategoryAdmin(ModelAdmin):\n    list_display = ('name', 'slug', 'seq', 'tournament', 'limit', 'public')\n    list_filter = ('tournament', )\n    ordering = ('tournament', 'seq')\n# ==============================================================================\n# Teams\n# ==============================================================================\nclass SpeakerInline(admin.TabularInline):\n    model = Speaker\n    fields = ('name', 'email', 'gender')",
        "detail": "tabbycat.participants.admin",
        "documentation": {}
    },
    {
        "label": "SpeakerInline",
        "kind": 6,
        "importPath": "tabbycat.participants.admin",
        "description": "tabbycat.participants.admin",
        "peekOfCode": "class SpeakerInline(admin.TabularInline):\n    model = Speaker\n    fields = ('name', 'email', 'gender')\nclass TeamSideAllocationInline(admin.TabularInline):\n    model = TeamSideAllocation\nclass TeamForm(forms.ModelForm):\n    class Meta:\n        model = Team\n        fields = '__all__'\n    def clean_url_key(self):",
        "detail": "tabbycat.participants.admin",
        "documentation": {}
    },
    {
        "label": "TeamSideAllocationInline",
        "kind": 6,
        "importPath": "tabbycat.participants.admin",
        "description": "tabbycat.participants.admin",
        "peekOfCode": "class TeamSideAllocationInline(admin.TabularInline):\n    model = TeamSideAllocation\nclass TeamForm(forms.ModelForm):\n    class Meta:\n        model = Team\n        fields = '__all__'\n    def clean_url_key(self):\n        # So that the url key can be unique and be blank\n        return self.cleaned_data['url_key'] or None\n    def clean_break_categories(self):",
        "detail": "tabbycat.participants.admin",
        "documentation": {}
    },
    {
        "label": "TeamForm",
        "kind": 6,
        "importPath": "tabbycat.participants.admin",
        "description": "tabbycat.participants.admin",
        "peekOfCode": "class TeamForm(forms.ModelForm):\n    class Meta:\n        model = Team\n        fields = '__all__'\n    def clean_url_key(self):\n        # So that the url key can be unique and be blank\n        return self.cleaned_data['url_key'] or None\n    def clean_break_categories(self):\n        categories = self.cleaned_data['break_categories']\n        tournament = self.cleaned_data.get('tournament')",
        "detail": "tabbycat.participants.admin",
        "documentation": {}
    },
    {
        "label": "TeamInstitutionConflictInline",
        "kind": 6,
        "importPath": "tabbycat.participants.admin",
        "description": "tabbycat.participants.admin",
        "peekOfCode": "class TeamInstitutionConflictInline(admin.TabularInline):\n    model = TeamInstitutionConflict\n    extra = 1\nclass AdjudicatorTeamConflictInline(admin.TabularInline):\n    model = AdjudicatorTeamConflict\n    extra = 1\n    def formfield_for_foreignkey(self, db_field, request, **kwargs):\n        if db_field.name == 'team':\n            kwargs[\"queryset\"] = Team.objects.select_related('tournament')\n        return super().formfield_for_foreignkey(db_field, request, **kwargs)",
        "detail": "tabbycat.participants.admin",
        "documentation": {}
    },
    {
        "label": "AdjudicatorTeamConflictInline",
        "kind": 6,
        "importPath": "tabbycat.participants.admin",
        "description": "tabbycat.participants.admin",
        "peekOfCode": "class AdjudicatorTeamConflictInline(admin.TabularInline):\n    model = AdjudicatorTeamConflict\n    extra = 1\n    def formfield_for_foreignkey(self, db_field, request, **kwargs):\n        if db_field.name == 'team':\n            kwargs[\"queryset\"] = Team.objects.select_related('tournament')\n        return super().formfield_for_foreignkey(db_field, request, **kwargs)\n@admin.register(Team)\nclass TeamAdmin(ModelAdmin):\n    form = TeamForm",
        "detail": "tabbycat.participants.admin",
        "documentation": {}
    },
    {
        "label": "TeamAdmin",
        "kind": 6,
        "importPath": "tabbycat.participants.admin",
        "description": "tabbycat.participants.admin",
        "peekOfCode": "class TeamAdmin(ModelAdmin):\n    form = TeamForm\n    list_display = ('long_name', 'short_name', 'emoji_code', 'institution',\n                    'tournament')\n    search_fields = ('reference', 'short_name', 'code_name', 'institution__name',\n                     'institution__code', 'tournament__name')\n    list_filter = ('tournament', 'institution', 'break_categories')\n    inlines = (SpeakerInline, TeamSideAllocationInline, VenueConstraintInline,\n               AdjudicatorTeamConflictInline, TeamInstitutionConflictInline,\n               RoundAvailabilityInline)",
        "detail": "tabbycat.participants.admin",
        "documentation": {}
    },
    {
        "label": "AdjudicatorAdjudicatorConflictInline",
        "kind": 6,
        "importPath": "tabbycat.participants.admin",
        "description": "tabbycat.participants.admin",
        "peekOfCode": "class AdjudicatorAdjudicatorConflictInline(admin.TabularInline):\n    model = AdjudicatorAdjudicatorConflict\n    fk_name = \"adjudicator1\"\n    extra = 1\n    raw_id_fields = ('adjudicator2',)\nclass AdjudicatorInstitutionConflictInline(admin.TabularInline):\n    model = AdjudicatorInstitutionConflict\n    extra = 1\nclass AdjudicatorBaseScoreHistoryInline(admin.TabularInline):\n    model = AdjudicatorBaseScoreHistory",
        "detail": "tabbycat.participants.admin",
        "documentation": {}
    },
    {
        "label": "AdjudicatorInstitutionConflictInline",
        "kind": 6,
        "importPath": "tabbycat.participants.admin",
        "description": "tabbycat.participants.admin",
        "peekOfCode": "class AdjudicatorInstitutionConflictInline(admin.TabularInline):\n    model = AdjudicatorInstitutionConflict\n    extra = 1\nclass AdjudicatorBaseScoreHistoryInline(admin.TabularInline):\n    model = AdjudicatorBaseScoreHistory\n    extra = 1\nclass AdjudicatorForm(forms.ModelForm):\n    class Meta:\n        model = Adjudicator\n        fields = '__all__'",
        "detail": "tabbycat.participants.admin",
        "documentation": {}
    },
    {
        "label": "AdjudicatorBaseScoreHistoryInline",
        "kind": 6,
        "importPath": "tabbycat.participants.admin",
        "description": "tabbycat.participants.admin",
        "peekOfCode": "class AdjudicatorBaseScoreHistoryInline(admin.TabularInline):\n    model = AdjudicatorBaseScoreHistory\n    extra = 1\nclass AdjudicatorForm(forms.ModelForm):\n    class Meta:\n        model = Adjudicator\n        fields = '__all__'\n    def clean_url_key(self):\n        # So that the url key can be unique and be blank\n        return self.cleaned_data['url_key'] or None",
        "detail": "tabbycat.participants.admin",
        "documentation": {}
    },
    {
        "label": "AdjudicatorForm",
        "kind": 6,
        "importPath": "tabbycat.participants.admin",
        "description": "tabbycat.participants.admin",
        "peekOfCode": "class AdjudicatorForm(forms.ModelForm):\n    class Meta:\n        model = Adjudicator\n        fields = '__all__'\n    def clean_url_key(self):\n        # So that the url key can be unique and be blank\n        return self.cleaned_data['url_key'] or None\n@admin.register(Adjudicator)\nclass AdjudicatorAdmin(ModelAdmin):\n    form = AdjudicatorForm",
        "detail": "tabbycat.participants.admin",
        "documentation": {}
    },
    {
        "label": "AdjudicatorAdmin",
        "kind": 6,
        "importPath": "tabbycat.participants.admin",
        "description": "tabbycat.participants.admin",
        "peekOfCode": "class AdjudicatorAdmin(ModelAdmin):\n    form = AdjudicatorForm\n    list_display = ('name', 'institution', 'tournament', 'trainee',\n                    'independent', 'adj_core', 'gender', 'base_score')\n    search_fields = ('name', 'tournament__name', 'institution__name', 'institution__code')\n    list_filter = ('tournament', 'institution')\n    list_editable = ('independent', 'adj_core', 'trainee', 'base_score')\n    inlines = (AdjudicatorTeamConflictInline, AdjudicatorInstitutionConflictInline,\n               AdjudicatorAdjudicatorConflictInline, AdjudicatorBaseScoreHistoryInline,\n               RoundAvailabilityInline)",
        "detail": "tabbycat.participants.admin",
        "documentation": {}
    },
    {
        "label": "ParticipantsConfig",
        "kind": 6,
        "importPath": "tabbycat.participants.apps",
        "description": "tabbycat.participants.apps",
        "peekOfCode": "class ParticipantsConfig(AppConfig):\n    name = 'participants'\n    verbose_name = _(\"Participants\")\n    def ready(self):\n        from . import signals  # noqa: F401",
        "detail": "tabbycat.participants.apps",
        "documentation": {}
    },
    {
        "label": "set_emoji",
        "kind": 2,
        "importPath": "tabbycat.participants.emoji",
        "description": "tabbycat.participants.emoji",
        "peekOfCode": "def set_emoji(teams, tournament):\n    \"\"\"Sets the emoji of every team in `teams` to a randomly chosen and unique\n    emoji.  Every team in `teams` must be from the same tournament, and that\n    tournament must be provided as the second argument.\"\"\"\n    used_emoji = tournament.team_set.filter(emoji__isnull=False).values_list('emoji', flat=True)\n    unused_emoji = [e for e in EMOJI_RANDOM_OPTIONS if e[0] not in used_emoji]\n    if len(teams) > len(unused_emoji):\n        teams = teams[:len(unused_emoji)]\n    emojis = random.sample(unused_emoji, len(teams))\n    for team, emoji in zip(teams, emojis):",
        "detail": "tabbycat.participants.emoji",
        "documentation": {}
    },
    {
        "label": "pick_unused_emoji",
        "kind": 2,
        "importPath": "tabbycat.participants.emoji",
        "description": "tabbycat.participants.emoji",
        "peekOfCode": "def pick_unused_emoji(tournament_id=None) -> Tuple[Optional[str], Optional[str]]:\n    \"\"\"Picks an emoji that is not already in use by any team in the database. If\n    no emoji are left, it returns `None`.\"\"\"\n    from .models import Team\n    teams = Team.objects.filter(emoji__isnull=False)\n    if tournament_id is not None:\n        teams = teams.filter(tournament_id=tournament_id)\n    unused_emoji = [e for e in EMOJI_RANDOM_OPTIONS if e[0] not in teams.values_list('emoji', flat=True)]\n    try:\n        return random.choice(unused_emoji)",
        "detail": "tabbycat.participants.emoji",
        "documentation": {}
    },
    {
        "label": "populate_code_names_from_emoji",
        "kind": 2,
        "importPath": "tabbycat.participants.emoji",
        "description": "tabbycat.participants.emoji",
        "peekOfCode": "def populate_code_names_from_emoji(teams, overwrite=True):\n    \"\"\"Populates team code names based on existing emoji.\"\"\"\n    count = 0\n    for team in teams:\n        try:\n            new_code_name = EMOJI_NAMES[team.emoji]\n        except KeyError:\n            logger.warning(\"Unrecognized emoji for team %s: %s (%#x)\", team.short_name, team.emoji, ord(team.emoji))\n            continue\n        if team.code_name:",
        "detail": "tabbycat.participants.emoji",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "tabbycat.participants.emoji",
        "description": "tabbycat.participants.emoji",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef set_emoji(teams, tournament):\n    \"\"\"Sets the emoji of every team in `teams` to a randomly chosen and unique\n    emoji.  Every team in `teams` must be from the same tournament, and that\n    tournament must be provided as the second argument.\"\"\"\n    used_emoji = tournament.team_set.filter(emoji__isnull=False).values_list('emoji', flat=True)\n    unused_emoji = [e for e in EMOJI_RANDOM_OPTIONS if e[0] not in used_emoji]\n    if len(teams) > len(unused_emoji):\n        teams = teams[:len(unused_emoji)]\n    emojis = random.sample(unused_emoji, len(teams))",
        "detail": "tabbycat.participants.emoji",
        "documentation": {}
    },
    {
        "label": "EMOJI_LIST",
        "kind": 5,
        "importPath": "tabbycat.participants.emoji",
        "description": "tabbycat.participants.emoji",
        "peekOfCode": "EMOJI_LIST = (\n    # emoji,\tinclude in random choices, description\n    # Use tab not space after first comma, as emoji sometimes have different widths\n    # Unicode Version 1.1\n    (\"☺️\",\tFalse, \"White Smiling\"),                    # doesn't show\n    (\"☹\",\tFalse, \"White Frowning\"),                   # doesn't show\n    (\"☝️\",\tFalse, \"White Up Pointing Index\"),          # doesn't show\n    (\"✌️\",\tFalse, \"Victory Hand\"),                     # doesn't show\n    (\"✍\",\tFalse, \"Writing Hand\"),                     # doesn't show\n    (\"❤️\",\tFalse, \"Heavy Black Heart\"),                # doesn't show",
        "detail": "tabbycat.participants.emoji",
        "documentation": {}
    },
    {
        "label": "EMOJI_FIELD_CHOICES",
        "kind": 5,
        "importPath": "tabbycat.participants.emoji",
        "description": "tabbycat.participants.emoji",
        "peekOfCode": "EMOJI_FIELD_CHOICES = [(emoji, emoji + \" \" + name) for emoji, _, name in EMOJI_LIST]\n# The random options are a reduced set\nEMOJI_RANDOM_OPTIONS = [(emoji, name) for emoji, include, name in EMOJI_LIST if include]\nEMOJI_NAMES = {emoji: name for emoji, _, name in EMOJI_LIST}\nEMOJI_BY_NAME = {name: emoji for emoji, _, name in EMOJI_LIST}",
        "detail": "tabbycat.participants.emoji",
        "documentation": {}
    },
    {
        "label": "EMOJI_RANDOM_OPTIONS",
        "kind": 5,
        "importPath": "tabbycat.participants.emoji",
        "description": "tabbycat.participants.emoji",
        "peekOfCode": "EMOJI_RANDOM_OPTIONS = [(emoji, name) for emoji, include, name in EMOJI_LIST if include]\nEMOJI_NAMES = {emoji: name for emoji, _, name in EMOJI_LIST}\nEMOJI_BY_NAME = {name: emoji for emoji, _, name in EMOJI_LIST}",
        "detail": "tabbycat.participants.emoji",
        "documentation": {}
    },
    {
        "label": "EMOJI_NAMES",
        "kind": 5,
        "importPath": "tabbycat.participants.emoji",
        "description": "tabbycat.participants.emoji",
        "peekOfCode": "EMOJI_NAMES = {emoji: name for emoji, _, name in EMOJI_LIST}\nEMOJI_BY_NAME = {name: emoji for emoji, _, name in EMOJI_LIST}",
        "detail": "tabbycat.participants.emoji",
        "documentation": {}
    },
    {
        "label": "EMOJI_BY_NAME",
        "kind": 5,
        "importPath": "tabbycat.participants.emoji",
        "description": "tabbycat.participants.emoji",
        "peekOfCode": "EMOJI_BY_NAME = {name: emoji for emoji, _, name in EMOJI_LIST}",
        "detail": "tabbycat.participants.emoji",
        "documentation": {}
    },
    {
        "label": "Region",
        "kind": 6,
        "importPath": "tabbycat.participants.models",
        "description": "tabbycat.participants.models",
        "peekOfCode": "class Region(models.Model):\n    name = models.CharField(db_index=True, max_length=100,\n        verbose_name=_(\"name\"))\n    class Meta:\n        verbose_name = _(\"region\")\n        verbose_name_plural = _(\"regions\")\n    def __str__(self):\n        return '%s' % self.name\nclass InstitutionManager(LookupByNameFieldsMixin, models.Manager):\n    name_fields = ['code', 'name']",
        "detail": "tabbycat.participants.models",
        "documentation": {}
    },
    {
        "label": "InstitutionManager",
        "kind": 6,
        "importPath": "tabbycat.participants.models",
        "description": "tabbycat.participants.models",
        "peekOfCode": "class InstitutionManager(LookupByNameFieldsMixin, models.Manager):\n    name_fields = ['code', 'name']\nclass Institution(models.Model):\n    name = models.CharField(max_length=100,\n        verbose_name=_(\"name\"),\n        # Translators: Change the examples to institutions native to your language; keep consistent between strings\n        help_text=_(\"The institution's full name, e.g., \\\"University of Cambridge\\\", \\\"Victoria University of Wellington\\\"\"))\n    code = models.CharField(max_length=20,\n        verbose_name=_(\"code\"),\n        # Translators: Change the examples to institutions native to your language; keep consistent between strings",
        "detail": "tabbycat.participants.models",
        "documentation": {}
    },
    {
        "label": "Institution",
        "kind": 6,
        "importPath": "tabbycat.participants.models",
        "description": "tabbycat.participants.models",
        "peekOfCode": "class Institution(models.Model):\n    name = models.CharField(max_length=100,\n        verbose_name=_(\"name\"),\n        # Translators: Change the examples to institutions native to your language; keep consistent between strings\n        help_text=_(\"The institution's full name, e.g., \\\"University of Cambridge\\\", \\\"Victoria University of Wellington\\\"\"))\n    code = models.CharField(max_length=20,\n        verbose_name=_(\"code\"),\n        # Translators: Change the examples to institutions native to your language; keep consistent between strings\n        help_text=_(\"What the institution is typically called for short, e.g., \\\"Cambridge\\\", \\\"Vic Wellington\\\"\"))\n    region = models.ForeignKey(Region, models.SET_NULL, blank=True, null=True,",
        "detail": "tabbycat.participants.models",
        "documentation": {}
    },
    {
        "label": "SpeakerCategory",
        "kind": 6,
        "importPath": "tabbycat.participants.models",
        "description": "tabbycat.participants.models",
        "peekOfCode": "class SpeakerCategory(models.Model):\n    tournament = models.ForeignKey('tournaments.Tournament', models.CASCADE,\n        verbose_name=_(\"tournament\"))\n    name = models.CharField(max_length=50,\n        verbose_name=_(\"name\"),\n        # Translators: Translate ESL to the acronym for \"<target language> as a second/foreign language\", not \"English\"\n        help_text=_(\"Name to be displayed, e.g., \\\"Novice\\\", \\\"ESL\\\"\"))\n    slug = models.SlugField(\n        verbose_name=_(\"slug\"),\n        # Translators: Translate esl to the acronym for \"<target language> as a second/foreign language\", not \"English\"",
        "detail": "tabbycat.participants.models",
        "documentation": {}
    },
    {
        "label": "Person",
        "kind": 6,
        "importPath": "tabbycat.participants.models",
        "description": "tabbycat.participants.models",
        "peekOfCode": "class Person(models.Model):\n    name = models.CharField(max_length=70, db_index=True,\n        verbose_name=_(\"name\"))\n    email = models.EmailField(blank=True, null=True,\n        verbose_name=_(\"email address\"))\n    phone = models.CharField(max_length=40, blank=True,\n        verbose_name=_(\"phone\"))\n    anonymous = models.BooleanField(default=False,\n        verbose_name=_(\"anonymous\"),\n        help_text=_(\"Anonymous persons will have their name and team redacted on public tab releases\"))",
        "detail": "tabbycat.participants.models",
        "documentation": {}
    },
    {
        "label": "TeamManager",
        "kind": 6,
        "importPath": "tabbycat.participants.models",
        "description": "tabbycat.participants.models",
        "peekOfCode": "class TeamManager(LookupByNameFieldsMixin, models.Manager):\n    name_fields = ['short_name', 'long_name']\n    def get_queryset(self):\n        return super().get_queryset().select_related('institution')\nclass Team(models.Model):\n    reference = models.CharField(blank=True, max_length=150,\n        verbose_name=_(\"full name/suffix\"),\n        help_text=_(\"Do not include institution name (see \\\"uses institutional prefix\\\" below)\"))\n    short_reference = models.CharField(blank=True, max_length=35,\n        verbose_name=_(\"short name/suffix\"),",
        "detail": "tabbycat.participants.models",
        "documentation": {}
    },
    {
        "label": "Team",
        "kind": 6,
        "importPath": "tabbycat.participants.models",
        "description": "tabbycat.participants.models",
        "peekOfCode": "class Team(models.Model):\n    reference = models.CharField(blank=True, max_length=150,\n        verbose_name=_(\"full name/suffix\"),\n        help_text=_(\"Do not include institution name (see \\\"uses institutional prefix\\\" below)\"))\n    short_reference = models.CharField(blank=True, max_length=35,\n        verbose_name=_(\"short name/suffix\"),\n        help_text=_(\"The decoded name shown in the draw, not including institution name (see \\\"uses institutional prefix\\\" below)\"))\n    code_name = models.CharField(blank=True, max_length=150,\n        verbose_name=_(\"code name\"),\n        help_text=_(\"Name used to obscure institutional identity on public-facing pages\"))",
        "detail": "tabbycat.participants.models",
        "documentation": {}
    },
    {
        "label": "Speaker",
        "kind": 6,
        "importPath": "tabbycat.participants.models",
        "description": "tabbycat.participants.models",
        "peekOfCode": "class Speaker(Person):\n    team = models.ForeignKey(Team, models.CASCADE,\n        verbose_name=_(\"team\"))\n    categories = models.ManyToManyField(SpeakerCategory, blank=True,\n        verbose_name=_(\"speaker categories\"))\n    class Meta:\n        verbose_name = _(\"speaker\")\n        verbose_name_plural = _(\"speakers\")\n    def __str__(self):\n        return str(self.name)",
        "detail": "tabbycat.participants.models",
        "documentation": {}
    },
    {
        "label": "AdjudicatorManager",
        "kind": 6,
        "importPath": "tabbycat.participants.models",
        "description": "tabbycat.participants.models",
        "peekOfCode": "class AdjudicatorManager(models.Manager):\n    use_for_related_fields = True\n    def get_queryset(self):\n        return super(AdjudicatorManager, self).get_queryset().select_related('institution')\nclass Adjudicator(Person):\n    institution = models.ForeignKey(Institution, models.SET_NULL, blank=True, null=True,\n        verbose_name=_(\"institution\"))\n    # cascade to avoid unattached adjudicator pollution when deleting tournaments\n    tournament = models.ForeignKey('tournaments.Tournament', models.CASCADE, blank=True, null=True,\n        verbose_name=_(\"tournament\"),",
        "detail": "tabbycat.participants.models",
        "documentation": {}
    },
    {
        "label": "Adjudicator",
        "kind": 6,
        "importPath": "tabbycat.participants.models",
        "description": "tabbycat.participants.models",
        "peekOfCode": "class Adjudicator(Person):\n    institution = models.ForeignKey(Institution, models.SET_NULL, blank=True, null=True,\n        verbose_name=_(\"institution\"))\n    # cascade to avoid unattached adjudicator pollution when deleting tournaments\n    tournament = models.ForeignKey('tournaments.Tournament', models.CASCADE, blank=True, null=True,\n        verbose_name=_(\"tournament\"),\n        help_text=_(\"Adjudicators not assigned to any tournament can be shared between tournaments\"))\n    base_score = models.FloatField(default=0,\n        verbose_name=_(\"base score\"))\n    institution_conflicts = models.ManyToManyField('Institution',",
        "detail": "tabbycat.participants.models",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "tabbycat.participants.models",
        "description": "tabbycat.participants.models",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass Region(models.Model):\n    name = models.CharField(db_index=True, max_length=100,\n        verbose_name=_(\"name\"))\n    class Meta:\n        verbose_name = _(\"region\")\n        verbose_name_plural = _(\"regions\")\n    def __str__(self):\n        return '%s' % self.name\nclass InstitutionManager(LookupByNameFieldsMixin, models.Manager):",
        "detail": "tabbycat.participants.models",
        "documentation": {}
    },
    {
        "label": "populate_win_counts",
        "kind": 2,
        "importPath": "tabbycat.participants.prefetch",
        "description": "tabbycat.participants.prefetch",
        "peekOfCode": "def populate_win_counts(teams, round=None):\n    \"\"\"Populates the `_win_count` and `_points` attributes of the teams in\n    `teams`. Operates in-place.\"\"\"\n    teams_by_id = {team.id: team for team in teams}\n    teams_annotated = Team.objects.filter(id__in=teams_by_id.keys()).annotate(\n        win_count_annotation=WinsMetricAnnotator().get_annotation(round=round),\n        points_annotation=Coalesce(PointsMetricAnnotator().get_annotation(round=round), Value(0)),\n    )\n    for team in teams_annotated:\n        teams_by_id[team.id]._wins_count = team.win_count_annotation",
        "detail": "tabbycat.participants.prefetch",
        "documentation": {}
    },
    {
        "label": "populate_feedback_scores",
        "kind": 2,
        "importPath": "tabbycat.participants.prefetch",
        "description": "tabbycat.participants.prefetch",
        "peekOfCode": "def populate_feedback_scores(adjudicators):\n    \"\"\"Populates the `_feedback_score_cache` attribute of the adjudicators\n    in `adjudicators`.\n    Operates in-place.\"\"\"\n    adjs_by_id = {adj.id: adj for adj in adjudicators}\n    adjfeedbacks = AdjudicatorFeedback.objects.filter(\n        adjudicator_id__in=adjs_by_id.keys(),\n        confirmed=True,\n        ignored=False,\n    ).exclude(source_adjudicator__type=DebateAdjudicator.TYPE_TRAINEE)",
        "detail": "tabbycat.participants.prefetch",
        "documentation": {}
    },
    {
        "label": "SpeakerSerializer",
        "kind": 6,
        "importPath": "tabbycat.participants.serializers",
        "description": "tabbycat.participants.serializers",
        "peekOfCode": "class SpeakerSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Speaker\n        fields = ('id', 'name', 'gender')\nclass SpeakerCategorySerializer(serializers.ModelSerializer):\n    class Meta:\n        model = SpeakerCategory\n        fields = ('name',)\nclass InstitutionSerializer(serializers.ModelSerializer):\n    region = serializers.PrimaryKeyRelatedField(read_only=True)",
        "detail": "tabbycat.participants.serializers",
        "documentation": {}
    },
    {
        "label": "SpeakerCategorySerializer",
        "kind": 6,
        "importPath": "tabbycat.participants.serializers",
        "description": "tabbycat.participants.serializers",
        "peekOfCode": "class SpeakerCategorySerializer(serializers.ModelSerializer):\n    class Meta:\n        model = SpeakerCategory\n        fields = ('name',)\nclass InstitutionSerializer(serializers.ModelSerializer):\n    region = serializers.PrimaryKeyRelatedField(read_only=True)\n    class Meta:\n        model = Institution\n        fields = ('id', 'name', 'code', 'region')\nclass AdjudicatorSerializer(serializers.ModelSerializer):",
        "detail": "tabbycat.participants.serializers",
        "documentation": {}
    },
    {
        "label": "InstitutionSerializer",
        "kind": 6,
        "importPath": "tabbycat.participants.serializers",
        "description": "tabbycat.participants.serializers",
        "peekOfCode": "class InstitutionSerializer(serializers.ModelSerializer):\n    region = serializers.PrimaryKeyRelatedField(read_only=True)\n    class Meta:\n        model = Institution\n        fields = ('id', 'name', 'code', 'region')\nclass AdjudicatorSerializer(serializers.ModelSerializer):\n    institution = serializers.PrimaryKeyRelatedField(read_only=True)\n    name = serializers.SerializerMethodField(read_only=True)\n    def get_name(self, obj):\n        return escape(obj.name)",
        "detail": "tabbycat.participants.serializers",
        "documentation": {}
    },
    {
        "label": "AdjudicatorSerializer",
        "kind": 6,
        "importPath": "tabbycat.participants.serializers",
        "description": "tabbycat.participants.serializers",
        "peekOfCode": "class AdjudicatorSerializer(serializers.ModelSerializer):\n    institution = serializers.PrimaryKeyRelatedField(read_only=True)\n    name = serializers.SerializerMethodField(read_only=True)\n    def get_name(self, obj):\n        return escape(obj.name)\n    class Meta:\n        model = Adjudicator\n        fields = ('id', 'name', 'gender', 'institution')\nclass TeamSerializer(serializers.ModelSerializer):\n    institution = serializers.PrimaryKeyRelatedField(read_only=True)",
        "detail": "tabbycat.participants.serializers",
        "documentation": {}
    },
    {
        "label": "TeamSerializer",
        "kind": 6,
        "importPath": "tabbycat.participants.serializers",
        "description": "tabbycat.participants.serializers",
        "peekOfCode": "class TeamSerializer(serializers.ModelSerializer):\n    institution = serializers.PrimaryKeyRelatedField(read_only=True)\n    speakers = SpeakerSerializer(read_only=True, many=True)\n    points = serializers.SerializerMethodField(read_only=True)\n    break_categories = serializers.PrimaryKeyRelatedField(read_only=True, many=True)\n    def get_points(self, obj):\n        return obj.points_count\n    class Meta:\n        model = Team\n        fields = ('id', 'short_name', 'long_name', 'code_name', 'points',",
        "detail": "tabbycat.participants.serializers",
        "documentation": {}
    },
    {
        "label": "update_team_names_from_institution",
        "kind": 2,
        "importPath": "tabbycat.participants.signals",
        "description": "tabbycat.participants.signals",
        "peekOfCode": "def update_team_names_from_institution(sender, instance, created, **kwargs):\n    teams = instance.team_set.all()\n    if len(teams) > 0:\n        logger.info(\"Updating names of all %d teams from institution %s\" % (len(teams), instance.name))\n        for team in teams:\n            team.save()",
        "detail": "tabbycat.participants.signals",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "tabbycat.participants.signals",
        "description": "tabbycat.participants.signals",
        "peekOfCode": "logger = logging.getLogger(__name__)\n@receiver(post_save, sender=Institution)\ndef update_team_names_from_institution(sender, instance, created, **kwargs):\n    teams = instance.team_set.all()\n    if len(teams) > 0:\n        logger.info(\"Updating names of all %d teams from institution %s\" % (len(teams), instance.name))\n        for team in teams:\n            team.save()",
        "detail": "tabbycat.participants.signals",
        "documentation": {}
    },
    {
        "label": "TeamResultTableBuilder",
        "kind": 6,
        "importPath": "tabbycat.participants.tables",
        "description": "tabbycat.participants.tables",
        "peekOfCode": "class TeamResultTableBuilder(TabbycatTableBuilder):\n    def add_cumulative_team_points_column(self, teamscores):\n        \"\"\"It is assumed that `teamscores` is ordered by round number; the\n        caller must ensure that this is the case.\"\"\"\n        cumul = 0\n        data = []\n        for teamscore in teamscores:\n            if teamscore.points is None:\n                data.append(\"—\")\n            else:",
        "detail": "tabbycat.participants.tables",
        "documentation": {}
    },
    {
        "label": "AdjudicatorDebateTable",
        "kind": 6,
        "importPath": "tabbycat.participants.tables",
        "description": "tabbycat.participants.tables",
        "peekOfCode": "class AdjudicatorDebateTable:\n    @classmethod\n    def get_table(cls, view, participant):\n        \"\"\"On adjudicator record pages, the table is the previous debates table.\"\"\"\n        table = TabbycatTableBuilder(view=view, title=view.table_title, sort_key=\"round\")\n        debateadjs = DebateAdjudicator.objects.filter(\n            adjudicator=participant,\n            debate__round__tournament=view.tournament,\n        ).select_related(\n            'debate__round', 'debate__round__tournament',",
        "detail": "tabbycat.participants.tables",
        "documentation": {}
    },
    {
        "label": "TeamDebateTable",
        "kind": 6,
        "importPath": "tabbycat.participants.tables",
        "description": "tabbycat.participants.tables",
        "peekOfCode": "class TeamDebateTable:\n    @classmethod\n    def get_table(cls, view, participant):\n        \"\"\"On team record pages, the table is the results table.\"\"\"\n        table = TeamResultTableBuilder(view=view, title=view.table_title, sort_key=\"round\")\n        tournament = view.tournament\n        teamscores = TeamScore.objects.filter(\n            debate_team__team=participant,\n            ballot_submission__confirmed=True,\n        ).select_related(",
        "detail": "tabbycat.participants.tables",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "tabbycat.participants.urls_admin",
        "description": "tabbycat.participants.urls_admin",
        "peekOfCode": "urlpatterns = [\n    path('list/',\n        views.AdminParticipantsListView.as_view(),\n        name='participants-list'),\n    path('institutions/',\n        views.AdminInstitutionsListView.as_view(),\n        name='participants-institutions-list'),\n    path('code-names/',\n        views.AdminCodeNamesListView.as_view(),\n        name='participants-code-names-list'),",
        "detail": "tabbycat.participants.urls_admin",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "tabbycat.participants.urls_assistant",
        "description": "tabbycat.participants.urls_assistant",
        "peekOfCode": "urlpatterns = [\n    path('list/',\n        views.AssistantParticipantsListView.as_view(),\n        name='participants-assistant-list'),\n    path('institutions/',\n        views.AssistantInstitutionsListView.as_view(),\n        name='participants-assistant-institutions-list'),\n    path('code-names/',\n        views.AssistantCodeNamesListView.as_view(),\n        name='participants-assistant-code-names-list'),",
        "detail": "tabbycat.participants.urls_assistant",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "tabbycat.participants.urls_public",
        "description": "tabbycat.participants.urls_public",
        "peekOfCode": "urlpatterns = [\n    path('list/',\n        views.PublicParticipantsListView.as_view(),\n        name='participants-public-list'),\n    path('institutions/',\n        views.PublicInstitutionsListView.as_view(),\n        name='participants-public-institutions-list'),\n    path('team/<int:pk>/',\n        views.PublicTeamRecordView.as_view(),\n        name='participants-public-team-record'),",
        "detail": "tabbycat.participants.urls_public",
        "documentation": {}
    },
    {
        "label": "regions_ordered",
        "kind": 2,
        "importPath": "tabbycat.participants.utils",
        "description": "tabbycat.participants.utils",
        "peekOfCode": "def regions_ordered(t):\n    \"\"\"Need to redo the region IDs so the CSS classes will be consistent. This\n    assumes there aren't huge amounts of regions, or dramatically different\n    regions between tournaments (which holds for big tournaments uses)\"\"\"\n    regions = Region.objects.all().order_by('name')\n    data = [{\n        'seq': count % 9,  # There are 9 available colours\n        'name': r.name,\n        'id': r.id,\n    } for count, r in enumerate(regions)]",
        "detail": "tabbycat.participants.utils",
        "documentation": {}
    },
    {
        "label": "annotate_side_count_kwargs",
        "kind": 2,
        "importPath": "tabbycat.participants.utils",
        "description": "tabbycat.participants.utils",
        "peekOfCode": "def annotate_side_count_kwargs(sides, seq):\n    \"\"\"Returns keyword arguments that can be passed into an annotate() call on a\n    Team queryset, that will provide side counts for each side given in `sides`.\n    Example usage:\n        kwargs = annotate_side_count_kwargs(tournament.sides, round.seq)\n        teams = tournament.team_set.annotate(**kwargs)\n        for team in teams:\n            print(team.aff_count, team.neg_count)\n    \"\"\"\n    return {'%s_count' % side: Count('debateteam', filter=Q(",
        "detail": "tabbycat.participants.utils",
        "documentation": {}
    },
    {
        "label": "get_side_history",
        "kind": 2,
        "importPath": "tabbycat.participants.utils",
        "description": "tabbycat.participants.utils",
        "peekOfCode": "def get_side_history(teams, sides, seq):\n    \"\"\"Returns a dict where keys are the team IDs in `teams`, and values are\n    lists of integers of the same length as `sides`, being the number of debates\n    that team has had on the corresponding side in `sides`, up to and including\n    the given `seq` (of a round).\"\"\"\n    team_ids = [team.id for team in teams]\n    queryset = Team.objects.filter(id__in=team_ids).prefetch_related(\n        'debateteam_set__debate__round',\n    ).annotate(\n        **annotate_side_count_kwargs(sides, seq))",
        "detail": "tabbycat.participants.utils",
        "documentation": {}
    },
    {
        "label": "populate_code_names",
        "kind": 2,
        "importPath": "tabbycat.participants.utils",
        "description": "tabbycat.participants.utils",
        "peekOfCode": "def populate_code_names(people, length=8, num_attempts=10):\n    \"\"\"Populates the code name field for every instance in the given QuerySet.\"\"\"\n    chars = string.digits\n    existing_keys = list(Person.objects.exclude(code_name__isnull=True).values_list('code_name', flat=True))\n    for person in people:\n        for i in range(num_attempts):\n            new_key = generate_identifier_string(chars, length)\n            if new_key not in existing_keys:\n                person.code_name = new_key\n                existing_keys.append(new_key)",
        "detail": "tabbycat.participants.utils",
        "documentation": {}
    },
    {
        "label": "BaseParticipantsListView",
        "kind": 6,
        "importPath": "tabbycat.participants.views",
        "description": "tabbycat.participants.views",
        "peekOfCode": "class BaseParticipantsListView(TournamentMixin, VueTableTemplateView):\n    page_title = gettext_lazy(\"Participants\")\n    page_emoji = '🚌'\n    def get_tables(self):\n        adjudicators = self.tournament.adjudicator_set.select_related('institution')\n        adjs_table = TabbycatTableBuilder(view=self, title=_(\"Adjudicators\"), sort_key=\"name\")\n        adjs_table.add_adjudicator_columns(adjudicators)\n        speakers = Speaker.objects.filter(team__tournament=self.tournament).select_related(\n                'team', 'team__institution').prefetch_related('team__speaker_set', 'categories')\n        if use_team_code_names(self.tournament, self.admin, user=self.request.user):",
        "detail": "tabbycat.participants.views",
        "documentation": {}
    },
    {
        "label": "AdminParticipantsListView",
        "kind": 6,
        "importPath": "tabbycat.participants.views",
        "description": "tabbycat.participants.views",
        "peekOfCode": "class AdminParticipantsListView(AdministratorMixin, BaseParticipantsListView):\n    view_permission = Permission.VIEW_PARTICIPANTS\n    template_name = 'participants_list.html'\n    admin = True\nclass AssistantParticipantsListView(AssistantMixin, BaseParticipantsListView):\n    admin = True\nclass PublicParticipantsListView(PublicTournamentPageMixin, BaseParticipantsListView):\n    public_page_preference = 'public_participants'\n    admin = False\n    cache_timeout = settings.PUBLIC_SLOW_CACHE_TIMEOUT",
        "detail": "tabbycat.participants.views",
        "documentation": {}
    },
    {
        "label": "AssistantParticipantsListView",
        "kind": 6,
        "importPath": "tabbycat.participants.views",
        "description": "tabbycat.participants.views",
        "peekOfCode": "class AssistantParticipantsListView(AssistantMixin, BaseParticipantsListView):\n    admin = True\nclass PublicParticipantsListView(PublicTournamentPageMixin, BaseParticipantsListView):\n    public_page_preference = 'public_participants'\n    admin = False\n    cache_timeout = settings.PUBLIC_SLOW_CACHE_TIMEOUT\nclass BaseInstitutionsListView(TournamentMixin, VueTableTemplateView):\n    page_title = gettext_lazy(\"Institutions\")\n    page_emoji = '🏫'\n    def get_table(self):",
        "detail": "tabbycat.participants.views",
        "documentation": {}
    },
    {
        "label": "PublicParticipantsListView",
        "kind": 6,
        "importPath": "tabbycat.participants.views",
        "description": "tabbycat.participants.views",
        "peekOfCode": "class PublicParticipantsListView(PublicTournamentPageMixin, BaseParticipantsListView):\n    public_page_preference = 'public_participants'\n    admin = False\n    cache_timeout = settings.PUBLIC_SLOW_CACHE_TIMEOUT\nclass BaseInstitutionsListView(TournamentMixin, VueTableTemplateView):\n    page_title = gettext_lazy(\"Institutions\")\n    page_emoji = '🏫'\n    def get_table(self):\n        institutions = Institution.objects.select_related('region').filter(\n            Q(team__tournament=self.tournament) | Q(adjudicator__tournament=self.tournament),",
        "detail": "tabbycat.participants.views",
        "documentation": {}
    },
    {
        "label": "BaseInstitutionsListView",
        "kind": 6,
        "importPath": "tabbycat.participants.views",
        "description": "tabbycat.participants.views",
        "peekOfCode": "class BaseInstitutionsListView(TournamentMixin, VueTableTemplateView):\n    page_title = gettext_lazy(\"Institutions\")\n    page_emoji = '🏫'\n    def get_table(self):\n        institutions = Institution.objects.select_related('region').filter(\n            Q(team__tournament=self.tournament) | Q(adjudicator__tournament=self.tournament),\n        ).annotate(\n            nteams=Count('team', distinct=True, filter=Q(\n                team__tournament=self.tournament)),\n            nadjs=Count('adjudicator', filter=Q(",
        "detail": "tabbycat.participants.views",
        "documentation": {}
    },
    {
        "label": "AdminInstitutionsListView",
        "kind": 6,
        "importPath": "tabbycat.participants.views",
        "description": "tabbycat.participants.views",
        "peekOfCode": "class AdminInstitutionsListView(AdministratorMixin, BaseInstitutionsListView):\n    view_permission = Permission.VIEW_INSTITUTIONS\n    template_name = 'participants_list.html'\n    admin = True\nclass AssistantInstitutionsListView(AssistantMixin, BaseInstitutionsListView):\n    admin = True\nclass PublicInstitutionsListView(PublicTournamentPageMixin, BaseInstitutionsListView):\n    public_page_preference = 'public_institutions_list'\n    admin = False\n    cache_timeout = settings.PUBLIC_SLOW_CACHE_TIMEOUT",
        "detail": "tabbycat.participants.views",
        "documentation": {}
    },
    {
        "label": "AssistantInstitutionsListView",
        "kind": 6,
        "importPath": "tabbycat.participants.views",
        "description": "tabbycat.participants.views",
        "peekOfCode": "class AssistantInstitutionsListView(AssistantMixin, BaseInstitutionsListView):\n    admin = True\nclass PublicInstitutionsListView(PublicTournamentPageMixin, BaseInstitutionsListView):\n    public_page_preference = 'public_institutions_list'\n    admin = False\n    cache_timeout = settings.PUBLIC_SLOW_CACHE_TIMEOUT\nclass BaseCodeNamesListView(TournamentMixin, VueTableTemplateView):\n    page_title = gettext_lazy(\"Code Names\")\n    page_emoji = '🕵'\n    def get_table(self):",
        "detail": "tabbycat.participants.views",
        "documentation": {}
    },
    {
        "label": "PublicInstitutionsListView",
        "kind": 6,
        "importPath": "tabbycat.participants.views",
        "description": "tabbycat.participants.views",
        "peekOfCode": "class PublicInstitutionsListView(PublicTournamentPageMixin, BaseInstitutionsListView):\n    public_page_preference = 'public_institutions_list'\n    admin = False\n    cache_timeout = settings.PUBLIC_SLOW_CACHE_TIMEOUT\nclass BaseCodeNamesListView(TournamentMixin, VueTableTemplateView):\n    page_title = gettext_lazy(\"Code Names\")\n    page_emoji = '🕵'\n    def get_table(self):\n        t = self.tournament\n        teams = t.team_set.select_related('institution').prefetch_related('speaker_set')",
        "detail": "tabbycat.participants.views",
        "documentation": {}
    },
    {
        "label": "BaseCodeNamesListView",
        "kind": 6,
        "importPath": "tabbycat.participants.views",
        "description": "tabbycat.participants.views",
        "peekOfCode": "class BaseCodeNamesListView(TournamentMixin, VueTableTemplateView):\n    page_title = gettext_lazy(\"Code Names\")\n    page_emoji = '🕵'\n    def get_table(self):\n        t = self.tournament\n        teams = t.team_set.select_related('institution').prefetch_related('speaker_set')\n        table = TabbycatTableBuilder(view=self, sort_key='code_name')\n        table.add_column(\n            {'key': 'code_name', 'title': _(\"Code name\")},\n            [{'text': escape(t.code_name) or \"—\"} for t in teams],",
        "detail": "tabbycat.participants.views",
        "documentation": {}
    },
    {
        "label": "AdminCodeNamesListView",
        "kind": 6,
        "importPath": "tabbycat.participants.views",
        "description": "tabbycat.participants.views",
        "peekOfCode": "class AdminCodeNamesListView(AdministratorMixin, BaseCodeNamesListView):\n    template_name = 'participants_list.html'\n    view_permission = Permission.VIEW_DECODED_TEAMS\nclass AssistantCodeNamesListView(AssistantMixin, BaseCodeNamesListView):\n    pass\n# ==============================================================================\n# Email page\n# ==============================================================================\nclass EmailTeamRegistrationView(TournamentTemplateEmailCreateView):\n    page_subtitle = _(\"Team Registration\")",
        "detail": "tabbycat.participants.views",
        "documentation": {}
    },
    {
        "label": "AssistantCodeNamesListView",
        "kind": 6,
        "importPath": "tabbycat.participants.views",
        "description": "tabbycat.participants.views",
        "peekOfCode": "class AssistantCodeNamesListView(AssistantMixin, BaseCodeNamesListView):\n    pass\n# ==============================================================================\n# Email page\n# ==============================================================================\nclass EmailTeamRegistrationView(TournamentTemplateEmailCreateView):\n    page_subtitle = _(\"Team Registration\")\n    event = BulkNotification.EventType.TEAM_REG\n    subject_template = 'team_email_subject'\n    message_template = 'team_email_message'",
        "detail": "tabbycat.participants.views",
        "documentation": {}
    },
    {
        "label": "EmailTeamRegistrationView",
        "kind": 6,
        "importPath": "tabbycat.participants.views",
        "description": "tabbycat.participants.views",
        "peekOfCode": "class EmailTeamRegistrationView(TournamentTemplateEmailCreateView):\n    page_subtitle = _(\"Team Registration\")\n    event = BulkNotification.EventType.TEAM_REG\n    subject_template = 'team_email_subject'\n    message_template = 'team_email_message'\n    tournament_redirect_pattern_name = 'participants-list'\n    def get_queryset(self):\n        return Speaker.objects.filter(team__tournament=self.tournament).select_related('team').prefetch_related('team__speaker_set')\n    def get_table(self):\n        table = super().get_table()",
        "detail": "tabbycat.participants.views",
        "documentation": {}
    },
    {
        "label": "BaseRecordView",
        "kind": 6,
        "importPath": "tabbycat.participants.views",
        "description": "tabbycat.participants.views",
        "peekOfCode": "class BaseRecordView(SingleObjectFromTournamentMixin, VueTableTemplateView):\n    allow_null_tournament = True\n    def get_queryset(self):\n        return super().get_queryset().select_related('institution__region')\n    def use_team_code_names(self):\n        return use_team_code_names(self.tournament, self.admin, user=self.request.user)\n    @staticmethod\n    def allocations_set(obj, admin, tournament):\n        model_related = {'Team': 'debateteam_set', 'Adjudicator': 'debateadjudicator_set'}[type(obj).__name__]\n        try:",
        "detail": "tabbycat.participants.views",
        "documentation": {}
    },
    {
        "label": "BaseTeamRecordView",
        "kind": 6,
        "importPath": "tabbycat.participants.views",
        "description": "tabbycat.participants.views",
        "peekOfCode": "class BaseTeamRecordView(BaseRecordView):\n    model = Team\n    model_kwarg = 'debateteams'\n    template_name = 'team_record.html'\n    table_title = _(\"Results\")\n    def get_queryset(self):\n        return super().get_queryset().prefetch_related('break_categories')\n    def get_page_title(self):\n        # This has to be in Python so that the emoji can be team-dependent.\n        name = self.object.code_name if self.use_team_code_names() else self.object.long_name",
        "detail": "tabbycat.participants.views",
        "documentation": {}
    },
    {
        "label": "BaseAdjudicatorRecordView",
        "kind": 6,
        "importPath": "tabbycat.participants.views",
        "description": "tabbycat.participants.views",
        "peekOfCode": "class BaseAdjudicatorRecordView(BaseRecordView):\n    model = Adjudicator\n    model_kwarg = 'debateadjudications'\n    template_name = 'adjudicator_record.html'\n    page_emoji = '⚖'\n    table_title = _(\"Previous Rounds\")\n    def get_page_title(self):\n        return _(\"Record for %(name)s\") % {'name': self.object.get_public_name(self.tournament)}\n    def _get_adj_adj_conflicts(self):\n        adjs = []",
        "detail": "tabbycat.participants.views",
        "documentation": {}
    },
    {
        "label": "TeamRecordView",
        "kind": 6,
        "importPath": "tabbycat.participants.views",
        "description": "tabbycat.participants.views",
        "peekOfCode": "class TeamRecordView(AdministratorMixin, BaseTeamRecordView):\n    admin = True\n    view_permission = Permission.VIEW_TEAMS\n    def get_queryset(self):\n        return super().get_queryset().prefetch_related(\n            'teaminstitutionconflict_set__institution',\n            'adjudicatorteamconflict_set__adjudicator',\n            'venue_constraints__category',\n        )\nclass AdjudicatorRecordView(AdministratorMixin, BaseAdjudicatorRecordView):",
        "detail": "tabbycat.participants.views",
        "documentation": {}
    },
    {
        "label": "AdjudicatorRecordView",
        "kind": 6,
        "importPath": "tabbycat.participants.views",
        "description": "tabbycat.participants.views",
        "peekOfCode": "class AdjudicatorRecordView(AdministratorMixin, BaseAdjudicatorRecordView):\n    admin = True\n    view_permission = Permission.VIEW_ADJUDICATORS\n    def get_queryset(self):\n        return super().get_queryset().prefetch_related(\n            'adjudicatorinstitutionconflict_set__institution',\n            'adjudicatorteamconflict_set__team',\n            'venue_constraints__category',\n        )\nclass PublicTeamRecordView(PublicTournamentPageMixin, BaseTeamRecordView):",
        "detail": "tabbycat.participants.views",
        "documentation": {}
    },
    {
        "label": "PublicTeamRecordView",
        "kind": 6,
        "importPath": "tabbycat.participants.views",
        "description": "tabbycat.participants.views",
        "peekOfCode": "class PublicTeamRecordView(PublicTournamentPageMixin, BaseTeamRecordView):\n    public_page_preference = 'public_record'\n    admin = False\nclass PublicAdjudicatorRecordView(PublicTournamentPageMixin, BaseAdjudicatorRecordView):\n    public_page_preference = 'public_record'\n    admin = False\n# ==============================================================================\n# Speaker categories\n# ==============================================================================\nclass EditSpeakerCategoriesView(LogActionMixin, AdministratorMixin, TournamentMixin, ModelFormSetView):",
        "detail": "tabbycat.participants.views",
        "documentation": {}
    },
    {
        "label": "PublicAdjudicatorRecordView",
        "kind": 6,
        "importPath": "tabbycat.participants.views",
        "description": "tabbycat.participants.views",
        "peekOfCode": "class PublicAdjudicatorRecordView(PublicTournamentPageMixin, BaseAdjudicatorRecordView):\n    public_page_preference = 'public_record'\n    admin = False\n# ==============================================================================\n# Speaker categories\n# ==============================================================================\nclass EditSpeakerCategoriesView(LogActionMixin, AdministratorMixin, TournamentMixin, ModelFormSetView):\n    # The tournament is included in the form as a hidden input so that\n    # uniqueness checks will work. Since this is a superuser form, they can\n    # access all tournaments anyway, so tournament forgery wouldn't be a",
        "detail": "tabbycat.participants.views",
        "documentation": {}
    },
    {
        "label": "EditSpeakerCategoriesView",
        "kind": 6,
        "importPath": "tabbycat.participants.views",
        "description": "tabbycat.participants.views",
        "peekOfCode": "class EditSpeakerCategoriesView(LogActionMixin, AdministratorMixin, TournamentMixin, ModelFormSetView):\n    # The tournament is included in the form as a hidden input so that\n    # uniqueness checks will work. Since this is a superuser form, they can\n    # access all tournaments anyway, so tournament forgery wouldn't be a\n    # security risk.\n    view_permission = Permission.VIEW_SPEAKER_CATEGORIES\n    template_name = 'speaker_categories_edit.html'\n    formset_model = SpeakerCategory\n    action_log_type = ActionLogEntry.ActionType.SPEAKER_CATEGORIES_EDIT\n    url_name = 'participants-speaker-categories-edit'",
        "detail": "tabbycat.participants.views",
        "documentation": {}
    },
    {
        "label": "EditSpeakerCategoryEligibilityView",
        "kind": 6,
        "importPath": "tabbycat.participants.views",
        "description": "tabbycat.participants.views",
        "peekOfCode": "class EditSpeakerCategoryEligibilityView(AdministratorMixin, TournamentMixin, VueTableTemplateView):\n    # form_class = forms.SpeakerCategoryEligibilityForm\n    template_name = 'edit_speaker_eligibility.html'\n    page_title = _(\"Speaker Category Eligibility\")\n    page_emoji = '🍯'\n    edit_permission = Permission.EDIT_SPEAKER_ELIGIBILITY\n    def get_table(self):\n        table = TabbycatTableBuilder(view=self, sort_key='team')\n        speakers = Speaker.objects.filter(team__tournament=self.tournament).select_related(\n            'team', 'team__institution').prefetch_related('categories', 'team__speaker_set')",
        "detail": "tabbycat.participants.views",
        "documentation": {}
    },
    {
        "label": "UpdateEligibilityEditView",
        "kind": 6,
        "importPath": "tabbycat.participants.views",
        "description": "tabbycat.participants.views",
        "peekOfCode": "class UpdateEligibilityEditView(LogActionMixin, AdministratorMixin, TournamentMixin, View):\n    action_log_type = ActionLogEntry.ActionType.SPEAKER_ELIGIBILITY_EDIT\n    participant_model = Speaker\n    many_to_many_field = 'categories'\n    edit_permission = Permission.EDIT_SPEAKER_ELIGIBILITY\n    def set_category_eligibility(self, participant, sent_status):\n        category_id = sent_status['type']\n        many_to_many_model = getattr(participant, self.many_to_many_field)\n        marked_eligible = category_id in {c.id for c in many_to_many_model.all()}\n        if sent_status['checked'] and not marked_eligible:",
        "detail": "tabbycat.participants.views",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "tabbycat.participants.views",
        "description": "tabbycat.participants.views",
        "peekOfCode": "logger = logging.getLogger(__name__)\n# ==============================================================================\n# Lists of things\n# ==============================================================================\nclass BaseParticipantsListView(TournamentMixin, VueTableTemplateView):\n    page_title = gettext_lazy(\"Participants\")\n    page_emoji = '🚌'\n    def get_tables(self):\n        adjudicators = self.tournament.adjudicator_set.select_related('institution')\n        adjs_table = TabbycatTableBuilder(view=self, title=_(\"Adjudicators\"), sort_key=\"name\")",
        "detail": "tabbycat.participants.views",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "tabbycat.printing.urls_admin",
        "description": "tabbycat.printing.urls_admin",
        "peekOfCode": "urlpatterns = [\n    # Traditional sheets\n    path('round/<int:round_seq>/scoresheets/',\n        views.AdminPrintScoresheetsView.as_view(),\n        name='printing-scoresheets'),\n    path('round/<int:round_seq>/feedback/',\n        views.AdminPrintFeedbackFormsView.as_view(),\n        name='printing-feedback'),\n    # Private URL distribution\n    path('urls_sheets/teams',",
        "detail": "tabbycat.printing.urls_admin",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "tabbycat.printing.urls_assistant",
        "description": "tabbycat.printing.urls_assistant",
        "peekOfCode": "urlpatterns = [\n    # Traditional sheets\n    path('scoresheets/',\n        views.AssistantPrintScoresheetsView.as_view(),\n        name='printing-assistant-scoresheets'),\n    path('feedback/',\n        views.AssistantPrintFeedbackFormsView.as_view(),\n        name='printing-assistant-feedback'),\n]",
        "detail": "tabbycat.printing.urls_assistant",
        "documentation": {}
    },
    {
        "label": "BasePrintFeedbackFormsView",
        "kind": 6,
        "importPath": "tabbycat.printing.views",
        "description": "tabbycat.printing.views",
        "peekOfCode": "class BasePrintFeedbackFormsView(RoundMixin, TemplateView):\n    template_name = 'feedback_list.html'\n    def add_defaults(self):\n        default_questions = []\n        if self.tournament.pref('feedback_introduction'):\n            default_scale_info = AdjudicatorFeedbackQuestion(\n                text=self.tournament.pref('feedback_introduction'), seq=0,\n                answer_type='comment', # Custom type just for print display\n                required=True, from_team=True, from_adj=True,\n            )",
        "detail": "tabbycat.printing.views",
        "documentation": {}
    },
    {
        "label": "AdminPrintFeedbackFormsView",
        "kind": 6,
        "importPath": "tabbycat.printing.views",
        "description": "tabbycat.printing.views",
        "peekOfCode": "class AdminPrintFeedbackFormsView(AdministratorMixin, BasePrintFeedbackFormsView):\n    view_permission = Permission.VIEW_DEBATE\nclass AssistantPrintFeedbackFormsView(CurrentRoundMixin, OptionalAssistantTournamentPageMixin, BasePrintFeedbackFormsView):\n    assistant_page_permissions = ['all_areas', 'results_draw']\nclass BasePrintScoresheetsView(RoundMixin, TemplateView):\n    template_name = 'scoresheet_list.html'\n    def get_ballots_dicts(self):\n        draw = self.round.debate_set_with_prefetches(iron=True)\n        # Create the DebateIdentifiers for the ballots if needed\n        create_identifiers(DebateIdentifier, draw)",
        "detail": "tabbycat.printing.views",
        "documentation": {}
    },
    {
        "label": "AssistantPrintFeedbackFormsView",
        "kind": 6,
        "importPath": "tabbycat.printing.views",
        "description": "tabbycat.printing.views",
        "peekOfCode": "class AssistantPrintFeedbackFormsView(CurrentRoundMixin, OptionalAssistantTournamentPageMixin, BasePrintFeedbackFormsView):\n    assistant_page_permissions = ['all_areas', 'results_draw']\nclass BasePrintScoresheetsView(RoundMixin, TemplateView):\n    template_name = 'scoresheet_list.html'\n    def get_ballots_dicts(self):\n        draw = self.round.debate_set_with_prefetches(iron=True)\n        # Create the DebateIdentifiers for the ballots if needed\n        create_identifiers(DebateIdentifier, draw)\n        identifiers = DebateIdentifier.objects.values('debate_id', 'barcode')\n        draw = sorted(draw, key=lambda d: d.venue.display_name if d.venue else \"\")",
        "detail": "tabbycat.printing.views",
        "documentation": {}
    },
    {
        "label": "BasePrintScoresheetsView",
        "kind": 6,
        "importPath": "tabbycat.printing.views",
        "description": "tabbycat.printing.views",
        "peekOfCode": "class BasePrintScoresheetsView(RoundMixin, TemplateView):\n    template_name = 'scoresheet_list.html'\n    def get_ballots_dicts(self):\n        draw = self.round.debate_set_with_prefetches(iron=True)\n        # Create the DebateIdentifiers for the ballots if needed\n        create_identifiers(DebateIdentifier, draw)\n        identifiers = DebateIdentifier.objects.values('debate_id', 'barcode')\n        draw = sorted(draw, key=lambda d: d.venue.display_name if d.venue else \"\")\n        ballots_dicts = []\n        # Force translation before JSON serialization",
        "detail": "tabbycat.printing.views",
        "documentation": {}
    },
    {
        "label": "AdminPrintScoresheetsView",
        "kind": 6,
        "importPath": "tabbycat.printing.views",
        "description": "tabbycat.printing.views",
        "peekOfCode": "class AdminPrintScoresheetsView(AdministratorMixin, BasePrintScoresheetsView):\n    view_permission = Permission.VIEW_DEBATE\nclass AssistantPrintScoresheetsView(CurrentRoundMixin, OptionalAssistantTournamentPageMixin, BasePrintScoresheetsView):\n    assistant_page_permissions = ['all_areas']\nclass BasePrintableRandomisedURLs(TournamentMixin, AdministratorMixin, TemplateView):\n    view_permission = Permission.VIEW_PRIVATE_URLS\n    template_name = 'randomised_url_sheets.html'\n    def add_urls(self, participants):\n        for participant in participants:\n            url = reverse_tournament('privateurls-person-index', self.tournament, kwargs={'url_key': participant['url_key']})",
        "detail": "tabbycat.printing.views",
        "documentation": {}
    },
    {
        "label": "AssistantPrintScoresheetsView",
        "kind": 6,
        "importPath": "tabbycat.printing.views",
        "description": "tabbycat.printing.views",
        "peekOfCode": "class AssistantPrintScoresheetsView(CurrentRoundMixin, OptionalAssistantTournamentPageMixin, BasePrintScoresheetsView):\n    assistant_page_permissions = ['all_areas']\nclass BasePrintableRandomisedURLs(TournamentMixin, AdministratorMixin, TemplateView):\n    view_permission = Permission.VIEW_PRIVATE_URLS\n    template_name = 'randomised_url_sheets.html'\n    def add_urls(self, participants):\n        for participant in participants:\n            url = reverse_tournament('privateurls-person-index', self.tournament, kwargs={'url_key': participant['url_key']})\n            abs_url = self.request.build_absolute_uri(url)\n            qr_code = qrcode.make(abs_url, image_factory=svg.SvgPathImage)",
        "detail": "tabbycat.printing.views",
        "documentation": {}
    },
    {
        "label": "BasePrintableRandomisedURLs",
        "kind": 6,
        "importPath": "tabbycat.printing.views",
        "description": "tabbycat.printing.views",
        "peekOfCode": "class BasePrintableRandomisedURLs(TournamentMixin, AdministratorMixin, TemplateView):\n    view_permission = Permission.VIEW_PRIVATE_URLS\n    template_name = 'randomised_url_sheets.html'\n    def add_urls(self, participants):\n        for participant in participants:\n            url = reverse_tournament('privateurls-person-index', self.tournament, kwargs={'url_key': participant['url_key']})\n            abs_url = self.request.build_absolute_uri(url)\n            qr_code = qrcode.make(abs_url, image_factory=svg.SvgPathImage)\n            participant['url'] = abs_url\n            participant['qr'] = qr_code.path.get('d')",
        "detail": "tabbycat.printing.views",
        "documentation": {}
    },
    {
        "label": "PrintableRandomisedURLsForTeams",
        "kind": 6,
        "importPath": "tabbycat.printing.views",
        "description": "tabbycat.printing.views",
        "peekOfCode": "class PrintableRandomisedURLsForTeams(BasePrintableRandomisedURLs):\n    def get_participants_for_type(self):\n        participants = Speaker.objects.filter(team__tournament=self.tournament, url_key__isnull=False)\n        return list(participants.select_related('team').values('name', 'team__short_name', 'url_key'))\nclass PrintableRandomisedURLsForAdjudicators(BasePrintableRandomisedURLs):\n    def get_participants_for_type(self):\n        participants = Adjudicator.objects.filter(tournament=self.tournament, url_key__isnull=False)\n        return list(participants.select_related('institution').values('name', 'institution__code', 'url_key'))",
        "detail": "tabbycat.printing.views",
        "documentation": {}
    },
    {
        "label": "PrintableRandomisedURLsForAdjudicators",
        "kind": 6,
        "importPath": "tabbycat.printing.views",
        "description": "tabbycat.printing.views",
        "peekOfCode": "class PrintableRandomisedURLsForAdjudicators(BasePrintableRandomisedURLs):\n    def get_participants_for_type(self):\n        participants = Adjudicator.objects.filter(tournament=self.tournament, url_key__isnull=False)\n        return list(participants.select_related('institution').values('name', 'institution__code', 'url_key'))",
        "detail": "tabbycat.printing.views",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "tabbycat.privateurls.management.commands.privateurls",
        "description": "tabbycat.privateurls.management.commands.privateurls",
        "peekOfCode": "class Command(TournamentCommand):\n    help = \"Generates or deletes private URLs\"\n    def add_arguments(self, parser):\n        subparsers = parser.add_subparsers(dest=\"subcommand\", parser_class=ArgumentParser,\n              metavar=\"{generate,delete}\")\n        subparsers.required = True\n        generate = subparsers.add_parser(\"generate\")\n        super(Command, self).add_arguments(generate)\n        generate.add_argument('--teams-only', action=\"store_true\", default=False,\n            help=\"Only generate private URLs for teams\")",
        "detail": "tabbycat.privateurls.management.commands.privateurls",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.privateurls.migrations.0001_initial",
        "description": "tabbycat.privateurls.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('participants', '0001_initial'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='PrivateUrlSentMailRecord',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "tabbycat.privateurls.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.privateurls.migrations.0002_auto_20180706_0400",
        "description": "tabbycat.privateurls.migrations.0002_auto_20180706_0400",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('privateurls', '0001_initial'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='privateurlsentmailrecord',\n            name='adjudicator',\n        ),\n        migrations.RemoveField(",
        "detail": "tabbycat.privateurls.migrations.0002_auto_20180706_0400",
        "documentation": {}
    },
    {
        "label": "PrivateUrlsConfig",
        "kind": 6,
        "importPath": "tabbycat.privateurls.apps",
        "description": "tabbycat.privateurls.apps",
        "peekOfCode": "class PrivateUrlsConfig(AppConfig):\n    name = 'privateurls'\n    verbose_name = _(\"Private URL Management\")",
        "detail": "tabbycat.privateurls.apps",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "tabbycat.privateurls.urls_admin",
        "description": "tabbycat.privateurls.urls_admin",
        "peekOfCode": "urlpatterns = [\n    path('',\n        views.RandomisedUrlsView.as_view(),\n        name='privateurls-list'),\n    path('generate/',\n        views.GenerateRandomisedUrlsView.as_view(),\n        name='privateurls-generate'),\n    path('email/',\n        views.EmailRandomisedUrlsView.as_view(),\n        name='privateurls-email'),",
        "detail": "tabbycat.privateurls.urls_admin",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "tabbycat.privateurls.urls_public",
        "description": "tabbycat.privateurls.urls_public",
        "peekOfCode": "urlpatterns = [\n    path('<slug:url_key>/',\n        views.PersonIndexView.as_view(),\n        name='privateurls-person-index'),\n]",
        "detail": "tabbycat.privateurls.urls_public",
        "documentation": {}
    },
    {
        "label": "populate_url_keys",
        "kind": 2,
        "importPath": "tabbycat.privateurls.utils",
        "description": "tabbycat.privateurls.utils",
        "peekOfCode": "def populate_url_keys(people: 'Iterable[Person]', length: int = 8, num_attempts: int = 10) -> None:\n    \"\"\"Populates the URL key field for every instance in the given QuerySet.\"\"\"\n    chars = string.ascii_lowercase + string.digits\n    existing_keys = list(Person.objects.exclude(url_key__isnull=True).values_list('url_key', flat=True))\n    for person in people:\n        for i in range(num_attempts):\n            new_key = generate_identifier_string(chars, length)\n            if new_key not in existing_keys:\n                person.url_key = new_key\n                existing_keys.append(new_key)",
        "detail": "tabbycat.privateurls.utils",
        "documentation": {}
    },
    {
        "label": "delete_url_keys",
        "kind": 2,
        "importPath": "tabbycat.privateurls.utils",
        "description": "tabbycat.privateurls.utils",
        "peekOfCode": "def delete_url_keys(queryset: 'QuerySet[Person]') -> None:\n    \"\"\"Deletes URL keys from every instance in the given QuerySet.\"\"\"\n    queryset.update(url_key=None)",
        "detail": "tabbycat.privateurls.utils",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "tabbycat.privateurls.utils",
        "description": "tabbycat.privateurls.utils",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef populate_url_keys(people: 'Iterable[Person]', length: int = 8, num_attempts: int = 10) -> None:\n    \"\"\"Populates the URL key field for every instance in the given QuerySet.\"\"\"\n    chars = string.ascii_lowercase + string.digits\n    existing_keys = list(Person.objects.exclude(url_key__isnull=True).values_list('url_key', flat=True))\n    for person in people:\n        for i in range(num_attempts):\n            new_key = generate_identifier_string(chars, length)\n            if new_key not in existing_keys:\n                person.url_key = new_key",
        "detail": "tabbycat.privateurls.utils",
        "documentation": {}
    },
    {
        "label": "RandomisedUrlsMixin",
        "kind": 6,
        "importPath": "tabbycat.privateurls.views",
        "description": "tabbycat.privateurls.views",
        "peekOfCode": "class RandomisedUrlsMixin(AdministratorMixin, TournamentMixin):\n    def get_context_data(self, **kwargs) -> Dict[str, Any]:\n        # These are used to choose the nav display\n        tournament = self.tournament\n        kwargs['exists'] = tournament.participants.filter(url_key__isnull=False).exists()\n        kwargs['blank_exists'] = tournament.participants.filter(url_key__isnull=True).exists()\n        kwargs['to_email_exists'] = self.get_participants_to_email().exists()\n        return super().get_context_data(**kwargs)\n    def get_participants_to_email(self, already_sent: bool = False) -> 'QuerySet[Person]':\n        subquery = SentMessage.objects.filter(",
        "detail": "tabbycat.privateurls.views",
        "documentation": {}
    },
    {
        "label": "RandomisedUrlsView",
        "kind": 6,
        "importPath": "tabbycat.privateurls.views",
        "description": "tabbycat.privateurls.views",
        "peekOfCode": "class RandomisedUrlsView(RandomisedUrlsMixin, VueTableTemplateView):\n    view_permission = Permission.VIEW_PRIVATE_URLS\n    template_name = 'private_urls.html'\n    tables_orientation = 'columns'\n    def add_url_columns(self, table: TabbycatTableBuilder, people: 'QuerySet[Person]', request: 'HttpRequest') -> TabbycatTableBuilder:\n        def build_url(person):\n            if person.url_key is None:\n                return {'text': _(\"no URL\"), 'class': 'text-warning'}\n            path = reverse_tournament('privateurls-person-index', self.tournament,\n                kwargs={'url_key': person.url_key})",
        "detail": "tabbycat.privateurls.views",
        "documentation": {}
    },
    {
        "label": "GenerateRandomisedUrlsView",
        "kind": 6,
        "importPath": "tabbycat.privateurls.views",
        "description": "tabbycat.privateurls.views",
        "peekOfCode": "class GenerateRandomisedUrlsView(AdministratorMixin, TournamentMixin, PostOnlyRedirectView):\n    tournament_redirect_pattern_name = 'privateurls-list'\n    edit_permission = Permission.GENERATE_PRIVATE_URLS\n    def post(self, request: 'HttpRequest', *args, **kwargs) -> 'HttpResponseRedirect':\n        tournament = self.tournament\n        nexisting_people = tournament.participants.filter(url_key__isnull=False).count()\n        blank_people = tournament.participants.filter(url_key__isnull=True)\n        nblank_people = blank_people.count()\n        if nblank_people == 0:\n            messages.error(self.request, _(\"All participants already have private URLs. \"",
        "detail": "tabbycat.privateurls.views",
        "documentation": {}
    },
    {
        "label": "EmailRandomisedUrlsView",
        "kind": 6,
        "importPath": "tabbycat.privateurls.views",
        "description": "tabbycat.privateurls.views",
        "peekOfCode": "class EmailRandomisedUrlsView(RoleColumnMixin, TournamentTemplateEmailCreateView):\n    page_subtitle = _(\"Private URLs\")\n    view_permission = Permission.VIEW_PRIVATE_URLS_EMAIL_LIST\n    edit_permission = Permission.SEND_PRIVATE_URLS\n    event = BulkNotification.EventType.URL\n    subject_template = 'url_email_subject'\n    message_template = 'url_email_message'\n    tournament_redirect_pattern_name = 'privateurls-list'\n    def get_extra(self) -> Dict[str, Any]:\n        extra = super().get_extra()",
        "detail": "tabbycat.privateurls.views",
        "documentation": {}
    },
    {
        "label": "PersonIndexView",
        "kind": 6,
        "importPath": "tabbycat.privateurls.views",
        "description": "tabbycat.privateurls.views",
        "peekOfCode": "class PersonIndexView(SingleObjectByRandomisedUrlMixin, PersonalizablePublicTournamentPageMixin, VueTableTemplateView):\n    template_name = 'public_url_landing.html'\n    model = Person\n    slug_field = 'url_key'\n    slug_url_kwarg = 'url_key'\n    table_title = _(\"Debates\")\n    def is_page_enabled(self, tournament: 'Tournament') -> bool:\n        return True\n    def get_queryset(self) -> 'QuerySet[Person]':\n        return self.model.objects.filter(",
        "detail": "tabbycat.privateurls.views",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "tabbycat.privateurls.views",
        "description": "tabbycat.privateurls.views",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass RandomisedUrlsMixin(AdministratorMixin, TournamentMixin):\n    def get_context_data(self, **kwargs) -> Dict[str, Any]:\n        # These are used to choose the nav display\n        tournament = self.tournament\n        kwargs['exists'] = tournament.participants.filter(url_key__isnull=False).exists()\n        kwargs['blank_exists'] = tournament.participants.filter(url_key__isnull=True).exists()\n        kwargs['to_email_exists'] = self.get_participants_to_email().exists()\n        return super().get_context_data(**kwargs)\n    def get_participants_to_email(self, already_sent: bool = False) -> 'QuerySet[Person]':",
        "detail": "tabbycat.privateurls.views",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "tabbycat.results.management.commands.compareballots",
        "description": "tabbycat.results.management.commands.compareballots",
        "peekOfCode": "class Command(TournamentCommand):\n    help = (\n        \"Compares ballots between an original tournament and a check tournament \"\n        \"set up to mimic the original tournament. This requires advanced use to \"\n        \"set up, and is not intended for general use. Don't use unless you know \"\n        \"what you're doing.\",\n    )\n    def add_arguments(self, parser):\n        super(Command, self).add_arguments(parser)\n        parser.add_argument(\"-c\", \"--compare\", type=str, required=True,",
        "detail": "tabbycat.results.management.commands.compareballots",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "tabbycat.results.management.commands.fixballotstatuses",
        "description": "tabbycat.results.management.commands.fixballotstatuses",
        "peekOfCode": "class Command(TournamentCommand):\n    help = \"Makes discarded/confirmed fields of BallotSubmissions consistent \" \\\n        \"with result_status field of Debates. Not guaranteed to be \" \\\n        \"minimalist with changes.\"\n    def handle_tournament(self, tournament, **options):\n        for bsub in BallotSubmission.objects.filter(debate__round__tournament=tournament):\n            debate_status = bsub.debate.result_status\n            original = (bsub.discarded, bsub.confirmed)\n            if debate_status == Debate.STATUS_NONE:\n                bsub.discarded = True",
        "detail": "tabbycat.results.management.commands.fixballotstatuses",
        "documentation": {}
    },
    {
        "label": "GenerateResultsCommandMixin",
        "kind": 6,
        "importPath": "tabbycat.results.management.commands.generateresults",
        "description": "tabbycat.results.management.commands.generateresults",
        "peekOfCode": "class GenerateResultsCommandMixin:\n    def add_arguments(self, parser):\n        super(GenerateResultsCommandMixin, self).add_arguments(parser)\n        results_group = parser.add_argument_group(\"results generation\")\n        results_group.add_argument(\"-T\", \"--submitter-type\", type=str,\n            choices=list(SUBMITTER_TYPE_MAP.keys()), default=\"tabroom\",\n            help=\"Submitter type, either 'tabroom' or 'public'\")\n        results_group.add_argument(\"-u\", \"--user\", type=str, default=\"random\",\n            help=\"Username of submitter\")\n        results_group.add_argument(\"--create-user\", action=\"store_true\",",
        "detail": "tabbycat.results.management.commands.generateresults",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "tabbycat.results.management.commands.generateresults",
        "description": "tabbycat.results.management.commands.generateresults",
        "peekOfCode": "class Command(GenerateResultsCommandMixin, RoundCommand):\n    help = \"Adds randomly-generated results to the database\"\n    rounds_required = False\n    def add_arguments(self, parser):\n        super(Command, self).add_arguments(parser)\n        parser.add_argument(\"--debates\", type=int, nargs=\"+\",\n                            help=\"IDs of specific debates to add feedback to. \"\n                            \"Done in addition to rounds, if any.\", default=[])\n        parser.add_argument(\"--clean\",\n                            help=\"Remove all associated ballot sets first\",",
        "detail": "tabbycat.results.management.commands.generateresults",
        "documentation": {}
    },
    {
        "label": "OBJECT_TYPE_CHOICES",
        "kind": 5,
        "importPath": "tabbycat.results.management.commands.generateresults",
        "description": "tabbycat.results.management.commands.generateresults",
        "peekOfCode": "OBJECT_TYPE_CHOICES = [\"round\", \"debate\"]\nSUBMITTER_TYPE_MAP = {\n    'tabroom': BallotSubmission.Submitter.TABROOM,\n    'public':  BallotSubmission.Submitter.PUBLIC,\n}\nUser = get_user_model()\nclass GenerateResultsCommandMixin:\n    def add_arguments(self, parser):\n        super(GenerateResultsCommandMixin, self).add_arguments(parser)\n        results_group = parser.add_argument_group(\"results generation\")",
        "detail": "tabbycat.results.management.commands.generateresults",
        "documentation": {}
    },
    {
        "label": "SUBMITTER_TYPE_MAP",
        "kind": 5,
        "importPath": "tabbycat.results.management.commands.generateresults",
        "description": "tabbycat.results.management.commands.generateresults",
        "peekOfCode": "SUBMITTER_TYPE_MAP = {\n    'tabroom': BallotSubmission.Submitter.TABROOM,\n    'public':  BallotSubmission.Submitter.PUBLIC,\n}\nUser = get_user_model()\nclass GenerateResultsCommandMixin:\n    def add_arguments(self, parser):\n        super(GenerateResultsCommandMixin, self).add_arguments(parser)\n        results_group = parser.add_argument_group(\"results generation\")\n        results_group.add_argument(\"-T\", \"--submitter-type\", type=str,",
        "detail": "tabbycat.results.management.commands.generateresults",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "tabbycat.results.management.commands.generateresults",
        "description": "tabbycat.results.management.commands.generateresults",
        "peekOfCode": "User = get_user_model()\nclass GenerateResultsCommandMixin:\n    def add_arguments(self, parser):\n        super(GenerateResultsCommandMixin, self).add_arguments(parser)\n        results_group = parser.add_argument_group(\"results generation\")\n        results_group.add_argument(\"-T\", \"--submitter-type\", type=str,\n            choices=list(SUBMITTER_TYPE_MAP.keys()), default=\"tabroom\",\n            help=\"Submitter type, either 'tabroom' or 'public'\")\n        results_group.add_argument(\"-u\", \"--user\", type=str, default=\"random\",\n            help=\"Username of submitter\")",
        "detail": "tabbycat.results.management.commands.generateresults",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "tabbycat.results.management.commands.removeblankballots",
        "description": "tabbycat.results.management.commands.removeblankballots",
        "peekOfCode": "class Command(TournamentCommand):\n    help = \"Removes all blank ballot submissions, i.e. ones without adjudicator speaker scores attached.\"\n    def add_arguments(self, parser):\n        super(Command, self).add_arguments(parser)\n        parser.add_argument(\"--dry-run\", action=\"store_true\", help=\"Show what it would delete, but do not actually delete\")\n    def handle_tournament(self, tournament, **options):\n        qs = BallotSubmission.objects.filter(debate__round__tournament=tournament).exclude(\n            Exists(SpeakerScoreByAdj.objects.filter(ballot_submission=OuterRef('pk'))))\n        for bsub in qs:\n            if not options[\"dry_run\"]:",
        "detail": "tabbycat.results.management.commands.removeblankballots",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "tabbycat.results.management.commands.resaveballots",
        "description": "tabbycat.results.management.commands.resaveballots",
        "peekOfCode": "class Command(TournamentCommand):\n    help = \"Resaves all ballots, thereby updating all TeamScore objects.\"\n    def handle_tournament(self, tournament, **options):\n        ballotsubs = BallotSubmission.objects.filter(debate__round__tournament=tournament)\n        self.stdout.write(\"Resaving {:d} ballots in tournament \\\"{:s}\\\"...\".format(\n                ballotsubs.count(), tournament.name))\n        populate_results(ballotsubs)\n        for bsub in ballotsubs:\n            self.stdout.write(\"Saving: {}\".format(bsub))\n            bsub.result.save()",
        "detail": "tabbycat.results.management.commands.resaveballots",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.results.migrations.0001_initial",
        "description": "tabbycat.results.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('participants', '0001_initial'),\n        ('motions', '0001_initial'),\n        ('draw', '0001_initial'),\n        ('adjallocation', '0003_auto_20171110_0905'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [",
        "detail": "tabbycat.results.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.results.migrations.0002_remove_ballotsubmission_copied_from",
        "description": "tabbycat.results.migrations.0002_remove_ballotsubmission_copied_from",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('results', '0001_initial'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='ballotsubmission',\n            name='copied_from',\n        ),\n    ]",
        "detail": "tabbycat.results.migrations.0002_remove_ballotsubmission_copied_from",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.results.migrations.0003_remove_league_fields",
        "description": "tabbycat.results.migrations.0003_remove_league_fields",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('results', '0002_remove_ballotsubmission_copied_from'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='ballotsubmission',\n            name='forfeit',\n        ),\n        migrations.RemoveField(",
        "detail": "tabbycat.results.migrations.0003_remove_league_fields",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.results.migrations.0004_auto_20200705_1317",
        "description": "tabbycat.results.migrations.0004_auto_20200705_1317",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n        ('results', '0003_remove_league_fields'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='ballotsubmission',\n            name='confirmer',\n            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='results_ballotsubmission_confirmed', to=settings.AUTH_USER_MODEL, verbose_name='confirmer'),",
        "detail": "tabbycat.results.migrations.0004_auto_20200705_1317",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.results.migrations.0004_create_teamscorebyadj",
        "description": "tabbycat.results.migrations.0004_create_teamscorebyadj",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('adjallocation', '0008_auto_20181019_2059'),\n        ('draw', '0003_remove_debate_ballot_in'),\n        ('results', '0003_remove_league_fields'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='TeamScoreByAdj',\n            fields=[",
        "detail": "tabbycat.results.migrations.0004_create_teamscorebyadj",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.results.migrations.0005_auto_20200902_1208",
        "description": "tabbycat.results.migrations.0005_auto_20200902_1208",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('results', '0004_auto_20200705_1317'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='teamscore',\n            name='win',\n            field=models.BooleanField(blank=True, null=True, verbose_name='win'),\n        ),",
        "detail": "tabbycat.results.migrations.0005_auto_20200902_1208",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.results.migrations.0005_ballotsubmission_participant_submitter",
        "description": "tabbycat.results.migrations.0005_ballotsubmission_participant_submitter",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('participants', '0016_auto_20200705_1317'),\n        ('results', '0004_auto_20200705_1317'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='ballotsubmission',\n            name='participant_submitter',\n            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='results_ballotsubmission_participant_submitted', to='participants.Person', verbose_name='from participant'),",
        "detail": "tabbycat.results.migrations.0005_ballotsubmission_participant_submitter",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.results.migrations.0006_merge_20200904_1743",
        "description": "tabbycat.results.migrations.0006_merge_20200904_1743",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('results', '0005_ballotsubmission_participant_submitter'),\n        ('results', '0005_auto_20200902_1208'),\n    ]\n    operations = [\n    ]",
        "detail": "tabbycat.results.migrations.0006_merge_20200904_1743",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.results.migrations.0007_merge_20200916_2215",
        "description": "tabbycat.results.migrations.0007_merge_20200916_2215",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('results', '0004_create_teamscorebyadj'),\n        ('results', '0006_merge_20200904_1743'),\n    ]\n    operations = [\n    ]",
        "detail": "tabbycat.results.migrations.0007_merge_20200916_2215",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.results.migrations.0008_auto_20201126_0037",
        "description": "tabbycat.results.migrations.0008_auto_20201126_0037",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('results', '0007_merge_20200916_2215'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='teamscorebyadj',\n            name='win',\n            field=models.BooleanField(blank=True, null=True, verbose_name='win'),\n        ),",
        "detail": "tabbycat.results.migrations.0008_auto_20201126_0037",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.results.migrations.0009_auto_20210227_1757",
        "description": "tabbycat.results.migrations.0009_auto_20210227_1757",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('results', '0008_auto_20201126_0037'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='ballotsubmission',\n            name='partial',\n            field=models.BooleanField(default=False, verbose_name='partial'),\n        ),",
        "detail": "tabbycat.results.migrations.0009_auto_20210227_1757",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.results.migrations.0009_ballotsubmission_motions",
        "description": "tabbycat.results.migrations.0009_ballotsubmission_motions",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('results', '0008_auto_20201126_0037'),\n        ('motions', '0005_motions_mtm'),\n        ('options', '0009_create_motions_section'),\n    ]\n# Complicated query, gets all motions from rounds with only one motion and\n# where the tournament has \"enable_motions\" false/null, and correlates them\n# to a debate and then sets the ballotsubmission motion field, if null.\n    operations = [",
        "detail": "tabbycat.results.migrations.0009_ballotsubmission_motions",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.results.migrations.0010_merge_20210919_1206",
        "description": "tabbycat.results.migrations.0010_merge_20210919_1206",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('results', '0009_auto_20210227_1757'),\n        ('results', '0009_ballotsubmission_motions'),\n    ]\n    operations = [\n    ]",
        "detail": "tabbycat.results.migrations.0010_merge_20210919_1206",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.results.migrations.0011_rename_single_adj",
        "description": "tabbycat.results.migrations.0011_rename_single_adj",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('results', '0010_merge_20210919_1206'),\n    ]\n    operations = [\n        migrations.RenameField(\n            model_name='ballotsubmission',\n            old_name='partial',\n            new_name='single_adj',\n        ),",
        "detail": "tabbycat.results.migrations.0011_rename_single_adj",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.results.migrations.0012_alter_ballotsubmission_confirmer_and_more",
        "description": "tabbycat.results.migrations.0012_alter_ballotsubmission_confirmer_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n        ('participants', '0019_auto_20201216_1415'),\n        ('results', '0011_rename_single_adj'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='ballotsubmission',\n            name='confirmer',",
        "detail": "tabbycat.results.migrations.0012_alter_ballotsubmission_confirmer_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.results.migrations.0013_teamscore_has_ghost",
        "description": "tabbycat.results.migrations.0013_teamscore_has_ghost",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('results', '0012_alter_ballotsubmission_confirmer_and_more'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='teamscore',\n            name='has_ghost',\n            field=models.BooleanField(blank=True, null=True, verbose_name='has ghost score'),\n        ),",
        "detail": "tabbycat.results.migrations.0013_teamscore_has_ghost",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.results.migrations.0014_speakerscore_rank",
        "description": "tabbycat.results.migrations.0014_speakerscore_rank",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('results', '0013_teamscore_has_ghost'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='speakerscore',\n            name='rank',\n            field=models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='rank'),\n        ),",
        "detail": "tabbycat.results.migrations.0014_speakerscore_rank",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.results.migrations.0015_alter_ballotsubmission_submitter_type",
        "description": "tabbycat.results.migrations.0015_alter_ballotsubmission_submitter_type",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"results\", \"0014_speakerscore_rank\"),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name=\"ballotsubmission\",\n            name=\"submitter_type\",\n            field=models.CharField(\n                choices=[(\"T\", \"Tab room\"), (\"P\", \"Public\"), (\"A\", \"Automation\")],",
        "detail": "tabbycat.results.migrations.0015_alter_ballotsubmission_submitter_type",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.results.migrations.0016_rename_speakerscorebyadj_ballot_submission_debate_adjudicator_results_spe_ballot__667598_idx_and_mor",
        "description": "tabbycat.results.migrations.0016_rename_speakerscorebyadj_ballot_submission_debate_adjudicator_results_spe_ballot__667598_idx_and_mor",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('adjallocation', '0010_alter_adjudicatoradjudicatorconflict_unique_together_and_more'),\n        ('draw', '0009_alter_teamsideallocation_unique_together_and_more'),\n        ('motions', '0006_alter_debateteammotionpreference_unique_together_and_more'),\n        ('participants', '0022_rename_team_tournament_institution_short_reference_participant_tournam_160efa_idx_and_more'),\n        ('results', '0015_alter_ballotsubmission_submitter_type'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [",
        "detail": "tabbycat.results.migrations.0016_rename_speakerscorebyadj_ballot_submission_debate_adjudicator_results_spe_ballot__667598_idx_and_mor",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.results.migrations.0017_scorecriterion_speakercriterionscorebyadj_and_more",
        "description": "tabbycat.results.migrations.0017_scorecriterion_speakercriterionscorebyadj_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"tournaments\", \"0012_alter_round_unique_together_and_more\"),\n        (\n            \"results\",\n            \"0016_rename_speakerscorebyadj_ballot_submission_debate_adjudicator_results_spe_ballot__667598_idx_and_mor\",\n        ),\n    ]\n    operations = [\n        migrations.CreateModel(",
        "detail": "tabbycat.results.migrations.0017_scorecriterion_speakercriterionscorebyadj_and_more",
        "documentation": {}
    },
    {
        "label": "SPEAKERS_PER_TEAM",
        "kind": 5,
        "importPath": "tabbycat.results.tests.generate_testdata",
        "description": "tabbycat.results.tests.generate_testdata",
        "peekOfCode": "SPEAKERS_PER_TEAM = 3\nADJS_PER_DEBATE = 3\nTEAMS_PER_DEBATE = 2\n# Generate data\n# Replace with fixed data if you want fixed data\nscores = [[[float(random.randint(70, 80)) for pos in range(SPEAKERS_PER_TEAM)] +\n          [float(random.randint(70, 80))/2] for team in range(TEAMS_PER_DEBATE)]\n          for adj in range(ADJS_PER_DEBATE)]\ndeclared_winners = [random.choice([DebateSide.AFF, DebateSide.NEG]) for adj in range(ADJS_PER_DEBATE)]\ntestdata = dict()",
        "detail": "tabbycat.results.tests.generate_testdata",
        "documentation": {}
    },
    {
        "label": "ADJS_PER_DEBATE",
        "kind": 5,
        "importPath": "tabbycat.results.tests.generate_testdata",
        "description": "tabbycat.results.tests.generate_testdata",
        "peekOfCode": "ADJS_PER_DEBATE = 3\nTEAMS_PER_DEBATE = 2\n# Generate data\n# Replace with fixed data if you want fixed data\nscores = [[[float(random.randint(70, 80)) for pos in range(SPEAKERS_PER_TEAM)] +\n          [float(random.randint(70, 80))/2] for team in range(TEAMS_PER_DEBATE)]\n          for adj in range(ADJS_PER_DEBATE)]\ndeclared_winners = [random.choice([DebateSide.AFF, DebateSide.NEG]) for adj in range(ADJS_PER_DEBATE)]\ntestdata = dict()\n# Metadata",
        "detail": "tabbycat.results.tests.generate_testdata",
        "documentation": {}
    },
    {
        "label": "TEAMS_PER_DEBATE",
        "kind": 5,
        "importPath": "tabbycat.results.tests.generate_testdata",
        "description": "tabbycat.results.tests.generate_testdata",
        "peekOfCode": "TEAMS_PER_DEBATE = 2\n# Generate data\n# Replace with fixed data if you want fixed data\nscores = [[[float(random.randint(70, 80)) for pos in range(SPEAKERS_PER_TEAM)] +\n          [float(random.randint(70, 80))/2] for team in range(TEAMS_PER_DEBATE)]\n          for adj in range(ADJS_PER_DEBATE)]\ndeclared_winners = [random.choice([DebateSide.AFF, DebateSide.NEG]) for adj in range(ADJS_PER_DEBATE)]\ntestdata = dict()\n# Metadata\ntestdata['num_adjs'] = ADJS_PER_DEBATE",
        "detail": "tabbycat.results.tests.generate_testdata",
        "documentation": {}
    },
    {
        "label": "scores",
        "kind": 5,
        "importPath": "tabbycat.results.tests.generate_testdata",
        "description": "tabbycat.results.tests.generate_testdata",
        "peekOfCode": "scores = [[[float(random.randint(70, 80)) for pos in range(SPEAKERS_PER_TEAM)] +\n          [float(random.randint(70, 80))/2] for team in range(TEAMS_PER_DEBATE)]\n          for adj in range(ADJS_PER_DEBATE)]\ndeclared_winners = [random.choice([DebateSide.AFF, DebateSide.NEG]) for adj in range(ADJS_PER_DEBATE)]\ntestdata = dict()\n# Metadata\ntestdata['num_adjs'] = ADJS_PER_DEBATE\ntestdata['num_speakers_per_team'] = SPEAKERS_PER_TEAM\n# Generate scores\ntestdata['input'] = input_data = dict()",
        "detail": "tabbycat.results.tests.generate_testdata",
        "documentation": {}
    },
    {
        "label": "declared_winners",
        "kind": 5,
        "importPath": "tabbycat.results.tests.generate_testdata",
        "description": "tabbycat.results.tests.generate_testdata",
        "peekOfCode": "declared_winners = [random.choice([DebateSide.AFF, DebateSide.NEG]) for adj in range(ADJS_PER_DEBATE)]\ntestdata = dict()\n# Metadata\ntestdata['num_adjs'] = ADJS_PER_DEBATE\ntestdata['num_speakers_per_team'] = SPEAKERS_PER_TEAM\n# Generate scores\ntestdata['input'] = input_data = dict()\ninput_data['scores'] = scores\ninput_data['declared_winners'] = declared_winners\n# Fields that don't depend on scoresheet type",
        "detail": "tabbycat.results.tests.generate_testdata",
        "documentation": {}
    },
    {
        "label": "testdata",
        "kind": 5,
        "importPath": "tabbycat.results.tests.generate_testdata",
        "description": "tabbycat.results.tests.generate_testdata",
        "peekOfCode": "testdata = dict()\n# Metadata\ntestdata['num_adjs'] = ADJS_PER_DEBATE\ntestdata['num_speakers_per_team'] = SPEAKERS_PER_TEAM\n# Generate scores\ntestdata['input'] = input_data = dict()\ninput_data['scores'] = scores\ninput_data['declared_winners'] = declared_winners\n# Fields that don't depend on scoresheet type\ntestdata['common'] = common_fields = dict()",
        "detail": "tabbycat.results.tests.generate_testdata",
        "documentation": {}
    },
    {
        "label": "testdata['num_adjs']",
        "kind": 5,
        "importPath": "tabbycat.results.tests.generate_testdata",
        "description": "tabbycat.results.tests.generate_testdata",
        "peekOfCode": "testdata['num_adjs'] = ADJS_PER_DEBATE\ntestdata['num_speakers_per_team'] = SPEAKERS_PER_TEAM\n# Generate scores\ntestdata['input'] = input_data = dict()\ninput_data['scores'] = scores\ninput_data['declared_winners'] = declared_winners\n# Fields that don't depend on scoresheet type\ntestdata['common'] = common_fields = dict()\ncommon_fields['totals_by_adj'] = totals_by_adj = [[sum(team) for team in adj] for adj in scores]\ncommon_fields['everyone_scores'] = [[mean(adj[team][pos] for adj in scores) for pos in range(SPEAKERS_PER_TEAM+1)]",
        "detail": "tabbycat.results.tests.generate_testdata",
        "documentation": {}
    },
    {
        "label": "testdata['num_speakers_per_team']",
        "kind": 5,
        "importPath": "tabbycat.results.tests.generate_testdata",
        "description": "tabbycat.results.tests.generate_testdata",
        "peekOfCode": "testdata['num_speakers_per_team'] = SPEAKERS_PER_TEAM\n# Generate scores\ntestdata['input'] = input_data = dict()\ninput_data['scores'] = scores\ninput_data['declared_winners'] = declared_winners\n# Fields that don't depend on scoresheet type\ntestdata['common'] = common_fields = dict()\ncommon_fields['totals_by_adj'] = totals_by_adj = [[sum(team) for team in adj] for adj in scores]\ncommon_fields['everyone_scores'] = [[mean(adj[team][pos] for adj in scores) for pos in range(SPEAKERS_PER_TEAM+1)]\n                               for team in range(TEAMS_PER_DEBATE)]",
        "detail": "tabbycat.results.tests.generate_testdata",
        "documentation": {}
    },
    {
        "label": "testdata['input']",
        "kind": 5,
        "importPath": "tabbycat.results.tests.generate_testdata",
        "description": "tabbycat.results.tests.generate_testdata",
        "peekOfCode": "testdata['input'] = input_data = dict()\ninput_data['scores'] = scores\ninput_data['declared_winners'] = declared_winners\n# Fields that don't depend on scoresheet type\ntestdata['common'] = common_fields = dict()\ncommon_fields['totals_by_adj'] = totals_by_adj = [[sum(team) for team in adj] for adj in scores]\ncommon_fields['everyone_scores'] = [[mean(adj[team][pos] for adj in scores) for pos in range(SPEAKERS_PER_TEAM+1)]\n                               for team in range(TEAMS_PER_DEBATE)]\ncommon_fields['everyone_totals'] = [sum(team) for team in common_fields['everyone_scores']]\naff_margin = common_fields['everyone_totals'][0] - common_fields['everyone_totals'][1]",
        "detail": "tabbycat.results.tests.generate_testdata",
        "documentation": {}
    },
    {
        "label": "input_data['scores']",
        "kind": 5,
        "importPath": "tabbycat.results.tests.generate_testdata",
        "description": "tabbycat.results.tests.generate_testdata",
        "peekOfCode": "input_data['scores'] = scores\ninput_data['declared_winners'] = declared_winners\n# Fields that don't depend on scoresheet type\ntestdata['common'] = common_fields = dict()\ncommon_fields['totals_by_adj'] = totals_by_adj = [[sum(team) for team in adj] for adj in scores]\ncommon_fields['everyone_scores'] = [[mean(adj[team][pos] for adj in scores) for pos in range(SPEAKERS_PER_TEAM+1)]\n                               for team in range(TEAMS_PER_DEBATE)]\ncommon_fields['everyone_totals'] = [sum(team) for team in common_fields['everyone_scores']]\naff_margin = common_fields['everyone_totals'][0] - common_fields['everyone_totals'][1]\ncommon_fields['everyone_margins'] = [aff_margin, -aff_margin]",
        "detail": "tabbycat.results.tests.generate_testdata",
        "documentation": {}
    },
    {
        "label": "input_data['declared_winners']",
        "kind": 5,
        "importPath": "tabbycat.results.tests.generate_testdata",
        "description": "tabbycat.results.tests.generate_testdata",
        "peekOfCode": "input_data['declared_winners'] = declared_winners\n# Fields that don't depend on scoresheet type\ntestdata['common'] = common_fields = dict()\ncommon_fields['totals_by_adj'] = totals_by_adj = [[sum(team) for team in adj] for adj in scores]\ncommon_fields['everyone_scores'] = [[mean(adj[team][pos] for adj in scores) for pos in range(SPEAKERS_PER_TEAM+1)]\n                               for team in range(TEAMS_PER_DEBATE)]\ncommon_fields['everyone_totals'] = [sum(team) for team in common_fields['everyone_scores']]\naff_margin = common_fields['everyone_totals'][0] - common_fields['everyone_totals'][1]\ncommon_fields['everyone_margins'] = [aff_margin, -aff_margin]\n# Winners, according to scoresheet type",
        "detail": "tabbycat.results.tests.generate_testdata",
        "documentation": {}
    },
    {
        "label": "testdata['common']",
        "kind": 5,
        "importPath": "tabbycat.results.tests.generate_testdata",
        "description": "tabbycat.results.tests.generate_testdata",
        "peekOfCode": "testdata['common'] = common_fields = dict()\ncommon_fields['totals_by_adj'] = totals_by_adj = [[sum(team) for team in adj] for adj in scores]\ncommon_fields['everyone_scores'] = [[mean(adj[team][pos] for adj in scores) for pos in range(SPEAKERS_PER_TEAM+1)]\n                               for team in range(TEAMS_PER_DEBATE)]\ncommon_fields['everyone_totals'] = [sum(team) for team in common_fields['everyone_scores']]\naff_margin = common_fields['everyone_totals'][0] - common_fields['everyone_totals'][1]\ncommon_fields['everyone_margins'] = [aff_margin, -aff_margin]\n# Winners, according to scoresheet type\ntestdata['high-required'] = {\n    'winner_by_adj': [DebateSide.AFF if (adj[0] > adj[1]) else",
        "detail": "tabbycat.results.tests.generate_testdata",
        "documentation": {}
    },
    {
        "label": "common_fields['totals_by_adj']",
        "kind": 5,
        "importPath": "tabbycat.results.tests.generate_testdata",
        "description": "tabbycat.results.tests.generate_testdata",
        "peekOfCode": "common_fields['totals_by_adj'] = totals_by_adj = [[sum(team) for team in adj] for adj in scores]\ncommon_fields['everyone_scores'] = [[mean(adj[team][pos] for adj in scores) for pos in range(SPEAKERS_PER_TEAM+1)]\n                               for team in range(TEAMS_PER_DEBATE)]\ncommon_fields['everyone_totals'] = [sum(team) for team in common_fields['everyone_scores']]\naff_margin = common_fields['everyone_totals'][0] - common_fields['everyone_totals'][1]\ncommon_fields['everyone_margins'] = [aff_margin, -aff_margin]\n# Winners, according to scoresheet type\ntestdata['high-required'] = {\n    'winner_by_adj': [DebateSide.AFF if (adj[0] > adj[1]) else\n                      DebateSide.NEG if (adj[1] > adj[0]) else None",
        "detail": "tabbycat.results.tests.generate_testdata",
        "documentation": {}
    },
    {
        "label": "common_fields['everyone_scores']",
        "kind": 5,
        "importPath": "tabbycat.results.tests.generate_testdata",
        "description": "tabbycat.results.tests.generate_testdata",
        "peekOfCode": "common_fields['everyone_scores'] = [[mean(adj[team][pos] for adj in scores) for pos in range(SPEAKERS_PER_TEAM+1)]\n                               for team in range(TEAMS_PER_DEBATE)]\ncommon_fields['everyone_totals'] = [sum(team) for team in common_fields['everyone_scores']]\naff_margin = common_fields['everyone_totals'][0] - common_fields['everyone_totals'][1]\ncommon_fields['everyone_margins'] = [aff_margin, -aff_margin]\n# Winners, according to scoresheet type\ntestdata['high-required'] = {\n    'winner_by_adj': [DebateSide.AFF if (adj[0] > adj[1]) else\n                      DebateSide.NEG if (adj[1] > adj[0]) else None\n                      for adj in totals_by_adj],",
        "detail": "tabbycat.results.tests.generate_testdata",
        "documentation": {}
    },
    {
        "label": "common_fields['everyone_totals']",
        "kind": 5,
        "importPath": "tabbycat.results.tests.generate_testdata",
        "description": "tabbycat.results.tests.generate_testdata",
        "peekOfCode": "common_fields['everyone_totals'] = [sum(team) for team in common_fields['everyone_scores']]\naff_margin = common_fields['everyone_totals'][0] - common_fields['everyone_totals'][1]\ncommon_fields['everyone_margins'] = [aff_margin, -aff_margin]\n# Winners, according to scoresheet type\ntestdata['high-required'] = {\n    'winner_by_adj': [DebateSide.AFF if (adj[0] > adj[1]) else\n                      DebateSide.NEG if (adj[1] > adj[0]) else None\n                      for adj in totals_by_adj],\n}\ntestdata['low-allowed'] = {",
        "detail": "tabbycat.results.tests.generate_testdata",
        "documentation": {}
    },
    {
        "label": "aff_margin",
        "kind": 5,
        "importPath": "tabbycat.results.tests.generate_testdata",
        "description": "tabbycat.results.tests.generate_testdata",
        "peekOfCode": "aff_margin = common_fields['everyone_totals'][0] - common_fields['everyone_totals'][1]\ncommon_fields['everyone_margins'] = [aff_margin, -aff_margin]\n# Winners, according to scoresheet type\ntestdata['high-required'] = {\n    'winner_by_adj': [DebateSide.AFF if (adj[0] > adj[1]) else\n                      DebateSide.NEG if (adj[1] > adj[0]) else None\n                      for adj in totals_by_adj],\n}\ntestdata['low-allowed'] = {\n    'winner_by_adj': declared_winners,",
        "detail": "tabbycat.results.tests.generate_testdata",
        "documentation": {}
    },
    {
        "label": "common_fields['everyone_margins']",
        "kind": 5,
        "importPath": "tabbycat.results.tests.generate_testdata",
        "description": "tabbycat.results.tests.generate_testdata",
        "peekOfCode": "common_fields['everyone_margins'] = [aff_margin, -aff_margin]\n# Winners, according to scoresheet type\ntestdata['high-required'] = {\n    'winner_by_adj': [DebateSide.AFF if (adj[0] > adj[1]) else\n                      DebateSide.NEG if (adj[1] > adj[0]) else None\n                      for adj in totals_by_adj],\n}\ntestdata['low-allowed'] = {\n    'winner_by_adj': declared_winners,\n}",
        "detail": "tabbycat.results.tests.generate_testdata",
        "documentation": {}
    },
    {
        "label": "testdata['high-required']",
        "kind": 5,
        "importPath": "tabbycat.results.tests.generate_testdata",
        "description": "tabbycat.results.tests.generate_testdata",
        "peekOfCode": "testdata['high-required'] = {\n    'winner_by_adj': [DebateSide.AFF if (adj[0] > adj[1]) else\n                      DebateSide.NEG if (adj[1] > adj[0]) else None\n                      for adj in totals_by_adj],\n}\ntestdata['low-allowed'] = {\n    'winner_by_adj': declared_winners,\n}\ntestdata['tied-allowed'] = {\n    'winner_by_adj': [DebateSide.AFF if (adj[0] >= adj[1]) and declared == DebateSide.AFF else",
        "detail": "tabbycat.results.tests.generate_testdata",
        "documentation": {}
    },
    {
        "label": "testdata['low-allowed']",
        "kind": 5,
        "importPath": "tabbycat.results.tests.generate_testdata",
        "description": "tabbycat.results.tests.generate_testdata",
        "peekOfCode": "testdata['low-allowed'] = {\n    'winner_by_adj': declared_winners,\n}\ntestdata['tied-allowed'] = {\n    'winner_by_adj': [DebateSide.AFF if (adj[0] >= adj[1]) and declared == DebateSide.AFF else\n                      DebateSide.NEG if (adj[1] >= adj[0]) and declared == DebateSide.NEG else\n                      None for adj, declared in zip(totals_by_adj, declared_winners)],\n}\nfor scoresheet_type in ['high-required', 'low-allowed', 'tied-allowed']:\n    fields = testdata[scoresheet_type]",
        "detail": "tabbycat.results.tests.generate_testdata",
        "documentation": {}
    },
    {
        "label": "testdata['tied-allowed']",
        "kind": 5,
        "importPath": "tabbycat.results.tests.generate_testdata",
        "description": "tabbycat.results.tests.generate_testdata",
        "peekOfCode": "testdata['tied-allowed'] = {\n    'winner_by_adj': [DebateSide.AFF if (adj[0] >= adj[1]) and declared == DebateSide.AFF else\n                      DebateSide.NEG if (adj[1] >= adj[0]) and declared == DebateSide.NEG else\n                      None for adj, declared in zip(totals_by_adj, declared_winners)],\n}\nfor scoresheet_type in ['high-required', 'low-allowed', 'tied-allowed']:\n    fields = testdata[scoresheet_type]\n    winner_by_adj = fields['winner_by_adj']\n    fields['sheets_valid'] = [winner is not None for winner in winner_by_adj]\n    fields['valid'] = all(fields['sheets_valid'])",
        "detail": "tabbycat.results.tests.generate_testdata",
        "documentation": {}
    },
    {
        "label": "BaseTestDebateResult",
        "kind": 6,
        "importPath": "tabbycat.results.tests.test_result",
        "description": "tabbycat.results.tests.test_result",
        "peekOfCode": "class BaseTestDebateResult(TestCase):\n    SIDES = [DebateSide.AFF, DebateSide.NEG]\n    def setUp(self):\n        self.tournament = Tournament.objects.create(slug=\"resulttest\", name=\"ResultTest\")\n        self.teams = []\n        for i in range(2):\n            inst = Institution.objects.create(code=\"Inst{:d}\".format(i), name=\"Institution {:d}\".format(i))\n            team = Team.objects.create(tournament=self.tournament, institution=inst, reference=\"Team {:d}\".format(i), use_institution_prefix=False)\n            self.teams.append(team)\n            for j in range(3):",
        "detail": "tabbycat.results.tests.test_result",
        "documentation": {}
    },
    {
        "label": "GeneralSpeakerTestsMixin",
        "kind": 6,
        "importPath": "tabbycat.results.tests.test_result",
        "description": "tabbycat.results.tests.test_result",
        "peekOfCode": "class GeneralSpeakerTestsMixin:\n    @standard_test\n    def test_save(self, result, testdata, scoresheet_type):\n        # Run self.save_complete_result and check completeness\n        self.assertTrue(result.is_complete())\n    def test_unknown_speaker(self):\n        self.save_complete_result(self.testdata['high'])\n        result = self.get_result()\n        neg_speaker = self.teams[1].speaker_set.first()\n        with self.assertLogs('results.result', level=logging.ERROR):",
        "detail": "tabbycat.results.tests.test_result",
        "documentation": {}
    },
    {
        "label": "TestVotingDebateResultWithScores",
        "kind": 6,
        "importPath": "tabbycat.results.tests.test_result",
        "description": "tabbycat.results.tests.test_result",
        "peekOfCode": "class TestVotingDebateResultWithScores(GeneralSpeakerTestsMixin, BaseTestDebateResult):\n    # Currently, the low-allowed and tie-allowed data aren't actually used, but\n    # they are in place for future use, for when declared winners get fully\n    # implemented.\n    debate_result_class = DebateResultByAdjudicatorWithScores\n    testdata = dict()\n    testdata['high'] = { # standard high-point win\n        'input': {\n            'declared_winners': [DebateSide.AFF, DebateSide.NEG, DebateSide.NEG],\n            'scores': [[[75.0, 76.0, 74.0, 38.0], [76.0, 73.0, 75.0, 37.5]],",
        "detail": "tabbycat.results.tests.test_result",
        "documentation": {}
    },
    {
        "label": "TestConsensusDebateResultWithScores",
        "kind": 6,
        "importPath": "tabbycat.results.tests.test_result",
        "description": "tabbycat.results.tests.test_result",
        "peekOfCode": "class TestConsensusDebateResultWithScores(GeneralSpeakerTestsMixin, BaseTestDebateResult):\n    debate_result_class = ConsensusDebateResultWithScores\n    testdata = dict()\n    testdata['high'] = {\n        'declared_winner': DebateSide.AFF,\n        'scores': [[75.0, 76.0, 74.0, 38.0], [76.0, 73.0, 75.0, 37.5]],\n        'num_adjs': 3,\n        'num_speakers_per_team': 3,\n        'totals': [263.0, 261.5],\n        'margins': [1.5, -1.5],",
        "detail": "tabbycat.results.tests.test_result",
        "documentation": {}
    },
    {
        "label": "standard_test",
        "kind": 2,
        "importPath": "tabbycat.results.tests.test_result",
        "description": "tabbycat.results.tests.test_result",
        "peekOfCode": "def standard_test(test_fn):\n    \"\"\"Decorator. Tests on all dataset in self.testdata, and all scoresheet\n    types listed in the arguments. Tests should take four arguments: self,\n    result, testdata and scoresheet_type, where\n    `result` is a DebateResult object,\n    `testdata` is a value in `BaseTestDebateResult.testdata`, and\n    `scoresheet_type` is one of the scoresheet_types.\n    \"\"\"\n    def wrapped(self):\n      for scoresheet_type in ['high-required']:  # noqa: E111",
        "detail": "tabbycat.results.tests.test_result",
        "documentation": {}
    },
    {
        "label": "with_preference",
        "kind": 2,
        "importPath": "tabbycat.results.tests.test_result",
        "description": "tabbycat.results.tests.test_result",
        "peekOfCode": "def with_preference(section, name, value):\n    \"\"\"Decorator. Sets a tournament preference before it begins the wrapped\n    function. The main purpose of this decorator is to be used with other\n    decorators, otherwise it could obviously just be achieved with a single\n    line at the beginning of the function. This decorator should normally be\n    placed first in the decorator chain, so that it is the outermost\n    wrapper.\"\"\"\n    def wrap(test_fn):\n        def wrapped(self):\n            self.set_tournament_preference(section, name, value)",
        "detail": "tabbycat.results.tests.test_result",
        "documentation": {}
    },
    {
        "label": "incomplete_test",
        "kind": 2,
        "importPath": "tabbycat.results.tests.test_result",
        "description": "tabbycat.results.tests.test_result",
        "peekOfCode": "def incomplete_test(test_fn):\n    \"\"\"Decorator. The test function should somehow make `result` incomplete.\n    This then wraps the function to assert that the result does indeed think\n    itself to be incomplete.\"\"\"\n    def wrap(self):\n        testdata = self.testdata['high']\n        if not BallotSubmission.objects.filter(debate=self.debate, confirmed=True).exists():\n            self.save_complete_result(testdata)\n        result = self.get_result()\n        test_fn(self, result)",
        "detail": "tabbycat.results.tests.test_result",
        "documentation": {}
    },
    {
        "label": "bad_load_assertion_test",
        "kind": 2,
        "importPath": "tabbycat.results.tests.test_result",
        "description": "tabbycat.results.tests.test_result",
        "peekOfCode": "def bad_load_assertion_test(test_fn):\n    \"\"\"Decorator. The test function should somehow make `result` incorrectly\n    loaded. This then wraps the function to assert that the result does indeed\n    think itself to be incorrectly loaded.\"\"\"\n    def wrap(self):\n        testdata = self.testdata['high']\n        if not BallotSubmission.objects.filter(debate=self.debate, confirmed=True).exists():\n            self.save_complete_result(testdata)\n        result = self.get_result()\n        test_fn(self, result)",
        "detail": "tabbycat.results.tests.test_result",
        "documentation": {}
    },
    {
        "label": "TestTwoTeamScoresheets",
        "kind": 6,
        "importPath": "tabbycat.results.tests.test_scoresheet",
        "description": "tabbycat.results.tests.test_scoresheet",
        "peekOfCode": "class TestTwoTeamScoresheets(unittest.TestCase):\n    sides = [DebateSide.AFF, DebateSide.NEG]\n    testdata = dict()\n    testdata[1] = {  # normal\n        'positions': [1, 2, 3, 4],\n        'scores': [[75.0, 76.0, 74.0, 38.0], [76.0, 73.0, 75.0, 37.5]],\n        'declared_winner': DebateSide.AFF,\n        'complete_scores': True,\n        'complete_declared': True,\n        'totals': [263, 261.5],",
        "detail": "tabbycat.results.tests.test_scoresheet",
        "documentation": {}
    },
    {
        "label": "TestPolyScoresheets",
        "kind": 6,
        "importPath": "tabbycat.results.tests.test_scoresheet",
        "description": "tabbycat.results.tests.test_scoresheet",
        "peekOfCode": "class TestPolyScoresheets(unittest.TestCase):\n    sides = [DebateSide.OG, DebateSide.OO, DebateSide.CG, DebateSide.CO]\n    positions = [1, 2]\n    testdata = {}\n    testdata[1] = {  # normal\n        'scores': [[76, 69], [76, 70], [72, 85], [69, 85]],\n        'complete': True,\n        'ranks': [DebateSide.CG, DebateSide.CO, DebateSide.OO, DebateSide.OG],\n        'totals': [145, 146, 157, 154],\n    }",
        "detail": "tabbycat.results.tests.test_scoresheet",
        "documentation": {}
    },
    {
        "label": "on_all_testdata",
        "kind": 2,
        "importPath": "tabbycat.results.tests.test_scoresheet",
        "description": "tabbycat.results.tests.test_scoresheet",
        "peekOfCode": "def on_all_testdata(test_fn):\n    \"\"\"Decorator. Tests should be written to take two arguments: self,\n     testdata. 'scoresheet' is a Scoresheet object. 'testdata'\n    is a value of BaseBaseScoresheet.testdata. This decorator then sets up\n    the scoresheet and runs the test once for each test dataset in\n    BaseBaseScoresheet.testdata.\"\"\"\n    def foo(self):\n        for testdata in self.testdata.values():\n            test_fn(self, testdata)\n    return foo",
        "detail": "tabbycat.results.tests.test_scoresheet",
        "documentation": {}
    },
    {
        "label": "PublicResultsForRoundViewTestCase",
        "kind": 6,
        "importPath": "tabbycat.results.tests.test_views",
        "description": "tabbycat.results.tests.test_views",
        "peekOfCode": "class PublicResultsForRoundViewTestCase(ConditionalTableViewTestsMixin, TestCase):\n    view_toggle_preference = 'public_features__public_results'\n    view_name = 'results-public-round'\n    round_seq = 3\n    def expected_row_counts(self):\n        return [self.round.debate_set.count() * 2]",
        "detail": "tabbycat.results.tests.test_views",
        "documentation": {}
    },
    {
        "label": "BallotSubmissionAdmin",
        "kind": 6,
        "importPath": "tabbycat.results.admin",
        "description": "tabbycat.results.admin",
        "peekOfCode": "class BallotSubmissionAdmin(TabbycatModelAdminFieldsMixin, ModelAdmin):\n    list_display = ('id', 'debate', 'version', 'get_round', 'timestamp',\n            'submitter_type', 'submitter', 'confirmer', 'confirmed')\n    list_editable = ('confirmed',)\n    search_fields = ('debate__debateteam__team__short_name', 'debate__debateteam__team__institution__name')\n    raw_id_fields = ('debate', 'motion')\n    list_filter = ('debate__round', 'debate__round__tournament', 'submitter', 'confirmer')\n    # This incurs a massive performance hit\n    # inlines = (SpeakerScoreByAdjInline, SpeakerScoreInline, TeamScoreInline)\n    actions = ['resave_ballots']",
        "detail": "tabbycat.results.admin",
        "documentation": {}
    },
    {
        "label": "TeamScoreAdmin",
        "kind": 6,
        "importPath": "tabbycat.results.admin",
        "description": "tabbycat.results.admin",
        "peekOfCode": "class TeamScoreAdmin(TabbycatModelAdminFieldsMixin, ModelAdmin):\n    list_display = ('id', 'ballot_submission', 'get_round', 'get_team', 'points', 'win', 'score')\n    search_fields = ('debate_team__debate__round__seq', 'debate_team__debate__round__tournament__name',\n                     'debate_team__team__short_name', 'debate_team__team__institution__name')\n    list_filter = ('debate_team__debate__round', )\n    raw_id_fields = ('ballot_submission', 'debate_team')\n    def get_queryset(self, request):\n        return super(TeamScoreAdmin, self).get_queryset(request).select_related(\n            'ballot_submission__debate__round__tournament',\n            'debate_team__team__tournament',",
        "detail": "tabbycat.results.admin",
        "documentation": {}
    },
    {
        "label": "TeamScoreByAdjAdmin",
        "kind": 6,
        "importPath": "tabbycat.results.admin",
        "description": "tabbycat.results.admin",
        "peekOfCode": "class TeamScoreByAdjAdmin(TabbycatModelAdminFieldsMixin, ModelAdmin):\n    list_display = ('id', 'ballot_submission', 'get_round', 'get_adj_name', 'get_team', 'win', 'margin', 'score')\n    search_fields = ('debate_team__debate__round__seq', 'debate_team__debate__round__tournament__name',\n                     'debate_team__team__short_name', 'debate_team__team__institution__name')\n    list_filter = ('debate_team__debate__round', 'debate_adjudicator__adjudicator__name')\n    raw_id_fields = ('ballot_submission', 'debate_adjudicator', 'debate_team')\n    def get_queryset(self, request):\n        return super(TeamScoreByAdjAdmin, self).get_queryset(request).select_related(\n            'ballot_submission__debate__round__tournament',\n            'debate_adjudicator__adjudicator',",
        "detail": "tabbycat.results.admin",
        "documentation": {}
    },
    {
        "label": "SpeakerScoreAdmin",
        "kind": 6,
        "importPath": "tabbycat.results.admin",
        "description": "tabbycat.results.admin",
        "peekOfCode": "class SpeakerScoreAdmin(TabbycatModelAdminFieldsMixin, ModelAdmin):\n    list_display = ('id', 'ballot_submission', 'get_round', 'get_team', 'position',\n                    'get_speaker_name', 'score', 'ghost')\n    search_fields = ('debate_team__debate__round__abbreviation',\n                     'debate_team__team__short_name', 'debate_team__team__institution__name',\n                     'speaker__name')\n    list_filter = ('score', 'debate_team__debate__round', 'ghost')\n    raw_id_fields = ('debate_team', 'ballot_submission')\n    def get_queryset(self, request):\n        return super(SpeakerScoreAdmin, self).get_queryset(request).select_related(",
        "detail": "tabbycat.results.admin",
        "documentation": {}
    },
    {
        "label": "SpeakerScoreByAdjAdmin",
        "kind": 6,
        "importPath": "tabbycat.results.admin",
        "description": "tabbycat.results.admin",
        "peekOfCode": "class SpeakerScoreByAdjAdmin(TabbycatModelAdminFieldsMixin, ModelAdmin):\n    list_display = ('id', 'ballot_submission', 'get_round', 'get_adj_name', 'get_team', 'position', 'get_speaker_name', 'score')\n    search_fields = ('debate_team__debate__round__seq',\n                     'debate_team__team__short_name', 'debate_team__team__institution__name',\n                     'debate_adjudicator__adjudicator__name')\n    list_filter = ('debate_team__debate__round', 'debate_adjudicator__adjudicator__name',\n                   'debate_adjudicator__type')\n    raw_id_fields = ('debate_team', 'debate_adjudicator', 'ballot_submission')\n    @admin.display(description=_(\"Speaker\"))\n    def get_speaker_name(self, obj):",
        "detail": "tabbycat.results.admin",
        "documentation": {}
    },
    {
        "label": "SpeakerCriterionScoreAdmin",
        "kind": 6,
        "importPath": "tabbycat.results.admin",
        "description": "tabbycat.results.admin",
        "peekOfCode": "class SpeakerCriterionScoreAdmin(TabbycatModelAdminFieldsMixin, ModelAdmin):\n    list_display = ('id', 'criterion', 'speaker_score', 'score')\n    search_fields = ('criterion', 'score', 'speaker_score')\n# ==============================================================================\n# SpeakerCriterionScoreByAdj\n# ==============================================================================\n@admin.register(SpeakerCriterionScoreByAdj)\nclass SpeakerCriterionScoreByAdjAdmin(TabbycatModelAdminFieldsMixin, ModelAdmin):\n    list_display = ('id', 'criterion', 'speaker_score_by_adj', 'score')\n    search_fields = ('criterion', 'score', 'speaker_score_by_adj')",
        "detail": "tabbycat.results.admin",
        "documentation": {}
    },
    {
        "label": "SpeakerCriterionScoreByAdjAdmin",
        "kind": 6,
        "importPath": "tabbycat.results.admin",
        "description": "tabbycat.results.admin",
        "peekOfCode": "class SpeakerCriterionScoreByAdjAdmin(TabbycatModelAdminFieldsMixin, ModelAdmin):\n    list_display = ('id', 'criterion', 'speaker_score_by_adj', 'score')\n    search_fields = ('criterion', 'score', 'speaker_score_by_adj')\n# ==============================================================================\n# SpeakerCriterion\n# ==============================================================================\n@admin.register(ScoreCriterion)\nclass ScoreCriterionAdmin(TabbycatModelAdminFieldsMixin, ModelAdmin):\n    list_display = ('id', 'tournament', 'name', 'seq')\n    search_fields = ('tournament', 'name')",
        "detail": "tabbycat.results.admin",
        "documentation": {}
    },
    {
        "label": "ScoreCriterionAdmin",
        "kind": 6,
        "importPath": "tabbycat.results.admin",
        "description": "tabbycat.results.admin",
        "peekOfCode": "class ScoreCriterionAdmin(TabbycatModelAdminFieldsMixin, ModelAdmin):\n    list_display = ('id', 'tournament', 'name', 'seq')\n    search_fields = ('tournament', 'name')",
        "detail": "tabbycat.results.admin",
        "documentation": {}
    },
    {
        "label": "ResultsConfig",
        "kind": 6,
        "importPath": "tabbycat.results.apps",
        "description": "tabbycat.results.apps",
        "peekOfCode": "class ResultsConfig(AppConfig):\n    name = 'results'\n    verbose_name = _(\"Results\")",
        "detail": "tabbycat.results.apps",
        "documentation": {}
    },
    {
        "label": "BallotResultConsumer",
        "kind": 6,
        "importPath": "tabbycat.results.consumers",
        "description": "tabbycat.results.consumers",
        "peekOfCode": "class BallotResultConsumer(LoginRequiredWebsocketMixin, TournamentWebsocketMixin, JsonWebsocketConsumer):\n    group_prefix = 'ballot_results'\nclass BallotStatusConsumer(LoginRequiredWebsocketMixin, TournamentWebsocketMixin, JsonWebsocketConsumer):\n    group_prefix = 'ballot_statuses'",
        "detail": "tabbycat.results.consumers",
        "documentation": {}
    },
    {
        "label": "BallotStatusConsumer",
        "kind": 6,
        "importPath": "tabbycat.results.consumers",
        "description": "tabbycat.results.consumers",
        "peekOfCode": "class BallotStatusConsumer(LoginRequiredWebsocketMixin, TournamentWebsocketMixin, JsonWebsocketConsumer):\n    group_prefix = 'ballot_statuses'",
        "detail": "tabbycat.results.consumers",
        "documentation": {}
    },
    {
        "label": "add_results_to_round",
        "kind": 2,
        "importPath": "tabbycat.results.dbutils",
        "description": "tabbycat.results.dbutils",
        "peekOfCode": "def add_results_to_round(round, **kwargs):\n    \"\"\"Calls add_result() for every debate in the given round.\"\"\"\n    for debate in round.debate_set.all():\n        add_result(debate, **kwargs)\ndef add_results_to_round_partial(round, num, **kwargs):\n    \"\"\"Calls ``add_result()`` on ``num`` randomly-chosen debates in the given round.\"\"\"\n    debates = random.sample(list(round.debate_set.all()), num)\n    for debate in debates:\n        add_result(debate, **kwargs)\ndef delete_all_ballotsubs_for_round(round):",
        "detail": "tabbycat.results.dbutils",
        "documentation": {}
    },
    {
        "label": "add_results_to_round_partial",
        "kind": 2,
        "importPath": "tabbycat.results.dbutils",
        "description": "tabbycat.results.dbutils",
        "peekOfCode": "def add_results_to_round_partial(round, num, **kwargs):\n    \"\"\"Calls ``add_result()`` on ``num`` randomly-chosen debates in the given round.\"\"\"\n    debates = random.sample(list(round.debate_set.all()), num)\n    for debate in debates:\n        add_result(debate, **kwargs)\ndef delete_all_ballotsubs_for_round(round):\n    \"\"\"Deletes all ballot sets from the given round.\"\"\"\n    BallotSubmission.objects.filter(debate__round=round).delete()\ndef delete_ballotsub(debate):\n    \"\"\"Deletes all ballot sets from the given debate.\"\"\"",
        "detail": "tabbycat.results.dbutils",
        "documentation": {}
    },
    {
        "label": "delete_all_ballotsubs_for_round",
        "kind": 2,
        "importPath": "tabbycat.results.dbutils",
        "description": "tabbycat.results.dbutils",
        "peekOfCode": "def delete_all_ballotsubs_for_round(round):\n    \"\"\"Deletes all ballot sets from the given round.\"\"\"\n    BallotSubmission.objects.filter(debate__round=round).delete()\ndef delete_ballotsub(debate):\n    \"\"\"Deletes all ballot sets from the given debate.\"\"\"\n    debate.ballotsubmission_set.all().delete()\ndef fill_scoresheet_randomly(scoresheet, tournament, nattempts=1000):\n    \"\"\"Fills a scoresheet randomly. Operates in-place. Bails if it can't\n    generate a valid scoresheet within 1000 attempts.\"\"\"\n    for attempt in range(nattempts):",
        "detail": "tabbycat.results.dbutils",
        "documentation": {}
    },
    {
        "label": "delete_ballotsub",
        "kind": 2,
        "importPath": "tabbycat.results.dbutils",
        "description": "tabbycat.results.dbutils",
        "peekOfCode": "def delete_ballotsub(debate):\n    \"\"\"Deletes all ballot sets from the given debate.\"\"\"\n    debate.ballotsubmission_set.all().delete()\ndef fill_scoresheet_randomly(scoresheet, tournament, nattempts=1000):\n    \"\"\"Fills a scoresheet randomly. Operates in-place. Bails if it can't\n    generate a valid scoresheet within 1000 attempts.\"\"\"\n    for attempt in range(nattempts):\n        if scoresheet.uses_scores:\n            for side, pos in product(scoresheet.sides, scoresheet.positions):\n                if pos == tournament.reply_position:",
        "detail": "tabbycat.results.dbutils",
        "documentation": {}
    },
    {
        "label": "fill_scoresheet_randomly",
        "kind": 2,
        "importPath": "tabbycat.results.dbutils",
        "description": "tabbycat.results.dbutils",
        "peekOfCode": "def fill_scoresheet_randomly(scoresheet, tournament, nattempts=1000):\n    \"\"\"Fills a scoresheet randomly. Operates in-place. Bails if it can't\n    generate a valid scoresheet within 1000 attempts.\"\"\"\n    for attempt in range(nattempts):\n        if scoresheet.uses_scores:\n            for side, pos in product(scoresheet.sides, scoresheet.positions):\n                if pos == tournament.reply_position:\n                    step = tournament.pref('reply_score_step')\n                    start = tournament.pref('reply_score_min') / step\n                    stop = tournament.pref('reply_score_max') / step",
        "detail": "tabbycat.results.dbutils",
        "documentation": {}
    },
    {
        "label": "add_result",
        "kind": 2,
        "importPath": "tabbycat.results.dbutils",
        "description": "tabbycat.results.dbutils",
        "peekOfCode": "def add_result(debate, submitter_type, user, discarded=False, confirmed=False, reply_random=False):\n    \"\"\"Adds a ballot set to a debate.\n    ``debate`` is the Debate to which the ballot set should be added.\n    ``submitter_type`` is a valid value of BallotSubmission.submitter_type.\n    ``user`` is a User object.\n    ``discarded`` and ``confirmed`` are whether the feedback should be discarded or\n        confirmed, respectively.\n    ``min_score`` and ``max_score`` are the range in which scores should be generated.\"\"\"\n    if discarded and confirmed:\n        raise ValueError(\"Ballot can't be both discarded and confirmed!\")",
        "detail": "tabbycat.results.dbutils",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "tabbycat.results.dbutils",
        "description": "tabbycat.results.dbutils",
        "peekOfCode": "logger = logging.getLogger(__name__)\nUser = get_user_model()\ndef add_results_to_round(round, **kwargs):\n    \"\"\"Calls add_result() for every debate in the given round.\"\"\"\n    for debate in round.debate_set.all():\n        add_result(debate, **kwargs)\ndef add_results_to_round_partial(round, num, **kwargs):\n    \"\"\"Calls ``add_result()`` on ``num`` randomly-chosen debates in the given round.\"\"\"\n    debates = random.sample(list(round.debate_set.all()), num)\n    for debate in debates:",
        "detail": "tabbycat.results.dbutils",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "tabbycat.results.dbutils",
        "description": "tabbycat.results.dbutils",
        "peekOfCode": "User = get_user_model()\ndef add_results_to_round(round, **kwargs):\n    \"\"\"Calls add_result() for every debate in the given round.\"\"\"\n    for debate in round.debate_set.all():\n        add_result(debate, **kwargs)\ndef add_results_to_round_partial(round, num, **kwargs):\n    \"\"\"Calls ``add_result()`` on ``num`` randomly-chosen debates in the given round.\"\"\"\n    debates = random.sample(list(round.debate_set.all()), num)\n    for debate in debates:\n        add_result(debate, **kwargs)",
        "detail": "tabbycat.results.dbutils",
        "documentation": {}
    },
    {
        "label": "FormConstructionError",
        "kind": 6,
        "importPath": "tabbycat.results.forms",
        "description": "tabbycat.results.forms",
        "peekOfCode": "class FormConstructionError(Exception):\n    pass\n# ==============================================================================\n# Result/ballot custom fields\n# ==============================================================================\nclass TournamentPasswordField(forms.CharField):\n    def __init__(self, *args, **kwargs):\n        if 'tournament' in kwargs:\n            tournament = kwargs.pop('tournament')\n            self.password = tournament.pref('public_password')",
        "detail": "tabbycat.results.forms",
        "documentation": {}
    },
    {
        "label": "TournamentPasswordField",
        "kind": 6,
        "importPath": "tabbycat.results.forms",
        "description": "tabbycat.results.forms",
        "peekOfCode": "class TournamentPasswordField(forms.CharField):\n    def __init__(self, *args, **kwargs):\n        if 'tournament' in kwargs:\n            tournament = kwargs.pop('tournament')\n            self.password = tournament.pref('public_password')\n        else:\n            raise TypeError(\"'tournament' is a required keyword argument\")\n        kwargs.setdefault('label', _(\"Tournament password\"))\n        super().__init__(*args, **kwargs)\n    def clean(self, value):",
        "detail": "tabbycat.results.forms",
        "documentation": {}
    },
    {
        "label": "BaseScoreField",
        "kind": 6,
        "importPath": "tabbycat.results.forms",
        "description": "tabbycat.results.forms",
        "peekOfCode": "class BaseScoreField(forms.DecimalField):\n    def __init__(self, *args, **kwargs):\n        \"\"\"Takes an additional optional keyword argument: tournament,\n        the Tournament used to configure the field.\"\"\"\n        tournament = kwargs.pop('tournament', None)\n        if tournament:\n            min_value  = tournament.pref(self.CONFIG_MIN_VALUE_FIELD)\n            max_value  = tournament.pref(self.CONFIG_MAX_VALUE_FIELD)\n            step_value = tournament.pref(self.CONFIG_STEP_VALUE_FIELD)\n        else:",
        "detail": "tabbycat.results.forms",
        "documentation": {}
    },
    {
        "label": "MotionModelChoiceField",
        "kind": 6,
        "importPath": "tabbycat.results.forms",
        "description": "tabbycat.results.forms",
        "peekOfCode": "class MotionModelChoiceField(forms.ModelChoiceField):\n    to_field_name = 'motion_id'\n    def label_from_instance(self, obj):\n        return \"%d. %s\" % (obj.seq, obj.motion.text)\nclass SubstantiveScoreField(BaseScoreField):\n    CONFIG_MIN_VALUE_FIELD  = 'score_min'\n    CONFIG_MAX_VALUE_FIELD  = 'score_max'\n    CONFIG_STEP_VALUE_FIELD = 'score_step'\n    DEFAULT_MIN_VALUE = 68\n    DEFAULT_MAX_VALUE = 82",
        "detail": "tabbycat.results.forms",
        "documentation": {}
    },
    {
        "label": "SubstantiveScoreField",
        "kind": 6,
        "importPath": "tabbycat.results.forms",
        "description": "tabbycat.results.forms",
        "peekOfCode": "class SubstantiveScoreField(BaseScoreField):\n    CONFIG_MIN_VALUE_FIELD  = 'score_min'\n    CONFIG_MAX_VALUE_FIELD  = 'score_max'\n    CONFIG_STEP_VALUE_FIELD = 'score_step'\n    DEFAULT_MIN_VALUE = 68\n    DEFAULT_MAX_VALUE = 82\n    DEFAULT_STEP_VALUE = 1\nclass ReplyScoreField(BaseScoreField):\n    CONFIG_MIN_VALUE_FIELD  = 'reply_score_min'\n    CONFIG_MAX_VALUE_FIELD  = 'reply_score_max'",
        "detail": "tabbycat.results.forms",
        "documentation": {}
    },
    {
        "label": "ReplyScoreField",
        "kind": 6,
        "importPath": "tabbycat.results.forms",
        "description": "tabbycat.results.forms",
        "peekOfCode": "class ReplyScoreField(BaseScoreField):\n    CONFIG_MIN_VALUE_FIELD  = 'reply_score_min'\n    CONFIG_MAX_VALUE_FIELD  = 'reply_score_max'\n    CONFIG_STEP_VALUE_FIELD = 'reply_score_step'\n    DEFAULT_MIN_VALUE = 34.0\n    DEFAULT_MAX_VALUE = 41.0\n    DEFAULT_STEP_VALUE = 0.5\ndef broadcast_results(ballotsub: 'BallotSubmission', debate: Debate):\n    t = debate.round.tournament\n    # 5. Notify the Latest Results consumer (for results/overview)",
        "detail": "tabbycat.results.forms",
        "documentation": {}
    },
    {
        "label": "BaseResultForm",
        "kind": 6,
        "importPath": "tabbycat.results.forms",
        "description": "tabbycat.results.forms",
        "peekOfCode": "class BaseResultForm(forms.Form):\n    \"\"\"Base class for forms that report results. Contains fields and methods\n    common to absolutely everything (which isn't very much).\"\"\"\n    discarded = forms.BooleanField(required=False)\n    result_class = None\n    def __init__(self, ballotsub, tabroom, password=False, *args, **kwargs):\n        self.ballotsub = ballotsub\n        self.debate = ballotsub.debate\n        self.tournament = self.debate.round.tournament\n        self.criteria = self.debate.round.tournament.scorecriterion_set.all().order_by('seq')",
        "detail": "tabbycat.results.forms",
        "documentation": {}
    },
    {
        "label": "BaseBallotSetForm",
        "kind": 6,
        "importPath": "tabbycat.results.forms",
        "description": "tabbycat.results.forms",
        "peekOfCode": "class BaseBallotSetForm(BaseResultForm):\n    \"\"\"Form for data entry for a single ballot set. Responsible for presenting\n    the part that looks like a ballot, i.e. speaker names and scores for each\n    adjudicator. Not responsible for controls that submit the form or anything\n    like that.\n    There are lots of fields that are conditionally displayed according to user\n    preference. Most of these (for example, motions) are simply the presence or\n    absence thereof, and it is easiest to govern these using if-else switches.\n    For more involved customisations, like there is a ballot per adjudicator\n    (voting) or a single ballot for the debate (consensus), we use subclasses.",
        "detail": "tabbycat.results.forms",
        "documentation": {}
    },
    {
        "label": "ScoresMixin",
        "kind": 6,
        "importPath": "tabbycat.results.forms",
        "description": "tabbycat.results.forms",
        "peekOfCode": "class ScoresMixin:\n    has_scores = True\n    # --------------------------------------------------------------------------\n    # Field names and field convenience functions\n    # --------------------------------------------------------------------------\n    @staticmethod\n    def _fieldname_speaker(side, pos):\n        return '%(side)d_speaker_s%(pos)d' % {'side': side, 'pos': pos}\n    @staticmethod\n    def _fieldname_ghost(side, pos):",
        "detail": "tabbycat.results.forms",
        "documentation": {}
    },
    {
        "label": "SingleBallotSetForm",
        "kind": 6,
        "importPath": "tabbycat.results.forms",
        "description": "tabbycat.results.forms",
        "peekOfCode": "class SingleBallotSetForm(ScoresMixin, BaseBallotSetForm):\n    \"\"\"Presents one ballot for the debate. Used for consensus adjudications.\"\"\"\n    def get_preferences_options(self):\n        super().get_preferences_options()\n        self.using_speaker_ranks = self.tournament.pref('speaker_ranks') != 'none'\n    result_class = ConsensusDebateResultWithScores\n    @staticmethod\n    def _fieldname_score(side, pos):\n        return '%(side)d_score_s%(pos)d' % {'side': side, 'pos': pos}\n    @staticmethod",
        "detail": "tabbycat.results.forms",
        "documentation": {}
    },
    {
        "label": "PerAdjudicatorBallotSetForm",
        "kind": 6,
        "importPath": "tabbycat.results.forms",
        "description": "tabbycat.results.forms",
        "peekOfCode": "class PerAdjudicatorBallotSetForm(ScoresMixin, BaseBallotSetForm):\n    \"\"\"Presents one ballot per voting adjudicator. Used for voting\n    adjudications.\"\"\"\n    result_class = DebateResultByAdjudicatorWithScores\n    @staticmethod\n    def _fieldname_score(adj, side, pos):\n        return '%(side)d_score_a%(adj)d_s%(pos)d' % {'adj': adj.id, 'side': side, 'pos': pos}\n    @staticmethod\n    def _fieldname_declared_winner(adj):\n        return 'declared_winner_a%(adj)d' % {'adj': adj.id}",
        "detail": "tabbycat.results.forms",
        "documentation": {}
    },
    {
        "label": "TeamsMixin",
        "kind": 6,
        "importPath": "tabbycat.results.forms",
        "description": "tabbycat.results.forms",
        "peekOfCode": "class TeamsMixin:\n    \"\"\"Provides a multiple-select (checkbox) of the teams for scoreless ballots.\"\"\"\n    has_scores = False\n    def create_participant_fields(self):\n        self.create_score_fields()\n    def create_team_selector(self):\n        # 3(a). List of teams in multiple-select\n        side_choices = [(side, _(\"%(team)s (%(side)s)\") % {\n            'team': team_name_for_data_entry(self.debate.get_team(side), self.use_codes),\n            'side': self._side_name(side)}) for side in self.sides]",
        "detail": "tabbycat.results.forms",
        "documentation": {}
    },
    {
        "label": "SingleEliminationBallotSetForm",
        "kind": 6,
        "importPath": "tabbycat.results.forms",
        "description": "tabbycat.results.forms",
        "peekOfCode": "class SingleEliminationBallotSetForm(TeamsMixin, BaseBallotSetForm):\n    result_class = ConsensusDebateResult\n    @staticmethod\n    def _fieldname_advancing():\n        return 'advancing'\n    def create_score_fields(self):\n        \"\"\"Adds the speaker score fields:\n         - <side>_score_s#,  one for each score\n        \"\"\"\n        self.fields[self._fieldname_advancing()] = self.create_team_selector()",
        "detail": "tabbycat.results.forms",
        "documentation": {}
    },
    {
        "label": "PerAdjudicatorEliminationBallotSetForm",
        "kind": 6,
        "importPath": "tabbycat.results.forms",
        "description": "tabbycat.results.forms",
        "peekOfCode": "class PerAdjudicatorEliminationBallotSetForm(TeamsMixin, BaseBallotSetForm):\n    result_class = DebateResultByAdjudicator\n    @staticmethod\n    def _fieldname_advancing(adj):\n        return 'advancing_a%(adj)d' % {'adj': adj.id}\n    def create_score_fields(self):\n        for adj in self.adjudicators:\n            self.fields[self._fieldname_advancing(adj)] = self.create_team_selector()\n    def list_score_fields(self):\n        return [self._fieldname_advancing(adj) for adj in self.adjudicators]",
        "detail": "tabbycat.results.forms",
        "documentation": {}
    },
    {
        "label": "broadcast_results",
        "kind": 2,
        "importPath": "tabbycat.results.forms",
        "description": "tabbycat.results.forms",
        "peekOfCode": "def broadcast_results(ballotsub: 'BallotSubmission', debate: Debate):\n    t = debate.round.tournament\n    # 5. Notify the Latest Results consumer (for results/overview)\n    if ballotsub.confirmed and debate.result_status == Debate.STATUS_CONFIRMED:\n        group_name = BallotResultConsumer.group_prefix + \"_\" + t.slug\n        async_to_sync(get_channel_layer().group_send)(group_name, {\n            \"type\": \"send_json\",\n            \"data\": ballotsub.serialize_like_actionlog,\n        })\n    # 6. Notify the Results Page/Ballots Status Graph",
        "detail": "tabbycat.results.forms",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "tabbycat.results.forms",
        "description": "tabbycat.results.forms",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass FormConstructionError(Exception):\n    pass\n# ==============================================================================\n# Result/ballot custom fields\n# ==============================================================================\nclass TournamentPasswordField(forms.CharField):\n    def __init__(self, *args, **kwargs):\n        if 'tournament' in kwargs:\n            tournament = kwargs.pop('tournament')",
        "detail": "tabbycat.results.forms",
        "documentation": {}
    },
    {
        "label": "TabroomSubmissionFieldsMixin",
        "kind": 6,
        "importPath": "tabbycat.results.mixins",
        "description": "tabbycat.results.mixins",
        "peekOfCode": "class TabroomSubmissionFieldsMixin:\n    \"\"\"Mixin that provides retrieval of appropriate fields for the Submission\n    instance, used with forms that are submitted by tabroom officials. It is up\n    to subclasses to use get_submitter_fields() appropriately.\"\"\"\n    def get_request(self):\n        return self.request\n    def get_submitter_fields(self):\n        request = self.get_request()\n        return {\n            'submitter': request.user,",
        "detail": "tabbycat.results.mixins",
        "documentation": {}
    },
    {
        "label": "PublicSubmissionFieldsMixin",
        "kind": 6,
        "importPath": "tabbycat.results.mixins",
        "description": "tabbycat.results.mixins",
        "peekOfCode": "class PublicSubmissionFieldsMixin:\n    \"\"\"Mixin that provides retrieval of appropriate fields for the Submission\n    instance, used with forms that are submitted from the public pages. It is up\n    to subclasses to use get_submitter_fields() appropriately.\"\"\"\n    def get_submitter_fields(self):\n        return {\n            'submitter_type': Submission.Submitter.PUBLIC,\n            'ip_address': get_ip_address(self.request),\n        }",
        "detail": "tabbycat.results.mixins",
        "documentation": {}
    },
    {
        "label": "ScoreField",
        "kind": 6,
        "importPath": "tabbycat.results.models",
        "description": "tabbycat.results.models",
        "peekOfCode": "class ScoreField(models.FloatField):\n    pass\nclass Submission(models.Model):\n    \"\"\"Abstract base class to provide functionality common to different\n    types of submissions.\n    The unique_together class attribute of the Meta class MUST be set in\n    all subclasses.\"\"\"\n    class Submitter(models.TextChoices):\n        TABROOM = 'T', _(\"Tab room\")\n        PUBLIC = 'P', _(\"Public\")",
        "detail": "tabbycat.results.models",
        "documentation": {}
    },
    {
        "label": "Submission",
        "kind": 6,
        "importPath": "tabbycat.results.models",
        "description": "tabbycat.results.models",
        "peekOfCode": "class Submission(models.Model):\n    \"\"\"Abstract base class to provide functionality common to different\n    types of submissions.\n    The unique_together class attribute of the Meta class MUST be set in\n    all subclasses.\"\"\"\n    class Submitter(models.TextChoices):\n        TABROOM = 'T', _(\"Tab room\")\n        PUBLIC = 'P', _(\"Public\")\n        AUTOMATION = 'A', _(\"Automation\")\n    timestamp = models.DateTimeField(auto_now_add=True,",
        "detail": "tabbycat.results.models",
        "documentation": {}
    },
    {
        "label": "BallotSubmission",
        "kind": 6,
        "importPath": "tabbycat.results.models",
        "description": "tabbycat.results.models",
        "peekOfCode": "class BallotSubmission(Submission):\n    \"\"\"Represents a single submission of ballots for a debate.\n    (Not a single motion, but a single submission of all ballots for a debate.)\"\"\"\n    debate = models.ForeignKey('draw.Debate', models.CASCADE, db_index=True,\n        verbose_name=_(\"debate\"))\n    motion = models.ForeignKey('motions.Motion', models.SET_NULL, blank=True, null=True,\n        verbose_name=_(\"motion\"))\n    discarded = models.BooleanField(default=False,\n        verbose_name=_(\"discarded\"))\n    single_adj = models.BooleanField(default=False,",
        "detail": "tabbycat.results.models",
        "documentation": {}
    },
    {
        "label": "TeamScoreByAdj",
        "kind": 6,
        "importPath": "tabbycat.results.models",
        "description": "tabbycat.results.models",
        "peekOfCode": "class TeamScoreByAdj(models.Model):\n    \"\"\"Holds team result given by a particular adjudicator in a debate.\n    Mostly redundant; is necessary however for voting elimination ballots.\"\"\"\n    ballot_submission = models.ForeignKey(BallotSubmission, models.CASCADE,\n        verbose_name=_(\"ballot submission\"))\n    debate_adjudicator = models.ForeignKey('adjallocation.DebateAdjudicator', models.CASCADE,\n        verbose_name=_(\"debate adjudicator\"))\n    debate_team = models.ForeignKey('draw.DebateTeam', models.CASCADE,\n        verbose_name=_(\"debate team\"))\n    win = models.BooleanField(null=True, blank=True,",
        "detail": "tabbycat.results.models",
        "documentation": {}
    },
    {
        "label": "SpeakerScoreByAdj",
        "kind": 6,
        "importPath": "tabbycat.results.models",
        "description": "tabbycat.results.models",
        "peekOfCode": "class SpeakerScoreByAdj(models.Model):\n    \"\"\"Holds score given by a particular adjudicator in a debate.\"\"\"\n    ballot_submission = models.ForeignKey(BallotSubmission, models.CASCADE,\n        verbose_name=_(\"ballot submission\"))\n    debate_adjudicator = models.ForeignKey('adjallocation.DebateAdjudicator', models.CASCADE,\n        verbose_name=_(\"debate adjudicator\"))\n    debate_team = models.ForeignKey('draw.DebateTeam', models.CASCADE,\n        verbose_name=_(\"debate team\"))\n    score = ScoreField(verbose_name=_(\"score\"))\n    position = models.IntegerField(verbose_name=_(\"position\"))",
        "detail": "tabbycat.results.models",
        "documentation": {}
    },
    {
        "label": "TeamScore",
        "kind": 6,
        "importPath": "tabbycat.results.models",
        "description": "tabbycat.results.models",
        "peekOfCode": "class TeamScore(models.Model):\n    \"\"\"Stores information about a team's result in a debate. This is all\n    redundant information — it can all be derived from indirectly-related\n    SpeakerScore objects. We use a separate model for it for performance\n    reasons.\"\"\"\n    ballot_submission = models.ForeignKey(BallotSubmission, models.CASCADE,\n        verbose_name=_(\"ballot submission\"))\n    debate_team = models.ForeignKey('draw.DebateTeam', models.CASCADE, db_index=True,\n        verbose_name=_(\"debate team\"))\n    points = models.PositiveSmallIntegerField(null=True, blank=True,",
        "detail": "tabbycat.results.models",
        "documentation": {}
    },
    {
        "label": "SpeakerScoreManager",
        "kind": 6,
        "importPath": "tabbycat.results.models",
        "description": "tabbycat.results.models",
        "peekOfCode": "class SpeakerScoreManager(models.Manager):\n    use_for_related_fields = True\n    def get_queryset(self):\n        return super().get_queryset().select_related('speaker')\nclass SpeakerScore(models.Model):\n    \"\"\"Represents a speaker's (overall) score in a debate.\n    The 'speaker' field is canonical. The 'score' field, however, is a\n    performance enhancement; raw scores are stored in SpeakerScoreByAdj. The\n    result classes in result.py calculates this when it saves a result.\n    \"\"\"",
        "detail": "tabbycat.results.models",
        "documentation": {}
    },
    {
        "label": "SpeakerScore",
        "kind": 6,
        "importPath": "tabbycat.results.models",
        "description": "tabbycat.results.models",
        "peekOfCode": "class SpeakerScore(models.Model):\n    \"\"\"Represents a speaker's (overall) score in a debate.\n    The 'speaker' field is canonical. The 'score' field, however, is a\n    performance enhancement; raw scores are stored in SpeakerScoreByAdj. The\n    result classes in result.py calculates this when it saves a result.\n    \"\"\"\n    ballot_submission = models.ForeignKey(BallotSubmission, models.CASCADE,\n        verbose_name=_(\"ballot submission\"))\n    debate_team = models.ForeignKey('draw.DebateTeam', models.CASCADE,\n        verbose_name=_(\"debate team\"))",
        "detail": "tabbycat.results.models",
        "documentation": {}
    },
    {
        "label": "ScoreCriterion",
        "kind": 6,
        "importPath": "tabbycat.results.models",
        "description": "tabbycat.results.models",
        "peekOfCode": "class ScoreCriterion(models.Model):\n    \"\"\"Score criterion for speaker score\"\"\"\n    tournament = models.ForeignKey(Tournament, models.CASCADE,\n        verbose_name=_(\"tournament\"))\n    name = models.CharField(max_length=20,\n        verbose_name=(\"name\"))\n    seq = models.IntegerField(verbose_name=_(\"sequence\"))\n    weight = models.FloatField(verbose_name=_(\"weight\"))\n    min_score = ScoreField(verbose_name=_(\"minimum score\"))\n    max_score = ScoreField(verbose_name=_(\"maximum score\"))",
        "detail": "tabbycat.results.models",
        "documentation": {}
    },
    {
        "label": "SpeakerCriterionScore",
        "kind": 6,
        "importPath": "tabbycat.results.models",
        "description": "tabbycat.results.models",
        "peekOfCode": "class SpeakerCriterionScore(models.Model):\n    score = ScoreField(verbose_name=_(\"score\"))\n    criterion = models.ForeignKey(ScoreCriterion, models.CASCADE,\n        verbose_name=_(\"score criterion\"))\n    speaker_score = models.ForeignKey(SpeakerScore, models.CASCADE,\n        verbose_name=\"speaker score\")\n    class Meta:\n        constraints = [UniqueConstraint(fields=['speaker_score', 'criterion'])]\n        verbose_name = _(\"speaker score for criterion\")\n        verbose_name_plural = _(\"speaker scores for criteria\")",
        "detail": "tabbycat.results.models",
        "documentation": {}
    },
    {
        "label": "SpeakerCriterionScoreByAdj",
        "kind": 6,
        "importPath": "tabbycat.results.models",
        "description": "tabbycat.results.models",
        "peekOfCode": "class SpeakerCriterionScoreByAdj(models.Model):\n    score = ScoreField(verbose_name=_(\"score\"))\n    criterion = models.ForeignKey(ScoreCriterion, models.CASCADE,\n        verbose_name=_(\"score criterion\"))\n    speaker_score_by_adj = models.ForeignKey(SpeakerScoreByAdj, models.CASCADE,\n        verbose_name=\"speaker score\")\n    class Meta:\n        constraints = [UniqueConstraint(fields=['speaker_score_by_adj', 'criterion'])]\n        verbose_name = _(\"speaker score for criterion by adjudicator\")\n        verbose_name_plural = _(\"speaker scores for criteria by adjudicator\")",
        "detail": "tabbycat.results.models",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "tabbycat.results.models",
        "description": "tabbycat.results.models",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass ScoreField(models.FloatField):\n    pass\nclass Submission(models.Model):\n    \"\"\"Abstract base class to provide functionality common to different\n    types of submissions.\n    The unique_together class attribute of the Meta class MUST be set in\n    all subclasses.\"\"\"\n    class Submitter(models.TextChoices):\n        TABROOM = 'T', _(\"Tab room\")",
        "detail": "tabbycat.results.models",
        "documentation": {}
    },
    {
        "label": "populate_wins",
        "kind": 2,
        "importPath": "tabbycat.results.prefetch",
        "description": "tabbycat.results.prefetch",
        "peekOfCode": "def populate_wins(debates):\n    \"\"\"Sets the attributes `_win` and `_points` on each DebateTeam in each\n    Debate, representing whether they won the debate and how many points they\n    got from it. For best results, the caller should already have had\n    Prefetch('debateteam_set', queryset=DebateTeam.objects.select_related('team'))\n    prefetched on the query set.\n    This can be used for efficiency, since it retrieves all the\n    information in bulk in a single SQL query. Operates in-place.\n    \"\"\"\n    debateteams = [dt for debate in debates for dt in debate.debateteam_set.all()]",
        "detail": "tabbycat.results.prefetch",
        "documentation": {}
    },
    {
        "label": "populate_wins_for_debateteams",
        "kind": 2,
        "importPath": "tabbycat.results.prefetch",
        "description": "tabbycat.results.prefetch",
        "peekOfCode": "def populate_wins_for_debateteams(debateteams):\n    teamscores = TeamScore.objects.filter(debate_team__in=debateteams, ballot_submission__confirmed=True)\n    teamscores_by_debateteam_id = {teamscore.debate_team_id: teamscore for teamscore in teamscores}\n    for debateteam in debateteams:\n        teamscore = teamscores_by_debateteam_id.get(debateteam.id, None)\n        if teamscore is not None:\n            debateteam._win = teamscore.win\n            debateteam._points = teamscore.points\n        else:\n            debateteam._win = None",
        "detail": "tabbycat.results.prefetch",
        "documentation": {}
    },
    {
        "label": "populate_confirmed_ballots",
        "kind": 2,
        "importPath": "tabbycat.results.prefetch",
        "description": "tabbycat.results.prefetch",
        "peekOfCode": "def populate_confirmed_ballots(debates, motions=False, results=False):\n    \"\"\"Sets an attribute `_confirmed_ballot` on each Debate, each being the\n    BallotSubmission instance for that debate.\n    All the debates are assumed to be from the same tournament as the first.\n    This can be used for efficiency, since it retrieves all the\n    information in bulk in a single SQL query. Operates in-place.\n    For best performance, the debates should already have\n    debateadjudicator_set__adjudicator prefetched.\n    \"\"\"\n    confirmed_ballots = BallotSubmission.objects.filter(debate__in=debates, confirmed=True)",
        "detail": "tabbycat.results.prefetch",
        "documentation": {}
    },
    {
        "label": "populate_checkins",
        "kind": 2,
        "importPath": "tabbycat.results.prefetch",
        "description": "tabbycat.results.prefetch",
        "peekOfCode": "def populate_checkins(debates, tournament):\n    get_checkins(debates, tournament, None)\ndef populate_results(ballotsubs, tournament=None):\n    \"\"\"Populates the `_result` attribute of each BallotSubmission in\n    `ballotsubs` with a populated DebateResult instance.\n    For best performance, the ballot submissions should already have their\n    debates prefetched (using select_related).\n    \"\"\"\n    # If the database is correct, some checks like `result.is_voting`,\n    # `result.uses_speakers` etc. should be redundant. But it's best not to",
        "detail": "tabbycat.results.prefetch",
        "documentation": {}
    },
    {
        "label": "populate_results",
        "kind": 2,
        "importPath": "tabbycat.results.prefetch",
        "description": "tabbycat.results.prefetch",
        "peekOfCode": "def populate_results(ballotsubs, tournament=None):\n    \"\"\"Populates the `_result` attribute of each BallotSubmission in\n    `ballotsubs` with a populated DebateResult instance.\n    For best performance, the ballot submissions should already have their\n    debates prefetched (using select_related).\n    \"\"\"\n    # If the database is correct, some checks like `result.is_voting`,\n    # `result.uses_speakers` etc. should be redundant. But it's best not to\n    # assume this, so we always check these before calling a method that only\n    # exists in some DebateResult subclasses.",
        "detail": "tabbycat.results.prefetch",
        "documentation": {}
    },
    {
        "label": "ResultError",
        "kind": 6,
        "importPath": "tabbycat.results.result",
        "description": "tabbycat.results.result",
        "peekOfCode": "class ResultError(RuntimeError):\n    pass\ndef get_result_class(ballotsub, round=None, tournament=None):\n    if round is None:\n        round = ballotsub.round\n    if tournament is None:\n        tournament = round.tournament\n    teams_in_debate = tournament.pref('teams_in_debate')\n    ballots_per_debate = round.ballots_per_debate\n    scores_in_debate = tournament.pref('speakers_in_ballots')",
        "detail": "tabbycat.results.result",
        "documentation": {}
    },
    {
        "label": "BaseDebateResult",
        "kind": 6,
        "importPath": "tabbycat.results.result",
        "description": "tabbycat.results.result",
        "peekOfCode": "class BaseDebateResult:\n    \"\"\"Base class for debate result.\n    The base class implements management of debate teams, side allocations and\n    team score saving.\n    The loading process calls three functions in turn:\n      - First, it calls `self.init_blank_buffer()`, which should initialize\n        \"blank\" buffers for all information that it stores to eventually be\n        saved to the database.\n      - Then, it calls `self.load_from_db()`, which reads the database and\n        populates the buffers accordingly.",
        "detail": "tabbycat.results.result",
        "documentation": {}
    },
    {
        "label": "DebateResultByAdjudicator",
        "kind": 6,
        "importPath": "tabbycat.results.result",
        "description": "tabbycat.results.result",
        "peekOfCode": "class DebateResultByAdjudicator(BaseDebateResult):\n    \"\"\"Base class for voting ballots.\n    Voting ballots have a DebateResult with one scoresheet per voting adjudicator.\n    This also provides access to the TeamScoreByAdj table.\n    This mixin presupposes the use of two-team scoresheets, as it would be impossible\n    to have a voting BP result (Arrow's impossibility theorem)\"\"\"\n    teamscorebyadj_fields = ['win', 'margin', 'score']\n    is_voting = True\n    def __init__(self, ballotsub, load=True, **kwargs):\n        super().__init__(ballotsub, load=load, **kwargs)",
        "detail": "tabbycat.results.result",
        "documentation": {}
    },
    {
        "label": "DebateResultWithScoresMixin",
        "kind": 6,
        "importPath": "tabbycat.results.result",
        "description": "tabbycat.results.result",
        "peekOfCode": "class DebateResultWithScoresMixin:\n    \"\"\"Mixin to provide methods to interact with SpeakerScore.\"\"\"\n    speakerscore_fields = ['score', 'speaker', 'ghost', 'rank']\n    speakercriterionscore_fields = ['score']\n    uses_declared_winners = False\n    uses_speakers = True\n    def __init__(self, ballotsub, load=True, criteria=[], **kwargs):\n        super().__init__(ballotsub, load=False, **kwargs)\n        self.positions = self.tournament.positions\n        self.criteria = criteria or []",
        "detail": "tabbycat.results.result",
        "documentation": {}
    },
    {
        "label": "ConsensusDebateResult",
        "kind": 6,
        "importPath": "tabbycat.results.result",
        "description": "tabbycat.results.result",
        "peekOfCode": "class ConsensusDebateResult(BaseDebateResult):\n    \"\"\"Consensus debate result without scores\"\"\"\n    def init_blank_buffer(self):\n        super().init_blank_buffer()\n        self.scoresheet = self.scoresheet_class(sides=self.sides, positions=getattr(self, 'positions', None), criteria=getattr(self, 'criteria', []))\n        if self.scoresheet_class is PolyEliminationScoresheet and self.debate.round.is_last:\n            self.scoresheet.number_winners = 1\n    def is_complete(self):\n        return super().is_complete() and self.scoresheet.is_complete()\n    def is_valid(self):",
        "detail": "tabbycat.results.result",
        "documentation": {}
    },
    {
        "label": "ConsensusDebateResultWithScores",
        "kind": 6,
        "importPath": "tabbycat.results.result",
        "description": "tabbycat.results.result",
        "peekOfCode": "class ConsensusDebateResultWithScores(DebateResultWithScoresMixin, ConsensusDebateResult):\n    \"\"\"Consensus debate result including speaker scores\"\"\"\n    @property\n    def scoresheet_class(self):\n        if len(self.sides) == 2:\n            return super().scoresheet_class\n        else:\n            return PolyScoresheet\n    def load_scoresheets(self):\n        super().load_scoresheets()",
        "detail": "tabbycat.results.result",
        "documentation": {}
    },
    {
        "label": "DebateResultByAdjudicatorWithScores",
        "kind": 6,
        "importPath": "tabbycat.results.result",
        "description": "tabbycat.results.result",
        "peekOfCode": "class DebateResultByAdjudicatorWithScores(DebateResultWithScoresMixin, DebateResultByAdjudicator):\n    \"\"\"Gives access to SpeakerScoreByAdj and scores of TeamScoreByAdj\"\"\"\n    speakerscorebyadj_fields = ['score']\n    speakercriterionscorebyadj_fields = ['score']\n    # --------------------------------------------------------------------------\n    # Load and save methods\n    # --------------------------------------------------------------------------\n    def load_scoresheets(self):\n        super().load_scoresheets()\n        speakerscorebyadjs = self.ballotsub.speakerscorebyadj_set.filter(",
        "detail": "tabbycat.results.result",
        "documentation": {}
    },
    {
        "label": "get_result_class",
        "kind": 2,
        "importPath": "tabbycat.results.result",
        "description": "tabbycat.results.result",
        "peekOfCode": "def get_result_class(ballotsub, round=None, tournament=None):\n    if round is None:\n        round = ballotsub.round\n    if tournament is None:\n        tournament = round.tournament\n    teams_in_debate = tournament.pref('teams_in_debate')\n    ballots_per_debate = round.ballots_per_debate\n    scores_in_debate = tournament.pref('speakers_in_ballots')\n    if ballots_per_debate == 'per-debate' or ballotsub.single_adj:\n        if ((teams_in_debate > 2 or scores_in_debate == 'prelim') and round.is_break_round) or scores_in_debate == 'never':",
        "detail": "tabbycat.results.result",
        "documentation": {}
    },
    {
        "label": "get_class_name",
        "kind": 2,
        "importPath": "tabbycat.results.result",
        "description": "tabbycat.results.result",
        "peekOfCode": "def get_class_name(ballotsub, round, tournament=None):\n    return get_result_class(ballotsub, round, tournament).__name__\ndef is_integer_step(tournament: 'Tournament', ss: Union['SpeakerScore', 'SpeakerScoreByAdj']) -> bool:\n    return (\n        ss.position > tournament.pref('substantive_speakers') and tournament.pref('reply_score_step') == int(tournament.pref('reply_score_step'))\n    ) or (ss.position <= tournament.pref('substantive_speakers') and tournament.pref('score_step') == int(tournament.pref('score_step')))\ndef DebateResult(ballotsub, *args, **kwargs):  # noqa: N802 (factory function)\n    \"\"\"Factory function. Returns an instance of a subclass of BaseDebateResult\n    appropriate for the ballot submission's tournament's settings.\n    If `tournament` is provided as a keyword argument, the function wil use this",
        "detail": "tabbycat.results.result",
        "documentation": {}
    },
    {
        "label": "is_integer_step",
        "kind": 2,
        "importPath": "tabbycat.results.result",
        "description": "tabbycat.results.result",
        "peekOfCode": "def is_integer_step(tournament: 'Tournament', ss: Union['SpeakerScore', 'SpeakerScoreByAdj']) -> bool:\n    return (\n        ss.position > tournament.pref('substantive_speakers') and tournament.pref('reply_score_step') == int(tournament.pref('reply_score_step'))\n    ) or (ss.position <= tournament.pref('substantive_speakers') and tournament.pref('score_step') == int(tournament.pref('score_step')))\ndef DebateResult(ballotsub, *args, **kwargs):  # noqa: N802 (factory function)\n    \"\"\"Factory function. Returns an instance of a subclass of BaseDebateResult\n    appropriate for the ballot submission's tournament's settings.\n    If `tournament` is provided as a keyword argument, the function wil use this\n    to determine which subclass it should instantiate, rather than fetching\n    `ballotsub.debate.round.tournament`. Callers can use this on repeated calls",
        "detail": "tabbycat.results.result",
        "documentation": {}
    },
    {
        "label": "DebateResult",
        "kind": 2,
        "importPath": "tabbycat.results.result",
        "description": "tabbycat.results.result",
        "peekOfCode": "def DebateResult(ballotsub, *args, **kwargs):  # noqa: N802 (factory function)\n    \"\"\"Factory function. Returns an instance of a subclass of BaseDebateResult\n    appropriate for the ballot submission's tournament's settings.\n    If `tournament` is provided as a keyword argument, the function wil use this\n    to determine which subclass it should instantiate, rather than fetching\n    `ballotsub.debate.round.tournament`. Callers can use this on repeated calls\n    to avoid a deluge of repeated SQL queries.\n    The different subclasses have different method signatures. It is the\n    responsibility of the caller to ensure that it conforms with the signatures\n    of the returned instance. The caller can do so by checking the `.is_voting`",
        "detail": "tabbycat.results.result",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "tabbycat.results.result",
        "description": "tabbycat.results.result",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass ResultError(RuntimeError):\n    pass\ndef get_result_class(ballotsub, round=None, tournament=None):\n    if round is None:\n        round = ballotsub.round\n    if tournament is None:\n        tournament = round.tournament\n    teams_in_debate = tournament.pref('teams_in_debate')\n    ballots_per_debate = round.ballots_per_debate",
        "detail": "tabbycat.results.result",
        "documentation": {}
    },
    {
        "label": "CriterionScore",
        "kind": 6,
        "importPath": "tabbycat.results.result_info",
        "description": "tabbycat.results.result_info",
        "peekOfCode": "class CriterionScore:\n    criterion: 'ScoreCriterion'\n    score: float\nclass SpeechInfo:\n    def __init__(self, result, adj, side, pos):\n        self.speaker = result.get_speaker(side, pos)\n        self.ghost = result.get_ghost(side, pos)\n        if adj is None:\n            self.score = result.speakerscore_field_score(side, pos)\n            srank = result.get_speaker_rank(side, pos)",
        "detail": "tabbycat.results.result_info",
        "documentation": {}
    },
    {
        "label": "SpeechInfo",
        "kind": 6,
        "importPath": "tabbycat.results.result_info",
        "description": "tabbycat.results.result_info",
        "peekOfCode": "class SpeechInfo:\n    def __init__(self, result, adj, side, pos):\n        self.speaker = result.get_speaker(side, pos)\n        self.ghost = result.get_ghost(side, pos)\n        if adj is None:\n            self.score = result.speakerscore_field_score(side, pos)\n            srank = result.get_speaker_rank(side, pos)\n            if srank is not None:\n                self.rank = srank\n            if len(result.criteria) > 0:",
        "detail": "tabbycat.results.result_info",
        "documentation": {}
    },
    {
        "label": "TeamSheetInfo",
        "kind": 6,
        "importPath": "tabbycat.results.result_info",
        "description": "tabbycat.results.result_info",
        "peekOfCode": "class TeamSheetInfo:\n    def __init__(self, result, adj, dt):\n        self.team = dt.team\n        self.side = dt.side\n        metric_kwargs = {'side': dt.side}\n        if adj is not None:\n            metric_kwargs['adj'] = adj\n            self.points = int(result.teamscorebyadj_field_win(**metric_kwargs))\n            self.score = result.teamscorebyadj_field_score(**metric_kwargs)\n            self.win = result.teamscorebyadj_field_win(**metric_kwargs)",
        "detail": "tabbycat.results.result_info",
        "documentation": {}
    },
    {
        "label": "SheetInfo",
        "kind": 6,
        "importPath": "tabbycat.results.result_info",
        "description": "tabbycat.results.result_info",
        "peekOfCode": "class SheetInfo:\n    def __init__(self, result, d_adj=None):\n        self.adjudicator = getattr(d_adj, 'adjudicator', None)\n        self.teams = [TeamSheetInfo(result, self.adjudicator, dt) for dt in result.debateteams.values()]\nclass DebateResultInfo:\n    def __init__(self, result):\n        if result.is_voting:\n            self.sheets = [SheetInfo(result, d_adj) for d_adj in result.debateadjs.values()]\n        else:\n            self.sheets = [SheetInfo(result)]",
        "detail": "tabbycat.results.result_info",
        "documentation": {}
    },
    {
        "label": "DebateResultInfo",
        "kind": 6,
        "importPath": "tabbycat.results.result_info",
        "description": "tabbycat.results.result_info",
        "peekOfCode": "class DebateResultInfo:\n    def __init__(self, result):\n        if result.is_voting:\n            self.sheets = [SheetInfo(result, d_adj) for d_adj in result.debateadjs.values()]\n        else:\n            self.sheets = [SheetInfo(result)]",
        "detail": "tabbycat.results.result_info",
        "documentation": {}
    },
    {
        "label": "BaseScoresheet",
        "kind": 6,
        "importPath": "tabbycat.results.scoresheet",
        "description": "tabbycat.results.scoresheet",
        "peekOfCode": "class BaseScoresheet:\n    uses_declared_winners = False\n    uses_scores = False\n    def __init__(self, *args, **kwargs):\n        \"\"\"Absorb leftover arguments.\"\"\"\n        pass\n    def is_complete(self):\n        \"\"\"Base implementation. Does nothing.\"\"\"\n        return True\n    def is_valid(self):",
        "detail": "tabbycat.results.scoresheet",
        "documentation": {}
    },
    {
        "label": "ScoresMixin",
        "kind": 6,
        "importPath": "tabbycat.results.scoresheet",
        "description": "tabbycat.results.scoresheet",
        "peekOfCode": "class ScoresMixin:\n    \"\"\"Provides functionality for speaker scores.\n    Does not do any result calculation, since different scoresheets do this in\n    different ways. This class is agnostic to  how many sides there are in a\n    debate.\"\"\"\n    uses_scores = True\n    def __init__(self, positions, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.positions = positions\n        self.criteria = kwargs.get('criteria', [])",
        "detail": "tabbycat.results.scoresheet",
        "documentation": {}
    },
    {
        "label": "DeclaredWinnersMixin",
        "kind": 6,
        "importPath": "tabbycat.results.scoresheet",
        "description": "tabbycat.results.scoresheet",
        "peekOfCode": "class DeclaredWinnersMixin:\n    \"\"\"Provides functionality for explicit declaration of winner(s).\"\"\"\n    uses_declared_winners = True\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.declared_winners = set()\n    def is_complete(self):\n        return super().is_complete() and self.declared_winners <= set(self.sides) and len(self.declared_winners) == self.number_winners\n    def add_declared_winner(self, winner):\n        assert winner in self.sides or winner is None, \"Declared winner must be one of: \" + \", \".join(map(repr, self.sides))",
        "detail": "tabbycat.results.scoresheet",
        "documentation": {}
    },
    {
        "label": "BaseTwoTeamScoresheet",
        "kind": 6,
        "importPath": "tabbycat.results.scoresheet",
        "description": "tabbycat.results.scoresheet",
        "peekOfCode": "class BaseTwoTeamScoresheet(BaseScoresheet):\n    sides = [DebateSide.AFF, DebateSide.NEG]\n    number_winners = 1\n    def is_valid(self):\n        return super().is_valid() and len(self.winners()) == 1\n    def rank(self, side):\n        rank = 1 if side in self.winners() else 2\n        return rank\nclass ResultOnlyScoresheet(DeclaredWinnersMixin, BaseTwoTeamScoresheet):\n    \"\"\"Winners only, no scores. In this case the scoresheet is basically just",
        "detail": "tabbycat.results.scoresheet",
        "documentation": {}
    },
    {
        "label": "ResultOnlyScoresheet",
        "kind": 6,
        "importPath": "tabbycat.results.scoresheet",
        "description": "tabbycat.results.scoresheet",
        "peekOfCode": "class ResultOnlyScoresheet(DeclaredWinnersMixin, BaseTwoTeamScoresheet):\n    \"\"\"Winners only, no scores. In this case the scoresheet is basically just\n    a shell for a single piece of data (the winners).\"\"\"\n    pass\nclass HighPointWinsRequiredScoresheet(ScoresMixin, BaseTwoTeamScoresheet):\n    \"\"\"Draws are not permitted; winning teams must have a higher total.\n    This is the standard type of scoresheet in Asia and Oceania.\"\"\"\n    def _get_winners(self):\n        aff_total = self.get_total(DebateSide.AFF)\n        neg_total = self.get_total(DebateSide.NEG)",
        "detail": "tabbycat.results.scoresheet",
        "documentation": {}
    },
    {
        "label": "HighPointWinsRequiredScoresheet",
        "kind": 6,
        "importPath": "tabbycat.results.scoresheet",
        "description": "tabbycat.results.scoresheet",
        "peekOfCode": "class HighPointWinsRequiredScoresheet(ScoresMixin, BaseTwoTeamScoresheet):\n    \"\"\"Draws are not permitted; winning teams must have a higher total.\n    This is the standard type of scoresheet in Asia and Oceania.\"\"\"\n    def _get_winners(self):\n        aff_total = self.get_total(DebateSide.AFF)\n        neg_total = self.get_total(DebateSide.NEG)\n        if aff_total > neg_total:\n            return {DebateSide.AFF}\n        elif neg_total > aff_total:\n            return {DebateSide.NEG}",
        "detail": "tabbycat.results.scoresheet",
        "documentation": {}
    },
    {
        "label": "TiedPointWinsAllowedScoresheet",
        "kind": 6,
        "importPath": "tabbycat.results.scoresheet",
        "description": "tabbycat.results.scoresheet",
        "peekOfCode": "class TiedPointWinsAllowedScoresheet(DeclaredWinnersMixin, ScoresMixin, BaseTwoTeamScoresheet):\n    \"\"\"In this type of scoresheet, teams can win even when their total speaker\n    score is equal to the other team. Because this is possible, scoresheets\n    must declare a winners. If the declared winners and calculated winners differ\n    (e.g. aff has higher score but neg declared), the winners is None.\"\"\"\n    def _get_winners(self):\n        aff_total = self.get_total(DebateSide.AFF)\n        neg_total = self.get_total(DebateSide.NEG)\n        if aff_total >= neg_total and DebateSide.AFF in self.declared_winners:\n            return {DebateSide.AFF}",
        "detail": "tabbycat.results.scoresheet",
        "documentation": {}
    },
    {
        "label": "LowPointWinsAllowedScoresheet",
        "kind": 6,
        "importPath": "tabbycat.results.scoresheet",
        "description": "tabbycat.results.scoresheet",
        "peekOfCode": "class LowPointWinsAllowedScoresheet(ScoresMixin, ResultOnlyScoresheet):\n    \"\"\"This is basically a declared winners scoresheet, with scores that don't\n    matter as far as the result is concerned.\"\"\"\n    pass\nclass BasePolyScoresheet(BaseScoresheet):\n    \"\"\"This is a stub scoresheet for >2-team formats with only its sides as the scoresheet\n    class changes by stage.\"\"\"\n    def __init__(self, sides, *args, **kwargs):\n        self.sides = sides\n        super().__init__(*args, **kwargs)",
        "detail": "tabbycat.results.scoresheet",
        "documentation": {}
    },
    {
        "label": "BasePolyScoresheet",
        "kind": 6,
        "importPath": "tabbycat.results.scoresheet",
        "description": "tabbycat.results.scoresheet",
        "peekOfCode": "class BasePolyScoresheet(BaseScoresheet):\n    \"\"\"This is a stub scoresheet for >2-team formats with only its sides as the scoresheet\n    class changes by stage.\"\"\"\n    def __init__(self, sides, *args, **kwargs):\n        self.sides = sides\n        super().__init__(*args, **kwargs)\nclass PolyScoresheet(ScoresMixin, BasePolyScoresheet):\n    def is_valid(self):\n        if not super().is_valid():\n            return False",
        "detail": "tabbycat.results.scoresheet",
        "documentation": {}
    },
    {
        "label": "PolyScoresheet",
        "kind": 6,
        "importPath": "tabbycat.results.scoresheet",
        "description": "tabbycat.results.scoresheet",
        "peekOfCode": "class PolyScoresheet(ScoresMixin, BasePolyScoresheet):\n    def is_valid(self):\n        if not super().is_valid():\n            return False\n        totals = [self.get_total(side) for side in self.sides]\n        return len(set(totals)) == len(totals)\n    def rank(self, side):\n        if not self.is_valid():\n            return None\n        totals = [self.get_total(side) for side in self.sides]",
        "detail": "tabbycat.results.scoresheet",
        "documentation": {}
    },
    {
        "label": "PolyNoWinScoresheet",
        "kind": 6,
        "importPath": "tabbycat.results.scoresheet",
        "description": "tabbycat.results.scoresheet",
        "peekOfCode": "class PolyNoWinScoresheet(ScoresMixin, BasePolyScoresheet):\n    def is_valid(self):\n        return super().is_valid()\n    def rank(self, side):\n        return None\n    def ranked_sides(self):\n        return []\n    def winners(self):\n        return set()\nclass PolyEliminationScoresheet(DeclaredWinnersMixin, BasePolyScoresheet):",
        "detail": "tabbycat.results.scoresheet",
        "documentation": {}
    },
    {
        "label": "PolyEliminationScoresheet",
        "kind": 6,
        "importPath": "tabbycat.results.scoresheet",
        "description": "tabbycat.results.scoresheet",
        "peekOfCode": "class PolyEliminationScoresheet(DeclaredWinnersMixin, BasePolyScoresheet):\n    def __init__(self, *args, **kwargs):\n        \"\"\"Initializer for BP elimination scoresheets.\n        Create 'num_winners' argument as final rounds have 1 winner and\n        not two as with other rounds of the stage.\"\"\"\n        super().__init__(*args, **kwargs)\n        self.number_winners = kwargs.get('num_winners') or 2",
        "detail": "tabbycat.results.scoresheet",
        "documentation": {}
    },
    {
        "label": "ResultsTableBuilder",
        "kind": 6,
        "importPath": "tabbycat.results.tables",
        "description": "tabbycat.results.tables",
        "peekOfCode": "class ResultsTableBuilder(TabbycatTableBuilder):\n    def add_ballot_check_in_columns(self, debates, key):\n        status_header = {\n            'key': key,\n            'tooltip': _(\"Whether this debate's ballot has been checked in\"),\n            'icon': \"compass\",\n        }\n        status_cells = []\n        for debate in debates:\n            cell = {",
        "detail": "tabbycat.results.tables",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "tabbycat.results.urls_admin",
        "description": "tabbycat.results.urls_admin",
        "peekOfCode": "urlpatterns = [\n    # Viewing\n    path('round/<int:round_seq>/',\n        views.AdminResultsEntryForRoundView.as_view(),\n        name='results-round-list'),\n    # Inline Actions\n    path('round/<int:round_seq>/postpone/<int:debate_id>/',\n        views.PostponeDebateView.as_view(),\n        name='results-postpone-debate'),\n    # Ballots",
        "detail": "tabbycat.results.urls_admin",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "tabbycat.results.urls_assistant",
        "description": "tabbycat.results.urls_assistant",
        "peekOfCode": "urlpatterns = [\n    # Viewing\n    path('',\n        views.AssistantResultsEntryView.as_view(),\n        name='results-assistant-round-list'),\n    # Ballots\n    path('ballots/<int:pk>/edit/',\n        views.AssistantEditBallotSetView.as_view(),\n        name='results-assistant-ballotset-edit'),\n    path('debate/<int:debate_id>/new/',",
        "detail": "tabbycat.results.urls_assistant",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "tabbycat.results.urls_public",
        "description": "tabbycat.results.urls_public",
        "peekOfCode": "urlpatterns = [\n    # Viewing\n    path('',\n        views.PublicResultsIndexView.as_view(),\n        name='results-public-index'),\n    path('debate/<int:pk>/scoresheets/',\n        views.PublicBallotScoresheetsView.as_view(),\n        name='results-public-scoresheet-view'),\n    path('round/<int:round_seq>/', include([\n        path('',",
        "detail": "tabbycat.results.urls_public",
        "documentation": {}
    },
    {
        "label": "get_status_meta",
        "kind": 2,
        "importPath": "tabbycat.results.utils",
        "description": "tabbycat.results.utils",
        "peekOfCode": "def get_status_meta(debate):\n    return {\n        Debate.STATUS_NONE: (\"x\", \"text-danger\", 0, _(\"No Ballot\")),\n        Debate.STATUS_POSTPONED: (\"pause\", \"\", 4, _(\"Debate was Postponed\")),\n        Debate.STATUS_DRAFT: (\"circle\", \"text-info\", 2, _(\"Ballot is Unconfirmed\")),\n        Debate.STATUS_CONFIRMED: (\"check\", \"text-success\", 3, _(\"Ballot is Confirmed\")),\n    }[debate.result_status]\ndef readable_ballotsub_result(debateresult):\n    \"\"\" Make a human-readable representation of a debate result \"\"\"\n    def get_display_name(dt, t, use_codes):",
        "detail": "tabbycat.results.utils",
        "documentation": {}
    },
    {
        "label": "readable_ballotsub_result",
        "kind": 2,
        "importPath": "tabbycat.results.utils",
        "description": "tabbycat.results.utils",
        "peekOfCode": "def readable_ballotsub_result(debateresult):\n    \"\"\" Make a human-readable representation of a debate result \"\"\"\n    def get_display_name(dt, t, use_codes):\n        return {\n            'team': dt.team.code_name if use_codes else dt.team.short_name,\n            'side': dt.get_side_abbr(t),\n        }\n    def format_dt(dt, t, use_codes):\n        # Translators: e.g. \"{Melbourne 1} as {OG}\", \"{Cape Town 1} as {CO}\"\n        return _(\"%(team)s as %(side)s\") % get_display_name(dt, t, use_codes)",
        "detail": "tabbycat.results.utils",
        "documentation": {}
    },
    {
        "label": "get_result_status_stats",
        "kind": 2,
        "importPath": "tabbycat.results.utils",
        "description": "tabbycat.results.utils",
        "peekOfCode": "def get_result_status_stats(round):\n    \"\"\"Returns a dict where keys are result statuses of debates; values are the\n    number of debates in the round with that status.\n    There is also an additional key 'B' that denotes those with ballots checked\n    in, but whose results are not entered.\"\"\"\n    # query looks like: [{'result_status': 'C', 'result_status__count': 8}, ...]\n    query = round.debate_set.values('result_status').annotate(Count('result_status')).order_by()\n    # The query doesn't return zeroes where appropriate - for statuses with no\n    # debates, it just omits the item altogether. So initialize a dict:\n    choices = [code for code, name in Debate.STATUS_CHOICES]",
        "detail": "tabbycat.results.utils",
        "documentation": {}
    },
    {
        "label": "populate_identical_ballotsub_lists",
        "kind": 2,
        "importPath": "tabbycat.results.utils",
        "description": "tabbycat.results.utils",
        "peekOfCode": "def populate_identical_ballotsub_lists(ballotsubs):\n    \"\"\"Sets an attribute `identical_ballotsub_versions` on each BallotSubmission\n    in `ballotsubs` to a list of version numbers of the other BallotSubmissions\n    that are identical to it.\n    Two ballot submissions are identical if they share the same debate, motion,\n    speakers and all speaker scores.\"\"\"\n    from .prefetch import populate_results\n    populate_results(ballotsubs)\n    for ballotsub in ballotsubs:\n        ballotsub.identical_ballotsub_versions = []",
        "detail": "tabbycat.results.utils",
        "documentation": {}
    },
    {
        "label": "side_and_position_names",
        "kind": 2,
        "importPath": "tabbycat.results.utils",
        "description": "tabbycat.results.utils",
        "peekOfCode": "def side_and_position_names(tournament):\n    \"\"\"Yields 2-tuples (side, positions), where position is a list of position\n    names, all being translated human-readable names. This should eventually\n    be extended to return an appropriate list for the tournament configuration.\n    \"\"\"\n    sides = [get_side_name(tournament, side, 'full').title() for side in tournament.sides]\n    if tournament.pref('teams_in_debate') == 4 \\\n            and tournament.last_substantive_position == 2 \\\n            and tournament.reply_position is None:\n        for side, positions in zip(sides, _BP_POSITION_NAMES):",
        "detail": "tabbycat.results.utils",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "tabbycat.results.utils",
        "description": "tabbycat.results.utils",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef get_status_meta(debate):\n    return {\n        Debate.STATUS_NONE: (\"x\", \"text-danger\", 0, _(\"No Ballot\")),\n        Debate.STATUS_POSTPONED: (\"pause\", \"\", 4, _(\"Debate was Postponed\")),\n        Debate.STATUS_DRAFT: (\"circle\", \"text-info\", 2, _(\"Ballot is Unconfirmed\")),\n        Debate.STATUS_CONFIRMED: (\"check\", \"text-success\", 3, _(\"Ballot is Confirmed\")),\n    }[debate.result_status]\ndef readable_ballotsub_result(debateresult):\n    \"\"\" Make a human-readable representation of a debate result \"\"\"",
        "detail": "tabbycat.results.utils",
        "documentation": {}
    },
    {
        "label": "_BP_POSITION_NAMES",
        "kind": 5,
        "importPath": "tabbycat.results.utils",
        "description": "tabbycat.results.utils",
        "peekOfCode": "_BP_POSITION_NAMES = [\n    # Translators: Abbreviation for Prime Minister\n    [gettext_lazy(\"PM\"),\n    # Translators: Abbreviation for Deputy Prime Minister\n     gettext_lazy(\"DPM\")],\n    # Translators: Abbreviation for Leader of the Opposition\n    [gettext_lazy(\"LO\"),\n    # Translators: Abbreviation for Deputy Leader of the Opposition\n     gettext_lazy(\"DLO\")],\n    # Translators: Abbreviation for Member for the Government",
        "detail": "tabbycat.results.utils",
        "documentation": {}
    },
    {
        "label": "PublicResultsIndexView",
        "kind": 6,
        "importPath": "tabbycat.results.views",
        "description": "tabbycat.results.views",
        "peekOfCode": "class PublicResultsIndexView(PublicTournamentPageMixin, TemplateView):\n    template_name = 'public_results_index.html'\n    public_page_preference = 'public_results'\n    cache_timeout = settings.PUBLIC_SLOW_CACHE_TIMEOUT\n    def get_context_data(self, **kwargs):\n        kwargs[\"rounds\"] = self.tournament.round_set.filter(\n            completed=True, silent=False).order_by('seq')\n        return super().get_context_data(**kwargs)\n# ==============================================================================\n# Views that show the results for all rounds in a debate",
        "detail": "tabbycat.results.views",
        "documentation": {}
    },
    {
        "label": "BaseResultsEntryForRoundView",
        "kind": 6,
        "importPath": "tabbycat.results.views",
        "description": "tabbycat.results.views",
        "peekOfCode": "class BaseResultsEntryForRoundView(RoundMixin, VueTableTemplateView):\n    def _get_draw(self):\n        if not hasattr(self, '_draw'):\n            self._draw = self.round.debate_set_with_prefetches(\n                filter_args=[~Q(debateteam__side=DebateSide.BYE)], ordering=('room_rank',), results=True, wins=True, check_ins=True, iron=True)\n        return self._draw\n    def get_table(self):\n        draw = self._get_draw()\n        table = ResultsTableBuilder(view=self, sort_key=\"status\")\n        table.add_ballot_check_in_columns(draw, key=\"check_ins\")",
        "detail": "tabbycat.results.views",
        "documentation": {}
    },
    {
        "label": "AssistantResultsEntryView",
        "kind": 6,
        "importPath": "tabbycat.results.views",
        "description": "tabbycat.results.views",
        "peekOfCode": "class AssistantResultsEntryView(AssistantMixin, CurrentRoundMixin, BaseResultsEntryForRoundView):\n    template_name = 'assistant_results.html'\nclass AdminResultsEntryForRoundView(AdministratorMixin, BaseResultsEntryForRoundView):\n    template_name = 'admin_results.html'\n    view_permission = Permission.VIEW_RESULTS\n    def get_context_data(self, **kwargs):\n        # Stopgap to warn user about potential database inconsistency, when\n        # trainee adjudicators seem to have given scores. This normally happens\n        # when an adjudicator was demoted after a result was entered.\n        # See: https://github.com/TabbycatDebate/tabbycat/issues/922",
        "detail": "tabbycat.results.views",
        "documentation": {}
    },
    {
        "label": "AdminResultsEntryForRoundView",
        "kind": 6,
        "importPath": "tabbycat.results.views",
        "description": "tabbycat.results.views",
        "peekOfCode": "class AdminResultsEntryForRoundView(AdministratorMixin, BaseResultsEntryForRoundView):\n    template_name = 'admin_results.html'\n    view_permission = Permission.VIEW_RESULTS\n    def get_context_data(self, **kwargs):\n        # Stopgap to warn user about potential database inconsistency, when\n        # trainee adjudicators seem to have given scores. This normally happens\n        # when an adjudicator was demoted after a result was entered.\n        # See: https://github.com/TabbycatDebate/tabbycat/issues/922\n        # This stopgap should be deleted after a more general data consistency\n        # solution is implemented.",
        "detail": "tabbycat.results.views",
        "documentation": {}
    },
    {
        "label": "PublicResultsForRoundView",
        "kind": 6,
        "importPath": "tabbycat.results.views",
        "description": "tabbycat.results.views",
        "peekOfCode": "class PublicResultsForRoundView(RoundMixin, PublicTournamentPageMixin, VueTableTemplateView):\n    template_name = \"public_results_for_round.html\"\n    public_page_preference = 'public_results'\n    page_title = gettext_lazy(\"Results\")\n    page_emoji = '💥'\n    default_view = 'team'\n    cache_timeout = settings.PUBLIC_SLOW_CACHE_TIMEOUT\n    def get_table(self):\n        view_type = self.request.session.get('results_view', self.default_view)\n        if view_type == 'debate':",
        "detail": "tabbycat.results.views",
        "documentation": {}
    },
    {
        "label": "BaseBallotSetView",
        "kind": 6,
        "importPath": "tabbycat.results.views",
        "description": "tabbycat.results.views",
        "peekOfCode": "class BaseBallotSetView(LogActionMixin, TournamentMixin, FormView):\n    \"\"\"Base class for views displaying ballot set entry forms.\"\"\"\n    action_log_content_object_attr = 'ballotsub'\n    tabroom = False\n    for_admin = False\n    def get_context_data(self, **kwargs):\n        kwargs['ballotsub'] = self.ballotsub\n        kwargs['debate'] = self.debate\n        kwargs['all_ballotsubs'] = self.get_all_ballotsubs()\n        kwargs['new'] = self.relates_to_new_ballotsub",
        "detail": "tabbycat.results.views",
        "documentation": {}
    },
    {
        "label": "AdministratorBallotSetMixin",
        "kind": 6,
        "importPath": "tabbycat.results.views",
        "description": "tabbycat.results.views",
        "peekOfCode": "class AdministratorBallotSetMixin(AdministratorMixin):\n    template_name = 'ballot_entry.html'\n    view_permission = Permission.VIEW_BALLOTSUBMISSIONS\n    edit_permission = Permission.ADD_BALLOTSUBMISSIONS\n    tabroom = True\n    def get_success_url(self):\n        return reverse_round('results-round-list', self.ballotsub.debate.round)\nclass OldAdministratorBallotSetMixin(AdministratorMixin):\n    template_name = 'enter_results.html'\n    view_permission = Permission.VIEW_BALLOTSUBMISSIONS",
        "detail": "tabbycat.results.views",
        "documentation": {}
    },
    {
        "label": "OldAdministratorBallotSetMixin",
        "kind": 6,
        "importPath": "tabbycat.results.views",
        "description": "tabbycat.results.views",
        "peekOfCode": "class OldAdministratorBallotSetMixin(AdministratorMixin):\n    template_name = 'enter_results.html'\n    view_permission = Permission.VIEW_BALLOTSUBMISSIONS\n    edit_permission = Permission.ADD_BALLOTSUBMISSIONS\n    tabroom = True\n    def get_success_url(self):\n        return reverse_round('results-round-list', self.ballotsub.debate.round)\nclass AssistantBallotSetMixin(AssistantMixin):\n    template_name = 'ballot_entry.html'\n    tabroom = True",
        "detail": "tabbycat.results.views",
        "documentation": {}
    },
    {
        "label": "AssistantBallotSetMixin",
        "kind": 6,
        "importPath": "tabbycat.results.views",
        "description": "tabbycat.results.views",
        "peekOfCode": "class AssistantBallotSetMixin(AssistantMixin):\n    template_name = 'ballot_entry.html'\n    tabroom = True\n    def get_success_url(self):\n        return reverse_tournament('results-assistant-round-list', self.tournament)\nclass OldAssistantBallotSetMixin(AssistantMixin):\n    template_name = 'assistant_enter_results.html'\n    tabroom = True\n    def get_success_url(self):\n        return reverse_tournament('results-assistant-round-list', self.tournament)",
        "detail": "tabbycat.results.views",
        "documentation": {}
    },
    {
        "label": "OldAssistantBallotSetMixin",
        "kind": 6,
        "importPath": "tabbycat.results.views",
        "description": "tabbycat.results.views",
        "peekOfCode": "class OldAssistantBallotSetMixin(AssistantMixin):\n    template_name = 'assistant_enter_results.html'\n    tabroom = True\n    def get_success_url(self):\n        return reverse_tournament('results-assistant-round-list', self.tournament)\nclass BaseNewBallotSetView(SingleObjectFromTournamentMixin, BaseBallotSetView):\n    model = Debate\n    tournament_field_name = 'round__tournament'\n    relates_to_new_ballotsub = True\n    action_log_type = ActionLogEntry.ActionType.BALLOT_CREATE",
        "detail": "tabbycat.results.views",
        "documentation": {}
    },
    {
        "label": "BaseNewBallotSetView",
        "kind": 6,
        "importPath": "tabbycat.results.views",
        "description": "tabbycat.results.views",
        "peekOfCode": "class BaseNewBallotSetView(SingleObjectFromTournamentMixin, BaseBallotSetView):\n    model = Debate\n    tournament_field_name = 'round__tournament'\n    relates_to_new_ballotsub = True\n    action_log_type = ActionLogEntry.ActionType.BALLOT_CREATE\n    pk_url_kwarg = 'debate_id'\n    page_title = gettext_lazy(\"New Ballot Set\")\n    def add_success_message(self):\n        message = _(\"Ballot set for %(debate)s added.\") % {'debate': self.matchup_description()}\n        if self.should_send_email_receipts() and self.ballotsub.confirmed:",
        "detail": "tabbycat.results.views",
        "documentation": {}
    },
    {
        "label": "AdminNewBallotSetView",
        "kind": 6,
        "importPath": "tabbycat.results.views",
        "description": "tabbycat.results.views",
        "peekOfCode": "class AdminNewBallotSetView(AdministratorBallotSetMixin, BaseNewBallotSetView):\n    pass\nclass AssistantNewBallotSetView(AssistantBallotSetMixin, BaseNewBallotSetView):\n    pass\nclass OldAdminNewBallotSetView(OldAdministratorBallotSetMixin, BaseNewBallotSetView):\n    pass\nclass OldAssistantNewBallotSetView(OldAssistantBallotSetMixin, BaseNewBallotSetView):\n    pass\nclass BaseEditBallotSetView(SingleObjectFromTournamentMixin, BaseBallotSetView):\n    model = BallotSubmission",
        "detail": "tabbycat.results.views",
        "documentation": {}
    },
    {
        "label": "AssistantNewBallotSetView",
        "kind": 6,
        "importPath": "tabbycat.results.views",
        "description": "tabbycat.results.views",
        "peekOfCode": "class AssistantNewBallotSetView(AssistantBallotSetMixin, BaseNewBallotSetView):\n    pass\nclass OldAdminNewBallotSetView(OldAdministratorBallotSetMixin, BaseNewBallotSetView):\n    pass\nclass OldAssistantNewBallotSetView(OldAssistantBallotSetMixin, BaseNewBallotSetView):\n    pass\nclass BaseEditBallotSetView(SingleObjectFromTournamentMixin, BaseBallotSetView):\n    model = BallotSubmission\n    tournament_field_name = 'debate__round__tournament'\n    relates_to_new_ballotsub = False",
        "detail": "tabbycat.results.views",
        "documentation": {}
    },
    {
        "label": "OldAdminNewBallotSetView",
        "kind": 6,
        "importPath": "tabbycat.results.views",
        "description": "tabbycat.results.views",
        "peekOfCode": "class OldAdminNewBallotSetView(OldAdministratorBallotSetMixin, BaseNewBallotSetView):\n    pass\nclass OldAssistantNewBallotSetView(OldAssistantBallotSetMixin, BaseNewBallotSetView):\n    pass\nclass BaseEditBallotSetView(SingleObjectFromTournamentMixin, BaseBallotSetView):\n    model = BallotSubmission\n    tournament_field_name = 'debate__round__tournament'\n    relates_to_new_ballotsub = False\n    page_title = gettext_lazy(\"Edit Ballot Set\")\n    def get_action_log_type(self):",
        "detail": "tabbycat.results.views",
        "documentation": {}
    },
    {
        "label": "OldAssistantNewBallotSetView",
        "kind": 6,
        "importPath": "tabbycat.results.views",
        "description": "tabbycat.results.views",
        "peekOfCode": "class OldAssistantNewBallotSetView(OldAssistantBallotSetMixin, BaseNewBallotSetView):\n    pass\nclass BaseEditBallotSetView(SingleObjectFromTournamentMixin, BaseBallotSetView):\n    model = BallotSubmission\n    tournament_field_name = 'debate__round__tournament'\n    relates_to_new_ballotsub = False\n    page_title = gettext_lazy(\"Edit Ballot Set\")\n    def get_action_log_type(self):\n        if self.ballotsub.discarded:\n            return ActionLogEntry.ActionType.BALLOT_DISCARD",
        "detail": "tabbycat.results.views",
        "documentation": {}
    },
    {
        "label": "BaseEditBallotSetView",
        "kind": 6,
        "importPath": "tabbycat.results.views",
        "description": "tabbycat.results.views",
        "peekOfCode": "class BaseEditBallotSetView(SingleObjectFromTournamentMixin, BaseBallotSetView):\n    model = BallotSubmission\n    tournament_field_name = 'debate__round__tournament'\n    relates_to_new_ballotsub = False\n    page_title = gettext_lazy(\"Edit Ballot Set\")\n    def get_action_log_type(self):\n        if self.ballotsub.discarded:\n            return ActionLogEntry.ActionType.BALLOT_DISCARD\n        elif self.ballotsub.confirmed:\n            return ActionLogEntry.ActionType.BALLOT_CONFIRM",
        "detail": "tabbycat.results.views",
        "documentation": {}
    },
    {
        "label": "AdminEditBallotSetView",
        "kind": 6,
        "importPath": "tabbycat.results.views",
        "description": "tabbycat.results.views",
        "peekOfCode": "class AdminEditBallotSetView(AdministratorBallotSetMixin, BaseEditBallotSetView):\n    pass\nclass AssistantEditBallotSetView(AssistantBallotSetMixin, BaseEditBallotSetView):\n    pass\nclass OldAdminEditBallotSetView(OldAdministratorBallotSetMixin, BaseEditBallotSetView):\n    pass\nclass OldAssistantEditBallotSetView(OldAssistantBallotSetMixin, BaseEditBallotSetView):\n    pass\nclass BasePublicNewBallotSetView(PersonalizablePublicTournamentPageMixin, RoundMixin, BaseBallotSetView):\n    template_name = 'public_enter_results.html'",
        "detail": "tabbycat.results.views",
        "documentation": {}
    },
    {
        "label": "AssistantEditBallotSetView",
        "kind": 6,
        "importPath": "tabbycat.results.views",
        "description": "tabbycat.results.views",
        "peekOfCode": "class AssistantEditBallotSetView(AssistantBallotSetMixin, BaseEditBallotSetView):\n    pass\nclass OldAdminEditBallotSetView(OldAdministratorBallotSetMixin, BaseEditBallotSetView):\n    pass\nclass OldAssistantEditBallotSetView(OldAssistantBallotSetMixin, BaseEditBallotSetView):\n    pass\nclass BasePublicNewBallotSetView(PersonalizablePublicTournamentPageMixin, RoundMixin, BaseBallotSetView):\n    template_name = 'public_enter_results.html'\n    relates_to_new_ballotsub = True\n    action_log_type = ActionLogEntry.ActionType.BALLOT_SUBMIT",
        "detail": "tabbycat.results.views",
        "documentation": {}
    },
    {
        "label": "OldAdminEditBallotSetView",
        "kind": 6,
        "importPath": "tabbycat.results.views",
        "description": "tabbycat.results.views",
        "peekOfCode": "class OldAdminEditBallotSetView(OldAdministratorBallotSetMixin, BaseEditBallotSetView):\n    pass\nclass OldAssistantEditBallotSetView(OldAssistantBallotSetMixin, BaseEditBallotSetView):\n    pass\nclass BasePublicNewBallotSetView(PersonalizablePublicTournamentPageMixin, RoundMixin, BaseBallotSetView):\n    template_name = 'public_enter_results.html'\n    relates_to_new_ballotsub = True\n    action_log_type = ActionLogEntry.ActionType.BALLOT_SUBMIT\n    page_title = gettext_lazy(\"Enter Results\")\n    def get_context_data(self, **kwargs):",
        "detail": "tabbycat.results.views",
        "documentation": {}
    },
    {
        "label": "OldAssistantEditBallotSetView",
        "kind": 6,
        "importPath": "tabbycat.results.views",
        "description": "tabbycat.results.views",
        "peekOfCode": "class OldAssistantEditBallotSetView(OldAssistantBallotSetMixin, BaseEditBallotSetView):\n    pass\nclass BasePublicNewBallotSetView(PersonalizablePublicTournamentPageMixin, RoundMixin, BaseBallotSetView):\n    template_name = 'public_enter_results.html'\n    relates_to_new_ballotsub = True\n    action_log_type = ActionLogEntry.ActionType.BALLOT_SUBMIT\n    page_title = gettext_lazy(\"Enter Results\")\n    def get_context_data(self, **kwargs):\n        kwargs['private_url'] = self.private_url\n        kwargs['prefilled'] = self.prefilled",
        "detail": "tabbycat.results.views",
        "documentation": {}
    },
    {
        "label": "BasePublicNewBallotSetView",
        "kind": 6,
        "importPath": "tabbycat.results.views",
        "description": "tabbycat.results.views",
        "peekOfCode": "class BasePublicNewBallotSetView(PersonalizablePublicTournamentPageMixin, RoundMixin, BaseBallotSetView):\n    template_name = 'public_enter_results.html'\n    relates_to_new_ballotsub = True\n    action_log_type = ActionLogEntry.ActionType.BALLOT_SUBMIT\n    page_title = gettext_lazy(\"Enter Results\")\n    def get_context_data(self, **kwargs):\n        kwargs['private_url'] = self.private_url\n        kwargs['prefilled'] = self.prefilled\n        return super().get_context_data(**kwargs)\n    def get_form_kwargs(self):",
        "detail": "tabbycat.results.views",
        "documentation": {}
    },
    {
        "label": "OldPublicNewBallotSetByIdUrlView",
        "kind": 6,
        "importPath": "tabbycat.results.views",
        "description": "tabbycat.results.views",
        "peekOfCode": "class OldPublicNewBallotSetByIdUrlView(SingleObjectFromTournamentMixin, BasePublicNewBallotSetView):\n    model = Adjudicator\n    pk_url_kwarg = 'adjudicator_pk'\n    allow_null_tournament = True\n    private_url = False\n    def get_success_url(self):\n        return reverse_tournament('post-results-public-ballotset-new', self.tournament)\n    def is_page_enabled(self, tournament):\n        return tournament.pref('participant_ballots') == 'public'\nclass OldPublicNewBallotSetByRandomisedUrlView(SingleObjectByRandomisedUrlMixin, BasePublicNewBallotSetView):",
        "detail": "tabbycat.results.views",
        "documentation": {}
    },
    {
        "label": "OldPublicNewBallotSetByRandomisedUrlView",
        "kind": 6,
        "importPath": "tabbycat.results.views",
        "description": "tabbycat.results.views",
        "peekOfCode": "class OldPublicNewBallotSetByRandomisedUrlView(SingleObjectByRandomisedUrlMixin, BasePublicNewBallotSetView):\n    model = Adjudicator\n    allow_null_tournament = True\n    private_url = True\n    def get_success_url(self):\n        return reverse_tournament('privateurls-person-index', self.tournament, kwargs={'url_key': self.kwargs['url_key']})\n    def is_page_enabled(self, tournament):\n        return tournament.pref('participant_ballots') == 'private-urls'\nclass PostPublicBallotSetSubmissionURLView(TournamentMixin, TemplateView):\n    \"\"\"This exists as a non-cached placeholder page that users are sent to",
        "detail": "tabbycat.results.views",
        "documentation": {}
    },
    {
        "label": "PostPublicBallotSetSubmissionURLView",
        "kind": 6,
        "importPath": "tabbycat.results.views",
        "description": "tabbycat.results.views",
        "peekOfCode": "class PostPublicBallotSetSubmissionURLView(TournamentMixin, TemplateView):\n    \"\"\"This exists as a non-cached placeholder page that users are sent to\n    after submitting a random ballot. Added because sending them back to their\n    private URL brings up the same form again with a double-submission error\"\"\"\n    template_name = 'base.html'\n# ==============================================================================\n# Other public views\n# ==============================================================================\nclass BasePublicBallotScoresheetsView(PublicTournamentPageMixin, SingleObjectFromTournamentMixin, TemplateView):\n    \"\"\"Base Public view showing the ballots for a debate as scoresheets.\"\"\"",
        "detail": "tabbycat.results.views",
        "documentation": {}
    },
    {
        "label": "BasePublicBallotScoresheetsView",
        "kind": 6,
        "importPath": "tabbycat.results.views",
        "description": "tabbycat.results.views",
        "peekOfCode": "class BasePublicBallotScoresheetsView(PublicTournamentPageMixin, SingleObjectFromTournamentMixin, TemplateView):\n    \"\"\"Base Public view showing the ballots for a debate as scoresheets.\"\"\"\n    model = Debate\n    public_page_preference = 'ballots_released'\n    tournament_field_name = 'round__tournament'\n    template_name = 'public_ballot_set.html'\n    error_template_name = 'public_ballot_set_error.html'\n    def matchup_description(self):\n        if use_team_code_names(self.tournament, False):\n            return self.object.matchup_codes",
        "detail": "tabbycat.results.views",
        "documentation": {}
    },
    {
        "label": "PublicBallotScoresheetsView",
        "kind": 6,
        "importPath": "tabbycat.results.views",
        "description": "tabbycat.results.views",
        "peekOfCode": "class PublicBallotScoresheetsView(BasePublicBallotScoresheetsView):\n    \"\"\"Public view showing the confirmed ballots for a debate as scoresheets.\"\"\"\n    def check_permissions(self):\n        debate = self.object\n        round = debate.round\n        if round.silent and not round.tournament.pref('all_results_released'):\n            logger.warning(\"Refused public view of ballots for %s: %s is silent\", debate, round.name)\n            return 403, _(\"This debate is in %s, which is a silent round.\") % round.name\n        if not round.completed and not round.tournament.pref('all_results_released'):\n            logger.warning(\"Refused public view of ballots for %s: %s is not completed\", debate, round.name)",
        "detail": "tabbycat.results.views",
        "documentation": {}
    },
    {
        "label": "AdjudicatorPrivateUrlBallotScoresheetView",
        "kind": 6,
        "importPath": "tabbycat.results.views",
        "description": "tabbycat.results.views",
        "peekOfCode": "class AdjudicatorPrivateUrlBallotScoresheetView(RoundMixin, SingleObjectByRandomisedUrlMixin, BasePublicBallotScoresheetsView):\n    template_name = 'privateurl_ballot_set.html'\n    error_template_name = 'privateurl_ballot_set_error.html'\n    slug_url_kwarg = 'url_key'\n    slug_field = 'debateadjudicator__adjudicator__url_key'\n    def is_page_enabled(self, tournament):\n        return True\n    def check_permissions(self):\n        if not self.object.ballotsubmission_set.filter(discarded=False).exists():\n            logger.warning(\"Refused public view of ballots for %s: no ballot\", self.object)",
        "detail": "tabbycat.results.views",
        "documentation": {}
    },
    {
        "label": "SpeakerPrivateUrlBallotScoresheetView",
        "kind": 6,
        "importPath": "tabbycat.results.views",
        "description": "tabbycat.results.views",
        "peekOfCode": "class SpeakerPrivateUrlBallotScoresheetView(RoundMixin, SingleObjectByRandomisedUrlMixin, PublicBallotScoresheetsView):\n    slug_field = 'debateteam__team__speaker__url_key'\n    public_page_preference = 'private_ballots_released'\n    def is_page_enabled(self, tournament):\n        return True\n    def get_queryset(self):\n        return super().get_queryset().filter(round=self.round)\nclass PublicBallotSubmissionIndexView(PublicTournamentPageMixin, RoundMixin, VueTableTemplateView):\n    \"\"\"Public view listing all debate-adjudicators for the current round, as\n    links for them to enter their ballots.\"\"\"",
        "detail": "tabbycat.results.views",
        "documentation": {}
    },
    {
        "label": "PublicBallotSubmissionIndexView",
        "kind": 6,
        "importPath": "tabbycat.results.views",
        "description": "tabbycat.results.views",
        "peekOfCode": "class PublicBallotSubmissionIndexView(PublicTournamentPageMixin, RoundMixin, VueTableTemplateView):\n    \"\"\"Public view listing all debate-adjudicators for the current round, as\n    links for them to enter their ballots.\"\"\"\n    def is_page_enabled(self, tournament):\n        return tournament.pref('participant_ballots') == 'public'\n    def is_draw_released(self):\n        return self.round.draw_status == Round.Status.RELEASED and self.round.motions_good_for_public\n    def get_template_names(self):\n        if self.is_draw_released():\n            return ['public_add_ballot.html']",
        "detail": "tabbycat.results.views",
        "documentation": {}
    },
    {
        "label": "PostponeDebateView",
        "kind": 6,
        "importPath": "tabbycat.results.views",
        "description": "tabbycat.results.views",
        "peekOfCode": "class PostponeDebateView(AdministratorMixin, RoundMixin, PostOnlyRedirectView):\n    round_redirect_pattern_name = 'results-round-list'\n    def post(self, request, *args, **kwargs):\n        debate = Debate.objects.get(id=kwargs.pop('debate_id'))\n        debate.result_status = Debate.STATUS_POSTPONED\n        debate.save()\n        # Notify the Results Page\n        group_name = BallotStatusConsumer.group_prefix + \"_\" + debate.round.tournament.slug\n        meta = get_status_meta(debate)\n        async_to_sync(get_channel_layer().group_send)(group_name, {",
        "detail": "tabbycat.results.views",
        "documentation": {}
    },
    {
        "label": "BaseMergeLatestBallotsView",
        "kind": 6,
        "importPath": "tabbycat.results.views",
        "description": "tabbycat.results.views",
        "peekOfCode": "class BaseMergeLatestBallotsView(BaseNewBallotSetView):\n    tabroom = True\n    page_title = gettext_lazy(\"Merge Ballots\")\n    def get_form_kwargs(self):\n        kwargs = super().get_form_kwargs()\n        kwargs['result'] = self.result\n        kwargs['vetos'] = self.vetos\n        kwargs['filled'] = True\n        return kwargs\n    def get_form(self):",
        "detail": "tabbycat.results.views",
        "documentation": {}
    },
    {
        "label": "AdminMergeLatestBallotsView",
        "kind": 6,
        "importPath": "tabbycat.results.views",
        "description": "tabbycat.results.views",
        "peekOfCode": "class AdminMergeLatestBallotsView(OldAdministratorBallotSetMixin, BaseMergeLatestBallotsView):\n    edit_ballot_url = 'results-ballotset-edit'\n    for_admin = True\n    def get_list_url(self):\n        return reverse_round('results-round-list', self.round)\nclass AssistantMergeLatestBallotsView(OldAssistantBallotSetMixin, BaseMergeLatestBallotsView):\n    edit_ballot_url = 'results-assistant-ballotset-edit'\n    for_admin = False\n    def get_list_url(self):\n        return reverse_tournament('results-assistant-round-list', self.tournament)",
        "detail": "tabbycat.results.views",
        "documentation": {}
    },
    {
        "label": "AssistantMergeLatestBallotsView",
        "kind": 6,
        "importPath": "tabbycat.results.views",
        "description": "tabbycat.results.views",
        "peekOfCode": "class AssistantMergeLatestBallotsView(OldAssistantBallotSetMixin, BaseMergeLatestBallotsView):\n    edit_ballot_url = 'results-assistant-ballotset-edit'\n    for_admin = False\n    def get_list_url(self):\n        return reverse_tournament('results-assistant-round-list', self.tournament)",
        "detail": "tabbycat.results.views",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "tabbycat.results.views",
        "description": "tabbycat.results.views",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass PublicResultsIndexView(PublicTournamentPageMixin, TemplateView):\n    template_name = 'public_results_index.html'\n    public_page_preference = 'public_results'\n    cache_timeout = settings.PUBLIC_SLOW_CACHE_TIMEOUT\n    def get_context_data(self, **kwargs):\n        kwargs[\"rounds\"] = self.tournament.round_set.filter(\n            completed=True, silent=False).order_by('seq')\n        return super().get_context_data(**kwargs)\n# ==============================================================================",
        "detail": "tabbycat.results.views",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "tabbycat.settings.core",
        "description": "tabbycat.settings.core",
        "peekOfCode": "BASE_DIR = os.path.dirname(os.path.abspath(os.path.join(__file__, os.pardir)))\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n# ==============================================================================\n# Overwritten in local.py or heroku.py\n# ==============================================================================\nADMINS = ('Tabbycat Debate', 'contact@tabbycat-debate.org'),\nMANAGERS = ADMINS\nDEBUG = bool(int(os.environ['DEBUG'])) if 'DEBUG' in os.environ else False\nENABLE_DEBUG_TOOLBAR = False # Must default to false; overriden in Dev config\nDISABLE_SENTRY = True # Overriden in Heroku config",
        "detail": "tabbycat.settings.core",
        "documentation": {}
    },
    {
        "label": "MEDIA_ROOT",
        "kind": 5,
        "importPath": "tabbycat.settings.core",
        "description": "tabbycat.settings.core",
        "peekOfCode": "MEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n# ==============================================================================\n# Overwritten in local.py or heroku.py\n# ==============================================================================\nADMINS = ('Tabbycat Debate', 'contact@tabbycat-debate.org'),\nMANAGERS = ADMINS\nDEBUG = bool(int(os.environ['DEBUG'])) if 'DEBUG' in os.environ else False\nENABLE_DEBUG_TOOLBAR = False # Must default to false; overriden in Dev config\nDISABLE_SENTRY = True # Overriden in Heroku config\nSECRET_KEY = r'#2q43u&tp4((4&m3i8v%w-6z6pp7m(v0-6@w@i!j5n)n15epwc'",
        "detail": "tabbycat.settings.core",
        "documentation": {}
    },
    {
        "label": "ADMINS",
        "kind": 5,
        "importPath": "tabbycat.settings.core",
        "description": "tabbycat.settings.core",
        "peekOfCode": "ADMINS = ('Tabbycat Debate', 'contact@tabbycat-debate.org'),\nMANAGERS = ADMINS\nDEBUG = bool(int(os.environ['DEBUG'])) if 'DEBUG' in os.environ else False\nENABLE_DEBUG_TOOLBAR = False # Must default to false; overriden in Dev config\nDISABLE_SENTRY = True # Overriden in Heroku config\nSECRET_KEY = r'#2q43u&tp4((4&m3i8v%w-6z6pp7m(v0-6@w@i!j5n)n15epwc'\n# ==============================================================================\n# Version\n# ==============================================================================\nTABBYCAT_VERSION = '2.9.2'",
        "detail": "tabbycat.settings.core",
        "documentation": {}
    },
    {
        "label": "MANAGERS",
        "kind": 5,
        "importPath": "tabbycat.settings.core",
        "description": "tabbycat.settings.core",
        "peekOfCode": "MANAGERS = ADMINS\nDEBUG = bool(int(os.environ['DEBUG'])) if 'DEBUG' in os.environ else False\nENABLE_DEBUG_TOOLBAR = False # Must default to false; overriden in Dev config\nDISABLE_SENTRY = True # Overriden in Heroku config\nSECRET_KEY = r'#2q43u&tp4((4&m3i8v%w-6z6pp7m(v0-6@w@i!j5n)n15epwc'\n# ==============================================================================\n# Version\n# ==============================================================================\nTABBYCAT_VERSION = '2.9.2'\nTABBYCAT_CODENAME = 'Ragdoll'",
        "detail": "tabbycat.settings.core",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "tabbycat.settings.core",
        "description": "tabbycat.settings.core",
        "peekOfCode": "DEBUG = bool(int(os.environ['DEBUG'])) if 'DEBUG' in os.environ else False\nENABLE_DEBUG_TOOLBAR = False # Must default to false; overriden in Dev config\nDISABLE_SENTRY = True # Overriden in Heroku config\nSECRET_KEY = r'#2q43u&tp4((4&m3i8v%w-6z6pp7m(v0-6@w@i!j5n)n15epwc'\n# ==============================================================================\n# Version\n# ==============================================================================\nTABBYCAT_VERSION = '2.9.2'\nTABBYCAT_CODENAME = 'Ragdoll'\nREADTHEDOCS_VERSION = 'v2.9.2'",
        "detail": "tabbycat.settings.core",
        "documentation": {}
    },
    {
        "label": "ENABLE_DEBUG_TOOLBAR",
        "kind": 5,
        "importPath": "tabbycat.settings.core",
        "description": "tabbycat.settings.core",
        "peekOfCode": "ENABLE_DEBUG_TOOLBAR = False # Must default to false; overriden in Dev config\nDISABLE_SENTRY = True # Overriden in Heroku config\nSECRET_KEY = r'#2q43u&tp4((4&m3i8v%w-6z6pp7m(v0-6@w@i!j5n)n15epwc'\n# ==============================================================================\n# Version\n# ==============================================================================\nTABBYCAT_VERSION = '2.9.2'\nTABBYCAT_CODENAME = 'Ragdoll'\nREADTHEDOCS_VERSION = 'v2.9.2'\n# ==============================================================================",
        "detail": "tabbycat.settings.core",
        "documentation": {}
    },
    {
        "label": "DISABLE_SENTRY",
        "kind": 5,
        "importPath": "tabbycat.settings.core",
        "description": "tabbycat.settings.core",
        "peekOfCode": "DISABLE_SENTRY = True # Overriden in Heroku config\nSECRET_KEY = r'#2q43u&tp4((4&m3i8v%w-6z6pp7m(v0-6@w@i!j5n)n15epwc'\n# ==============================================================================\n# Version\n# ==============================================================================\nTABBYCAT_VERSION = '2.9.2'\nTABBYCAT_CODENAME = 'Ragdoll'\nREADTHEDOCS_VERSION = 'v2.9.2'\n# ==============================================================================\n# Internationalization and Localization",
        "detail": "tabbycat.settings.core",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "tabbycat.settings.core",
        "description": "tabbycat.settings.core",
        "peekOfCode": "SECRET_KEY = r'#2q43u&tp4((4&m3i8v%w-6z6pp7m(v0-6@w@i!j5n)n15epwc'\n# ==============================================================================\n# Version\n# ==============================================================================\nTABBYCAT_VERSION = '2.9.2'\nTABBYCAT_CODENAME = 'Ragdoll'\nREADTHEDOCS_VERSION = 'v2.9.2'\n# ==============================================================================\n# Internationalization and Localization\n# ==============================================================================",
        "detail": "tabbycat.settings.core",
        "documentation": {}
    },
    {
        "label": "TABBYCAT_VERSION",
        "kind": 5,
        "importPath": "tabbycat.settings.core",
        "description": "tabbycat.settings.core",
        "peekOfCode": "TABBYCAT_VERSION = '2.9.2'\nTABBYCAT_CODENAME = 'Ragdoll'\nREADTHEDOCS_VERSION = 'v2.9.2'\n# ==============================================================================\n# Internationalization and Localization\n# ==============================================================================\nUSE_I18N = True\nUSE_TZ = True\nLANGUAGE_CODE = 'en'\nTIME_ZONE = os.environ.get('TIME_ZONE', 'Australia/Melbourne')",
        "detail": "tabbycat.settings.core",
        "documentation": {}
    },
    {
        "label": "TABBYCAT_CODENAME",
        "kind": 5,
        "importPath": "tabbycat.settings.core",
        "description": "tabbycat.settings.core",
        "peekOfCode": "TABBYCAT_CODENAME = 'Ragdoll'\nREADTHEDOCS_VERSION = 'v2.9.2'\n# ==============================================================================\n# Internationalization and Localization\n# ==============================================================================\nUSE_I18N = True\nUSE_TZ = True\nLANGUAGE_CODE = 'en'\nTIME_ZONE = os.environ.get('TIME_ZONE', 'Australia/Melbourne')\nLOCALE_PATHS = [",
        "detail": "tabbycat.settings.core",
        "documentation": {}
    },
    {
        "label": "READTHEDOCS_VERSION",
        "kind": 5,
        "importPath": "tabbycat.settings.core",
        "description": "tabbycat.settings.core",
        "peekOfCode": "READTHEDOCS_VERSION = 'v2.9.2'\n# ==============================================================================\n# Internationalization and Localization\n# ==============================================================================\nUSE_I18N = True\nUSE_TZ = True\nLANGUAGE_CODE = 'en'\nTIME_ZONE = os.environ.get('TIME_ZONE', 'Australia/Melbourne')\nLOCALE_PATHS = [\n    os.path.join(BASE_DIR, 'locale'),",
        "detail": "tabbycat.settings.core",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "tabbycat.settings.core",
        "description": "tabbycat.settings.core",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\nLANGUAGE_CODE = 'en'\nTIME_ZONE = os.environ.get('TIME_ZONE', 'Australia/Melbourne')\nLOCALE_PATHS = [\n    os.path.join(BASE_DIR, 'locale'),\n]\n# Add custom languages not provided by Django\nEXTRA_LANG_INFO = {\n    'tzl': {",
        "detail": "tabbycat.settings.core",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "tabbycat.settings.core",
        "description": "tabbycat.settings.core",
        "peekOfCode": "USE_TZ = True\nLANGUAGE_CODE = 'en'\nTIME_ZONE = os.environ.get('TIME_ZONE', 'Australia/Melbourne')\nLOCALE_PATHS = [\n    os.path.join(BASE_DIR, 'locale'),\n]\n# Add custom languages not provided by Django\nEXTRA_LANG_INFO = {\n    'tzl': {\n        # Use code for Talossan; can't use proper reserved code...",
        "detail": "tabbycat.settings.core",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "tabbycat.settings.core",
        "description": "tabbycat.settings.core",
        "peekOfCode": "LANGUAGE_CODE = 'en'\nTIME_ZONE = os.environ.get('TIME_ZONE', 'Australia/Melbourne')\nLOCALE_PATHS = [\n    os.path.join(BASE_DIR, 'locale'),\n]\n# Add custom languages not provided by Django\nEXTRA_LANG_INFO = {\n    'tzl': {\n        # Use code for Talossan; can't use proper reserved code...\n        # Talossan is a constructed language, without native speakers,",
        "detail": "tabbycat.settings.core",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "tabbycat.settings.core",
        "description": "tabbycat.settings.core",
        "peekOfCode": "TIME_ZONE = os.environ.get('TIME_ZONE', 'Australia/Melbourne')\nLOCALE_PATHS = [\n    os.path.join(BASE_DIR, 'locale'),\n]\n# Add custom languages not provided by Django\nEXTRA_LANG_INFO = {\n    'tzl': {\n        # Use code for Talossan; can't use proper reserved code...\n        # Talossan is a constructed language, without native speakers,\n        # so the odds of having a translation are low.",
        "detail": "tabbycat.settings.core",
        "documentation": {}
    },
    {
        "label": "LOCALE_PATHS",
        "kind": 5,
        "importPath": "tabbycat.settings.core",
        "description": "tabbycat.settings.core",
        "peekOfCode": "LOCALE_PATHS = [\n    os.path.join(BASE_DIR, 'locale'),\n]\n# Add custom languages not provided by Django\nEXTRA_LANG_INFO = {\n    'tzl': {\n        # Use code for Talossan; can't use proper reserved code...\n        # Talossan is a constructed language, without native speakers,\n        # so the odds of having a translation are low.\n        'code': 'tzl',",
        "detail": "tabbycat.settings.core",
        "documentation": {}
    },
    {
        "label": "EXTRA_LANG_INFO",
        "kind": 5,
        "importPath": "tabbycat.settings.core",
        "description": "tabbycat.settings.core",
        "peekOfCode": "EXTRA_LANG_INFO = {\n    'tzl': {\n        # Use code for Talossan; can't use proper reserved code...\n        # Talossan is a constructed language, without native speakers,\n        # so the odds of having a translation are low.\n        'code': 'tzl',\n        'name': 'Translation',\n        'name_local': 'Translation',\n    },\n}",
        "detail": "tabbycat.settings.core",
        "documentation": {}
    },
    {
        "label": "LANG_INFO",
        "kind": 5,
        "importPath": "tabbycat.settings.core",
        "description": "tabbycat.settings.core",
        "peekOfCode": "LANG_INFO = dict(django.conf.locale.LANG_INFO, **EXTRA_LANG_INFO)\ndjango.conf.locale.LANG_INFO = LANG_INFO\nLANGUAGES = [\n    ('ar', _('Arabic')),\n    ('ast', _('Asturian')),\n    ('bn', _('Bengali')),\n    ('bg', _('Bulgarian')),\n    ('ca', _('Catalan')),\n    ('cs', _('Czech')),\n    ('de', _('German')),",
        "detail": "tabbycat.settings.core",
        "documentation": {}
    },
    {
        "label": "django.conf.locale.LANG_INFO",
        "kind": 5,
        "importPath": "tabbycat.settings.core",
        "description": "tabbycat.settings.core",
        "peekOfCode": "django.conf.locale.LANG_INFO = LANG_INFO\nLANGUAGES = [\n    ('ar', _('Arabic')),\n    ('ast', _('Asturian')),\n    ('bn', _('Bengali')),\n    ('bg', _('Bulgarian')),\n    ('ca', _('Catalan')),\n    ('cs', _('Czech')),\n    ('de', _('German')),\n    ('en', _('English')),",
        "detail": "tabbycat.settings.core",
        "documentation": {}
    },
    {
        "label": "LANGUAGES",
        "kind": 5,
        "importPath": "tabbycat.settings.core",
        "description": "tabbycat.settings.core",
        "peekOfCode": "LANGUAGES = [\n    ('ar', _('Arabic')),\n    ('ast', _('Asturian')),\n    ('bn', _('Bengali')),\n    ('bg', _('Bulgarian')),\n    ('ca', _('Catalan')),\n    ('cs', _('Czech')),\n    ('de', _('German')),\n    ('en', _('English')),\n    ('es', _('Spanish')),",
        "detail": "tabbycat.settings.core",
        "documentation": {}
    },
    {
        "label": "STATICI18N_ROOT",
        "kind": 5,
        "importPath": "tabbycat.settings.core",
        "description": "tabbycat.settings.core",
        "peekOfCode": "STATICI18N_ROOT = os.path.join(BASE_DIR, \"locale\")\nFORMAT_MODULE_PATH = [\n    'utils.formats',\n]\n# ==============================================================================\n# Django-specific Modules\n# ==============================================================================\nMIDDLEWARE = [\n    'django.middleware.gzip.GZipMiddleware',\n    'django.middleware.security.SecurityMiddleware',",
        "detail": "tabbycat.settings.core",
        "documentation": {}
    },
    {
        "label": "FORMAT_MODULE_PATH",
        "kind": 5,
        "importPath": "tabbycat.settings.core",
        "description": "tabbycat.settings.core",
        "peekOfCode": "FORMAT_MODULE_PATH = [\n    'utils.formats',\n]\n# ==============================================================================\n# Django-specific Modules\n# ==============================================================================\nMIDDLEWARE = [\n    'django.middleware.gzip.GZipMiddleware',\n    'django.middleware.security.SecurityMiddleware',\n    'whitenoise.middleware.WhiteNoiseMiddleware',",
        "detail": "tabbycat.settings.core",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "tabbycat.settings.core",
        "description": "tabbycat.settings.core",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.gzip.GZipMiddleware',\n    'django.middleware.security.SecurityMiddleware',\n    'whitenoise.middleware.WhiteNoiseMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    # User language preferences; must be after Session\n    'django.middleware.locale.LocaleMiddleware',\n    # Set Etags; i.e. cached requests not on network; must precede Common\n    'corsheaders.middleware.CorsMiddleware',\n    'django.middleware.http.ConditionalGetMiddleware',",
        "detail": "tabbycat.settings.core",
        "documentation": {}
    },
    {
        "label": "TABBYCAT_APPS",
        "kind": 5,
        "importPath": "tabbycat.settings.core",
        "description": "tabbycat.settings.core",
        "peekOfCode": "TABBYCAT_APPS = (\n    'actionlog',\n    'adjallocation',\n    'adjfeedback',\n    'api',\n    'availability',\n    'breakqual',\n    'checkins',\n    'divisions', # obsolete\n    'draw',",
        "detail": "tabbycat.settings.core",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "tabbycat.settings.core",
        "description": "tabbycat.settings.core",
        "peekOfCode": "INSTALLED_APPS = (\n    'daphne',\n    'jet',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'channels', # For Websockets / real-time connections (above whitenoise)\n    'django.contrib.staticfiles',\n    'django.contrib.humanize',",
        "detail": "tabbycat.settings.core",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "tabbycat.settings.core",
        "description": "tabbycat.settings.core",
        "peekOfCode": "ROOT_URLCONF = 'urls'\nLOGIN_REDIRECT_URL = '/'\nLOGOUT_REDIRECT_URL = '/'\nFIXTURE_DIRS = (os.path.join(os.path.dirname(BASE_DIR), 'data', 'fixtures'), )\nSILENCED_SYSTEM_CHECKS = ('urls.W002',)\n# ==============================================================================\n# Templates\n# ==============================================================================\nTEMPLATES = [\n    {",
        "detail": "tabbycat.settings.core",
        "documentation": {}
    },
    {
        "label": "LOGIN_REDIRECT_URL",
        "kind": 5,
        "importPath": "tabbycat.settings.core",
        "description": "tabbycat.settings.core",
        "peekOfCode": "LOGIN_REDIRECT_URL = '/'\nLOGOUT_REDIRECT_URL = '/'\nFIXTURE_DIRS = (os.path.join(os.path.dirname(BASE_DIR), 'data', 'fixtures'), )\nSILENCED_SYSTEM_CHECKS = ('urls.W002',)\n# ==============================================================================\n# Templates\n# ==============================================================================\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',",
        "detail": "tabbycat.settings.core",
        "documentation": {}
    },
    {
        "label": "LOGOUT_REDIRECT_URL",
        "kind": 5,
        "importPath": "tabbycat.settings.core",
        "description": "tabbycat.settings.core",
        "peekOfCode": "LOGOUT_REDIRECT_URL = '/'\nFIXTURE_DIRS = (os.path.join(os.path.dirname(BASE_DIR), 'data', 'fixtures'), )\nSILENCED_SYSTEM_CHECKS = ('urls.W002',)\n# ==============================================================================\n# Templates\n# ==============================================================================\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],",
        "detail": "tabbycat.settings.core",
        "documentation": {}
    },
    {
        "label": "FIXTURE_DIRS",
        "kind": 5,
        "importPath": "tabbycat.settings.core",
        "description": "tabbycat.settings.core",
        "peekOfCode": "FIXTURE_DIRS = (os.path.join(os.path.dirname(BASE_DIR), 'data', 'fixtures'), )\nSILENCED_SYSTEM_CHECKS = ('urls.W002',)\n# ==============================================================================\n# Templates\n# ==============================================================================\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'OPTIONS': {",
        "detail": "tabbycat.settings.core",
        "documentation": {}
    },
    {
        "label": "SILENCED_SYSTEM_CHECKS",
        "kind": 5,
        "importPath": "tabbycat.settings.core",
        "description": "tabbycat.settings.core",
        "peekOfCode": "SILENCED_SYSTEM_CHECKS = ('urls.W002',)\n# ==============================================================================\n# Templates\n# ==============================================================================\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'OPTIONS': {\n            'context_processors': [",
        "detail": "tabbycat.settings.core",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "tabbycat.settings.core",
        "description": "tabbycat.settings.core",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'OPTIONS': {\n            'context_processors': [\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n                'django.template.context_processors.debug',\n                'django.template.context_processors.i18n',",
        "detail": "tabbycat.settings.core",
        "documentation": {}
    },
    {
        "label": "PUBLIC_FAST_CACHE_TIMEOUT",
        "kind": 5,
        "importPath": "tabbycat.settings.core",
        "description": "tabbycat.settings.core",
        "peekOfCode": "PUBLIC_FAST_CACHE_TIMEOUT = int(os.environ.get('PUBLIC_FAST_CACHE_TIMEOUT', 60 * 1))\nPUBLIC_SLOW_CACHE_TIMEOUT = int(os.environ.get('PUBLIC_SLOW_CACHE_TIMEOUT', 60 * 3.5))\nTAB_PAGES_CACHE_TIMEOUT = int(os.environ.get('TAB_PAGES_CACHE_TIMEOUT', 60 * 120))\n# Default non-heroku cache is to use local memory\nCACHES = {\n    'default': {\n        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',\n    },\n}\nSESSION_ENGINE = 'django.contrib.sessions.backends.cache'",
        "detail": "tabbycat.settings.core",
        "documentation": {}
    },
    {
        "label": "PUBLIC_SLOW_CACHE_TIMEOUT",
        "kind": 5,
        "importPath": "tabbycat.settings.core",
        "description": "tabbycat.settings.core",
        "peekOfCode": "PUBLIC_SLOW_CACHE_TIMEOUT = int(os.environ.get('PUBLIC_SLOW_CACHE_TIMEOUT', 60 * 3.5))\nTAB_PAGES_CACHE_TIMEOUT = int(os.environ.get('TAB_PAGES_CACHE_TIMEOUT', 60 * 120))\n# Default non-heroku cache is to use local memory\nCACHES = {\n    'default': {\n        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',\n    },\n}\nSESSION_ENGINE = 'django.contrib.sessions.backends.cache'\n# ==============================================================================",
        "detail": "tabbycat.settings.core",
        "documentation": {}
    },
    {
        "label": "TAB_PAGES_CACHE_TIMEOUT",
        "kind": 5,
        "importPath": "tabbycat.settings.core",
        "description": "tabbycat.settings.core",
        "peekOfCode": "TAB_PAGES_CACHE_TIMEOUT = int(os.environ.get('TAB_PAGES_CACHE_TIMEOUT', 60 * 120))\n# Default non-heroku cache is to use local memory\nCACHES = {\n    'default': {\n        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',\n    },\n}\nSESSION_ENGINE = 'django.contrib.sessions.backends.cache'\n# ==============================================================================\n# Static Files and Compilation",
        "detail": "tabbycat.settings.core",
        "documentation": {}
    },
    {
        "label": "CACHES",
        "kind": 5,
        "importPath": "tabbycat.settings.core",
        "description": "tabbycat.settings.core",
        "peekOfCode": "CACHES = {\n    'default': {\n        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',\n    },\n}\nSESSION_ENGINE = 'django.contrib.sessions.backends.cache'\n# ==============================================================================\n# Static Files and Compilation\n# ==============================================================================\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')",
        "detail": "tabbycat.settings.core",
        "documentation": {}
    },
    {
        "label": "SESSION_ENGINE",
        "kind": 5,
        "importPath": "tabbycat.settings.core",
        "description": "tabbycat.settings.core",
        "peekOfCode": "SESSION_ENGINE = 'django.contrib.sessions.backends.cache'\n# ==============================================================================\n# Static Files and Compilation\n# ==============================================================================\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = (os.path.join(BASE_DIR, 'static'), )\nSTATICFILES_FINDERS = (\n    'django.contrib.staticfiles.finders.FileSystemFinder',\n    'django.contrib.staticfiles.finders.AppDirectoriesFinder',",
        "detail": "tabbycat.settings.core",
        "documentation": {}
    },
    {
        "label": "STATIC_ROOT",
        "kind": 5,
        "importPath": "tabbycat.settings.core",
        "description": "tabbycat.settings.core",
        "peekOfCode": "STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = (os.path.join(BASE_DIR, 'static'), )\nSTATICFILES_FINDERS = (\n    'django.contrib.staticfiles.finders.FileSystemFinder',\n    'django.contrib.staticfiles.finders.AppDirectoriesFinder',\n)\nSTORAGES = {\n    \"default\": {\n        \"BACKEND\": \"django.core.files.storage.FileSystemStorage\",",
        "detail": "tabbycat.settings.core",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "tabbycat.settings.core",
        "description": "tabbycat.settings.core",
        "peekOfCode": "STATIC_URL = '/static/'\nSTATICFILES_DIRS = (os.path.join(BASE_DIR, 'static'), )\nSTATICFILES_FINDERS = (\n    'django.contrib.staticfiles.finders.FileSystemFinder',\n    'django.contrib.staticfiles.finders.AppDirectoriesFinder',\n)\nSTORAGES = {\n    \"default\": {\n        \"BACKEND\": \"django.core.files.storage.FileSystemStorage\",\n    },",
        "detail": "tabbycat.settings.core",
        "documentation": {}
    },
    {
        "label": "STATICFILES_DIRS",
        "kind": 5,
        "importPath": "tabbycat.settings.core",
        "description": "tabbycat.settings.core",
        "peekOfCode": "STATICFILES_DIRS = (os.path.join(BASE_DIR, 'static'), )\nSTATICFILES_FINDERS = (\n    'django.contrib.staticfiles.finders.FileSystemFinder',\n    'django.contrib.staticfiles.finders.AppDirectoriesFinder',\n)\nSTORAGES = {\n    \"default\": {\n        \"BACKEND\": \"django.core.files.storage.FileSystemStorage\",\n    },\n    \"staticfiles\": {",
        "detail": "tabbycat.settings.core",
        "documentation": {}
    },
    {
        "label": "STATICFILES_FINDERS",
        "kind": 5,
        "importPath": "tabbycat.settings.core",
        "description": "tabbycat.settings.core",
        "peekOfCode": "STATICFILES_FINDERS = (\n    'django.contrib.staticfiles.finders.FileSystemFinder',\n    'django.contrib.staticfiles.finders.AppDirectoriesFinder',\n)\nSTORAGES = {\n    \"default\": {\n        \"BACKEND\": \"django.core.files.storage.FileSystemStorage\",\n    },\n    \"staticfiles\": {\n        \"BACKEND\": 'whitenoise.storage.CompressedManifestStaticFilesStorage',",
        "detail": "tabbycat.settings.core",
        "documentation": {}
    },
    {
        "label": "STORAGES",
        "kind": 5,
        "importPath": "tabbycat.settings.core",
        "description": "tabbycat.settings.core",
        "peekOfCode": "STORAGES = {\n    \"default\": {\n        \"BACKEND\": \"django.core.files.storage.FileSystemStorage\",\n    },\n    \"staticfiles\": {\n        \"BACKEND\": 'whitenoise.storage.CompressedManifestStaticFilesStorage',\n    },\n}\n# ==============================================================================\n# Logging",
        "detail": "tabbycat.settings.core",
        "documentation": {}
    },
    {
        "label": "MESSAGE_STORAGE",
        "kind": 5,
        "importPath": "tabbycat.settings.core",
        "description": "tabbycat.settings.core",
        "peekOfCode": "MESSAGE_STORAGE = 'django.contrib.messages.storage.session.SessionStorage'\nLOGGING = {\n    'version': 1,\n    'disable_existing_loggers': False,\n    'handlers': {\n        'console': {\n            'class': 'logging.StreamHandler',\n            'formatter': 'standard',\n        },\n    },",
        "detail": "tabbycat.settings.core",
        "documentation": {}
    },
    {
        "label": "LOGGING",
        "kind": 5,
        "importPath": "tabbycat.settings.core",
        "description": "tabbycat.settings.core",
        "peekOfCode": "LOGGING = {\n    'version': 1,\n    'disable_existing_loggers': False,\n    'handlers': {\n        'console': {\n            'class': 'logging.StreamHandler',\n            'formatter': 'standard',\n        },\n    },\n    'loggers': {",
        "detail": "tabbycat.settings.core",
        "documentation": {}
    },
    {
        "label": "MESSAGE_TAGS",
        "kind": 5,
        "importPath": "tabbycat.settings.core",
        "description": "tabbycat.settings.core",
        "peekOfCode": "MESSAGE_TAGS = {messages.ERROR: 'danger', }\n# ==============================================================================\n# Summernote (WYSWIG)\n# ==============================================================================\nSUMMERNOTE_THEME = 'bs4' # Bootstrap 4\nSUMMERNOTE_CONFIG = {\n    'width': '100%',\n    'height': '480',\n    'toolbar': [\n        ['style', ['bold', 'italic', 'underline', 'fontsize', 'color', 'clear']],",
        "detail": "tabbycat.settings.core",
        "documentation": {}
    },
    {
        "label": "SUMMERNOTE_THEME",
        "kind": 5,
        "importPath": "tabbycat.settings.core",
        "description": "tabbycat.settings.core",
        "peekOfCode": "SUMMERNOTE_THEME = 'bs4' # Bootstrap 4\nSUMMERNOTE_CONFIG = {\n    'width': '100%',\n    'height': '480',\n    'toolbar': [\n        ['style', ['bold', 'italic', 'underline', 'fontsize', 'color', 'clear']],\n        ['para', ['ul', 'ol']],\n        ['insert', ['link', 'picture']],\n        ['misc', ['undo', 'redo', 'codeview']],\n    ],",
        "detail": "tabbycat.settings.core",
        "documentation": {}
    },
    {
        "label": "SUMMERNOTE_CONFIG",
        "kind": 5,
        "importPath": "tabbycat.settings.core",
        "description": "tabbycat.settings.core",
        "peekOfCode": "SUMMERNOTE_CONFIG = {\n    'width': '100%',\n    'height': '480',\n    'toolbar': [\n        ['style', ['bold', 'italic', 'underline', 'fontsize', 'color', 'clear']],\n        ['para', ['ul', 'ol']],\n        ['insert', ['link', 'picture']],\n        ['misc', ['undo', 'redo', 'codeview']],\n    ],\n    'disable_upload': True,",
        "detail": "tabbycat.settings.core",
        "documentation": {}
    },
    {
        "label": "X_FRAME_OPTIONS",
        "kind": 5,
        "importPath": "tabbycat.settings.core",
        "description": "tabbycat.settings.core",
        "peekOfCode": "X_FRAME_OPTIONS = 'SAMEORIGIN' # Necessary to get Django-Summernote working because of Django 3 changes\n# ==============================================================================\n# Database\n# ==============================================================================\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n    },\n}\nDEFAULT_AUTO_FIELD = 'django.db.models.AutoField'",
        "detail": "tabbycat.settings.core",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "tabbycat.settings.core",
        "description": "tabbycat.settings.core",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n    },\n}\nDEFAULT_AUTO_FIELD = 'django.db.models.AutoField'\n# ==============================================================================\n# Channels\n# ==============================================================================\nASGI_APPLICATION = \"asgi.application\"",
        "detail": "tabbycat.settings.core",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "tabbycat.settings.core",
        "description": "tabbycat.settings.core",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'\n# ==============================================================================\n# Channels\n# ==============================================================================\nASGI_APPLICATION = \"asgi.application\"\nCHANNEL_LAYERS = {\n    \"default\": {\n        \"BACKEND\": \"channels.layers.InMemoryChannelLayer\",\n    },\n}",
        "detail": "tabbycat.settings.core",
        "documentation": {}
    },
    {
        "label": "ASGI_APPLICATION",
        "kind": 5,
        "importPath": "tabbycat.settings.core",
        "description": "tabbycat.settings.core",
        "peekOfCode": "ASGI_APPLICATION = \"asgi.application\"\nCHANNEL_LAYERS = {\n    \"default\": {\n        \"BACKEND\": \"channels.layers.InMemoryChannelLayer\",\n    },\n}\n# ==============================================================================\n# Dynamic preferences\n# ==============================================================================\nDYNAMIC_PREFERENCES = {",
        "detail": "tabbycat.settings.core",
        "documentation": {}
    },
    {
        "label": "CHANNEL_LAYERS",
        "kind": 5,
        "importPath": "tabbycat.settings.core",
        "description": "tabbycat.settings.core",
        "peekOfCode": "CHANNEL_LAYERS = {\n    \"default\": {\n        \"BACKEND\": \"channels.layers.InMemoryChannelLayer\",\n    },\n}\n# ==============================================================================\n# Dynamic preferences\n# ==============================================================================\nDYNAMIC_PREFERENCES = {\n    'REGISTRY_MODULE': 'preferences',",
        "detail": "tabbycat.settings.core",
        "documentation": {}
    },
    {
        "label": "DYNAMIC_PREFERENCES",
        "kind": 5,
        "importPath": "tabbycat.settings.core",
        "description": "tabbycat.settings.core",
        "peekOfCode": "DYNAMIC_PREFERENCES = {\n    'REGISTRY_MODULE': 'preferences',\n}\n# ==============================================================================\n# REST Framework\n# ==============================================================================\nREST_FRAMEWORK = {\n    'DEFAULT_RENDERER_CLASSES': [\n        'rest_framework.renderers.JSONRenderer',\n    ],",
        "detail": "tabbycat.settings.core",
        "documentation": {}
    },
    {
        "label": "REST_FRAMEWORK",
        "kind": 5,
        "importPath": "tabbycat.settings.core",
        "description": "tabbycat.settings.core",
        "peekOfCode": "REST_FRAMEWORK = {\n    'DEFAULT_RENDERER_CLASSES': [\n        'rest_framework.renderers.JSONRenderer',\n    ],\n    'DEFAULT_PARSER_CLASSES': [\n        'rest_framework.parsers.JSONParser',\n    ],\n    'DEFAULT_AUTHENTICATION_CLASSES': [\n        'rest_framework.authentication.TokenAuthentication',\n        'rest_framework.authentication.SessionAuthentication',",
        "detail": "tabbycat.settings.core",
        "documentation": {}
    },
    {
        "label": "SPECTACULAR_SETTINGS",
        "kind": 5,
        "importPath": "tabbycat.settings.core",
        "description": "tabbycat.settings.core",
        "peekOfCode": "SPECTACULAR_SETTINGS = {\n    'TITLE': 'Tabbycat API',\n    'DESCRIPTION': 'Parliamentary debate tabulation software',\n    'VERSION': '1.3.0',\n    'SERVE_INCLUDE_SCHEMA': False,\n    'SCHEMA_PATH_PREFIX': r'api/v\\d+',\n    'CONTACT': {'name': 'Étienne Beaulé', 'email': 'ebeaule@tabbycat-debate.org'},\n    'LICENSE': {'name': 'AGPL 3', 'url': 'https://www.gnu.org/licenses/agpl-3.0.en.html'},\n    'EXTENSIONS_INFO': {\n        \"x-logo\": {",
        "detail": "tabbycat.settings.core",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOW_ALL_ORIGINS",
        "kind": 5,
        "importPath": "tabbycat.settings.core",
        "description": "tabbycat.settings.core",
        "peekOfCode": "CORS_ALLOW_ALL_ORIGINS = True\nCORS_URLS_REGEX = r'^/api(/.*)?$'\n# ==============================================================================\n# Password validators\n# ==============================================================================\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {",
        "detail": "tabbycat.settings.core",
        "documentation": {}
    },
    {
        "label": "CORS_URLS_REGEX",
        "kind": 5,
        "importPath": "tabbycat.settings.core",
        "description": "tabbycat.settings.core",
        "peekOfCode": "CORS_URLS_REGEX = r'^/api(/.*)?$'\n# ==============================================================================\n# Password validators\n# ==============================================================================\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',",
        "detail": "tabbycat.settings.core",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "tabbycat.settings.core",
        "description": "tabbycat.settings.core",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "tabbycat.settings.core",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "tabbycat.settings.docker",
        "description": "tabbycat.settings.docker",
        "peekOfCode": "ALLOWED_HOSTS = [\"*\"]\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': 'tabbycat',\n        'USER': 'tabbycat',\n        'PASSWORD': 'tabbycat',\n        'HOST': 'db',\n        'PORT': 5432, # Non-standard to prevent collisions,\n    }",
        "detail": "tabbycat.settings.docker",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "tabbycat.settings.docker",
        "description": "tabbycat.settings.docker",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': 'tabbycat',\n        'USER': 'tabbycat',\n        'PASSWORD': 'tabbycat',\n        'HOST': 'db',\n        'PORT': 5432, # Non-standard to prevent collisions,\n    }\n}",
        "detail": "tabbycat.settings.docker",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "tabbycat.settings.github",
        "description": "tabbycat.settings.github",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'USER': 'postgres',\n        'NAME': 'postgres',\n        'PASSWORD': 'postgres',\n        'HOST': 'localhost',\n        'PORT': '5432',\n    },\n}",
        "detail": "tabbycat.settings.github",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "tabbycat.settings.heroku",
        "description": "tabbycat.settings.heroku",
        "peekOfCode": "ALLOWED_HOSTS = ['*']\n# Honor the 'X-Forwarded-Proto' header for request.is_secure()\nSECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')\n# Require HTTPS\nif 'DJANGO_SECRET_KEY' in environ and environ.get('DISABLE_HTTPS_REDIRECTS', '') != 'disable':\n    SECURE_SSL_REDIRECT = True\n    SESSION_COOKIE_SECURE = True\n    CSRF_COOKIE_SECURE = True\n# ==============================================================================\n# Postgres",
        "detail": "tabbycat.settings.heroku",
        "documentation": {}
    },
    {
        "label": "SECURE_PROXY_SSL_HEADER",
        "kind": 5,
        "importPath": "tabbycat.settings.heroku",
        "description": "tabbycat.settings.heroku",
        "peekOfCode": "SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')\n# Require HTTPS\nif 'DJANGO_SECRET_KEY' in environ and environ.get('DISABLE_HTTPS_REDIRECTS', '') != 'disable':\n    SECURE_SSL_REDIRECT = True\n    SESSION_COOKIE_SECURE = True\n    CSRF_COOKIE_SECURE = True\n# ==============================================================================\n# Postgres\n# ==============================================================================\n# Parse database configuration from $DATABASE_URL",
        "detail": "tabbycat.settings.heroku",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "tabbycat.settings.heroku",
        "description": "tabbycat.settings.heroku",
        "peekOfCode": "DATABASES = {\n    'default': dj_database_url.config(default='postgres://localhost'),\n}\n# ==============================================================================\n# Redis\n# ==============================================================================\n# Use a separate Redis addon for channels to reduce number of connections\n# With fallback for Tabbykitten installs (no addons) or pre-2.2 instances\nif environ.get('REDISCLOUD_URL'):\n    ALT_REDIS_URL = environ.get('REDISCLOUD_URL') # 30 clients on free",
        "detail": "tabbycat.settings.heroku",
        "documentation": {}
    },
    {
        "label": "CACHES",
        "kind": 5,
        "importPath": "tabbycat.settings.heroku",
        "description": "tabbycat.settings.heroku",
        "peekOfCode": "CACHES = {\n    \"default\": {\n        \"BACKEND\": \"django_redis.cache.RedisCache\",\n        \"LOCATION\": ALT_REDIS_URL,\n        \"OPTIONS\": {\n            \"CLIENT_CLASS\": \"django_redis.client.DefaultClient\",\n            # \"IGNORE_EXCEPTIONS\": True, # Supresses ConnectionError at max\n            # \"CONNECTION_POOL_KWARGS\": {\"max_connections\": 5} # See above\n            \"SOCKET_CONNECT_TIMEOUT\": 5,\n            \"SOCKET_TIMEOUT\": 60,",
        "detail": "tabbycat.settings.heroku",
        "documentation": {}
    },
    {
        "label": "CHANNEL_LAYERS",
        "kind": 5,
        "importPath": "tabbycat.settings.heroku",
        "description": "tabbycat.settings.heroku",
        "peekOfCode": "CHANNEL_LAYERS = {\n    \"default\": {\n        \"BACKEND\": \"channels_redis.core.RedisChannelLayer\",\n        \"CONFIG\": {\n            \"hosts\": [environ.get('REDIS_URL')],\n            # Remove channels from groups after 3 hours\n            # This matches websocket_timeout in Daphne\n            \"group_expiry\": 10800,\n        },\n        # RedisChannelLayer should pool by default,",
        "detail": "tabbycat.settings.heroku",
        "documentation": {}
    },
    {
        "label": "ON_LOCAL",
        "kind": 5,
        "importPath": "tabbycat.settings.local",
        "description": "tabbycat.settings.local",
        "peekOfCode": "ON_LOCAL = True\n# ==============================================================================\n# Settings that you should specify\n# ==============================================================================\nDATABASES = {\n    'default': {\n        'ENGINE'      : 'django.db.backends.postgresql',\n        'NAME'        : 'tab',  # put your PostgreSQL database's name in here\n        'USER'        : 'tabby',  # put your PostgreSQL login role's user name in here\n        'PASSWORD'    : 'tara45',  # put your PostgreSQL login role's password in here",
        "detail": "tabbycat.settings.local",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "tabbycat.settings.local",
        "description": "tabbycat.settings.local",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE'      : 'django.db.backends.postgresql',\n        'NAME'        : 'tab',  # put your PostgreSQL database's name in here\n        'USER'        : 'tabby',  # put your PostgreSQL login role's user name in here\n        'PASSWORD'    : 'tara45',  # put your PostgreSQL login role's password in here\n        'HOST'        : 'localhost',\n        'PORT'        : '5432',\n        'CONN_MAX_AGE': None,\n    }",
        "detail": "tabbycat.settings.local",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "tabbycat.settings.local",
        "description": "tabbycat.settings.local",
        "peekOfCode": "TIME_ZONE = 'Asia/Dhaka'\n# ==============================================================================\n# Overwrites main settings\n# ==============================================================================\nADMINS              = ()\nMANAGERS            = ADMINS\nDEBUG               = True\nDEBUG_ASSETS        = True\nSECRET_KEY          = '#2q43u&tp4((4&m3i8v%w-6z6pp7m(v0-6@w@i!j5n)n15epwc'\n# ==============================================================================",
        "detail": "tabbycat.settings.local",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "tabbycat.settings.local",
        "description": "tabbycat.settings.local",
        "peekOfCode": "ALLOWED_HOSTS = [\"*\"]\nINTERNAL_IPS = (\n    '0.0.0.0',\n    '127.0.0.1'\n)\n# ==============================================================================\n# Caching\n# ==============================================================================\nPUBLIC_FAST_CACHE_TIMEOUT   = 0\nPUBLIC_SLOW_CACHE_TIMEOUT   = 0",
        "detail": "tabbycat.settings.local",
        "documentation": {}
    },
    {
        "label": "INTERNAL_IPS",
        "kind": 5,
        "importPath": "tabbycat.settings.local",
        "description": "tabbycat.settings.local",
        "peekOfCode": "INTERNAL_IPS = (\n    '0.0.0.0',\n    '127.0.0.1'\n)\n# ==============================================================================\n# Caching\n# ==============================================================================\nPUBLIC_FAST_CACHE_TIMEOUT   = 0\nPUBLIC_SLOW_CACHE_TIMEOUT   = 0\nTAB_PAGES_CACHE_TIMEOUT     = 0",
        "detail": "tabbycat.settings.local",
        "documentation": {}
    },
    {
        "label": "CACHES",
        "kind": 5,
        "importPath": "tabbycat.settings.local",
        "description": "tabbycat.settings.local",
        "peekOfCode": "CACHES = { # Use a dummy cache in development\n    'default': {\n        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',\n   }\n}\n# Use the cache with database write through for local sessions\nSESSION_ENGINE = 'django.contrib.sessions.backends.cached_db'",
        "detail": "tabbycat.settings.local",
        "documentation": {}
    },
    {
        "label": "SESSION_ENGINE",
        "kind": 5,
        "importPath": "tabbycat.settings.local",
        "description": "tabbycat.settings.local",
        "peekOfCode": "SESSION_ENGINE = 'django.contrib.sessions.backends.cached_db'",
        "detail": "tabbycat.settings.local",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "tabbycat.settings.render",
        "description": "tabbycat.settings.render",
        "peekOfCode": "ALLOWED_HOSTS = ['*']\n# Honor the 'X-Forwarded-Proto' header for request.is_secure()\nSECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')\nRENDER_EXTERNAL_HOSTNAME = os.environ.get('RENDER_EXTERNAL_HOSTNAME')\nif RENDER_EXTERNAL_HOSTNAME:\n    ALLOWED_HOSTS.append(RENDER_EXTERNAL_HOSTNAME)\n# ==============================================================================\n# Postgres\n# ==============================================================================\n# Parse database configuration from $DATABASE_URL",
        "detail": "tabbycat.settings.render",
        "documentation": {}
    },
    {
        "label": "SECURE_PROXY_SSL_HEADER",
        "kind": 5,
        "importPath": "tabbycat.settings.render",
        "description": "tabbycat.settings.render",
        "peekOfCode": "SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')\nRENDER_EXTERNAL_HOSTNAME = os.environ.get('RENDER_EXTERNAL_HOSTNAME')\nif RENDER_EXTERNAL_HOSTNAME:\n    ALLOWED_HOSTS.append(RENDER_EXTERNAL_HOSTNAME)\n# ==============================================================================\n# Postgres\n# ==============================================================================\n# Parse database configuration from $DATABASE_URL\nDATABASES = {\n    'default': dj_database_url.config(",
        "detail": "tabbycat.settings.render",
        "documentation": {}
    },
    {
        "label": "RENDER_EXTERNAL_HOSTNAME",
        "kind": 5,
        "importPath": "tabbycat.settings.render",
        "description": "tabbycat.settings.render",
        "peekOfCode": "RENDER_EXTERNAL_HOSTNAME = os.environ.get('RENDER_EXTERNAL_HOSTNAME')\nif RENDER_EXTERNAL_HOSTNAME:\n    ALLOWED_HOSTS.append(RENDER_EXTERNAL_HOSTNAME)\n# ==============================================================================\n# Postgres\n# ==============================================================================\n# Parse database configuration from $DATABASE_URL\nDATABASES = {\n    'default': dj_database_url.config(\n        # Feel free to alter this value to suit your needs.",
        "detail": "tabbycat.settings.render",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "tabbycat.settings.render",
        "description": "tabbycat.settings.render",
        "peekOfCode": "DATABASES = {\n    'default': dj_database_url.config(\n        # Feel free to alter this value to suit your needs.\n        default='postgresql://postgres:postgres@localhost:5432/mysite',\n        conn_max_age=600\n    )\n}\n# ==============================================================================\n# Redis\n# ==============================================================================",
        "detail": "tabbycat.settings.render",
        "documentation": {}
    },
    {
        "label": "REDIS_HOST",
        "kind": 5,
        "importPath": "tabbycat.settings.render",
        "description": "tabbycat.settings.render",
        "peekOfCode": "REDIS_HOST = os.environ.get('REDIS_HOST')\nREDIS_PORT = os.environ.get('REDIS_PORT')\nCACHES = {\n    \"default\": {\n        \"BACKEND\": \"django_redis.cache.RedisCache\",\n        \"LOCATION\": \"redis://\" + REDIS_HOST + \":\" + REDIS_PORT,\n        \"OPTIONS\": {\n            \"CLIENT_CLASS\": \"django_redis.client.DefaultClient\",\n            \"SOCKET_CONNECT_TIMEOUT\": 5,\n            \"SOCKET_TIMEOUT\": 60,",
        "detail": "tabbycat.settings.render",
        "documentation": {}
    },
    {
        "label": "REDIS_PORT",
        "kind": 5,
        "importPath": "tabbycat.settings.render",
        "description": "tabbycat.settings.render",
        "peekOfCode": "REDIS_PORT = os.environ.get('REDIS_PORT')\nCACHES = {\n    \"default\": {\n        \"BACKEND\": \"django_redis.cache.RedisCache\",\n        \"LOCATION\": \"redis://\" + REDIS_HOST + \":\" + REDIS_PORT,\n        \"OPTIONS\": {\n            \"CLIENT_CLASS\": \"django_redis.client.DefaultClient\",\n            \"SOCKET_CONNECT_TIMEOUT\": 5,\n            \"SOCKET_TIMEOUT\": 60,\n            \"IGNORE_EXCEPTIONS\": True, # Don't crash on say ConnectionError due to limits",
        "detail": "tabbycat.settings.render",
        "documentation": {}
    },
    {
        "label": "CACHES",
        "kind": 5,
        "importPath": "tabbycat.settings.render",
        "description": "tabbycat.settings.render",
        "peekOfCode": "CACHES = {\n    \"default\": {\n        \"BACKEND\": \"django_redis.cache.RedisCache\",\n        \"LOCATION\": \"redis://\" + REDIS_HOST + \":\" + REDIS_PORT,\n        \"OPTIONS\": {\n            \"CLIENT_CLASS\": \"django_redis.client.DefaultClient\",\n            \"SOCKET_CONNECT_TIMEOUT\": 5,\n            \"SOCKET_TIMEOUT\": 60,\n            \"IGNORE_EXCEPTIONS\": True, # Don't crash on say ConnectionError due to limits\n        },",
        "detail": "tabbycat.settings.render",
        "documentation": {}
    },
    {
        "label": "CHANNEL_LAYERS",
        "kind": 5,
        "importPath": "tabbycat.settings.render",
        "description": "tabbycat.settings.render",
        "peekOfCode": "CHANNEL_LAYERS = {\n    \"default\": {\n        \"BACKEND\": \"channels_redis.core.RedisChannelLayer\",\n        \"CONFIG\": {\n            \"hosts\": [\"redis://\" + REDIS_HOST + \":\" + REDIS_PORT],\n        },\n    },\n}\n# ==============================================================================\n# Sentry",
        "detail": "tabbycat.settings.render",
        "documentation": {}
    },
    {
        "label": "metricformat",
        "kind": 2,
        "importPath": "tabbycat.standings.templatetags.standingsformat",
        "description": "tabbycat.standings.templatetags.standingsformat",
        "peekOfCode": "def metricformat(value):\n    if isinstance(value, float):\n        value = \"{0:.2f}\".format(value).split('.')\n        return value[0] + '<small class=\"text-muted\">' + '.' + value[1] + '</small>'\n    else:\n        return str(value)\n@register.filter\ndef rankingformat(value):\n    # Of the format (1, False); where true/false connotes a shared rank\n    if value[0] is None:",
        "detail": "tabbycat.standings.templatetags.standingsformat",
        "documentation": {}
    },
    {
        "label": "rankingformat",
        "kind": 2,
        "importPath": "tabbycat.standings.templatetags.standingsformat",
        "description": "tabbycat.standings.templatetags.standingsformat",
        "peekOfCode": "def rankingformat(value):\n    # Of the format (1, False); where true/false connotes a shared rank\n    if value[0] is None:\n        return \"\"\n    string = str(value[0])\n    if value[1]:\n        string += \"=\"\n    return string\n@register.filter\ndef teammetricname(key):",
        "detail": "tabbycat.standings.templatetags.standingsformat",
        "documentation": {}
    },
    {
        "label": "teammetricname",
        "kind": 2,
        "importPath": "tabbycat.standings.templatetags.standingsformat",
        "description": "tabbycat.standings.templatetags.standingsformat",
        "peekOfCode": "def teammetricname(key):\n    try:\n        metric_class = TeamStandingsGenerator.metric_annotator_classes[key]\n    except KeyError:\n        return \"\"\n    return metric_class.name",
        "detail": "tabbycat.standings.templatetags.standingsformat",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 5,
        "importPath": "tabbycat.standings.templatetags.standingsformat",
        "description": "tabbycat.standings.templatetags.standingsformat",
        "peekOfCode": "register = template.Library()\n@register.filter\ndef metricformat(value):\n    if isinstance(value, float):\n        value = \"{0:.2f}\".format(value).split('.')\n        return value[0] + '<small class=\"text-muted\">' + '.' + value[1] + '</small>'\n    else:\n        return str(value)\n@register.filter\ndef rankingformat(value):",
        "detail": "tabbycat.standings.templatetags.standingsformat",
        "documentation": {}
    },
    {
        "label": "TEAMS",
        "kind": 5,
        "importPath": "tabbycat.standings.tests.generate_testdata",
        "description": "tabbycat.standings.tests.generate_testdata",
        "peekOfCode": "TEAMS = ['A', 'B', 'C', 'D']\nDRAW_FOR_WHOLE_TOURNAMENT = [['AB', 'CD'], ['AC', 'BD'], ['AB', 'CD']]\nSPEAKERS_PER_TEAM = 3\nADJS_PER_DEBATE = 3\nTOTAL_SCORE_MEAN  = 75 * 3.5\nTOTAL_SCORE_STDEV = 10\nMETRICS = [\n    (\"points\", \"speaks_sum\", \"draw_strength\", \"margin_sum\"),\n    # (\"points\", \"wbw\", \"speaks_sum\", \"wbw\"),\n    (\"points\", \"speaks_sum\"),",
        "detail": "tabbycat.standings.tests.generate_testdata",
        "documentation": {}
    },
    {
        "label": "DRAW_FOR_WHOLE_TOURNAMENT",
        "kind": 5,
        "importPath": "tabbycat.standings.tests.generate_testdata",
        "description": "tabbycat.standings.tests.generate_testdata",
        "peekOfCode": "DRAW_FOR_WHOLE_TOURNAMENT = [['AB', 'CD'], ['AC', 'BD'], ['AB', 'CD']]\nSPEAKERS_PER_TEAM = 3\nADJS_PER_DEBATE = 3\nTOTAL_SCORE_MEAN  = 75 * 3.5\nTOTAL_SCORE_STDEV = 10\nMETRICS = [\n    (\"points\", \"speaks_sum\", \"draw_strength\", \"margin_sum\"),\n    # (\"points\", \"wbw\", \"speaks_sum\", \"wbw\"),\n    (\"points\", \"speaks_sum\"),\n]",
        "detail": "tabbycat.standings.tests.generate_testdata",
        "documentation": {}
    },
    {
        "label": "SPEAKERS_PER_TEAM",
        "kind": 5,
        "importPath": "tabbycat.standings.tests.generate_testdata",
        "description": "tabbycat.standings.tests.generate_testdata",
        "peekOfCode": "SPEAKERS_PER_TEAM = 3\nADJS_PER_DEBATE = 3\nTOTAL_SCORE_MEAN  = 75 * 3.5\nTOTAL_SCORE_STDEV = 10\nMETRICS = [\n    (\"points\", \"speaks_sum\", \"draw_strength\", \"margin_sum\"),\n    # (\"points\", \"wbw\", \"speaks_sum\", \"wbw\"),\n    (\"points\", \"speaks_sum\"),\n]\nteamscores_by_team = {t: [] for t in TEAMS}",
        "detail": "tabbycat.standings.tests.generate_testdata",
        "documentation": {}
    },
    {
        "label": "ADJS_PER_DEBATE",
        "kind": 5,
        "importPath": "tabbycat.standings.tests.generate_testdata",
        "description": "tabbycat.standings.tests.generate_testdata",
        "peekOfCode": "ADJS_PER_DEBATE = 3\nTOTAL_SCORE_MEAN  = 75 * 3.5\nTOTAL_SCORE_STDEV = 10\nMETRICS = [\n    (\"points\", \"speaks_sum\", \"draw_strength\", \"margin_sum\"),\n    # (\"points\", \"wbw\", \"speaks_sum\", \"wbw\"),\n    (\"points\", \"speaks_sum\"),\n]\nteamscores_by_team = {t: [] for t in TEAMS}\n# Comment out this line and add a new line setting up results to use doctored",
        "detail": "tabbycat.standings.tests.generate_testdata",
        "documentation": {}
    },
    {
        "label": "TOTAL_SCORE_STDEV",
        "kind": 5,
        "importPath": "tabbycat.standings.tests.generate_testdata",
        "description": "tabbycat.standings.tests.generate_testdata",
        "peekOfCode": "TOTAL_SCORE_STDEV = 10\nMETRICS = [\n    (\"points\", \"speaks_sum\", \"draw_strength\", \"margin_sum\"),\n    # (\"points\", \"wbw\", \"speaks_sum\", \"wbw\"),\n    (\"points\", \"speaks_sum\"),\n]\nteamscores_by_team = {t: [] for t in TEAMS}\n# Comment out this line and add a new line setting up results to use doctored\n# scores.\nresults = [{debate: {team: {\"score\": round(",
        "detail": "tabbycat.standings.tests.generate_testdata",
        "documentation": {}
    },
    {
        "label": "METRICS",
        "kind": 5,
        "importPath": "tabbycat.standings.tests.generate_testdata",
        "description": "tabbycat.standings.tests.generate_testdata",
        "peekOfCode": "METRICS = [\n    (\"points\", \"speaks_sum\", \"draw_strength\", \"margin_sum\"),\n    # (\"points\", \"wbw\", \"speaks_sum\", \"wbw\"),\n    (\"points\", \"speaks_sum\"),\n]\nteamscores_by_team = {t: [] for t in TEAMS}\n# Comment out this line and add a new line setting up results to use doctored\n# scores.\nresults = [{debate: {team: {\"score\": round(\n    random.normalvariate(75*3.5, 10)*2)/2} for team in debate} for debate in rd}",
        "detail": "tabbycat.standings.tests.generate_testdata",
        "documentation": {}
    },
    {
        "label": "teamscores_by_team",
        "kind": 5,
        "importPath": "tabbycat.standings.tests.generate_testdata",
        "description": "tabbycat.standings.tests.generate_testdata",
        "peekOfCode": "teamscores_by_team = {t: [] for t in TEAMS}\n# Comment out this line and add a new line setting up results to use doctored\n# scores.\nresults = [{debate: {team: {\"score\": round(\n    random.normalvariate(75*3.5, 10)*2)/2} for team in debate} for debate in rd}\n    for rd in DRAW_FOR_WHOLE_TOURNAMENT]\n# For example:\n# results = [{'AB': {'A': {'score': 269.5}, 'B': {'score': 254.0}},\n#             'CD': {'C': {'score': 262.5}, 'D': {'score': 260.0}}},\n#            {'AC': {'A': {'score': 249.0}, 'C': {'score': 261.0}},",
        "detail": "tabbycat.standings.tests.generate_testdata",
        "documentation": {}
    },
    {
        "label": "results",
        "kind": 5,
        "importPath": "tabbycat.standings.tests.generate_testdata",
        "description": "tabbycat.standings.tests.generate_testdata",
        "peekOfCode": "results = [{debate: {team: {\"score\": round(\n    random.normalvariate(75*3.5, 10)*2)/2} for team in debate} for debate in rd}\n    for rd in DRAW_FOR_WHOLE_TOURNAMENT]\n# For example:\n# results = [{'AB': {'A': {'score': 269.5}, 'B': {'score': 254.0}},\n#             'CD': {'C': {'score': 262.5}, 'D': {'score': 260.0}}},\n#            {'AC': {'A': {'score': 249.0}, 'C': {'score': 261.0}},\n#             'BD': {'B': {'score': 260.5}, 'D': {'score': 267.0}}},\n#            {'AB': {'A': {'score': 259.5}, 'B': {'score': 271.5}},\n#             'CD': {'C': {'score': 253.0}, 'D': {'score': 265.0}}}]",
        "detail": "tabbycat.standings.tests.generate_testdata",
        "documentation": {}
    },
    {
        "label": "standings",
        "kind": 5,
        "importPath": "tabbycat.standings.tests.generate_testdata",
        "description": "tabbycat.standings.tests.generate_testdata",
        "peekOfCode": "standings = {}\nfor team, teamscores in teamscores_by_team.items():\n    standings[team] = {\n        \"speaks_sum\": sum(teamscore[\"score\"] for teamscore in teamscores),\n        \"margin_sum\": sum(teamscore[\"margin\"] for teamscore in teamscores),\n        \"points\": sum(teamscore[\"points\"] for teamscore in teamscores),\n        \"draw_strength\": 0,  # Initialize\n        \"against\": dict.fromkeys([t for t in TEAMS if t is not team], \"n/a\"),  # Initialize,\n    }\n# Build up standings metrics that require reference to opponents",
        "detail": "tabbycat.standings.tests.generate_testdata",
        "documentation": {}
    },
    {
        "label": "rankings",
        "kind": 5,
        "importPath": "tabbycat.standings.tests.generate_testdata",
        "description": "tabbycat.standings.tests.generate_testdata",
        "peekOfCode": "rankings = dict()\nfor metrics in METRICS:\n    ranking = sorted(TEAMS, key=lambda t: itemgetter(*metrics)(standings[t]), reverse=True)\n    rankings[metrics] = ranking\ntestdata = {\n    \"teamscores\": results,\n    \"teams\": TEAMS,\n    \"standings\": standings,\n    \"rankings\": rankings,\n}",
        "detail": "tabbycat.standings.tests.generate_testdata",
        "documentation": {}
    },
    {
        "label": "testdata",
        "kind": 5,
        "importPath": "tabbycat.standings.tests.generate_testdata",
        "description": "tabbycat.standings.tests.generate_testdata",
        "peekOfCode": "testdata = {\n    \"teamscores\": results,\n    \"teams\": TEAMS,\n    \"standings\": standings,\n    \"rankings\": rankings,\n}\nprint(\"Test data, to be copied to test:\")\nprint(\"--------------------------------\")\npprint.pprint(testdata, width=100)\nprint(\"\")",
        "detail": "tabbycat.standings.tests.generate_testdata",
        "documentation": {}
    },
    {
        "label": "TestTrivialStandings",
        "kind": 6,
        "importPath": "tabbycat.standings.tests.test_standings",
        "description": "tabbycat.standings.tests.test_standings",
        "peekOfCode": "class TestTrivialStandings(TestCase):\n    \"\"\"Tests cases with just two teams and two rounds.\n    Mostly intended to check that it doesn't crash under lots of different\n    configurations, rather than check the results of the ordering or aggregation\n    functions themselves.\"\"\"\n    def setUp(self):\n        self.tournament = Tournament.objects.create(slug=\"trivialstandingstest\", name=\"Trivial standings test\")\n        self.team1 = Team.objects.create(tournament=self.tournament, reference=\"1\", use_institution_prefix=False)\n        self.team2 = Team.objects.create(tournament=self.tournament, reference=\"2\", use_institution_prefix=False)\n        adj = Adjudicator.objects.create(tournament=self.tournament, name=\"Adjudicator\")",
        "detail": "tabbycat.standings.tests.test_standings",
        "documentation": {}
    },
    {
        "label": "IgnorableDebateMixin",
        "kind": 6,
        "importPath": "tabbycat.standings.tests.test_standings",
        "description": "tabbycat.standings.tests.test_standings",
        "peekOfCode": "class IgnorableDebateMixin:\n    def set_up_ignorable_debate(self):\n        adj = Adjudicator.objects.get()\n        rd = Round.objects.create(tournament=self.tournament, seq=3)\n        debate = Debate.objects.create(round=rd)\n        dt1 = DebateTeam.objects.create(debate=debate, team=self.team1, side=DebateSide.AFF)\n        dt2 = DebateTeam.objects.create(debate=debate, team=self.team2, side=DebateSide.NEG)\n        DebateAdjudicator.objects.create(debate=debate, adjudicator=adj, type=DebateAdjudicator.TYPE_CHAIR)\n        ballotsub = BallotSubmission.objects.create(debate=debate, confirmed=True)\n        TeamScore.objects.create(debate_team=dt1, ballot_submission=ballotsub,",
        "detail": "tabbycat.standings.tests.test_standings",
        "documentation": {}
    },
    {
        "label": "TestStandingsWithEliminationRound",
        "kind": 6,
        "importPath": "tabbycat.standings.tests.test_standings",
        "description": "tabbycat.standings.tests.test_standings",
        "peekOfCode": "class TestStandingsWithEliminationRound(IgnorableDebateMixin, TestTrivialStandings):\n    def setUp(self):\n        super().setUp()\n        debate = self.set_up_ignorable_debate()\n        debate.round.stage = Round.Stage.ELIMINATION\n        debate.round.save()\nclass TestStandingsWithUnconfirmedBallotSubmission(IgnorableDebateMixin, TestTrivialStandings):\n    def setUp(self):\n        super().setUp()\n        debate = self.set_up_ignorable_debate()",
        "detail": "tabbycat.standings.tests.test_standings",
        "documentation": {}
    },
    {
        "label": "TestStandingsWithUnconfirmedBallotSubmission",
        "kind": 6,
        "importPath": "tabbycat.standings.tests.test_standings",
        "description": "tabbycat.standings.tests.test_standings",
        "peekOfCode": "class TestStandingsWithUnconfirmedBallotSubmission(IgnorableDebateMixin, TestTrivialStandings):\n    def setUp(self):\n        super().setUp()\n        debate = self.set_up_ignorable_debate()\n        debate.ballotsubmission_set.update(confirmed=False)\n    def test_draw_strength(self):\n        # The ignorable debate still counts as an opponent (because they definitely faced each\n        # other) but does not count as a win (because it's unconfirmed). So the losing team has\n        # faced the winning team 3 times (including ignorable debate), and the winning team has 2\n        # wins (excluding ignorable debate), for a losing team draw strength of 3 * 2 = 6.",
        "detail": "tabbycat.standings.tests.test_standings",
        "documentation": {}
    },
    {
        "label": "TestBasicStandings",
        "kind": 6,
        "importPath": "tabbycat.standings.tests.test_standings",
        "description": "tabbycat.standings.tests.test_standings",
        "peekOfCode": "class TestBasicStandings(TestCase):\n    TEAMS = \"ABCD\"\n    testdata = dict()\n    testdata[1] = \\\n        {'rankings': {('points', 'speaks_sum'): ['A', 'D', 'C', 'B'],\n                      ('points', 'speaks_sum', 'draw_strength', 'margin_sum'): ['A', 'D', 'C', 'B']},\n         'standings': {'A': {'against': {'B': 2, 'C': 0, 'D': 'n/a'},\n                             'draw_strength': 2,\n                             'margin_sum': 46.0,\n                             'points': 2,",
        "detail": "tabbycat.standings.tests.test_standings",
        "documentation": {}
    },
    {
        "label": "TestMissingStandings",
        "kind": 6,
        "importPath": "tabbycat.standings.tests.test_standings",
        "description": "tabbycat.standings.tests.test_standings",
        "peekOfCode": "class TestMissingStandings(TestCase):\n    def setUp(self):\n        self.tournament = Tournament.objects.create(slug=\"missingstandingstest\", name=\"Missing standings test\")\n        self.team1 = Team.objects.create(tournament=self.tournament, reference=\"1\", use_institution_prefix=False)\n        self.team2 = Team.objects.create(tournament=self.tournament, reference=\"2\", use_institution_prefix=False)\n    def tearDown(self):\n        self.tournament.delete()\n    def get_standings(self, generator):\n        with suppress_logs('standings.metrics', logging.INFO):\n            return generator.generate(self.tournament.team_set.all())",
        "detail": "tabbycat.standings.tests.test_standings",
        "documentation": {}
    },
    {
        "label": "CoreStandingsTests",
        "kind": 6,
        "importPath": "tabbycat.standings.tests.test_ui",
        "description": "tabbycat.standings.tests.test_ui",
        "peekOfCode": "class CoreStandingsTests(SeleniumTournamentTestCase):\n    set_preferences = ['tab_release__speaker_tab_released',\n                       'tab_release__team_tab_released',\n                       'tab_release__replies_tab_released',\n                       'tab_release__motion_tab_released']\n    def test_speaker_standings(self):\n        test_url = self.reverse_url('standings-public-tab-speaker')\n        self.selenium.get('%s%s' % (self.live_server_url, test_url))\n        WebDriverWait(self.selenium, 5).until(\n            lambda driver: driver.find_element_by_css_selector('.table'))",
        "detail": "tabbycat.standings.tests.test_ui",
        "documentation": {}
    },
    {
        "label": "PublicStandingsTestMixin",
        "kind": 6,
        "importPath": "tabbycat.standings.tests.test_views",
        "description": "tabbycat.standings.tests.test_views",
        "peekOfCode": "class PublicStandingsTestMixin(ConditionalTournamentViewSimpleLoadTestMixin):\n    \"\"\"Suppresses standings logging output.\"\"\"\n    def test_view_enabled(self):\n        with suppress_logs('standings.metrics', logging.INFO):\n            super().test_view_enabled()\nclass PublicTeamStandingsViewTest(ConditionalTournamentViewSimpleLoadTestMixin, TestCase):\n    view_name = 'standings-public-teams-current'\n    view_toggle_preference = 'public_features__public_team_standings'\nclass PublicTeamTabViewTest(PublicStandingsTestMixin, TestCase):\n    view_name = 'standings-public-tab-team'",
        "detail": "tabbycat.standings.tests.test_views",
        "documentation": {}
    },
    {
        "label": "PublicTeamStandingsViewTest",
        "kind": 6,
        "importPath": "tabbycat.standings.tests.test_views",
        "description": "tabbycat.standings.tests.test_views",
        "peekOfCode": "class PublicTeamStandingsViewTest(ConditionalTournamentViewSimpleLoadTestMixin, TestCase):\n    view_name = 'standings-public-teams-current'\n    view_toggle_preference = 'public_features__public_team_standings'\nclass PublicTeamTabViewTest(PublicStandingsTestMixin, TestCase):\n    view_name = 'standings-public-tab-team'\n    view_toggle_preference = 'tab_release__team_tab_released'\nclass PublicSpeakerTabViewTest(PublicStandingsTestMixin, TestCase):\n    view_name = 'standings-public-tab-speaker'\n    view_toggle_preference = 'tab_release__speaker_tab_released'\nclass PublicRepliesTabViewTest(PublicStandingsTestMixin, TestCase):",
        "detail": "tabbycat.standings.tests.test_views",
        "documentation": {}
    },
    {
        "label": "PublicTeamTabViewTest",
        "kind": 6,
        "importPath": "tabbycat.standings.tests.test_views",
        "description": "tabbycat.standings.tests.test_views",
        "peekOfCode": "class PublicTeamTabViewTest(PublicStandingsTestMixin, TestCase):\n    view_name = 'standings-public-tab-team'\n    view_toggle_preference = 'tab_release__team_tab_released'\nclass PublicSpeakerTabViewTest(PublicStandingsTestMixin, TestCase):\n    view_name = 'standings-public-tab-speaker'\n    view_toggle_preference = 'tab_release__speaker_tab_released'\nclass PublicRepliesTabViewTest(PublicStandingsTestMixin, TestCase):\n    view_name = 'standings-public-tab-replies'\n    view_toggle_preference = 'tab_release__replies_tab_released'\nclass PublicAdjudicatorTabViewTest(ConditionalTournamentViewSimpleLoadTestMixin, TestCase):",
        "detail": "tabbycat.standings.tests.test_views",
        "documentation": {}
    },
    {
        "label": "PublicSpeakerTabViewTest",
        "kind": 6,
        "importPath": "tabbycat.standings.tests.test_views",
        "description": "tabbycat.standings.tests.test_views",
        "peekOfCode": "class PublicSpeakerTabViewTest(PublicStandingsTestMixin, TestCase):\n    view_name = 'standings-public-tab-speaker'\n    view_toggle_preference = 'tab_release__speaker_tab_released'\nclass PublicRepliesTabViewTest(PublicStandingsTestMixin, TestCase):\n    view_name = 'standings-public-tab-replies'\n    view_toggle_preference = 'tab_release__replies_tab_released'\nclass PublicAdjudicatorTabViewTest(ConditionalTournamentViewSimpleLoadTestMixin, TestCase):\n    view_name = 'standings-public-adjudicators-tab'\n    view_toggle_preference = 'tab_release__adjudicators_tab_released'\nclass PublicDiversityViewTest(ConditionalTournamentViewSimpleLoadTestMixin, TestCase):",
        "detail": "tabbycat.standings.tests.test_views",
        "documentation": {}
    },
    {
        "label": "PublicRepliesTabViewTest",
        "kind": 6,
        "importPath": "tabbycat.standings.tests.test_views",
        "description": "tabbycat.standings.tests.test_views",
        "peekOfCode": "class PublicRepliesTabViewTest(PublicStandingsTestMixin, TestCase):\n    view_name = 'standings-public-tab-replies'\n    view_toggle_preference = 'tab_release__replies_tab_released'\nclass PublicAdjudicatorTabViewTest(ConditionalTournamentViewSimpleLoadTestMixin, TestCase):\n    view_name = 'standings-public-adjudicators-tab'\n    view_toggle_preference = 'tab_release__adjudicators_tab_released'\nclass PublicDiversityViewTest(ConditionalTournamentViewSimpleLoadTestMixin, TestCase):\n    view_name = 'standings-public-diversity'\n    view_toggle_preference = 'public_features__public_diversity'",
        "detail": "tabbycat.standings.tests.test_views",
        "documentation": {}
    },
    {
        "label": "PublicAdjudicatorTabViewTest",
        "kind": 6,
        "importPath": "tabbycat.standings.tests.test_views",
        "description": "tabbycat.standings.tests.test_views",
        "peekOfCode": "class PublicAdjudicatorTabViewTest(ConditionalTournamentViewSimpleLoadTestMixin, TestCase):\n    view_name = 'standings-public-adjudicators-tab'\n    view_toggle_preference = 'tab_release__adjudicators_tab_released'\nclass PublicDiversityViewTest(ConditionalTournamentViewSimpleLoadTestMixin, TestCase):\n    view_name = 'standings-public-diversity'\n    view_toggle_preference = 'public_features__public_diversity'",
        "detail": "tabbycat.standings.tests.test_views",
        "documentation": {}
    },
    {
        "label": "PublicDiversityViewTest",
        "kind": 6,
        "importPath": "tabbycat.standings.tests.test_views",
        "description": "tabbycat.standings.tests.test_views",
        "peekOfCode": "class PublicDiversityViewTest(ConditionalTournamentViewSimpleLoadTestMixin, TestCase):\n    view_name = 'standings-public-diversity'\n    view_toggle_preference = 'public_features__public_diversity'",
        "detail": "tabbycat.standings.tests.test_views",
        "documentation": {}
    },
    {
        "label": "StandingsError",
        "kind": 6,
        "importPath": "tabbycat.standings.base",
        "description": "tabbycat.standings.base",
        "peekOfCode": "class StandingsError(RuntimeError):\n    pass\nclass StandingInfo:\n    \"\"\"Stores standing information for an instance of a model.\n    This class is designed to be accessed directly by Django templates. Its\n    `metrics` and `rankings` attributes support item lookup, so may be accessed\n    like this:\n                  Django template                Python code\n        Points:   {{ info.metrics.points }}      info.metrics[\"points\"]\n        Rank:     {{ info.rankings.rank }}       info.rankings[\"rank\"]",
        "detail": "tabbycat.standings.base",
        "documentation": {}
    },
    {
        "label": "StandingInfo",
        "kind": 6,
        "importPath": "tabbycat.standings.base",
        "description": "tabbycat.standings.base",
        "peekOfCode": "class StandingInfo:\n    \"\"\"Stores standing information for an instance of a model.\n    This class is designed to be accessed directly by Django templates. Its\n    `metrics` and `rankings` attributes support item lookup, so may be accessed\n    like this:\n                  Django template                Python code\n        Points:   {{ info.metrics.points }}      info.metrics[\"points\"]\n        Rank:     {{ info.rankings.rank }}       info.rankings[\"rank\"]\n    The `itermetrics()` and `iterrankings()` methods return iterators over the\n    values of `metrics` and `rankings` respectively, in the order specified by",
        "detail": "tabbycat.standings.base",
        "documentation": {}
    },
    {
        "label": "Standings",
        "kind": 6,
        "importPath": "tabbycat.standings.base",
        "description": "tabbycat.standings.base",
        "peekOfCode": "class Standings:\n    \"\"\"Presents all information about the standings requested. Returned\n    by `BaseStandingsGenerator`.\n    This class is designed to be accessed directly by Django templates. The\n    `metrics_info` method returns an iterator yielding dictionaries with keys\n    \"key\", \"name\", \"abbr\" and \"icon\". For example:\n    Django template:\n        <tr>\n          {% for metric in standings.metrics_info %}\n            <td>{{ metric.name }}</td>",
        "detail": "tabbycat.standings.base",
        "documentation": {}
    },
    {
        "label": "BaseStandingsGenerator",
        "kind": 6,
        "importPath": "tabbycat.standings.base",
        "description": "tabbycat.standings.base",
        "peekOfCode": "class BaseStandingsGenerator:\n    DEFAULT_OPTIONS = {\n        \"tiebreak\": \"random\",\n        \"rank_filter\": (None, None),  # (Field name, Min value)\n        \"include_filter\": None,  # not currently used by other code,\n    }\n    TIEBREAK_FUNCTIONS = {\n        \"random\"     : random.shuffle,\n    }\n    QUERYSET_TIEBREAK_FIELDS = {",
        "detail": "tabbycat.standings.base",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "tabbycat.standings.base",
        "description": "tabbycat.standings.base",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass StandingsError(RuntimeError):\n    pass\nclass StandingInfo:\n    \"\"\"Stores standing information for an instance of a model.\n    This class is designed to be accessed directly by Django templates. Its\n    `metrics` and `rankings` attributes support item lookup, so may be accessed\n    like this:\n                  Django template                Python code\n        Points:   {{ info.metrics.points }}      info.metrics[\"points\"]",
        "detail": "tabbycat.standings.base",
        "documentation": {}
    },
    {
        "label": "Percentile",
        "kind": 6,
        "importPath": "tabbycat.standings.diversity",
        "description": "tabbycat.standings.diversity",
        "peekOfCode": "class Percentile(Aggregate):\n    function = 'PERCENTILE_CONT'\n    name = \"percentile\"\n    template = \"%(function)s(%(percentiles)s) WITHIN GROUP (ORDER BY %(expressions)s)\"\n    # Make percentiles a positional argument\n    def __init__(self, expression, percentiles, **extra):\n        return super().__init__(expression, percentiles=percentiles, **extra)\nSTATISTICS_MAP = {\n    'mean': Avg('score'),\n    'upperq': Percentile('score', 0.75),",
        "detail": "tabbycat.standings.diversity",
        "documentation": {}
    },
    {
        "label": "compile_statistics_by_gender",
        "kind": 2,
        "importPath": "tabbycat.standings.diversity",
        "description": "tabbycat.standings.diversity",
        "peekOfCode": "def compile_statistics_by_gender(titles, queryset, statistics, gender_field):\n    aggregates = {key: value for key, value in STATISTICS_MAP.items() if key in statistics}\n    overall_statistics = queryset.aggregate(**aggregates)\n    gender_statistics = queryset.values(gender=_gender_group(gender_field)).annotate(**aggregates)\n    gender_statistics = {d['gender']: d for d in gender_statistics}\n    results = []\n    for title, statistic in zip(titles, statistics):\n        result = {'title': title}\n        result['datum'] = overall_statistics[statistic]\n        result['data'] = _group_data(lambda gender: gender_statistics[gender][statistic], ['N', 'M'], ['NM', 'Male'])",
        "detail": "tabbycat.standings.diversity",
        "documentation": {}
    },
    {
        "label": "compile_grouped_means_by_gender",
        "kind": 2,
        "importPath": "tabbycat.standings.diversity",
        "description": "tabbycat.standings.diversity",
        "peekOfCode": "def compile_grouped_means_by_gender(titles, queryset, gender_field, group_field, group_values):\n    overall_means = queryset.values(group_field).annotate(Avg('score'))\n    overall_means = {d[group_field]: d['score__avg'] for d in overall_means}\n    gender_means = queryset.values(group_field, gender=_gender_group(gender_field)).annotate(Avg('score'))\n    gender_means = {(d[group_field], d['gender']): d['score__avg'] for d in gender_means}\n    results = []\n    for title, group in zip(titles, group_values):\n        result = {'title': title}\n        try:\n            result['datum'] = overall_means[group]",
        "detail": "tabbycat.standings.diversity",
        "documentation": {}
    },
    {
        "label": "compile_gender_counts",
        "kind": 2,
        "importPath": "tabbycat.standings.diversity",
        "description": "tabbycat.standings.diversity",
        "peekOfCode": "def compile_gender_counts(title, queryset, gender_field):\n    return compile_grouped_counts(title, queryset, _gender_group(gender_field), ['N', 'M', '-'], ['NM', 'Male', 'Unknown'])\ndef compile_grouped_counts(title, queryset, group_field, group_values, group_labels):\n    counts = queryset.values(group=group_field).annotate(count=Count(Value(1)))  # Count counts records, value doesn't matter\n    counts = {d['group']: d['count'] for d in counts}\n    result = {'title': title}\n    result['data'] = _group_data(lambda group: counts[group], group_values, group_labels)\n    return result\ndef compile_grouped_gender_counts(titles, queryset, gender_field, group_field, group_values):\n    counts = queryset.values(group_field, gender_group=_gender_group(gender_field)).annotate(count=Count(Value(1)))",
        "detail": "tabbycat.standings.diversity",
        "documentation": {}
    },
    {
        "label": "compile_grouped_counts",
        "kind": 2,
        "importPath": "tabbycat.standings.diversity",
        "description": "tabbycat.standings.diversity",
        "peekOfCode": "def compile_grouped_counts(title, queryset, group_field, group_values, group_labels):\n    counts = queryset.values(group=group_field).annotate(count=Count(Value(1)))  # Count counts records, value doesn't matter\n    counts = {d['group']: d['count'] for d in counts}\n    result = {'title': title}\n    result['data'] = _group_data(lambda group: counts[group], group_values, group_labels)\n    return result\ndef compile_grouped_gender_counts(titles, queryset, gender_field, group_field, group_values):\n    counts = queryset.values(group_field, gender_group=_gender_group(gender_field)).annotate(count=Count(Value(1)))\n    counts = {(d[group_field], d['gender_group']): d['count'] for d in counts}\n    results = []",
        "detail": "tabbycat.standings.diversity",
        "documentation": {}
    },
    {
        "label": "compile_grouped_gender_counts",
        "kind": 2,
        "importPath": "tabbycat.standings.diversity",
        "description": "tabbycat.standings.diversity",
        "peekOfCode": "def compile_grouped_gender_counts(titles, queryset, gender_field, group_field, group_values):\n    counts = queryset.values(group_field, gender_group=_gender_group(gender_field)).annotate(count=Count(Value(1)))\n    counts = {(d[group_field], d['gender_group']): d['count'] for d in counts}\n    results = []\n    for title, group in zip(titles, group_values):\n        result = {'title': title}\n        result['data'] = _group_data(lambda gender: counts[(group, gender)], ['N', 'M', '-'], ['NM', 'Male', 'Unknown'])\n        results.append(result)\n    return results\ndef get_diversity_data_sets(t, for_public):",
        "detail": "tabbycat.standings.diversity",
        "documentation": {}
    },
    {
        "label": "get_diversity_data_sets",
        "kind": 2,
        "importPath": "tabbycat.standings.diversity",
        "description": "tabbycat.standings.diversity",
        "peekOfCode": "def get_diversity_data_sets(t, for_public):\n    all_regions = regions_ordered(t)\n    region_values = [r['id'] for r in all_regions]\n    region_labels = [r['seq'] for r in all_regions]\n    data_sets = {\n        'speakers_gender': [],\n        'speakers_region': [],\n        'speakers_results': [],\n        'speakers_categories': [],\n        'detailed_speakers_results': [],",
        "detail": "tabbycat.standings.diversity",
        "documentation": {}
    },
    {
        "label": "STATISTICS_MAP",
        "kind": 5,
        "importPath": "tabbycat.standings.diversity",
        "description": "tabbycat.standings.diversity",
        "peekOfCode": "STATISTICS_MAP = {\n    'mean': Avg('score'),\n    'upperq': Percentile('score', 0.75),\n    'median': Percentile('score', 0.5),\n    'lowerq': Percentile('score', 0.25),\n}\ndef _gender_group(gender_field):\n    return Case(\n        When(**{'%s__in' % gender_field: (Person.GENDER_FEMALE, Person.GENDER_OTHER), 'then': Value('N')}),\n        When(**{gender_field: Person.GENDER_MALE, 'then': Value('M')}),",
        "detail": "tabbycat.standings.diversity",
        "documentation": {}
    },
    {
        "label": "BaseMetricAnnotator",
        "kind": 6,
        "importPath": "tabbycat.standings.metrics",
        "description": "tabbycat.standings.metrics",
        "peekOfCode": "class BaseMetricAnnotator:\n    \"\"\"Base class for all metric annotators.\n    A metric annotator is a class that adds a metric to a Standings object.\n    Subclasses must implement the method `annotate()`. Every annotator\n    must add precisely one metric.\n    Subclasses must set the `key`, `name` and `abbr` attributes.\n    The default constructor does nothing, but subclasses may have constructors\n    that initialise themselves with parameters.\"\"\"\n    key = None  # must be set by subclasses\n    name = None  # must be set by subclasses",
        "detail": "tabbycat.standings.metrics",
        "documentation": {}
    },
    {
        "label": "RepeatedMetricAnnotator",
        "kind": 6,
        "importPath": "tabbycat.standings.metrics",
        "description": "tabbycat.standings.metrics",
        "peekOfCode": "class RepeatedMetricAnnotator(BaseMetricAnnotator):\n    \"\"\"Base class for metric annotators that can be used multiple times.\n    Subclasses should set the `key_prefix`, `name_prefix` and `abbr_prefix`\n    class attributes, and use the `key` attribute when adding metrics in\n    implementing `annotate()`.\"\"\"\n    ranked_only = True  # Repeated metrics don't make sense outside the precedence\n    repeatable = True\n    def __init__(self, index, keys):\n        self.index = index\n        self.key = self.key_prefix + str(index)",
        "detail": "tabbycat.standings.metrics",
        "documentation": {}
    },
    {
        "label": "QuerySetMetricAnnotator",
        "kind": 6,
        "importPath": "tabbycat.standings.metrics",
        "description": "tabbycat.standings.metrics",
        "peekOfCode": "class QuerySetMetricAnnotator(BaseMetricAnnotator):\n    \"\"\"Base class for annotators that metrics based on conditional aggregations.\"\"\"\n    combinable = True\n    def get_annotation(self, round):\n        raise NotImplementedError(\"Subclasses of QuerySetMetricAnnotator must implement get_annotation().\")\n    def get_annotated_queryset(self, queryset, round=None):\n        \"\"\"Returns a QuerySet annotated with the metric given.\"\"\"\n        annotation = self.get_annotation(round=round)\n        logger.info(\"Annotation in %s: %s\", self.__class__.__name__, str(annotation))\n        self.queryset_annotated = True",
        "detail": "tabbycat.standings.metrics",
        "documentation": {}
    },
    {
        "label": "metricgetter",
        "kind": 2,
        "importPath": "tabbycat.standings.metrics",
        "description": "tabbycat.standings.metrics",
        "peekOfCode": "def metricgetter(items, negate=None):\n    \"\"\"Returns a callable object that fetches each item in `items` from its\n    operand's `metrics` attribute, and returns a tuple containing the results.\n    The tuple will have the same number for elements as `items`.\n    For example:\n     - After `f = metricgetter((\"a\",))`, the call `f(x)` returns `(x.metrics[\"a\"],)`.\n     - After `g = metricgetter((4, 9))`, the call `g(x)` returns `(x.metrics[4], x.metrics[9])`.\n    If the metric is None (e.g. no scores so can't calculate stdev), use 0 instead to sort.\n    \"\"\"\n    if negate is None:",
        "detail": "tabbycat.standings.metrics",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "tabbycat.standings.metrics",
        "description": "tabbycat.standings.metrics",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef metricgetter(items, negate=None):\n    \"\"\"Returns a callable object that fetches each item in `items` from its\n    operand's `metrics` attribute, and returns a tuple containing the results.\n    The tuple will have the same number for elements as `items`.\n    For example:\n     - After `f = metricgetter((\"a\",))`, the call `f(x)` returns `(x.metrics[\"a\"],)`.\n     - After `g = metricgetter((4, 9))`, the call `g(x)` returns `(x.metrics[4], x.metrics[9])`.\n    If the metric is None (e.g. no scores so can't calculate stdev), use 0 instead to sort.\n    \"\"\"",
        "detail": "tabbycat.standings.metrics",
        "documentation": {}
    },
    {
        "label": "BaseRankAnnotator",
        "kind": 6,
        "importPath": "tabbycat.standings.ranking",
        "description": "tabbycat.standings.ranking",
        "peekOfCode": "class BaseRankAnnotator:\n    \"\"\"Base class for all rank annotators.\n    A rank annotator is a class that adds rankings to a TeamStandings object.\n    Subclasses must implement the method `annotate()`.\n    Subclasses must also set the `key`, `name` and `abbr` attributes, either as\n    class attributes or object attributes. The `icon` attribute is\n    optional.\n     - `name` is a name for display in the user interface\n     - `abbr` is used instead of `name` when there is not enough space for `name`\n     - `icon` (optional) is the name of an icon to be used if possible",
        "detail": "tabbycat.standings.ranking",
        "documentation": {}
    },
    {
        "label": "BasicRankAnnotator",
        "kind": 6,
        "importPath": "tabbycat.standings.ranking",
        "description": "tabbycat.standings.ranking",
        "peekOfCode": "class BasicRankAnnotator(BaseRankAnnotator):\n    key = \"rank\"\n    name = \"rank\"\n    abbr = \"Rk\"\n    icon = \"bar-chart\"\n    def __init__(self, metrics):\n        self.metrics = metrics\n        self.rank_key = metricgetter(metrics)\n    def annotate(self, standings):\n        rank = 1",
        "detail": "tabbycat.standings.ranking",
        "documentation": {}
    },
    {
        "label": "BaseRankWithinGroupAnnotator",
        "kind": 6,
        "importPath": "tabbycat.standings.ranking",
        "description": "tabbycat.standings.ranking",
        "peekOfCode": "class BaseRankWithinGroupAnnotator(BaseRankAnnotator):\n    \"\"\"Base class for ranking annotators that rank within groups.\n    Subclasses must define `self.group_key` and `self.rank_key`.\"\"\"\n    def annotate(self, standings):\n        filtered = [tsi for tsi in standings if self.group_key(tsi) is not None]\n        by_group = sorted(filtered, key=self.group_key)\n        for key, group in groupby(by_group, key=self.group_key):\n            rank_in_group = 1\n            for _, subgroup in groupby(group, self.rank_key):\n                subgroup = list(subgroup)",
        "detail": "tabbycat.standings.ranking",
        "documentation": {}
    },
    {
        "label": "SubrankAnnotator",
        "kind": 6,
        "importPath": "tabbycat.standings.ranking",
        "description": "tabbycat.standings.ranking",
        "peekOfCode": "class SubrankAnnotator(BaseRankWithinGroupAnnotator):\n    key = \"subrank\"\n    name = \"subrank\"\n    abbr = \"Sub\"\n    def __init__(self, metrics):\n        self.metrics = metrics\n        self.group_key = metricgetter(metrics[:1])  # don't crash if there are no metrics\n        self.rank_key = metricgetter(metrics[1:])\n    def get_annotation(self, annotators, min_field, min_rounds):\n        annotations = {a.key: a for a in annotators}",
        "detail": "tabbycat.standings.ranking",
        "documentation": {}
    },
    {
        "label": "RankFromInstitutionAnnotator",
        "kind": 6,
        "importPath": "tabbycat.standings.ranking",
        "description": "tabbycat.standings.ranking",
        "peekOfCode": "class RankFromInstitutionAnnotator(BaseRankWithinGroupAnnotator):\n    key = \"institution_rank\"\n    name = \"rank from institution\"\n    abbr = \"Inst\"\n    def __init__(self, metrics):\n        self.metrics = metrics\n        self.rank_key = metricgetter(metrics)\n    @staticmethod\n    def group_key(tsi):\n        return tsi.team.institution_id",
        "detail": "tabbycat.standings.ranking",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "tabbycat.standings.ranking",
        "description": "tabbycat.standings.ranking",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass BaseRankAnnotator:\n    \"\"\"Base class for all rank annotators.\n    A rank annotator is a class that adds rankings to a TeamStandings object.\n    Subclasses must implement the method `annotate()`.\n    Subclasses must also set the `key`, `name` and `abbr` attributes, either as\n    class attributes or object attributes. The `icon` attribute is\n    optional.\n     - `name` is a name for display in the user interface\n     - `abbr` is used instead of `name` when there is not enough space for `name`",
        "detail": "tabbycat.standings.ranking",
        "documentation": {}
    },
    {
        "label": "add_team_round_results",
        "kind": 2,
        "importPath": "tabbycat.standings.round_results",
        "description": "tabbycat.standings.round_results",
        "peekOfCode": "def add_team_round_results(standings, rounds, opponents=False, lookup=None, id_attr='instance_id'):\n    \"\"\"Sets, on each item `info` in `standings`, an attribute\n    `info.round_results` to be a list of `TeamScore` objects, one for each round\n    in `rounds` (in the same order), relating to the team associated with that\n    item.\n    If, for some team and round, there is no relevant `TeamScore`, then the\n    corresponding element of `info.round_results` will be `None`.\n    If `lookup` is given, it should be a function that takes two arguments\n    `(standings, x)` and returns the element in `standings` relating to the\n    `Team` object `x`.  By default, it just uses `standings.get_standings(x)`.",
        "detail": "tabbycat.standings.round_results",
        "documentation": {}
    },
    {
        "label": "add_team_round_results_public",
        "kind": 2,
        "importPath": "tabbycat.standings.round_results",
        "description": "tabbycat.standings.round_results",
        "peekOfCode": "def add_team_round_results_public(teams, rounds, opponents=False):\n    \"\"\"Sets, on each item `t` in `teams`, the following attributes:\n      - `t.round_results`, a list of `TeamScore` objects, one for each round in\n        `rounds` (in the same order), relating to the team `t`.\n      - `t.points`, the number of points that team has from the rounds in\n        `rounds`.\n    \"\"\"\n    add_team_round_results(teams, rounds, opponents=opponents,\n        lookup=(lambda teams, x: [t for t in teams if t == x][0]), id_attr='id')\n    for team in teams:",
        "detail": "tabbycat.standings.round_results",
        "documentation": {}
    },
    {
        "label": "add_speaker_round_results",
        "kind": 2,
        "importPath": "tabbycat.standings.round_results",
        "description": "tabbycat.standings.round_results",
        "peekOfCode": "def add_speaker_round_results(standings, rounds, tournament, replies=False):\n    \"\"\"Sets, on each item `info` in `standings`, an attribute `info.scores` to\n    be a list of ints, one for each round in `rounds`, each being the score\n    received by the speaker associated with `info` in the corresponding round.\n    If there is no score available for a speaker and round, the corresponding\n    element will be `None`.\n    \"\"\"\n    speaker_ids = [info.instance_id for info in standings]\n    speaker_scores = SpeakerScore.objects.select_related('speaker',\n        'ballot_submission', 'debate_team__debate__round').filter(",
        "detail": "tabbycat.standings.round_results",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "tabbycat.standings.round_results",
        "description": "tabbycat.standings.round_results",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef add_team_round_results(standings, rounds, opponents=False, lookup=None, id_attr='instance_id'):\n    \"\"\"Sets, on each item `info` in `standings`, an attribute\n    `info.round_results` to be a list of `TeamScore` objects, one for each round\n    in `rounds` (in the same order), relating to the team associated with that\n    item.\n    If, for some team and round, there is no relevant `TeamScore`, then the\n    corresponding element of `info.round_results` will be `None`.\n    If `lookup` is given, it should be a function that takes two arguments\n    `(standings, x)` and returns the element in `standings` relating to the",
        "detail": "tabbycat.standings.round_results",
        "documentation": {}
    },
    {
        "label": "SpeakerScoreQuerySetMetricAnnotator",
        "kind": 6,
        "importPath": "tabbycat.standings.speakers",
        "description": "tabbycat.standings.speakers",
        "peekOfCode": "class SpeakerScoreQuerySetMetricAnnotator(QuerySetMetricAnnotator):\n    \"\"\"Base class for annotators for metrics based on conditional aggregations\n    of SpeakerScore instances.\"\"\"\n    function = None  # Must be set by subclasses\n    replies = False\n    field = 'speakerscore__score'\n    def get_annotation(self, round):\n        \"\"\"Returns a QuerySet annotated with the metric given. All positional\n        arguments from the third onwards, and all keyword arguments, are passed\n        to get_annotation_metric_query_str().\"\"\"",
        "detail": "tabbycat.standings.speakers",
        "documentation": {}
    },
    {
        "label": "TotalSpeakerScoreMetricAnnotator",
        "kind": 6,
        "importPath": "tabbycat.standings.speakers",
        "description": "tabbycat.standings.speakers",
        "peekOfCode": "class TotalSpeakerScoreMetricAnnotator(SpeakerScoreQuerySetMetricAnnotator):\n    \"\"\"Metric annotator for total speaker score.\"\"\"\n    key = \"total\"\n    name = _(\"total\")\n    abbr = _(\"Total\")\n    function = Sum\nclass AverageSpeakerScoreMetricAnnotator(SpeakerScoreQuerySetMetricAnnotator):\n    \"\"\"Metric annotator for average speaker score.\"\"\"\n    key = \"average\"\n    name = _(\"average\")",
        "detail": "tabbycat.standings.speakers",
        "documentation": {}
    },
    {
        "label": "AverageSpeakerScoreMetricAnnotator",
        "kind": 6,
        "importPath": "tabbycat.standings.speakers",
        "description": "tabbycat.standings.speakers",
        "peekOfCode": "class AverageSpeakerScoreMetricAnnotator(SpeakerScoreQuerySetMetricAnnotator):\n    \"\"\"Metric annotator for average speaker score.\"\"\"\n    key = \"average\"\n    name = _(\"average\")\n    abbr = _(\"Avg\")\n    function = Avg\nclass SpeakerTeamPointsMetricAnnotator(SpeakerScoreQuerySetMetricAnnotator):\n    key = \"team_points\"\n    name = _(\"team points\")\n    abbr = _(\"Team\")",
        "detail": "tabbycat.standings.speakers",
        "documentation": {}
    },
    {
        "label": "SpeakerTeamPointsMetricAnnotator",
        "kind": 6,
        "importPath": "tabbycat.standings.speakers",
        "description": "tabbycat.standings.speakers",
        "peekOfCode": "class SpeakerTeamPointsMetricAnnotator(SpeakerScoreQuerySetMetricAnnotator):\n    key = \"team_points\"\n    name = _(\"team points\")\n    abbr = _(\"Team\")\n    combinable = False\n    def get_annotation(self, round):\n        \"\"\"Returns a QuerySet annotated with the metric given. All positional\n        arguments from the third onwards, and all keyword arguments, are passed\n        to get_annotation_metric_query_str().\"\"\"\n        annotation_filter = Q(",
        "detail": "tabbycat.standings.speakers",
        "documentation": {}
    },
    {
        "label": "StandardDeviationSpeakerScoreMetricAnnotator",
        "kind": 6,
        "importPath": "tabbycat.standings.speakers",
        "description": "tabbycat.standings.speakers",
        "peekOfCode": "class StandardDeviationSpeakerScoreMetricAnnotator(SpeakerScoreQuerySetMetricAnnotator):\n    \"\"\"Metric annotator for standard deviation of speaker score.\"\"\"\n    key = \"stdev\"\n    name = _(\"standard deviation\")\n    abbr = _(\"Stdev\")\n    function = StdDev\n    ascending = True\nclass NumberOfSpeechesMetricAnnotator(SpeakerScoreQuerySetMetricAnnotator):\n    \"\"\"Metric annotator for number of speeches given.\"\"\"\n    key = \"count\"",
        "detail": "tabbycat.standings.speakers",
        "documentation": {}
    },
    {
        "label": "NumberOfSpeechesMetricAnnotator",
        "kind": 6,
        "importPath": "tabbycat.standings.speakers",
        "description": "tabbycat.standings.speakers",
        "peekOfCode": "class NumberOfSpeechesMetricAnnotator(SpeakerScoreQuerySetMetricAnnotator):\n    \"\"\"Metric annotator for number of speeches given.\"\"\"\n    key = \"count\"\n    name = _(\"number of speeches given\")\n    abbr = _(\"Num\")\n    function = Count\nclass TotalReplyScoreMetricAnnotator(SpeakerScoreQuerySetMetricAnnotator):\n    \"\"\"Metric annotator for total reply score.\"\"\"\n    key = \"replies_sum\"\n    name = _(\"total\")",
        "detail": "tabbycat.standings.speakers",
        "documentation": {}
    },
    {
        "label": "TotalReplyScoreMetricAnnotator",
        "kind": 6,
        "importPath": "tabbycat.standings.speakers",
        "description": "tabbycat.standings.speakers",
        "peekOfCode": "class TotalReplyScoreMetricAnnotator(SpeakerScoreQuerySetMetricAnnotator):\n    \"\"\"Metric annotator for total reply score.\"\"\"\n    key = \"replies_sum\"\n    name = _(\"total\")\n    abbr = _(\"Total\")\n    function = Sum\n    replies = True\n    listed = False\nclass AverageReplyScoreMetricAnnotator(SpeakerScoreQuerySetMetricAnnotator):\n    \"\"\"Metric annotator for average reply score.\"\"\"",
        "detail": "tabbycat.standings.speakers",
        "documentation": {}
    },
    {
        "label": "AverageReplyScoreMetricAnnotator",
        "kind": 6,
        "importPath": "tabbycat.standings.speakers",
        "description": "tabbycat.standings.speakers",
        "peekOfCode": "class AverageReplyScoreMetricAnnotator(SpeakerScoreQuerySetMetricAnnotator):\n    \"\"\"Metric annotator for average reply score.\"\"\"\n    key = \"replies_avg\"\n    name = _(\"average\")\n    abbr = _(\"Avg\")\n    function = Avg\n    replies = True\n    listed = False\nclass StandardDeviationReplyScoreMetricAnnotator(SpeakerScoreQuerySetMetricAnnotator):\n    \"\"\"Metric annotator for standard deviation of reply score.\"\"\"",
        "detail": "tabbycat.standings.speakers",
        "documentation": {}
    },
    {
        "label": "StandardDeviationReplyScoreMetricAnnotator",
        "kind": 6,
        "importPath": "tabbycat.standings.speakers",
        "description": "tabbycat.standings.speakers",
        "peekOfCode": "class StandardDeviationReplyScoreMetricAnnotator(SpeakerScoreQuerySetMetricAnnotator):\n    \"\"\"Metric annotator for standard deviation of reply score.\"\"\"\n    key = \"replies_stddev\"\n    name = _(\"standard deviation\")\n    abbr = _(\"Stdev\")\n    function = StdDev\n    replies = True\n    listed = False\n    ascending = True\nclass NumberOfRepliesMetricAnnotator(SpeakerScoreQuerySetMetricAnnotator):",
        "detail": "tabbycat.standings.speakers",
        "documentation": {}
    },
    {
        "label": "NumberOfRepliesMetricAnnotator",
        "kind": 6,
        "importPath": "tabbycat.standings.speakers",
        "description": "tabbycat.standings.speakers",
        "peekOfCode": "class NumberOfRepliesMetricAnnotator(SpeakerScoreQuerySetMetricAnnotator):\n    \"\"\"Metric annotator for number of replies given.\"\"\"\n    key = \"replies_count\"\n    name = _(\"replies given\")\n    abbr = _(\"Num\")\n    function = Count\n    replies = True\n    listed = False\nclass TrimmedMeanSpeakerScoreMetricAnnotator(SpeakerScoreQuerySetMetricAnnotator):\n    \"\"\"Metric annotator for trimmed mean speaker score.\"\"\"",
        "detail": "tabbycat.standings.speakers",
        "documentation": {}
    },
    {
        "label": "TrimmedMeanSpeakerScoreMetricAnnotator",
        "kind": 6,
        "importPath": "tabbycat.standings.speakers",
        "description": "tabbycat.standings.speakers",
        "peekOfCode": "class TrimmedMeanSpeakerScoreMetricAnnotator(SpeakerScoreQuerySetMetricAnnotator):\n    \"\"\"Metric annotator for trimmed mean speaker score.\"\"\"\n    key = \"trimmed_mean\"\n    name = _(\"trimmed mean (high-low drop)\")\n    abbr = _(\"Trim\")\n    class SpeechCount(NumberOfSpeechesMetricAnnotator):\n        key = 'speech_count'\n    class MaximumScore(SpeakerScoreQuerySetMetricAnnotator):\n        function = Max\n    class MinimumScore(SpeakerScoreQuerySetMetricAnnotator):",
        "detail": "tabbycat.standings.speakers",
        "documentation": {}
    },
    {
        "label": "SpeakerScoreRankingsMetricAnnotator",
        "kind": 6,
        "importPath": "tabbycat.standings.speakers",
        "description": "tabbycat.standings.speakers",
        "peekOfCode": "class SpeakerScoreRankingsMetricAnnotator(SpeakerScoreQuerySetMetricAnnotator):\n    \"\"\"Metric annotator for standard deviation of speaker score.\"\"\"\n    key = \"srank\"\n    name = _(\"speech ranks\")\n    abbr = _(\"SRank\")\n    function = Sum\n    ascending = True\n    field = 'speakerscore__rank'\n# ==============================================================================\n# Standings generator",
        "detail": "tabbycat.standings.speakers",
        "documentation": {}
    },
    {
        "label": "SpeakerStandingsGenerator",
        "kind": 6,
        "importPath": "tabbycat.standings.speakers",
        "description": "tabbycat.standings.speakers",
        "peekOfCode": "class SpeakerStandingsGenerator(BaseStandingsGenerator):\n    \"\"\"Class for generating speaker standings. An instance is configured with\n    metrics and rankings in the constructor, and an iterable of Speaker objects\n    is passed to its `generate()` method to generate standings. Example:\n        generator = TeamStandingsGenerator(('points', 'speaker_score'), ('rank',))\n        standings = generator.generate(teams)\n    The generate() method returns a TeamStandings object.\n    \"\"\"\n    TIEBREAK_FUNCTIONS = BaseStandingsGenerator.TIEBREAK_FUNCTIONS.copy()\n    TIEBREAK_FUNCTIONS[\"name\"] = lambda x: x.sort(key=lambda y: y.speaker.name)",
        "detail": "tabbycat.standings.speakers",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "tabbycat.standings.speakers",
        "description": "tabbycat.standings.speakers",
        "peekOfCode": "logger = logging.getLogger(__name__)\n# ==============================================================================\n# Metric annotators\n# ==============================================================================\nclass SpeakerScoreQuerySetMetricAnnotator(QuerySetMetricAnnotator):\n    \"\"\"Base class for annotators for metrics based on conditional aggregations\n    of SpeakerScore instances.\"\"\"\n    function = None  # Must be set by subclasses\n    replies = False\n    field = 'speakerscore__score'",
        "detail": "tabbycat.standings.speakers",
        "documentation": {}
    },
    {
        "label": "TeamScoreQuerySetMetricAnnotator",
        "kind": 6,
        "importPath": "tabbycat.standings.teams",
        "description": "tabbycat.standings.teams",
        "peekOfCode": "class TeamScoreQuerySetMetricAnnotator(QuerySetMetricAnnotator):\n    \"\"\"Base class for annotators that metrics based on conditional aggregations\n    of TeamScore instances.\"\"\"\n    function = None  # must be set by subclasses\n    field = None  # must be set by subclasses\n    output_field = None\n    where_value = None\n    exclude_unconfirmed = True\n    def get_field(self):\n        \"\"\"Subclasses with complicated fields override this method.\"\"\"",
        "detail": "tabbycat.standings.teams",
        "documentation": {}
    },
    {
        "label": "PointsMetricAnnotator",
        "kind": 6,
        "importPath": "tabbycat.standings.teams",
        "description": "tabbycat.standings.teams",
        "peekOfCode": "class PointsMetricAnnotator(TeamScoreQuerySetMetricAnnotator):\n    \"\"\"Metric annotator for total number of points.\"\"\"\n    key = \"points\"\n    name = _(\"points\")\n    abbr = _(\"Pts\")\n    function = Sum\n    field = \"points\"\n    output_field = PositiveIntegerField()\n    def get_field(self):\n        return F(super().get_field()) * F('debateteam__debate__round__weight')",
        "detail": "tabbycat.standings.teams",
        "documentation": {}
    },
    {
        "label": "WinsMetricAnnotator",
        "kind": 6,
        "importPath": "tabbycat.standings.teams",
        "description": "tabbycat.standings.teams",
        "peekOfCode": "class WinsMetricAnnotator(TeamScoreQuerySetMetricAnnotator):\n    \"\"\"Metric annotator for total number of wins.\"\"\"\n    key = \"wins\"\n    name = _(\"wins\")\n    abbr = _(\"Wins\")\n    function = Count\n    field = \"win\"\n    where_value = True\nclass TotalSpeakerScoreMetricAnnotator(TeamScoreQuerySetMetricAnnotator):\n    \"\"\"Metric annotator for total speaker score.\"\"\"",
        "detail": "tabbycat.standings.teams",
        "documentation": {}
    },
    {
        "label": "TotalSpeakerScoreMetricAnnotator",
        "kind": 6,
        "importPath": "tabbycat.standings.teams",
        "description": "tabbycat.standings.teams",
        "peekOfCode": "class TotalSpeakerScoreMetricAnnotator(TeamScoreQuerySetMetricAnnotator):\n    \"\"\"Metric annotator for total speaker score.\"\"\"\n    key = \"speaks_sum\"\n    name = _(\"total speaker score\")\n    abbr = _(\"Spk\")\n    function = Sum\n    field = \"score\"\nclass AverageSpeakerScoreMetricAnnotator(TeamScoreQuerySetMetricAnnotator):\n    \"\"\"Metric annotator for total speaker score.\"\"\"\n    key = \"speaks_avg\"",
        "detail": "tabbycat.standings.teams",
        "documentation": {}
    },
    {
        "label": "AverageSpeakerScoreMetricAnnotator",
        "kind": 6,
        "importPath": "tabbycat.standings.teams",
        "description": "tabbycat.standings.teams",
        "peekOfCode": "class AverageSpeakerScoreMetricAnnotator(TeamScoreQuerySetMetricAnnotator):\n    \"\"\"Metric annotator for total speaker score.\"\"\"\n    key = \"speaks_avg\"\n    name = _(\"average total speaker score\")\n    abbr = _(\"ATSS\")\n    function = Avg\n    field = \"score\"\nclass SpeakerScoreStandardDeviationMetricAnnotator(TeamScoreQuerySetMetricAnnotator):\n    \"\"\"Metric annotator for total speaker score.\"\"\"\n    key = \"speaks_stddev\"",
        "detail": "tabbycat.standings.teams",
        "documentation": {}
    },
    {
        "label": "SpeakerScoreStandardDeviationMetricAnnotator",
        "kind": 6,
        "importPath": "tabbycat.standings.teams",
        "description": "tabbycat.standings.teams",
        "peekOfCode": "class SpeakerScoreStandardDeviationMetricAnnotator(TeamScoreQuerySetMetricAnnotator):\n    \"\"\"Metric annotator for total speaker score.\"\"\"\n    key = \"speaks_stddev\"\n    name = _(\"speaker score standard deviation\")\n    abbr = _(\"SSD\")\n    ascending = True\n    function = StdDev\n    field = \"score\"\nclass SumMarginMetricAnnotator(TeamScoreQuerySetMetricAnnotator):\n    \"\"\"Metric annotator for sum of margins.\"\"\"",
        "detail": "tabbycat.standings.teams",
        "documentation": {}
    },
    {
        "label": "SumMarginMetricAnnotator",
        "kind": 6,
        "importPath": "tabbycat.standings.teams",
        "description": "tabbycat.standings.teams",
        "peekOfCode": "class SumMarginMetricAnnotator(TeamScoreQuerySetMetricAnnotator):\n    \"\"\"Metric annotator for sum of margins.\"\"\"\n    key = \"margin_sum\"\n    name = _(\"sum of margins\")\n    abbr = _(\"Marg\")\n    function = Sum\n    field = \"margin\"\nclass AverageMarginMetricAnnotator(TeamScoreQuerySetMetricAnnotator):\n    \"\"\"Metric annotator for average margin.\"\"\"\n    key = \"margin_avg\"",
        "detail": "tabbycat.standings.teams",
        "documentation": {}
    },
    {
        "label": "AverageMarginMetricAnnotator",
        "kind": 6,
        "importPath": "tabbycat.standings.teams",
        "description": "tabbycat.standings.teams",
        "peekOfCode": "class AverageMarginMetricAnnotator(TeamScoreQuerySetMetricAnnotator):\n    \"\"\"Metric annotator for average margin.\"\"\"\n    key = \"margin_avg\"\n    name = _(\"average margin\")\n    abbr = _(\"AWM\")\n    function = Avg\n    field = \"margin\"\nclass AverageIndividualScoreMetricAnnotator(TeamScoreQuerySetMetricAnnotator):\n    \"\"\"Metric annotator for total substantive speaker score.\"\"\"\n    key = \"speaks_ind_avg\"",
        "detail": "tabbycat.standings.teams",
        "documentation": {}
    },
    {
        "label": "AverageIndividualScoreMetricAnnotator",
        "kind": 6,
        "importPath": "tabbycat.standings.teams",
        "description": "tabbycat.standings.teams",
        "peekOfCode": "class AverageIndividualScoreMetricAnnotator(TeamScoreQuerySetMetricAnnotator):\n    \"\"\"Metric annotator for total substantive speaker score.\"\"\"\n    key = \"speaks_ind_avg\"\n    name = _(\"average individual speaker score\")\n    abbr = _(\"AISS\")\n    function = Avg\n    combinable = False\n    def get_field(self):\n        return 'debateteam__speakerscore__score'\n    def get_annotation_filter(self, round=None):",
        "detail": "tabbycat.standings.teams",
        "documentation": {}
    },
    {
        "label": "BaseDrawStrengthMetricAnnotator",
        "kind": 6,
        "importPath": "tabbycat.standings.teams",
        "description": "tabbycat.standings.teams",
        "peekOfCode": "class BaseDrawStrengthMetricAnnotator(BaseMetricAnnotator):\n    opponent_annotator = None\n    def annotate(self, queryset, standings, round=None):\n        if not queryset.exists():\n            return\n        logger.info(\"Running opponents query for draw strength:\")\n        # Make a copy of teams queryset and annotate with opponents\n        opponents_filter = ~Q(debateteam__debate__debateteam__team_id=F('id'))\n        opponents_filter &= Q(debateteam__debate__round__stage=Round.Stage.PRELIMINARY)\n        if round is not None:",
        "detail": "tabbycat.standings.teams",
        "documentation": {}
    },
    {
        "label": "DrawStrengthByWinsMetricAnnotator",
        "kind": 6,
        "importPath": "tabbycat.standings.teams",
        "description": "tabbycat.standings.teams",
        "peekOfCode": "class DrawStrengthByWinsMetricAnnotator(BaseDrawStrengthMetricAnnotator):\n    \"\"\"Metric annotator for draw strength.\"\"\"\n    key = \"draw_strength\"  # keep this key for backwards compatibility\n    name = _(\"draw strength by wins\")\n    abbr = _(\"DS\")\n    opponent_annotator = PointsMetricAnnotator\nclass DrawStrengthBySpeakerScoreMetricAnnotator(BaseDrawStrengthMetricAnnotator):\n    \"\"\"Metric annotator for draw strength by score.\"\"\"\n    key = \"draw_strength_speaks\"\n    name = _(\"draw strength by total speaker score\")",
        "detail": "tabbycat.standings.teams",
        "documentation": {}
    },
    {
        "label": "DrawStrengthBySpeakerScoreMetricAnnotator",
        "kind": 6,
        "importPath": "tabbycat.standings.teams",
        "description": "tabbycat.standings.teams",
        "peekOfCode": "class DrawStrengthBySpeakerScoreMetricAnnotator(BaseDrawStrengthMetricAnnotator):\n    \"\"\"Metric annotator for draw strength by score.\"\"\"\n    key = \"draw_strength_speaks\"\n    name = _(\"draw strength by total speaker score\")\n    abbr = _(\"DSS\")\n    opponent_annotator = TotalSpeakerScoreMetricAnnotator\nclass TeamPullupsMetricAnnotator(TeamScoreQuerySetMetricAnnotator):\n    \"\"\"Metric annotator for number of times pulled up.\n    How many teams the team has been pulled up (i.e., has a pullup flag in\n    an associated DebateTeam object).\"\"\"",
        "detail": "tabbycat.standings.teams",
        "documentation": {}
    },
    {
        "label": "TeamPullupsMetricAnnotator",
        "kind": 6,
        "importPath": "tabbycat.standings.teams",
        "description": "tabbycat.standings.teams",
        "peekOfCode": "class TeamPullupsMetricAnnotator(TeamScoreQuerySetMetricAnnotator):\n    \"\"\"Metric annotator for number of times pulled up.\n    How many teams the team has been pulled up (i.e., has a pullup flag in\n    an associated DebateTeam object).\"\"\"\n    key = \"npullups\"\n    name = _(\"number of pullups\")\n    abbr = _(\"PU\")\n    function = Count\n    where_value = ['pullup']\n    exclude_unconfirmed = False",
        "detail": "tabbycat.standings.teams",
        "documentation": {}
    },
    {
        "label": "PullupDebatesMetricAnnotator",
        "kind": 6,
        "importPath": "tabbycat.standings.teams",
        "description": "tabbycat.standings.teams",
        "peekOfCode": "class PullupDebatesMetricAnnotator(TeamPullupsMetricAnnotator):\n    \"\"\"Metric annotator for number of times the team has been in a pull-up room.\n    How many teams the team has faced a pulled up team (i.e., has a pullup\n    flag in an associated Debate object).\"\"\"\n    key = \"pullup_debates\"\n    name = _(\"number of times in pullup debates\")\n    abbr = _(\"SPu\")\n    def get_where_field(self):\n        return 'debateteam__debate__flags__contains'\nclass NumberOfAdjudicatorsMetricAnnotator(TeamScoreQuerySetMetricAnnotator):",
        "detail": "tabbycat.standings.teams",
        "documentation": {}
    },
    {
        "label": "NumberOfAdjudicatorsMetricAnnotator",
        "kind": 6,
        "importPath": "tabbycat.standings.teams",
        "description": "tabbycat.standings.teams",
        "peekOfCode": "class NumberOfAdjudicatorsMetricAnnotator(TeamScoreQuerySetMetricAnnotator):\n    \"\"\"Metric annotator for number of votes given by a panel.\n    The metric normalizes each debate to an assumed typical panel size. For\n    example, if `self.adjs_per_debate == 3`, but a particular debate has a panel\n    of five, then for that debate, a team winning on a 4-1 split will earn\n    \"2.4 votes\" for that debate.\"\"\"\n    key = \"num_adjs\"\n    name = _(\"number of adjudicators who voted for this team\")\n    abbr = _(\"Ballots\")\n    choice_name = _(\"votes/ballots carried\")",
        "detail": "tabbycat.standings.teams",
        "documentation": {}
    },
    {
        "label": "NumberOfFirstsMetricAnnotator",
        "kind": 6,
        "importPath": "tabbycat.standings.teams",
        "description": "tabbycat.standings.teams",
        "peekOfCode": "class NumberOfFirstsMetricAnnotator(TeamScoreQuerySetMetricAnnotator):\n    key = \"firsts\"\n    name = _(\"number of firsts\")\n    abbr = _(\"1sts\")\n    function = Count\n    field = \"points\"\n    where_value = 3\nclass NumberOfSecondsMetricAnnotator(TeamScoreQuerySetMetricAnnotator):\n    key = \"seconds\"\n    name = _(\"number of seconds\")",
        "detail": "tabbycat.standings.teams",
        "documentation": {}
    },
    {
        "label": "NumberOfSecondsMetricAnnotator",
        "kind": 6,
        "importPath": "tabbycat.standings.teams",
        "description": "tabbycat.standings.teams",
        "peekOfCode": "class NumberOfSecondsMetricAnnotator(TeamScoreQuerySetMetricAnnotator):\n    key = \"seconds\"\n    name = _(\"number of seconds\")\n    abbr = _(\"2nds\")\n    function = Count\n    field = \"points\"\n    where_value = 2\nclass NumberOfThirdsMetricAnnotator(TeamScoreQuerySetMetricAnnotator):\n    key = \"thirds\"\n    name = _(\"number of thirds\")",
        "detail": "tabbycat.standings.teams",
        "documentation": {}
    },
    {
        "label": "NumberOfThirdsMetricAnnotator",
        "kind": 6,
        "importPath": "tabbycat.standings.teams",
        "description": "tabbycat.standings.teams",
        "peekOfCode": "class NumberOfThirdsMetricAnnotator(TeamScoreQuerySetMetricAnnotator):\n    key = \"thirds\"\n    name = _(\"number of thirds\")\n    abbr = _(\"3rds\")\n    function = Count\n    field = \"points\"\n    where_value = 1\nclass IronsMetricAnnotator(TeamScoreQuerySetMetricAnnotator):\n    \"\"\"Metric annotator for total number of times the team had a duplicate speech.\"\"\"\n    key = \"num_iron\"",
        "detail": "tabbycat.standings.teams",
        "documentation": {}
    },
    {
        "label": "IronsMetricAnnotator",
        "kind": 6,
        "importPath": "tabbycat.standings.teams",
        "description": "tabbycat.standings.teams",
        "peekOfCode": "class IronsMetricAnnotator(TeamScoreQuerySetMetricAnnotator):\n    \"\"\"Metric annotator for total number of times the team had a duplicate speech.\"\"\"\n    key = \"num_iron\"\n    name = _(\"number of times ironed\")\n    abbr = _(\"Irons\")\n    ascending = True\n    function = Count\n    field = \"has_ghost\"\n    where_value = True\nclass WhoBeatWhomMetricAnnotator(RepeatedMetricAnnotator):",
        "detail": "tabbycat.standings.teams",
        "documentation": {}
    },
    {
        "label": "WhoBeatWhomMetricAnnotator",
        "kind": 6,
        "importPath": "tabbycat.standings.teams",
        "description": "tabbycat.standings.teams",
        "peekOfCode": "class WhoBeatWhomMetricAnnotator(RepeatedMetricAnnotator):\n    \"\"\"Metric annotator for who-beat-whom. Use once for every who-beat-whom in\n    the precedence.\"\"\"\n    key_prefix = \"wbw\"\n    name_prefix = _(\"Who-beat-whom\")\n    abbr_prefix = _(\"WBW\")\n    choice_name = _(\"who-beat-whom\")\n    def get_team_scores(self, key, equal_teams, tsi, round):\n        equal_teams.remove(tsi)\n        other = equal_teams[0]",
        "detail": "tabbycat.standings.teams",
        "documentation": {}
    },
    {
        "label": "TeamStandingsGenerator",
        "kind": 6,
        "importPath": "tabbycat.standings.teams",
        "description": "tabbycat.standings.teams",
        "peekOfCode": "class TeamStandingsGenerator(BaseStandingsGenerator):\n    \"\"\"Class for generating standings. An instance is configured with metrics\n    and rankings in the constructor, and an iterable of Team objects is passed\n    to its `generate()` method to generate standings. Example:\n        generator = TeamStandingsGenerator(('points', 'speaker_score'), ('rank',))\n        standings = generator.generate(teams)\n    The generate() method returns a TeamStandings object.\n    \"\"\"\n    TIEBREAK_FUNCTIONS = BaseStandingsGenerator.TIEBREAK_FUNCTIONS.copy()\n    TIEBREAK_FUNCTIONS[\"shortname\"] = lambda x: x.sort(key=lambda y: y.team.short_name)",
        "detail": "tabbycat.standings.teams",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "tabbycat.standings.teams",
        "description": "tabbycat.standings.teams",
        "peekOfCode": "logger = logging.getLogger(__name__)\n# ==============================================================================\n# Metric annotators\n# ==============================================================================\nclass TeamScoreQuerySetMetricAnnotator(QuerySetMetricAnnotator):\n    \"\"\"Base class for annotators that metrics based on conditional aggregations\n    of TeamScore instances.\"\"\"\n    function = None  # must be set by subclasses\n    field = None  # must be set by subclasses\n    output_field = None",
        "detail": "tabbycat.standings.teams",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "tabbycat.standings.urls_admin",
        "description": "tabbycat.standings.urls_admin",
        "peekOfCode": "urlpatterns = [\n    path('round/<int:round_seq>/', include([\n        path('',\n            views.StandingsIndexView.as_view(),\n            name='standings-index'),\n        path('team/',\n            views.TeamStandingsView.as_view(),\n            name='standings-team'),\n        path('team/<slug:category>/',\n            views.BreakCategoryStandingsView.as_view(),",
        "detail": "tabbycat.standings.urls_admin",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "tabbycat.standings.urls_public",
        "description": "tabbycat.standings.urls_public",
        "peekOfCode": "urlpatterns = [\n    path('current-standings/',\n        views.PublicCurrentTeamStandingsView.as_view(),\n        name='standings-public-teams-current'),\n    path('team/',\n        views.PublicTeamTabView.as_view(),\n        name='standings-public-tab-team'),\n    path('team/<slug:category>/',\n        views.PublicBreakCategoryTabView.as_view(),\n        name='standings-public-tab-break-category'),",
        "detail": "tabbycat.standings.urls_public",
        "documentation": {}
    },
    {
        "label": "StandingsIndexView",
        "kind": 6,
        "importPath": "tabbycat.standings.views",
        "description": "tabbycat.standings.views",
        "peekOfCode": "class StandingsIndexView(AdministratorMixin, RoundMixin, TemplateView):\n    template_name = 'standings_index.html'\n    view_permission = Permission.VIEW_STANDINGS_OVERVIEW\n    def get_context_data(self, **kwargs):\n        speaks = SpeakerScore.objects.filter(\n            ballot_submission__confirmed=True,\n            ghost=False,\n            speaker__team__tournament=self.tournament,\n        ).exclude(\n            position=self.tournament.reply_position,",
        "detail": "tabbycat.standings.views",
        "documentation": {}
    },
    {
        "label": "BaseStandingsView",
        "kind": 6,
        "importPath": "tabbycat.standings.views",
        "description": "tabbycat.standings.views",
        "peekOfCode": "class BaseStandingsView(RoundMixin, VueTableTemplateView):\n    template_name = 'standings_table.html'\n    standings_error_message = gettext_lazy(\n        \"<p>There was an error generating the standings: \"\n        \"<em>%(message)s</em></p>\",\n    )\n    admin_standings_error_instructions = gettext_lazy(\n        \"<p>You may need to double-check the \"\n        \"<a href=\\\"%(standings_options_url)s\\\" class=\\\"alert-link\\\">\"\n        \"standings configuration under the Setup section</a>. \"",
        "detail": "tabbycat.standings.views",
        "documentation": {}
    },
    {
        "label": "PublicTabMixin",
        "kind": 6,
        "importPath": "tabbycat.standings.views",
        "description": "tabbycat.standings.views",
        "peekOfCode": "class PublicTabMixin(PublicTournamentPageMixin):\n    \"\"\"Mixin for views that should only be allowed when the tab is released publicly.\"\"\"\n    cache_timeout = settings.TAB_PAGES_CACHE_TIMEOUT\n    def get_page_subtitle(self):\n        return None\n    @property\n    def round(self):\n        if hasattr(self, \"_round\"):\n            return self._round\n        # Always show tabs with respect to current round on public tab pages,",
        "detail": "tabbycat.standings.views",
        "documentation": {}
    },
    {
        "label": "BaseSpeakerStandingsView",
        "kind": 6,
        "importPath": "tabbycat.standings.views",
        "description": "tabbycat.standings.views",
        "peekOfCode": "class BaseSpeakerStandingsView(BaseStandingsView):\n    \"\"\"Base class for views that display speaker standings.\"\"\"\n    rankings = ('rank',)\n    missable_preference = None\n    missable_field = None\n    def get_standings(self):\n        if self.round is None:\n            raise StandingsError(_(\"The tab can't be displayed because all rounds so far in this tournament are silent.\"))\n        speakers = self.get_speakers()\n        speakers = speakers.select_related(",
        "detail": "tabbycat.standings.views",
        "documentation": {}
    },
    {
        "label": "BaseSubstantiveSpeakerStandingsView",
        "kind": 6,
        "importPath": "tabbycat.standings.views",
        "description": "tabbycat.standings.views",
        "peekOfCode": "class BaseSubstantiveSpeakerStandingsView(BaseSpeakerStandingsView):\n    page_title = gettext_lazy(\"Speaker Standings\")\n    page_emoji = '💯'\n    missable_preference = 'standings_missed_debates'\n    missable_field = 'count'\n    def get_speakers(self):\n        return Speaker.objects.filter(team__tournament=self.tournament)\n    def get_metrics(self):\n        metrics = self.tournament.pref('speaker_standings_precedence')\n        extra_metrics = self.tournament.pref('speaker_standings_extra_metrics')",
        "detail": "tabbycat.standings.views",
        "documentation": {}
    },
    {
        "label": "SpeakerStandingsView",
        "kind": 6,
        "importPath": "tabbycat.standings.views",
        "description": "tabbycat.standings.views",
        "peekOfCode": "class SpeakerStandingsView(AdministratorMixin, BaseSubstantiveSpeakerStandingsView):\n    template_name = 'speaker_standings.html'  # add info alerts\n    view_permission = Permission.VIEW_SPEAKERSSTANDINGS\nclass PublicSpeakerTabView(PublicTabMixin, BaseSubstantiveSpeakerStandingsView):\n    page_title = gettext_lazy(\"Speaker Tab\")\n    public_page_preference = 'speaker_tab_released'\n    public_limit_preference = 'speaker_tab_limit'\nclass BaseSpeakerCategoryStandingsView(SingleObjectFromTournamentMixin, BaseSubstantiveSpeakerStandingsView):\n    \"\"\"Speaker standings view for a category.\"\"\"\n    model = SpeakerCategory",
        "detail": "tabbycat.standings.views",
        "documentation": {}
    },
    {
        "label": "PublicSpeakerTabView",
        "kind": 6,
        "importPath": "tabbycat.standings.views",
        "description": "tabbycat.standings.views",
        "peekOfCode": "class PublicSpeakerTabView(PublicTabMixin, BaseSubstantiveSpeakerStandingsView):\n    page_title = gettext_lazy(\"Speaker Tab\")\n    public_page_preference = 'speaker_tab_released'\n    public_limit_preference = 'speaker_tab_limit'\nclass BaseSpeakerCategoryStandingsView(SingleObjectFromTournamentMixin, BaseSubstantiveSpeakerStandingsView):\n    \"\"\"Speaker standings view for a category.\"\"\"\n    model = SpeakerCategory\n    slug_url_kwarg = 'category'\n    def get_speakers(self):\n        return self.object.speaker_set.all()",
        "detail": "tabbycat.standings.views",
        "documentation": {}
    },
    {
        "label": "BaseSpeakerCategoryStandingsView",
        "kind": 6,
        "importPath": "tabbycat.standings.views",
        "description": "tabbycat.standings.views",
        "peekOfCode": "class BaseSpeakerCategoryStandingsView(SingleObjectFromTournamentMixin, BaseSubstantiveSpeakerStandingsView):\n    \"\"\"Speaker standings view for a category.\"\"\"\n    model = SpeakerCategory\n    slug_url_kwarg = 'category'\n    def get_speakers(self):\n        return self.object.speaker_set.all()\n    def get_page_title(self):\n        return _(\"%(category)s Speaker Standings\") % {'category': self.object.name}\n    def get(self, request, *args, **kwargs):\n        self.object = self.get_object()",
        "detail": "tabbycat.standings.views",
        "documentation": {}
    },
    {
        "label": "SpeakerCategoryStandingsView",
        "kind": 6,
        "importPath": "tabbycat.standings.views",
        "description": "tabbycat.standings.views",
        "peekOfCode": "class SpeakerCategoryStandingsView(AdministratorMixin, BaseSpeakerCategoryStandingsView):\n    view_permission = Permission.VIEW_SPEAKERSSTANDINGS\nclass PublicSpeakerCategoryTabView(PublicTabMixin, BaseSpeakerCategoryStandingsView):\n    public_page_preference = 'speaker_category_tabs_released'\n    def get_tab_limit(self):\n        return self.object.limit\n    def get_page_title(self):\n        title = _(\"%(category)s Speaker Tab\") % {'category': self.object.name}\n        return self.append_limit(title)\n    def get(self, request, *args, **kwargs):",
        "detail": "tabbycat.standings.views",
        "documentation": {}
    },
    {
        "label": "PublicSpeakerCategoryTabView",
        "kind": 6,
        "importPath": "tabbycat.standings.views",
        "description": "tabbycat.standings.views",
        "peekOfCode": "class PublicSpeakerCategoryTabView(PublicTabMixin, BaseSpeakerCategoryStandingsView):\n    public_page_preference = 'speaker_category_tabs_released'\n    def get_tab_limit(self):\n        return self.object.limit\n    def get_page_title(self):\n        title = _(\"%(category)s Speaker Tab\") % {'category': self.object.name}\n        return self.append_limit(title)\n    def get(self, request, *args, **kwargs):\n        self.object = self.get_object()\n        if not self.object.public:",
        "detail": "tabbycat.standings.views",
        "documentation": {}
    },
    {
        "label": "BaseReplyStandingsView",
        "kind": 6,
        "importPath": "tabbycat.standings.views",
        "description": "tabbycat.standings.views",
        "peekOfCode": "class BaseReplyStandingsView(BaseSpeakerStandingsView):\n    \"\"\"Speaker standings view for replies.\"\"\"\n    page_title = gettext_lazy(\"Reply Speaker Standings\")\n    page_emoji = '💁'\n    missable_preference = 'standings_missed_replies'\n    missable_field = 'replies_count'\n    def get_speakers(self):\n        if self.tournament.reply_position is None:\n            raise StandingsError(_(\"Reply speeches aren't enabled in this tournament.\"))\n        return Speaker.objects.filter(",
        "detail": "tabbycat.standings.views",
        "documentation": {}
    },
    {
        "label": "ReplyStandingsView",
        "kind": 6,
        "importPath": "tabbycat.standings.views",
        "description": "tabbycat.standings.views",
        "peekOfCode": "class ReplyStandingsView(AdministratorMixin, BaseReplyStandingsView):\n    template_name = 'reply_standings.html'  # add an info alert\n    view_permission = Permission.VIEW_REPLIESSTANDINGS\nclass PublicReplyTabView(PublicTabMixin, BaseReplyStandingsView):\n    page_title = gettext_lazy(\"Reply Speaker Tab\")\n    public_page_preference = 'replies_tab_released'\n    public_limit_preference = 'replies_tab_limit'\n# ==============================================================================\n# Team standings\n# ==============================================================================",
        "detail": "tabbycat.standings.views",
        "documentation": {}
    },
    {
        "label": "PublicReplyTabView",
        "kind": 6,
        "importPath": "tabbycat.standings.views",
        "description": "tabbycat.standings.views",
        "peekOfCode": "class PublicReplyTabView(PublicTabMixin, BaseReplyStandingsView):\n    page_title = gettext_lazy(\"Reply Speaker Tab\")\n    public_page_preference = 'replies_tab_released'\n    public_limit_preference = 'replies_tab_limit'\n# ==============================================================================\n# Team standings\n# ==============================================================================\nclass BaseTeamStandingsView(BaseStandingsView):\n    \"\"\"Base class for views that display team standings.\"\"\"\n    page_title = gettext_lazy(\"Team Standings\")",
        "detail": "tabbycat.standings.views",
        "documentation": {}
    },
    {
        "label": "BaseTeamStandingsView",
        "kind": 6,
        "importPath": "tabbycat.standings.views",
        "description": "tabbycat.standings.views",
        "peekOfCode": "class BaseTeamStandingsView(BaseStandingsView):\n    \"\"\"Base class for views that display team standings.\"\"\"\n    page_title = gettext_lazy(\"Team Standings\")\n    page_emoji = '👯'\n    def get_teams(self):\n        return self.tournament.team_set.exclude(type=Team.TYPE_BYE)\n    def get_standings(self):\n        if self.round is None:\n            raise StandingsError(_(\"The tab can't be displayed because all rounds so far in this tournament are silent.\"))\n        teams = self.get_teams()",
        "detail": "tabbycat.standings.views",
        "documentation": {}
    },
    {
        "label": "TeamStandingsView",
        "kind": 6,
        "importPath": "tabbycat.standings.views",
        "description": "tabbycat.standings.views",
        "peekOfCode": "class TeamStandingsView(AdministratorMixin, BaseTeamStandingsView):\n    \"\"\"Superuser team standings view.\"\"\"\n    template_name = 'team_standings.html'  # add info alerts\n    rankings = ('rank',)\n    view_permission = Permission.VIEW_TEAMSTANDINGS\n    def show_ballots(self):\n        return True\nclass PublicTeamTabView(PublicTabMixin, BaseTeamStandingsView):\n    \"\"\"Public view for the team tab.\n    The team tab is actually what is presented to an admin as \"team standings\".",
        "detail": "tabbycat.standings.views",
        "documentation": {}
    },
    {
        "label": "PublicTeamTabView",
        "kind": 6,
        "importPath": "tabbycat.standings.views",
        "description": "tabbycat.standings.views",
        "peekOfCode": "class PublicTeamTabView(PublicTabMixin, BaseTeamStandingsView):\n    \"\"\"Public view for the team tab.\n    The team tab is actually what is presented to an admin as \"team standings\".\n    During the tournament, \"public team standings\" only shows wins and results.\n    Once the tab is released, to the public the team standings are known as the\n    \"team tab\".\"\"\"\n    page_title = gettext_lazy(\"Team Tab\")\n    public_page_preference = 'team_tab_released'\n    public_limit_preference = 'team_tab_limit'\n    rankings = ('rank',)",
        "detail": "tabbycat.standings.views",
        "documentation": {}
    },
    {
        "label": "BaseBreakCategoryStandingsView",
        "kind": 6,
        "importPath": "tabbycat.standings.views",
        "description": "tabbycat.standings.views",
        "peekOfCode": "class BaseBreakCategoryStandingsView(SingleObjectFromTournamentMixin, BaseTeamStandingsView):\n    \"\"\"Team standings view for a break category.\"\"\"\n    model = BreakCategory\n    slug_url_kwarg = 'category'\n    def get_teams(self):\n        return self.object.team_set.all()\n    def get_page_title(self):\n        return _(\"%(category)s Team Standings\") % {'category': self.object.name}\n    def get(self, request, *args, **kwargs):\n        self.object = self.get_object()",
        "detail": "tabbycat.standings.views",
        "documentation": {}
    },
    {
        "label": "BreakCategoryStandingsView",
        "kind": 6,
        "importPath": "tabbycat.standings.views",
        "description": "tabbycat.standings.views",
        "peekOfCode": "class BreakCategoryStandingsView(AdministratorMixin, BaseBreakCategoryStandingsView):\n    \"\"\"Superuser team standings view for a break category.\"\"\"\n    rankings = ('rank',)\n    view_permission = Permission.VIEW_TEAMSTANDINGS\n    def show_ballots(self):\n        return True\nclass PublicBreakCategoryTabView(PublicTabMixin, BaseBreakCategoryStandingsView):\n    \"\"\"Public view for the team tab for a break category.\"\"\"\n    public_page_preference = 'break_category_tabs_released'\n    rankings = ('rank',)",
        "detail": "tabbycat.standings.views",
        "documentation": {}
    },
    {
        "label": "PublicBreakCategoryTabView",
        "kind": 6,
        "importPath": "tabbycat.standings.views",
        "description": "tabbycat.standings.views",
        "peekOfCode": "class PublicBreakCategoryTabView(PublicTabMixin, BaseBreakCategoryStandingsView):\n    \"\"\"Public view for the team tab for a break category.\"\"\"\n    public_page_preference = 'break_category_tabs_released'\n    rankings = ('rank',)\n    def show_ballots(self):\n        return self.tournament.pref('ballots_released')\n    def get_tab_limit(self):\n        return self.object.limit\n    def get_page_title(self):\n        title = _(\"%(category)s Team Tab\") % {'category': self.object.name}",
        "detail": "tabbycat.standings.views",
        "documentation": {}
    },
    {
        "label": "PublicCurrentTeamStandingsView",
        "kind": 6,
        "importPath": "tabbycat.standings.views",
        "description": "tabbycat.standings.views",
        "peekOfCode": "class PublicCurrentTeamStandingsView(PublicTournamentPageMixin, VueTableTemplateView):\n    public_page_preference = 'public_team_standings'\n    page_title = gettext_lazy(\"Current Team Standings\")\n    page_emoji = '🌟'\n    cache_timeout = settings.PUBLIC_SLOW_CACHE_TIMEOUT\n    def get_rounds(self):\n        if not hasattr(self, '_rounds'):\n            if self.tournament.pref('all_results_released'):\n                self._rounds = self.tournament.prelim_rounds().order_by('seq')\n            else:",
        "detail": "tabbycat.standings.views",
        "documentation": {}
    },
    {
        "label": "BaseDiversityStandingsView",
        "kind": 6,
        "importPath": "tabbycat.standings.views",
        "description": "tabbycat.standings.views",
        "peekOfCode": "class BaseDiversityStandingsView(TournamentMixin, TemplateView):\n    template_name = 'standings_diversity.html'\n    for_public = False\n    def get_context_data(self, **kwargs):\n        all_data = get_diversity_data_sets(self.tournament, self.for_public)\n        kwargs['regions'] = all_data['regions']\n        kwargs['data_sets'] = json.dumps(all_data)\n        kwargs['for_public'] = self.for_public\n        return super().get_context_data(**kwargs)\nclass DiversityStandingsView(AdministratorMixin, BaseDiversityStandingsView):",
        "detail": "tabbycat.standings.views",
        "documentation": {}
    },
    {
        "label": "DiversityStandingsView",
        "kind": 6,
        "importPath": "tabbycat.standings.views",
        "description": "tabbycat.standings.views",
        "peekOfCode": "class DiversityStandingsView(AdministratorMixin, BaseDiversityStandingsView):\n    for_public = False\n    view_permission = Permission.VIEW_DIVERSITYTAB\nclass PublicDiversityStandingsView(PublicTournamentPageMixin, BaseDiversityStandingsView):\n    cache_timeout = settings.TAB_PAGES_CACHE_TIMEOUT\n    public_page_preference = 'public_diversity'\n    for_public = True\n# ==============================================================================\n# Adjudication\n# ==============================================================================",
        "detail": "tabbycat.standings.views",
        "documentation": {}
    },
    {
        "label": "PublicDiversityStandingsView",
        "kind": 6,
        "importPath": "tabbycat.standings.views",
        "description": "tabbycat.standings.views",
        "peekOfCode": "class PublicDiversityStandingsView(PublicTournamentPageMixin, BaseDiversityStandingsView):\n    cache_timeout = settings.TAB_PAGES_CACHE_TIMEOUT\n    public_page_preference = 'public_diversity'\n    for_public = True\n# ==============================================================================\n# Adjudication\n# ==============================================================================\nclass PublicAdjudicatorsTabView(PublicTabMixin, BaseFeedbackOverview):\n    public_page_preference = 'adjudicators_tab_released'\n    page_title = gettext_lazy('Feedback Overview')",
        "detail": "tabbycat.standings.views",
        "documentation": {}
    },
    {
        "label": "PublicAdjudicatorsTabView",
        "kind": 6,
        "importPath": "tabbycat.standings.views",
        "description": "tabbycat.standings.views",
        "peekOfCode": "class PublicAdjudicatorsTabView(PublicTabMixin, BaseFeedbackOverview):\n    public_page_preference = 'adjudicators_tab_released'\n    page_title = gettext_lazy('Feedback Overview')\n    page_emoji = '🙅'\n    for_public = False\n    sort_key = 'name'\n    sort_order = 'asc'\n    template_name = 'standings_adjudicators.html'\n    def annotate_table(self, table, adjudicators):\n        table.add_adjudicator_columns(adjudicators)",
        "detail": "tabbycat.standings.views",
        "documentation": {}
    },
    {
        "label": "EmailTeamStandingsView",
        "kind": 6,
        "importPath": "tabbycat.standings.views",
        "description": "tabbycat.standings.views",
        "peekOfCode": "class EmailTeamStandingsView(RoundTemplateEmailCreateView):\n    page_subtitle = _(\"Team Standings\")\n    event = BulkNotification.EventType.POINTS\n    subject_template = 'team_points_email_subject'\n    message_template = 'team_points_email_message'\n    round_redirect_pattern_name = 'tournament-complete-round-check'\n    def get_queryset(self):\n        return Speaker.objects.filter(team__tournament=self.tournament)\n    def get_default_send_queryset(self):\n        return Speaker.objects.filter(team__round_availabilities__round=self.round, email__isnull=False).exclude(email__exact=\"\")",
        "detail": "tabbycat.standings.views",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "tabbycat.standings.views",
        "description": "tabbycat.standings.views",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass StandingsIndexView(AdministratorMixin, RoundMixin, TemplateView):\n    template_name = 'standings_index.html'\n    view_permission = Permission.VIEW_STANDINGS_OVERVIEW\n    def get_context_data(self, **kwargs):\n        speaks = SpeakerScore.objects.filter(\n            ballot_submission__confirmed=True,\n            ghost=False,\n            speaker__team__tournament=self.tournament,\n        ).exclude(",
        "detail": "tabbycat.standings.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.tournaments.migrations.0001_initial",
        "description": "tabbycat.tournaments.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('breakqual', '0001_initial'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Round',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "tabbycat.tournaments.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.tournaments.migrations.0002_remove_tournament_welcome_msg",
        "description": "tabbycat.tournaments.migrations.0002_remove_tournament_welcome_msg",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('tournaments', '0001_initial'),\n        ('options', '0002_move_welcome_message'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='tournament',\n            name='welcome_msg',\n        ),",
        "detail": "tabbycat.tournaments.migrations.0002_remove_tournament_welcome_msg",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.tournaments.migrations.0003_round_completed",
        "description": "tabbycat.tournaments.migrations.0003_round_completed",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('tournaments', '0002_remove_tournament_welcome_msg'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='round',\n            name='completed',\n            field=models.BooleanField(default=False, help_text='True if the round is over, which normally means all results have been entered and confirmed', verbose_name='completed'),\n        ),",
        "detail": "tabbycat.tournaments.migrations.0003_round_completed",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.tournaments.migrations.0004_convert_current_round_to_completed",
        "description": "tabbycat.tournaments.migrations.0004_convert_current_round_to_completed",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('tournaments', '0003_round_completed'),\n    ]\n    operations = [\n        migrations.RunPython(convert_current_round_to_completed,\n            convert_completed_to_current_round,\n            elidable=True),\n    ]",
        "detail": "tabbycat.tournaments.migrations.0004_convert_current_round_to_completed",
        "documentation": {}
    },
    {
        "label": "convert_current_round_to_completed",
        "kind": 2,
        "importPath": "tabbycat.tournaments.migrations.0004_convert_current_round_to_completed",
        "description": "tabbycat.tournaments.migrations.0004_convert_current_round_to_completed",
        "peekOfCode": "def convert_current_round_to_completed(apps, schema_editor):\n    Tournament = apps.get_model('tournaments', 'Tournament')  # noqa: N806\n    for tournament in Tournament.objects.all():\n        if tournament.current_round is None:\n            continue\n        now = tournament.current_round.seq\n        tournament.round_set.filter(seq__lt=now).update(completed=True)\n        tournament.round_set.filter(seq__gte=now).update(completed=False)\ndef convert_completed_to_current_round(apps, schema_editor):\n    Tournament = apps.get_model('tournaments', 'Tournament')  # noqa: N806",
        "detail": "tabbycat.tournaments.migrations.0004_convert_current_round_to_completed",
        "documentation": {}
    },
    {
        "label": "convert_completed_to_current_round",
        "kind": 2,
        "importPath": "tabbycat.tournaments.migrations.0004_convert_current_round_to_completed",
        "description": "tabbycat.tournaments.migrations.0004_convert_current_round_to_completed",
        "peekOfCode": "def convert_completed_to_current_round(apps, schema_editor):\n    Tournament = apps.get_model('tournaments', 'Tournament')  # noqa: N806\n    for tournament in Tournament.objects.all():\n        if tournament.current_round is not None:\n            continue\n        tournament.current_round = tournament.round_set.filter(completed=False).order_by('seq').first()\n        tournament.save()\nclass Migration(migrations.Migration):\n    dependencies = [\n        ('tournaments', '0003_round_completed'),",
        "detail": "tabbycat.tournaments.migrations.0004_convert_current_round_to_completed",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.tournaments.migrations.0005_remove_tournament_current_round",
        "description": "tabbycat.tournaments.migrations.0005_remove_tournament_current_round",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('tournaments', '0004_convert_current_round_to_completed'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='tournament',\n            name='current_round',\n        ),\n    ]",
        "detail": "tabbycat.tournaments.migrations.0005_remove_tournament_current_round",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.tournaments.migrations.0006_auto_20191109_1240",
        "description": "tabbycat.tournaments.migrations.0006_auto_20191109_1240",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('tournaments', '0005_remove_tournament_current_round'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='round',\n            name='feedback_weight',\n            field=models.FloatField(default=0, help_text=\"The extent to which each adjudicator's overall score depends on feedback vs their base score. At 0, it is 100% drawn from their base score, at 1 it is 100% drawn from feedback.\", verbose_name='feedback weight'),\n        ),",
        "detail": "tabbycat.tournaments.migrations.0006_auto_20191109_1240",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.tournaments.migrations.0007_auto_20200620_1326",
        "description": "tabbycat.tournaments.migrations.0007_auto_20200620_1326",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('tournaments', '0006_auto_20191109_1240'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='round',\n            name='seq',\n            field=models.PositiveIntegerField(help_text='A number that determines the order of the round, should count consecutively from 1 for the first round', verbose_name='sequence number'),\n        ),",
        "detail": "tabbycat.tournaments.migrations.0007_auto_20200620_1326",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.tournaments.migrations.0008_round_weight",
        "description": "tabbycat.tournaments.migrations.0008_round_weight",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('tournaments', '0007_auto_20200620_1326'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='round',\n            name='weight',\n            field=models.PositiveIntegerField(default=1, help_text='A factor for the points received in the round. For example, if 2, all points are doubled.', verbose_name='weight'),\n        ),",
        "detail": "tabbycat.tournaments.migrations.0008_round_weight",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.tournaments.migrations.0009_auto_20201126_0037",
        "description": "tabbycat.tournaments.migrations.0009_auto_20201126_0037",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('tournaments', '0008_round_weight'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='round',\n            name='weight',\n            field=models.IntegerField(default=1, help_text='A factor for the points received in the round. For example, if 2, all points are doubled.', verbose_name='weight'),\n        ),",
        "detail": "tabbycat.tournaments.migrations.0009_auto_20201126_0037",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.tournaments.migrations.0010_alter_round_draw_type",
        "description": "tabbycat.tournaments.migrations.0010_alter_round_draw_type",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('tournaments', '0009_auto_20201126_0037'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='round',\n            name='draw_type',\n            field=models.CharField(choices=[('R', 'Random'), ('M', 'Manual'), ('D', 'Round-robin'), ('P', 'Power-paired'), ('E', 'Elimination'), ('S', 'Seeded')], help_text='Which draw method to use', max_length=1, verbose_name='draw type'),\n        ),",
        "detail": "tabbycat.tournaments.migrations.0010_alter_round_draw_type",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.tournaments.migrations.0011_alter_round_starts_at",
        "description": "tabbycat.tournaments.migrations.0011_alter_round_starts_at",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"tournaments\", \"0010_alter_round_draw_type\"),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name=\"round\",\n            name=\"starts_at_\",\n            field=models.DateTimeField(blank=True, null=True, verbose_name=\"starts at\"),\n        ),",
        "detail": "tabbycat.tournaments.migrations.0011_alter_round_starts_at",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.tournaments.migrations.0012_alter_round_unique_together_and_more",
        "description": "tabbycat.tournaments.migrations.0012_alter_round_unique_together_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('breakqual', '0006_alter_breakcategory_unique_together_and_more'),\n        ('tournaments', '0011_alter_round_starts_at'),\n    ]\n    operations = [\n        migrations.AlterUniqueTogether(\n            name='round',\n            unique_together=set(),\n        ),",
        "detail": "tabbycat.tournaments.migrations.0012_alter_round_unique_together_and_more",
        "documentation": {}
    },
    {
        "label": "TestRoundLookup",
        "kind": 6,
        "importPath": "tabbycat.tournaments.tests.test_lookup",
        "description": "tabbycat.tournaments.tests.test_lookup",
        "peekOfCode": "class TestRoundLookup(TestCase):\n    def setUp(self):\n        self.tournament = Tournament.objects.create()\n        self.rd = Round.objects.create(tournament=self.tournament, name=\"A Test Round\", abbreviation=\"ATR\", seq=1)\n    def tearDown(self):\n        self.rd.delete()\n        self.tournament.delete()\n    def test_lookup(self):\n        self.assertEqual(Round.objects.lookup(\"A Test Round\"), self.rd)\n        self.assertEqual(Round.objects.lookup(\"ATR\"), self.rd)",
        "detail": "tabbycat.tournaments.tests.test_lookup",
        "documentation": {}
    },
    {
        "label": "TestRoundChecks",
        "kind": 6,
        "importPath": "tabbycat.tournaments.tests.test_round_checks",
        "description": "tabbycat.tournaments.tests.test_round_checks",
        "peekOfCode": "class TestRoundChecks(TestCase):\n    \"\"\"Tests the checks in the Round model for potential allocation errors.\"\"\"\n    def setUp(self):\n        self.tournament = Tournament.objects.create(slug=\"roundcheckstest\", name=\"Round checks test\")\n        self.round = Round.objects.create(tournament=self.tournament, seq=1)\n        self.debates = []\n        self.venues = []\n        self.teams = []\n        self.adjs = []\n        for i in [1, 2]:",
        "detail": "tabbycat.tournaments.tests.test_round_checks",
        "documentation": {}
    },
    {
        "label": "CoreFunctionsTests",
        "kind": 6,
        "importPath": "tabbycat.tournaments.tests.test_ui",
        "description": "tabbycat.tournaments.tests.test_ui",
        "peekOfCode": "class CoreFunctionsTests(SeleniumTournamentTestCase):\n    def test_login(self):\n        user = User.objects.create_user('testadmin', '', 'testadmin')\n        user.is_superuser = True\n        user.save()\n        self.selenium.get('%s%s' % (self.live_server_url, '/accounts/login/'))\n        username_input = self.selenium.find_element_by_name(\"username\")\n        username_input.send_keys('testadmin')\n        password_input = self.selenium.find_element_by_name(\"password\")\n        password_input.send_keys('testadmin')",
        "detail": "tabbycat.tournaments.tests.test_ui",
        "documentation": {}
    },
    {
        "label": "TournamentAdmin",
        "kind": 6,
        "importPath": "tabbycat.tournaments.admin",
        "description": "tabbycat.tournaments.admin",
        "peekOfCode": "class TournamentAdmin(ModelAdmin):\n    list_display = ('name', 'slug', 'seq', 'short_name', 'current_round', 'active')\n    ordering = ('seq', )\n# ==============================================================================\n# Round\n# ==============================================================================\n@admin.register(Round)\nclass RoundAdmin(ModelAdmin):\n    list_display = ('name', 'tournament', 'seq', 'abbreviation', 'stage',\n                    'draw_type', 'draw_status', 'feedback_weight', 'silent',",
        "detail": "tabbycat.tournaments.admin",
        "documentation": {}
    },
    {
        "label": "RoundAdmin",
        "kind": 6,
        "importPath": "tabbycat.tournaments.admin",
        "description": "tabbycat.tournaments.admin",
        "peekOfCode": "class RoundAdmin(ModelAdmin):\n    list_display = ('name', 'tournament', 'seq', 'abbreviation', 'stage',\n                    'draw_type', 'draw_status', 'feedback_weight', 'silent',\n                    'motions_released', 'starts_at', 'completed')\n    list_editable = ('feedback_weight', 'silent', 'motions_released', 'completed')\n    list_filter = ('tournament', )\n    search_fields = ('name', 'seq', 'abbreviation', 'stage', 'draw_type', 'draw_status')\n    ordering = ('tournament__slug', 'seq')",
        "detail": "tabbycat.tournaments.admin",
        "documentation": {}
    },
    {
        "label": "TournamentsConfig",
        "kind": 6,
        "importPath": "tabbycat.tournaments.apps",
        "description": "tabbycat.tournaments.apps",
        "peekOfCode": "class TournamentsConfig(AppConfig):\n    name = 'tournaments'\n    verbose_name = _(\"Tournaments\")\n    def ready(self):\n        from . import signals  # noqa: F401",
        "detail": "tabbycat.tournaments.apps",
        "documentation": {}
    },
    {
        "label": "TournamentStartForm",
        "kind": 6,
        "importPath": "tabbycat.tournaments.forms",
        "description": "tabbycat.tournaments.forms",
        "peekOfCode": "class TournamentStartForm(ModelForm):\n    class Meta:\n        model = Tournament\n        fields = ('name', 'short_name', 'slug')\n    num_prelim_rounds = IntegerField(\n        min_value=1,\n        label=_(\"Number of preliminary rounds\"))\n    break_size = IntegerField(\n        min_value=2,\n        required=False,",
        "detail": "tabbycat.tournaments.forms",
        "documentation": {}
    },
    {
        "label": "TournamentConfigureForm",
        "kind": 6,
        "importPath": "tabbycat.tournaments.forms",
        "description": "tabbycat.tournaments.forms",
        "peekOfCode": "class TournamentConfigureForm(ModelForm):\n    class Meta:\n        model = Tournament\n        fields = ('preset_rules', 'public_info')\n    preset_rules = ChoiceField(\n        choices=presets_for_form(), # Tuple with (Preset_Index, Preset_Name)\n        label=_(\"Format Configuration\"),\n        help_text=_(\"Apply a standard set of settings to match a common debate format. \"\n            \"These can be changed afterwards and should be checked for your needs.\"))\n    public_info = ChoiceField(",
        "detail": "tabbycat.tournaments.forms",
        "documentation": {}
    },
    {
        "label": "RoundWithCompleteOptionChoiceIterator",
        "kind": 6,
        "importPath": "tabbycat.tournaments.forms",
        "description": "tabbycat.tournaments.forms",
        "peekOfCode": "class RoundWithCompleteOptionChoiceIterator(ModelChoiceIterator):\n    def __iter__(self):\n        yield from super().__iter__()\n        yield self.field.complete_value, self.field.complete_label\n    def __len__(self):\n        return super().__len__() + 1\n    def __bool__(self):\n        return True  # the \"complete\" option always exists\nclass RoundField(ModelChoiceField):\n    def label_from_instance(self, obj):",
        "detail": "tabbycat.tournaments.forms",
        "documentation": {}
    },
    {
        "label": "RoundField",
        "kind": 6,
        "importPath": "tabbycat.tournaments.forms",
        "description": "tabbycat.tournaments.forms",
        "peekOfCode": "class RoundField(ModelChoiceField):\n    def label_from_instance(self, obj):\n        return obj.name\nclass RoundWithCompleteOptionField(RoundField):\n    iterator = RoundWithCompleteOptionChoiceIterator\n    complete_value = \"all-completed\"\n    def __init__(self, *args, complete_label=\"\", **kwargs):\n        self.complete_label = complete_label\n        return super().__init__(*args, **kwargs)\n    def to_python(self, value):",
        "detail": "tabbycat.tournaments.forms",
        "documentation": {}
    },
    {
        "label": "RoundWithCompleteOptionField",
        "kind": 6,
        "importPath": "tabbycat.tournaments.forms",
        "description": "tabbycat.tournaments.forms",
        "peekOfCode": "class RoundWithCompleteOptionField(RoundField):\n    iterator = RoundWithCompleteOptionChoiceIterator\n    complete_value = \"all-completed\"\n    def __init__(self, *args, complete_label=\"\", **kwargs):\n        self.complete_label = complete_label\n        return super().__init__(*args, **kwargs)\n    def to_python(self, value):\n        if value == self.complete_value:\n            return self.complete_value\n        return super().to_python(value)",
        "detail": "tabbycat.tournaments.forms",
        "documentation": {}
    },
    {
        "label": "SetCurrentRoundSingleBreakCategoryForm",
        "kind": 6,
        "importPath": "tabbycat.tournaments.forms",
        "description": "tabbycat.tournaments.forms",
        "peekOfCode": "class SetCurrentRoundSingleBreakCategoryForm(Form):\n    \"\"\"Form to set completed rounds in a tournament with a single break category.\"\"\"\n    current_round = RoundField(queryset=Round.objects.none(), required=True, empty_label=None)\n    def __init__(self, tournament, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.tournament = tournament\n        self.fields['current_round'].queryset = tournament.round_set.order_by('seq')\n        self.fields['current_round'].initial = tournament.current_round\n    def save(self):\n        seq = self.cleaned_data['current_round'].seq",
        "detail": "tabbycat.tournaments.forms",
        "documentation": {}
    },
    {
        "label": "SetCurrentRoundMultipleBreakCategoriesForm",
        "kind": 6,
        "importPath": "tabbycat.tournaments.forms",
        "description": "tabbycat.tournaments.forms",
        "peekOfCode": "class SetCurrentRoundMultipleBreakCategoriesForm(Form):\n    \"\"\"Form to set completed rounds in a tournament with multiple break categories.\"\"\"\n    prelim = RoundWithCompleteOptionField(queryset=Round.objects.none(), required=True,\n        label=_(\"Current preliminary round\"),\n        complete_label=_(\"All preliminary rounds have been completed\"))\n    def __init__(self, tournament, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.tournament = tournament\n        self.fields['prelim'].queryset = tournament.prelim_rounds()\n        current_prelim_round = tournament.prelim_rounds().filter(completed=False).order_by('seq').first()",
        "detail": "tabbycat.tournaments.forms",
        "documentation": {}
    },
    {
        "label": "RoundWeightForm",
        "kind": 6,
        "importPath": "tabbycat.tournaments.forms",
        "description": "tabbycat.tournaments.forms",
        "peekOfCode": "class RoundWeightForm(Form):\n    def __init__(self, tournament, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.tournament = tournament\n        self._create_fields()\n    def _create_fields(self):\n        \"\"\"Dynamically generate one integer field for each preliminary round, for the\n        user to indicate how many teams are from that institution.\"\"\"\n        for round in self.tournament.round_set.filter(stage=Round.Stage.PRELIMINARY):\n            self.fields['round_weight_%d' % round.id] = IntegerField(",
        "detail": "tabbycat.tournaments.forms",
        "documentation": {}
    },
    {
        "label": "clear_all_round_caches",
        "kind": 2,
        "importPath": "tabbycat.tournaments.forms",
        "description": "tabbycat.tournaments.forms",
        "peekOfCode": "def clear_all_round_caches(tournament):\n    cache.delete_many([\"%s_%s_%s\" % (tournament.slug, r.seq, 'object') for r in tournament.round_set.all()])\n    update_tournament_cache(Tournament, tournament)\nclass SetCurrentRoundSingleBreakCategoryForm(Form):\n    \"\"\"Form to set completed rounds in a tournament with a single break category.\"\"\"\n    current_round = RoundField(queryset=Round.objects.none(), required=True, empty_label=None)\n    def __init__(self, tournament, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.tournament = tournament\n        self.fields['current_round'].queryset = tournament.round_set.order_by('seq')",
        "detail": "tabbycat.tournaments.forms",
        "documentation": {}
    },
    {
        "label": "TournamentFromUrlMixin",
        "kind": 6,
        "importPath": "tabbycat.tournaments.mixins",
        "description": "tabbycat.tournaments.mixins",
        "peekOfCode": "class TournamentFromUrlMixin:\n    \"\"\"Provides the `tournament` property, looking in the cache and URL path,\n    and keeping its own local cache.\n    This mixin shouldn't generally be used directly; it should instead typically\n    be inherited via `TournamentMixin` (for views) or `TournamentWebsocketMixin`\n    (for websocket consumers).\n    \"\"\"\n    tournament_slug_url_kwarg = \"tournament_slug\"\n    tournament_cache_key = \"{slug}_object\"\n    tournament_redirect_pattern_name = None",
        "detail": "tabbycat.tournaments.mixins",
        "documentation": {}
    },
    {
        "label": "TournamentMixin",
        "kind": 6,
        "importPath": "tabbycat.tournaments.mixins",
        "description": "tabbycat.tournaments.mixins",
        "peekOfCode": "class TournamentMixin(TabbycatPageTitlesMixin, TournamentFromUrlMixin):\n    \"\"\"Mixin for views that relate to a tournament, and are specified as\n    relating to a tournament in the URL.\n    Views using this mixin should have a `tournament_slug` group in their URL's\n    regular expression. They should then call `self.tournament` to\n    retrieve the tournament.\n    \"\"\"\n    def get_redirect_url(self, *args, **kwargs):\n        # Override if self.tournament_redirect_pattern_name is specified,\n        # otherwise just pass down the chain",
        "detail": "tabbycat.tournaments.mixins",
        "documentation": {}
    },
    {
        "label": "TournamentWebsocketMixin",
        "kind": 6,
        "importPath": "tabbycat.tournaments.mixins",
        "description": "tabbycat.tournaments.mixins",
        "peekOfCode": "class TournamentWebsocketMixin(TournamentFromUrlMixin):\n    \"\"\"Mixin for websocket consumers that listen for changes relating to a\n    particular tournament, as specified in the URL.\n    Subclasses must provide a `group_prefix` that serves as a name for the\n    stream; the name of the group is a concatenation of this and the tournament\n    slug.\n    \"\"\"\n    group_prefix = None\n    def get_url_kwargs(self):\n        return self.scope[\"url_route\"][\"kwargs\"]",
        "detail": "tabbycat.tournaments.mixins",
        "documentation": {}
    },
    {
        "label": "RoundFromUrlMixin",
        "kind": 6,
        "importPath": "tabbycat.tournaments.mixins",
        "description": "tabbycat.tournaments.mixins",
        "peekOfCode": "class RoundFromUrlMixin(TournamentFromUrlMixin):\n    \"\"\"Provides the `round` property, looking in the cache and URL path,\n    and keeping its own local cache.\n    This mixin shouldn't generally be used directly; it should instead typically\n    be inherited via `RoundMixin` (for views) or `RoundWebsocketMixin` (for\n    websocket consumers).\n    \"\"\"\n    round_seq_url_kwarg = \"round_seq\"\n    round_cache_key = \"{slug}_{seq}_object\"\n    round_redirect_pattern_name = None",
        "detail": "tabbycat.tournaments.mixins",
        "documentation": {}
    },
    {
        "label": "RoundMixin",
        "kind": 6,
        "importPath": "tabbycat.tournaments.mixins",
        "description": "tabbycat.tournaments.mixins",
        "peekOfCode": "class RoundMixin(RoundFromUrlMixin, TournamentMixin):\n    \"\"\"Mixin for views that relate to a round, and are specified as relating\n    to a round in the URL.\n    Views using this mixin should have `tournament_slug` and `round_seq` groups\n    in their URL's regular expression. They should then call `self.round`\n    to retrieve the round.\n    This mixin includes `TournamentMixin`, so classes using `RoundMixin` do not\n    need to explicitly inherit from both.\n    \"\"\"\n    def get_page_subtitle(self):",
        "detail": "tabbycat.tournaments.mixins",
        "documentation": {}
    },
    {
        "label": "RoundWebsocketMixin",
        "kind": 6,
        "importPath": "tabbycat.tournaments.mixins",
        "description": "tabbycat.tournaments.mixins",
        "peekOfCode": "class RoundWebsocketMixin(RoundFromUrlMixin, TournamentWebsocketMixin):\n    \"\"\"Mixin for websocket consumers that listen for changes relating to a\n    particular round, as specified in the URL.\n    Subclasses must provide a `group_prefix` that serves as a name for the\n    stream; the name of the group is a concatenation of this, the tournament\n    slug and the round sequence number.\n    This mixin includes `TournamentWebsocketMixin`, so classes using it do not\n    need to explicitly inherit from both.\n    \"\"\"\n    def group_name(self):",
        "detail": "tabbycat.tournaments.mixins",
        "documentation": {}
    },
    {
        "label": "CurrentRoundMixin",
        "kind": 6,
        "importPath": "tabbycat.tournaments.mixins",
        "description": "tabbycat.tournaments.mixins",
        "peekOfCode": "class CurrentRoundMixin(RoundMixin, ContextMixin):\n    \"\"\"Mixin for views that relate to the current round (without URL reference).\"\"\"\n    @property\n    def round(self):\n        # Override the round-grabbing mechanism of RoundMixin\n        return self.tournament.current_round\n    def get_context_data(self, **kwargs):\n        # Middleware won't find this in the URL, so add it ourselves\n        kwargs['round'] = self.round\n        return super().get_context_data(**kwargs)",
        "detail": "tabbycat.tournaments.mixins",
        "documentation": {}
    },
    {
        "label": "TournamentAccessControlledPageMixin",
        "kind": 6,
        "importPath": "tabbycat.tournaments.mixins",
        "description": "tabbycat.tournaments.mixins",
        "peekOfCode": "class TournamentAccessControlledPageMixin(TournamentMixin):\n    \"\"\"Base mixin for views that can be enabled and disabled by a tournament\n    preference.\"\"\"\n    def is_page_enabled(self, tournament):\n        raise NotImplementedError\n    def render_page_disabled_error_page(self):\n        return TemplateResponse(\n            request=self.request,\n            template=self.template_403_name,\n            context={'user_role': self._user_role},",
        "detail": "tabbycat.tournaments.mixins",
        "documentation": {}
    },
    {
        "label": "PersonalizablePublicTournamentPageMixin",
        "kind": 6,
        "importPath": "tabbycat.tournaments.mixins",
        "description": "tabbycat.tournaments.mixins",
        "peekOfCode": "class PersonalizablePublicTournamentPageMixin(TournamentAccessControlledPageMixin):\n    \"\"\"Mixin for views that show personalizable public tournament pages which may be\n    enabled for disabled by tournament preferences. Caching is inappropriate for these\n    pages.\"\"\"\n    public_page_preference = None\n    template_403_name = \"errors/public_403.html\"\n    _user_role = \"public\"\n    def is_page_enabled(self, tournament):\n        if self.public_page_preference is None:\n            raise ImproperlyConfigured(\"public_page_preference isn't set on this view.\")",
        "detail": "tabbycat.tournaments.mixins",
        "documentation": {}
    },
    {
        "label": "PublicTournamentPageMixin",
        "kind": 6,
        "importPath": "tabbycat.tournaments.mixins",
        "description": "tabbycat.tournaments.mixins",
        "peekOfCode": "class PublicTournamentPageMixin(PersonalizablePublicTournamentPageMixin, CacheMixin):\n    \"\"\"Mixin for views that show non-personalized public tournament pages that can\n    be enabled and disabled by a tournament preference.\n    Views using this mixin should set the `public_page_preference` class\n    attribute to the name of the preference that controls whether the page is\n    enabled.\n    If someone tries to access the page while it is disabled in the tournament\n    options, they will be redirected to the public index page for that\n    tournament, and shown a generic message that the page isn't enabled. The\n    message can be overridden through the `disabled_message` class attribute or,",
        "detail": "tabbycat.tournaments.mixins",
        "documentation": {}
    },
    {
        "label": "OptionalAssistantTournamentPageMixin",
        "kind": 6,
        "importPath": "tabbycat.tournaments.mixins",
        "description": "tabbycat.tournaments.mixins",
        "peekOfCode": "class OptionalAssistantTournamentPageMixin(AssistantMixin, TournamentAccessControlledPageMixin):\n    \"\"\"Mixin for pages that are intended for assistants, but can be enabled and\n    disabled by a tournament preference. This preference sets of access tiers;\n    if the page requires a certain tier to access it then only superusers can\n    view it.\n    Views using the mixins should set the `assistant_page_permissions` class to\n    match one or more of the values defined in the AssistantAccess preference's\n    available choices.\n    If an anonymous user tries to access this page, they will be redirected to\n    the login page. If an assistant user tries to access this page while",
        "detail": "tabbycat.tournaments.mixins",
        "documentation": {}
    },
    {
        "label": "SingleObjectFromTournamentMixin",
        "kind": 6,
        "importPath": "tabbycat.tournaments.mixins",
        "description": "tabbycat.tournaments.mixins",
        "peekOfCode": "class SingleObjectFromTournamentMixin(SingleObjectMixin, TournamentMixin):\n    \"\"\"Mixin for views that relate to a single object that is part of a\n    tournament. Like SingleObjectMixin, but restricts searches to the relevant\n    tournament.\"\"\"\n    allow_null_tournament = False\n    tournament_field_name = 'tournament'\n    def get_queryset(self):\n        # Filter for this tournament; if self.allow_null_tournament is True,\n        # then also allow objects with no tournament.\n        q = Q(**{self.tournament_field_name: self.tournament})",
        "detail": "tabbycat.tournaments.mixins",
        "documentation": {}
    },
    {
        "label": "SingleObjectByRandomisedUrlMixin",
        "kind": 6,
        "importPath": "tabbycat.tournaments.mixins",
        "description": "tabbycat.tournaments.mixins",
        "peekOfCode": "class SingleObjectByRandomisedUrlMixin(SingleObjectFromTournamentMixin):\n    \"\"\"Mixin for views that use URLs referencing objects by a randomised key.\n    This is just a `SingleObjectFromTournamentMixin` with some options set.\n    Views using this mixin should have both a `url_key` group in their URL's\n    regular expression, and a primary key group (by default `pk`, inherited from\n    `SingleObjectMixin`, but this can be overridden). They should set the\n    `model` field of the class as they would for `SingleObjectMixin`. This model\n    should have a slug field called `url_key`.\n    \"\"\"\n    slug_field = 'url_key'",
        "detail": "tabbycat.tournaments.mixins",
        "documentation": {}
    },
    {
        "label": "DragAndDropMixin",
        "kind": 6,
        "importPath": "tabbycat.tournaments.mixins",
        "description": "tabbycat.tournaments.mixins",
        "peekOfCode": "class DragAndDropMixin(RoundMixin):\n    def get_extra_info(self):\n        \"\"\" Unlike meta_info everything under extra info is json serialised\n        automatically. Designed for simple key/value pairs\"\"\"\n        extra_info = {} # Set by view for top bar toggles\n        extra_info['codeNames'] = self.tournament.pref('team_code_names')\n        extra_info['highlights'] = {}\n        bcs = self.tournament.breakcategory_set.all()\n        serialised_bcs = []\n        for bc in bcs:",
        "detail": "tabbycat.tournaments.mixins",
        "documentation": {}
    },
    {
        "label": "DebateDragAndDropMixin",
        "kind": 6,
        "importPath": "tabbycat.tournaments.mixins",
        "description": "tabbycat.tournaments.mixins",
        "peekOfCode": "class DebateDragAndDropMixin(DragAndDropMixin):\n    prefetch_adjs = True\n    prefetch_teams = True\n    prefetch_venues = True\n    def get_draw_or_panels_objects(self):\n        selects = ('round__tournament', 'venue')\n        prefetches = ()\n        if self.prefetch_venues:\n            prefetches += ('venue__venuecategory_set',)\n        if self.prefetch_adjs:",
        "detail": "tabbycat.tournaments.mixins",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "tabbycat.tournaments.mixins",
        "description": "tabbycat.tournaments.mixins",
        "peekOfCode": "logger = logging.getLogger(__name__)\n# ==============================================================================\n# Mixins providing access to tournament and round from URL\n# ==============================================================================\nclass TournamentFromUrlMixin:\n    \"\"\"Provides the `tournament` property, looking in the cache and URL path,\n    and keeping its own local cache.\n    This mixin shouldn't generally be used directly; it should instead typically\n    be inherited via `TournamentMixin` (for views) or `TournamentWebsocketMixin`\n    (for websocket consumers).",
        "detail": "tabbycat.tournaments.mixins",
        "documentation": {}
    },
    {
        "label": "Tournament",
        "kind": 6,
        "importPath": "tabbycat.tournaments.models",
        "description": "tabbycat.tournaments.models",
        "peekOfCode": "class Tournament(models.Model):\n    name = models.CharField(max_length=100,\n        verbose_name=_(\"name\"),\n        help_text=_(\"The full name, e.g. \\\"Australasian Intervarsity Debating Championships 2016\\\"\"))\n    short_name = models.CharField(max_length=25, blank=True, default=\"\",\n        verbose_name=_(\"short name\"),\n        help_text=_(\"The name used in the menu, e.g. \\\"Australs 2016\\\"\"))\n    seq = models.IntegerField(blank=True, null=True,\n        verbose_name=_(\"sequence number\"),\n        help_text=_(\"A number that determines the relative order in which tournaments are displayed on the homepage.\"))",
        "detail": "tabbycat.tournaments.models",
        "documentation": {}
    },
    {
        "label": "RoundManager",
        "kind": 6,
        "importPath": "tabbycat.tournaments.models",
        "description": "tabbycat.tournaments.models",
        "peekOfCode": "class RoundManager(LookupByNameFieldsMixin, models.Manager):\n    use_for_related_fields = True\n    name_fields = ['name', 'abbreviation']\n    def get_queryset(self):\n        return super().get_queryset().select_related('tournament').order_by('seq')\nclass Round(models.Model):\n    class DrawType(models.TextChoices):\n        RANDOM = 'R', _('Random')\n        MANUAL = 'M', _('Manual')\n        ROUNDROBIN = 'D', _('Round-robin')",
        "detail": "tabbycat.tournaments.models",
        "documentation": {}
    },
    {
        "label": "Round",
        "kind": 6,
        "importPath": "tabbycat.tournaments.models",
        "description": "tabbycat.tournaments.models",
        "peekOfCode": "class Round(models.Model):\n    class DrawType(models.TextChoices):\n        RANDOM = 'R', _('Random')\n        MANUAL = 'M', _('Manual')\n        ROUNDROBIN = 'D', _('Round-robin')\n        POWERPAIRED = 'P', _('Power-paired')\n        ELIMINATION = 'E', _('Elimination')\n        SEEDED = 'S', _('Seeded')\n    class Stage(models.TextChoices):\n        PRELIMINARY = 'P', _('Preliminary')",
        "detail": "tabbycat.tournaments.models",
        "documentation": {}
    },
    {
        "label": "validate_tournament_slug",
        "kind": 2,
        "importPath": "tabbycat.tournaments.models",
        "description": "tabbycat.tournaments.models",
        "peekOfCode": "def validate_tournament_slug(value):\n    if value in PROHIBITED_TOURNAMENT_SLUGS:\n        raise ValidationError(_(\"You can't use this as a tournament slug, \"\n            \"because it's reserved for a Tabbycat system URL. Please try \"\n            \"another one.\"))\nclass Tournament(models.Model):\n    name = models.CharField(max_length=100,\n        verbose_name=_(\"name\"),\n        help_text=_(\"The full name, e.g. \\\"Australasian Intervarsity Debating Championships 2016\\\"\"))\n    short_name = models.CharField(max_length=25, blank=True, default=\"\",",
        "detail": "tabbycat.tournaments.models",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "tabbycat.tournaments.models",
        "description": "tabbycat.tournaments.models",
        "peekOfCode": "logger = logging.getLogger(__name__)\nPROHIBITED_TOURNAMENT_SLUGS = [\n    'jet', 'database', 'admin', 'accounts', 'summernote',  # System\n    'start', 'create', 'load-demo', # Setup Wizards\n    'tournament', 'notifications', 'archive', 'api', # Cross-Tournament app's view roots\n    'favicon.ico', 'robots.txt',  # Files that must be at top level\n    '__debug__', 'static', 'style', 'i18n', 'jsi18n']  # Misc\ndef validate_tournament_slug(value):\n    if value in PROHIBITED_TOURNAMENT_SLUGS:\n        raise ValidationError(_(\"You can't use this as a tournament slug, \"",
        "detail": "tabbycat.tournaments.models",
        "documentation": {}
    },
    {
        "label": "PROHIBITED_TOURNAMENT_SLUGS",
        "kind": 5,
        "importPath": "tabbycat.tournaments.models",
        "description": "tabbycat.tournaments.models",
        "peekOfCode": "PROHIBITED_TOURNAMENT_SLUGS = [\n    'jet', 'database', 'admin', 'accounts', 'summernote',  # System\n    'start', 'create', 'load-demo', # Setup Wizards\n    'tournament', 'notifications', 'archive', 'api', # Cross-Tournament app's view roots\n    'favicon.ico', 'robots.txt',  # Files that must be at top level\n    '__debug__', 'static', 'style', 'i18n', 'jsi18n']  # Misc\ndef validate_tournament_slug(value):\n    if value in PROHIBITED_TOURNAMENT_SLUGS:\n        raise ValidationError(_(\"You can't use this as a tournament slug, \"\n            \"because it's reserved for a Tabbycat system URL. Please try \"",
        "detail": "tabbycat.tournaments.models",
        "documentation": {}
    },
    {
        "label": "RoundSerializer",
        "kind": 6,
        "importPath": "tabbycat.tournaments.serializers",
        "description": "tabbycat.tournaments.serializers",
        "peekOfCode": "class RoundSerializer(serializers.ModelSerializer):\n    back_url = serializers.SerializerMethodField()\n    def get_back_url(self, obj):\n        return reverse_round('draw', obj)\n    class Meta:\n        model = Round\n        fields = ('seq', 'stage', 'draw_type', 'back_url')\nclass TournamentSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Tournament",
        "detail": "tabbycat.tournaments.serializers",
        "documentation": {}
    },
    {
        "label": "TournamentSerializer",
        "kind": 6,
        "importPath": "tabbycat.tournaments.serializers",
        "description": "tabbycat.tournaments.serializers",
        "peekOfCode": "class TournamentSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Tournament\n        fields = ('slug', 'sides')",
        "detail": "tabbycat.tournaments.serializers",
        "documentation": {}
    },
    {
        "label": "update_tournament_cache",
        "kind": 2,
        "importPath": "tabbycat.tournaments.signals",
        "description": "tabbycat.tournaments.signals",
        "peekOfCode": "def update_tournament_cache(sender, instance, **kwargs):\n    cache.delete(\"%s_%s\" % (instance.slug, 'object'))\n@receiver(post_delete, sender=Round)\n@receiver(post_save, sender=Round)\ndef update_round_cache(sender, instance, **kwargs):\n    cached_key = \"%s_%s_%s\" % (instance.tournament.slug, instance.seq, 'object')\n    cache.delete(cached_key)\n    logger.debug(\"Cleared cache %s for %s\" % (cached_key, instance))\n    # Update the tournament cache as well if either this is the current round,\n    # or the current round is None (this might mean the current round was deleted).",
        "detail": "tabbycat.tournaments.signals",
        "documentation": {}
    },
    {
        "label": "update_round_cache",
        "kind": 2,
        "importPath": "tabbycat.tournaments.signals",
        "description": "tabbycat.tournaments.signals",
        "peekOfCode": "def update_round_cache(sender, instance, **kwargs):\n    cached_key = \"%s_%s_%s\" % (instance.tournament.slug, instance.seq, 'object')\n    cache.delete(cached_key)\n    logger.debug(\"Cleared cache %s for %s\" % (cached_key, instance))\n    # Update the tournament cache as well if either this is the current round,\n    # or the current round is None (this might mean the current round was deleted).\n    current_round_id = getattr(instance.tournament.current_round, 'id', None)\n    if current_round_id == instance.id or current_round_id is None:\n        logger.debug(\"Cleared %s tournament cache because the current round is %s\" %\n                (instance.tournament.slug, instance if current_round_id == instance.id else current_round_id))",
        "detail": "tabbycat.tournaments.signals",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "tabbycat.tournaments.signals",
        "description": "tabbycat.tournaments.signals",
        "peekOfCode": "logger = logging.getLogger(__name__)\n@receiver(post_save, sender=Tournament)\ndef update_tournament_cache(sender, instance, **kwargs):\n    cache.delete(\"%s_%s\" % (instance.slug, 'object'))\n@receiver(post_delete, sender=Round)\n@receiver(post_save, sender=Round)\ndef update_round_cache(sender, instance, **kwargs):\n    cached_key = \"%s_%s_%s\" % (instance.tournament.slug, instance.seq, 'object')\n    cache.delete(cached_key)\n    logger.debug(\"Cleared cache %s for %s\" % (cached_key, instance))",
        "detail": "tabbycat.tournaments.signals",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "tabbycat.tournaments.urls",
        "description": "tabbycat.tournaments.urls",
        "peekOfCode": "urlpatterns = [\n    path('',\n        views.TournamentPublicHomeView.as_view(),\n        name='tournament-public-index'),\n    path('admin/',\n        views.TournamentAdminHomeView.as_view(),\n        name='tournament-admin-home'),\n    path('assistant/',\n        views.TournamentAssistantHomeView.as_view(),\n        name='tournament-assistant-home'),",
        "detail": "tabbycat.tournaments.urls",
        "documentation": {}
    },
    {
        "label": "auto_make_rounds",
        "kind": 2,
        "importPath": "tabbycat.tournaments.utils",
        "description": "tabbycat.tournaments.utils",
        "peekOfCode": "def auto_make_rounds(tournament, num_rounds):\n    \"\"\"Makes the number of rounds specified. The first one is random and the\n    rest are all power-paired. The last third of rounds (rounded down) are silent.\n    This is intended as a convenience function. For anything more complicated,\n    a more advanced import method should be used.\"\"\"\n    silent_threshold = num_rounds * 2 / 3\n    for i in range(1, num_rounds+1):\n        Round(\n            tournament=tournament,\n            seq=i,",
        "detail": "tabbycat.tournaments.utils",
        "documentation": {}
    },
    {
        "label": "get_side_name_choices",
        "kind": 2,
        "importPath": "tabbycat.tournaments.utils",
        "description": "tabbycat.tournaments.utils",
        "peekOfCode": "def get_side_name_choices():\n    \"\"\"Returns a list of choices for position names suitable for presentation in\n    a form.\"\"\"\n    return [\n        (code, force_str(names[\"0_full\"]).capitalize() + \", \" + force_str(names[\"1_full\"]).capitalize())\n        for code, names in SIDE_NAMES.items()\n    ]\ndef get_side_name(tournament, side: int, name_type) -> str:\n    \"\"\"Like aff_name, neg_name, etc., but can be used when the side is not known\n    at compile time. Example:",
        "detail": "tabbycat.tournaments.utils",
        "documentation": {}
    },
    {
        "label": "get_side_name",
        "kind": 2,
        "importPath": "tabbycat.tournaments.utils",
        "description": "tabbycat.tournaments.utils",
        "peekOfCode": "def get_side_name(tournament, side: int, name_type) -> str:\n    \"\"\"Like aff_name, neg_name, etc., but can be used when the side is not known\n    at compile time. Example:\n        get_side_name(tournament, \"aff\", \"full\")\n    will return something like \"Affirmative\" or \"Proposition\" or \"Gobierno\",\n    depending on the side name option and language setting.\n    \"\"\"\n    if side == -1:\n        return gettext('bye')\n    elif tournament is None or tournament.pref('side_names') == '1-2':",
        "detail": "tabbycat.tournaments.utils",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "tabbycat.tournaments.utils",
        "description": "tabbycat.tournaments.utils",
        "peekOfCode": "logger = logging.getLogger(__name__)\nSIDE_NAMES = {\n    'aff-neg': {\n        \"0_full\": _(\"affirmative\"),\n        \"1_full\": _(\"negative\"),\n        \"0_team\": _(\"affirmative team\"),\n        \"1_team\": _(\"negative team\"),\n        \"0_abbr\": _(\"Aff\"),\n        \"1_abbr\": _(\"Neg\"),\n    },",
        "detail": "tabbycat.tournaments.utils",
        "documentation": {}
    },
    {
        "label": "SIDE_NAMES",
        "kind": 5,
        "importPath": "tabbycat.tournaments.utils",
        "description": "tabbycat.tournaments.utils",
        "peekOfCode": "SIDE_NAMES = {\n    'aff-neg': {\n        \"0_full\": _(\"affirmative\"),\n        \"1_full\": _(\"negative\"),\n        \"0_team\": _(\"affirmative team\"),\n        \"1_team\": _(\"negative team\"),\n        \"0_abbr\": _(\"Aff\"),\n        \"1_abbr\": _(\"Neg\"),\n    },\n    'gov-opp': {",
        "detail": "tabbycat.tournaments.utils",
        "documentation": {}
    },
    {
        "label": "BP_SIDE_NAMES",
        "kind": 5,
        "importPath": "tabbycat.tournaments.utils",
        "description": "tabbycat.tournaments.utils",
        "peekOfCode": "BP_SIDE_NAMES = {  # stop-gap before this system gets refactored\n    \"0_full\": _(\"opening government\"),\n    \"1_full\": _(\"opening opposition\"),\n    \"2_full\": _(\"closing government\"),\n    \"3_full\": _(\"closing opposition\"),\n    \"0_team\": _(\"opening government team\"),\n    \"1_team\": _(\"opening opposition team\"),\n    \"2_team\": _(\"closing government team\"),\n    \"3_team\": _(\"closing opposition team\"),\n    \"0_abbr\": pgettext_lazy(\"BP position\", \"OG\"),",
        "detail": "tabbycat.tournaments.utils",
        "documentation": {}
    },
    {
        "label": "aff_name",
        "kind": 5,
        "importPath": "tabbycat.tournaments.utils",
        "description": "tabbycat.tournaments.utils",
        "peekOfCode": "aff_name = _get_side_name('0_full')\nneg_name = _get_side_name('1_full')\naff_abbr = _get_side_name('0_abbr')\nneg_abbr = _get_side_name('1_abbr')\naff_team = _get_side_name('0_team')\nneg_team = _get_side_name('1_team')",
        "detail": "tabbycat.tournaments.utils",
        "documentation": {}
    },
    {
        "label": "neg_name",
        "kind": 5,
        "importPath": "tabbycat.tournaments.utils",
        "description": "tabbycat.tournaments.utils",
        "peekOfCode": "neg_name = _get_side_name('1_full')\naff_abbr = _get_side_name('0_abbr')\nneg_abbr = _get_side_name('1_abbr')\naff_team = _get_side_name('0_team')\nneg_team = _get_side_name('1_team')",
        "detail": "tabbycat.tournaments.utils",
        "documentation": {}
    },
    {
        "label": "aff_abbr",
        "kind": 5,
        "importPath": "tabbycat.tournaments.utils",
        "description": "tabbycat.tournaments.utils",
        "peekOfCode": "aff_abbr = _get_side_name('0_abbr')\nneg_abbr = _get_side_name('1_abbr')\naff_team = _get_side_name('0_team')\nneg_team = _get_side_name('1_team')",
        "detail": "tabbycat.tournaments.utils",
        "documentation": {}
    },
    {
        "label": "neg_abbr",
        "kind": 5,
        "importPath": "tabbycat.tournaments.utils",
        "description": "tabbycat.tournaments.utils",
        "peekOfCode": "neg_abbr = _get_side_name('1_abbr')\naff_team = _get_side_name('0_team')\nneg_team = _get_side_name('1_team')",
        "detail": "tabbycat.tournaments.utils",
        "documentation": {}
    },
    {
        "label": "aff_team",
        "kind": 5,
        "importPath": "tabbycat.tournaments.utils",
        "description": "tabbycat.tournaments.utils",
        "peekOfCode": "aff_team = _get_side_name('0_team')\nneg_team = _get_side_name('1_team')",
        "detail": "tabbycat.tournaments.utils",
        "documentation": {}
    },
    {
        "label": "neg_team",
        "kind": 5,
        "importPath": "tabbycat.tournaments.utils",
        "description": "tabbycat.tournaments.utils",
        "peekOfCode": "neg_team = _get_side_name('1_team')",
        "detail": "tabbycat.tournaments.utils",
        "documentation": {}
    },
    {
        "label": "PublicSiteIndexView",
        "kind": 6,
        "importPath": "tabbycat.tournaments.views",
        "description": "tabbycat.tournaments.views",
        "peekOfCode": "class PublicSiteIndexView(WarnAboutDatabaseUseMixin, WarnAboutLegacySendgridConfigVarsMixin, TemplateView):\n    template_name = 'site_index.html'\n    def get(self, request, *args, **kwargs):\n        tournaments = Tournament.objects.all()\n        if request.GET.get('redirect', '') == 'false':\n            return super().get(request, *args, **kwargs)\n        if tournaments.count() == 1 and not request.user.is_authenticated:\n            logger.debug('One tournament only, user is: %s, redirecting to tournament-public-index', request.user)\n            return redirect_tournament('tournament-public-index', tournaments.first())\n        elif not tournaments.exists() and not User.objects.exists():",
        "detail": "tabbycat.tournaments.views",
        "documentation": {}
    },
    {
        "label": "TournamentPublicHomeView",
        "kind": 6,
        "importPath": "tabbycat.tournaments.views",
        "description": "tabbycat.tournaments.views",
        "peekOfCode": "class TournamentPublicHomeView(CacheMixin, TournamentMixin, TemplateView):\n    template_name = 'public_tournament_index.html'\n    def get_context_data(self, **kwargs):\n        kwargs['public_index'] = True\n        return super().get_context_data(**kwargs)\nclass BaseTournamentDashboardHomeView(TournamentMixin, WarnAboutDatabaseUseMixin, WarnAboutLegacySendgridConfigVarsMixin, TemplateView):\n    def get_context_data(self, **kwargs):\n        t = self.tournament\n        updates = 10 # Number of items to fetch\n        kwargs[\"round\"] = t.current_round",
        "detail": "tabbycat.tournaments.views",
        "documentation": {}
    },
    {
        "label": "BaseTournamentDashboardHomeView",
        "kind": 6,
        "importPath": "tabbycat.tournaments.views",
        "description": "tabbycat.tournaments.views",
        "peekOfCode": "class BaseTournamentDashboardHomeView(TournamentMixin, WarnAboutDatabaseUseMixin, WarnAboutLegacySendgridConfigVarsMixin, TemplateView):\n    def get_context_data(self, **kwargs):\n        t = self.tournament\n        updates = 10 # Number of items to fetch\n        kwargs[\"round\"] = t.current_round\n        kwargs[\"tournament_slug\"] = t.slug\n        kwargs[\"readthedocs_version\"] = settings.READTHEDOCS_VERSION\n        kwargs[\"blank\"] = not (t.team_set.exists() or t.adjudicator_set.exists() or t.venue_set.exists())\n        action_perm = has_permission(self.request.user, 'view.actionlogentry', self.tournament)\n        if action_perm:",
        "detail": "tabbycat.tournaments.views",
        "documentation": {}
    },
    {
        "label": "TournamentAssistantHomeView",
        "kind": 6,
        "importPath": "tabbycat.tournaments.views",
        "description": "tabbycat.tournaments.views",
        "peekOfCode": "class TournamentAssistantHomeView(AssistantMixin, BaseTournamentDashboardHomeView):\n    template_name = 'assistant_tournament_index.html'\nclass TournamentAdminHomeView(AdministratorMixin, BaseTournamentDashboardHomeView):\n    template_name = 'tournament_index.html'\n    view_permission = True\nclass CompleteRoundCheckView(AdministratorMixin, RoundMixin, TemplateView):\n    template_name = 'round_complete_check.html'\n    def get_context_data(self, **kwargs):\n        prior_rounds_not_completed = self.tournament.round_set.filter(\n            Q(break_category=self.round.break_category) | Q(break_category__isnull=True),",
        "detail": "tabbycat.tournaments.views",
        "documentation": {}
    },
    {
        "label": "TournamentAdminHomeView",
        "kind": 6,
        "importPath": "tabbycat.tournaments.views",
        "description": "tabbycat.tournaments.views",
        "peekOfCode": "class TournamentAdminHomeView(AdministratorMixin, BaseTournamentDashboardHomeView):\n    template_name = 'tournament_index.html'\n    view_permission = True\nclass CompleteRoundCheckView(AdministratorMixin, RoundMixin, TemplateView):\n    template_name = 'round_complete_check.html'\n    def get_context_data(self, **kwargs):\n        prior_rounds_not_completed = self.tournament.round_set.filter(\n            Q(break_category=self.round.break_category) | Q(break_category__isnull=True),\n            completed=False, seq__lt=self.round.seq,\n        )",
        "detail": "tabbycat.tournaments.views",
        "documentation": {}
    },
    {
        "label": "CompleteRoundCheckView",
        "kind": 6,
        "importPath": "tabbycat.tournaments.views",
        "description": "tabbycat.tournaments.views",
        "peekOfCode": "class CompleteRoundCheckView(AdministratorMixin, RoundMixin, TemplateView):\n    template_name = 'round_complete_check.html'\n    def get_context_data(self, **kwargs):\n        prior_rounds_not_completed = self.tournament.round_set.filter(\n            Q(break_category=self.round.break_category) | Q(break_category__isnull=True),\n            completed=False, seq__lt=self.round.seq,\n        )\n        kwargs['number_of_prior_rounds_not_completed'] = prior_rounds_not_completed.count()\n        kwargs['prior_rounds_not_completed'] = format_html_join(\n            \", \",",
        "detail": "tabbycat.tournaments.views",
        "documentation": {}
    },
    {
        "label": "CompleteRoundToggleSilentView",
        "kind": 6,
        "importPath": "tabbycat.tournaments.views",
        "description": "tabbycat.tournaments.views",
        "peekOfCode": "class CompleteRoundToggleSilentView(AdministratorMixin, RoundMixin, PostOnlyRedirectView):\n    round_redirect_pattern_name = 'tournament-complete-round-check'\n    def post(self, request, *args, **kwargs):\n        self.round.silent = request.POST[\"state\"] != \"True\"\n        self.round.save()\n        if self.round.silent:\n            messages.success(request, _(\"%(round)s has been marked as silent.\") % {'round': self.round.name})\n        else:\n            messages.success(request, _(\"%(round)s has been unmarked as silent.\") % {'round': self.round.name})\n        return super().post(request, *args, **kwargs)",
        "detail": "tabbycat.tournaments.views",
        "documentation": {}
    },
    {
        "label": "CompleteRoundView",
        "kind": 6,
        "importPath": "tabbycat.tournaments.views",
        "description": "tabbycat.tournaments.views",
        "peekOfCode": "class CompleteRoundView(RoundMixin, AdministratorMixin, LogActionMixin, PostOnlyRedirectView):\n    action_log_type = ActionLogEntry.ActionType.ROUND_COMPLETE\n    def post(self, request, *args, **kwargs):\n        self.round.completed = True\n        self.round.save()\n        self.log_action(round=self.round, content_object=self.round)\n        incomplete_rounds = self.tournament.round_set.filter(completed=False)\n        if not incomplete_rounds.exists():\n            messages.success(request, _(\"%(round)s has been marked as completed. \"\n                \"All rounds are now completed, so you're done with the tournament! \"",
        "detail": "tabbycat.tournaments.views",
        "documentation": {}
    },
    {
        "label": "CreateTournamentView",
        "kind": 6,
        "importPath": "tabbycat.tournaments.views",
        "description": "tabbycat.tournaments.views",
        "peekOfCode": "class CreateTournamentView(AdministratorMixin, WarnAboutDatabaseUseMixin, CreateView):\n    \"\"\"This view allows a logged-in superuser to create a new tournament.\"\"\"\n    model = Tournament\n    form_class = TournamentStartForm\n    template_name = \"create_tournament.html\"\n    db_warning_severity = messages.ERROR\n    def get_context_data(self, **kwargs):\n        demo_datasets = [\n            ('minimal8team', _(\"8-team generic dataset\")),\n            ('australs24team', _(\"24-team Australs dataset\")),",
        "detail": "tabbycat.tournaments.views",
        "documentation": {}
    },
    {
        "label": "ConfigureTournamentView",
        "kind": 6,
        "importPath": "tabbycat.tournaments.views",
        "description": "tabbycat.tournaments.views",
        "peekOfCode": "class ConfigureTournamentView(AdministratorMixin, TournamentMixin, UpdateView):\n    model = Tournament\n    form_class = TournamentConfigureForm\n    template_name = \"configure_tournament.html\"\n    slug_url_kwarg = 'tournament_slug'\n    def get_success_url(self):\n        t = self.tournament\n        return reverse_tournament('tournament-admin-home', tournament=t)\nclass SetCurrentRoundView(AdministratorMixin, TournamentMixin, FormView):\n    template_name = 'set_current_round.html'",
        "detail": "tabbycat.tournaments.views",
        "documentation": {}
    },
    {
        "label": "SetCurrentRoundView",
        "kind": 6,
        "importPath": "tabbycat.tournaments.views",
        "description": "tabbycat.tournaments.views",
        "peekOfCode": "class SetCurrentRoundView(AdministratorMixin, TournamentMixin, FormView):\n    template_name = 'set_current_round.html'\n    slug_url_kwarg = 'tournament_slug'\n    redirect_field_name = 'next'\n    page_title = _('Set Current Round')\n    page_emoji = '🙏'\n    def get_form_class(self):\n        if self.tournament.breakcategory_set.count() <= 1:\n            return SetCurrentRoundSingleBreakCategoryForm\n        else:",
        "detail": "tabbycat.tournaments.views",
        "documentation": {}
    },
    {
        "label": "SetRoundWeightingsView",
        "kind": 6,
        "importPath": "tabbycat.tournaments.views",
        "description": "tabbycat.tournaments.views",
        "peekOfCode": "class SetRoundWeightingsView(AdministratorMixin, TournamentMixin, FormView):\n    template_name = 'set_round_weights.html'\n    form_class = RoundWeightForm\n    def get_form_kwargs(self):\n        kwargs = super().get_form_kwargs()\n        kwargs['tournament'] = self.tournament\n        return kwargs\n    def form_valid(self, form):\n        form.save()\n        messages.success(self.request, _(\"Successfully set round weights for tapered scoring.\"))",
        "detail": "tabbycat.tournaments.views",
        "documentation": {}
    },
    {
        "label": "FixDebateTeamsView",
        "kind": 6,
        "importPath": "tabbycat.tournaments.views",
        "description": "tabbycat.tournaments.views",
        "peekOfCode": "class FixDebateTeamsView(AdministratorMixin, TournamentMixin, TemplateView):\n    template_name = \"fix_debate_teams.html\"\n    def get_incomplete_debates(self):\n        annotations = {  # annotates with the number of DebateTeams on each side in the debate\n            side: Count('debateteam', filter=Q(debateteam__side=side), distinct=True)\n            for side in self.tournament.sides\n        }\n        debates = Debate.objects.filter(round__tournament=self.tournament)\n        debates = debates.prefetch_related('debateteam_set__team').annotate(**annotations)\n        # A debate is incomplete if there isn't exactly one team on each side",
        "detail": "tabbycat.tournaments.views",
        "documentation": {}
    },
    {
        "label": "StyleGuideView",
        "kind": 6,
        "importPath": "tabbycat.tournaments.views",
        "description": "tabbycat.tournaments.views",
        "peekOfCode": "class StyleGuideView(TemplateView, TabbycatPageTitlesMixin):\n    template_name = 'admin/style_guide.html'\n    page_subtitle = 'Contextual sub title'",
        "detail": "tabbycat.tournaments.views",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "tabbycat.tournaments.views",
        "description": "tabbycat.tournaments.views",
        "peekOfCode": "User = get_user_model()\nlogger = logging.getLogger(__name__)\nclass PublicSiteIndexView(WarnAboutDatabaseUseMixin, WarnAboutLegacySendgridConfigVarsMixin, TemplateView):\n    template_name = 'site_index.html'\n    def get(self, request, *args, **kwargs):\n        tournaments = Tournament.objects.all()\n        if request.GET.get('redirect', '') == 'false':\n            return super().get(request, *args, **kwargs)\n        if tournaments.count() == 1 and not request.user.is_authenticated:\n            logger.debug('One tournament only, user is: %s, redirecting to tournament-public-index', request.user)",
        "detail": "tabbycat.tournaments.views",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "tabbycat.tournaments.views",
        "description": "tabbycat.tournaments.views",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass PublicSiteIndexView(WarnAboutDatabaseUseMixin, WarnAboutLegacySendgridConfigVarsMixin, TemplateView):\n    template_name = 'site_index.html'\n    def get(self, request, *args, **kwargs):\n        tournaments = Tournament.objects.all()\n        if request.GET.get('redirect', '') == 'false':\n            return super().get(request, *args, **kwargs)\n        if tournaments.count() == 1 and not request.user.is_authenticated:\n            logger.debug('One tournament only, user is: %s, redirecting to tournament-public-index', request.user)\n            return redirect_tournament('tournament-public-index', tournaments.first())",
        "detail": "tabbycat.tournaments.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.users.migrations.0001_initial",
        "description": "tabbycat.users.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n        (\"tournaments\", \"0012_alter_round_unique_together_and_more\"),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name=\"Group\",\n            fields=[",
        "detail": "tabbycat.users.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.users.migrations.0002_group_users",
        "description": "tabbycat.users.migrations.0002_group_users",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"users\", \"0001_initial\"),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name=\"group\",\n            name=\"users\",\n            field=models.ManyToManyField(",
        "detail": "tabbycat.users.migrations.0002_group_users",
        "documentation": {}
    },
    {
        "label": "UserPermissionInline",
        "kind": 6,
        "importPath": "tabbycat.users.admin",
        "description": "tabbycat.users.admin",
        "peekOfCode": "class UserPermissionInline(admin.TabularInline):\n    model = UserPermission\n    fields = ('permission', 'tournament')\nclass MembershipInline(admin.TabularInline):\n    model = Membership\n    fields = ('group',)\nclass CustomUserLabelsMixin:\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.fields['is_staff'].help_text = _(\"Users with staff status can\"",
        "detail": "tabbycat.users.admin",
        "documentation": {}
    },
    {
        "label": "MembershipInline",
        "kind": 6,
        "importPath": "tabbycat.users.admin",
        "description": "tabbycat.users.admin",
        "peekOfCode": "class MembershipInline(admin.TabularInline):\n    model = Membership\n    fields = ('group',)\nclass CustomUserLabelsMixin:\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.fields['is_staff'].help_text = _(\"Users with staff status can\"\n            \" view and edit the Edit Database area. This is potentially \"\n            \"dangerous and should be reserved for the actual tab director(s).\")\nclass UserChangeFormExtended(CustomUserLabelsMixin, UserChangeForm):",
        "detail": "tabbycat.users.admin",
        "documentation": {}
    },
    {
        "label": "CustomUserLabelsMixin",
        "kind": 6,
        "importPath": "tabbycat.users.admin",
        "description": "tabbycat.users.admin",
        "peekOfCode": "class CustomUserLabelsMixin:\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.fields['is_staff'].help_text = _(\"Users with staff status can\"\n            \" view and edit the Edit Database area. This is potentially \"\n            \"dangerous and should be reserved for the actual tab director(s).\")\nclass UserChangeFormExtended(CustomUserLabelsMixin, UserChangeForm):\n    group_set = ModelMultipleChoiceField(queryset=Group.objects.all(), required=False)\nclass UserCreationFormExtended(CustomUserLabelsMixin, UserCreationForm):\n    group_set = ModelMultipleChoiceField(queryset=Group.objects.all(), required=False)",
        "detail": "tabbycat.users.admin",
        "documentation": {}
    },
    {
        "label": "UserChangeFormExtended",
        "kind": 6,
        "importPath": "tabbycat.users.admin",
        "description": "tabbycat.users.admin",
        "peekOfCode": "class UserChangeFormExtended(CustomUserLabelsMixin, UserChangeForm):\n    group_set = ModelMultipleChoiceField(queryset=Group.objects.all(), required=False)\nclass UserCreationFormExtended(CustomUserLabelsMixin, UserCreationForm):\n    group_set = ModelMultipleChoiceField(queryset=Group.objects.all(), required=False)\nclass UserAdmin(BaseUserAdmin):\n    list_display = ('username', 'email', 'is_active', 'is_staff', 'is_superuser')\n    inlines = (UserPermissionInline, MembershipInline)\n    fieldsets = ( # Hide groups and user permission fields\n        (_('Personal info'), {'fields': ('username', 'email', 'password')}),\n        (_('Permissions'), {'fields': ('is_active', 'is_staff', 'is_superuser')}),",
        "detail": "tabbycat.users.admin",
        "documentation": {}
    },
    {
        "label": "UserCreationFormExtended",
        "kind": 6,
        "importPath": "tabbycat.users.admin",
        "description": "tabbycat.users.admin",
        "peekOfCode": "class UserCreationFormExtended(CustomUserLabelsMixin, UserCreationForm):\n    group_set = ModelMultipleChoiceField(queryset=Group.objects.all(), required=False)\nclass UserAdmin(BaseUserAdmin):\n    list_display = ('username', 'email', 'is_active', 'is_staff', 'is_superuser')\n    inlines = (UserPermissionInline, MembershipInline)\n    fieldsets = ( # Hide groups and user permission fields\n        (_('Personal info'), {'fields': ('username', 'email', 'password')}),\n        (_('Permissions'), {'fields': ('is_active', 'is_staff', 'is_superuser')}),\n        (_('Important dates'), {'fields': ('last_login', 'date_joined')}),\n    )",
        "detail": "tabbycat.users.admin",
        "documentation": {}
    },
    {
        "label": "UserAdmin",
        "kind": 6,
        "importPath": "tabbycat.users.admin",
        "description": "tabbycat.users.admin",
        "peekOfCode": "class UserAdmin(BaseUserAdmin):\n    list_display = ('username', 'email', 'is_active', 'is_staff', 'is_superuser')\n    inlines = (UserPermissionInline, MembershipInline)\n    fieldsets = ( # Hide groups and user permission fields\n        (_('Personal info'), {'fields': ('username', 'email', 'password')}),\n        (_('Permissions'), {'fields': ('is_active', 'is_staff', 'is_superuser')}),\n        (_('Important dates'), {'fields': ('last_login', 'date_joined')}),\n    )\n    add_fieldsets = ( # Set permissions when creating\n        (None, {",
        "detail": "tabbycat.users.admin",
        "documentation": {}
    },
    {
        "label": "UserPermissionAdmin",
        "kind": 6,
        "importPath": "tabbycat.users.admin",
        "description": "tabbycat.users.admin",
        "peekOfCode": "class UserPermissionAdmin(admin.ModelAdmin):\n    list_display = ('user', 'permission', 'tournament')\n@admin.register(Group)\nclass GroupAdmin(admin.ModelAdmin):\n    list_display = ('name', 'tournament')\nUser = get_user_model()\nadmin.site.unregister(User)\nadmin.site.register(User, UserAdmin)",
        "detail": "tabbycat.users.admin",
        "documentation": {}
    },
    {
        "label": "GroupAdmin",
        "kind": 6,
        "importPath": "tabbycat.users.admin",
        "description": "tabbycat.users.admin",
        "peekOfCode": "class GroupAdmin(admin.ModelAdmin):\n    list_display = ('name', 'tournament')\nUser = get_user_model()\nadmin.site.unregister(User)\nadmin.site.register(User, UserAdmin)",
        "detail": "tabbycat.users.admin",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "tabbycat.users.admin",
        "description": "tabbycat.users.admin",
        "peekOfCode": "User = get_user_model()\nadmin.site.unregister(User)\nadmin.site.register(User, UserAdmin)",
        "detail": "tabbycat.users.admin",
        "documentation": {}
    },
    {
        "label": "SuperuserCreationForm",
        "kind": 6,
        "importPath": "tabbycat.users.forms",
        "description": "tabbycat.users.forms",
        "peekOfCode": "class SuperuserCreationForm(UserCreationForm):\n    \"\"\"A form that creates a superuser from the given username and password.\"\"\"\n    class Meta(UserCreationForm.Meta):\n        fields = (\"username\", \"email\")\n        labels = {\"email\": _(\"Email address\")}\n    def save(self, commit=True):\n        user = super().save(commit=False)\n        user.is_staff = True\n        user.is_superuser = True\n        if commit:",
        "detail": "tabbycat.users.forms",
        "documentation": {}
    },
    {
        "label": "InviteUserForm",
        "kind": 6,
        "importPath": "tabbycat.users.forms",
        "description": "tabbycat.users.forms",
        "peekOfCode": "class InviteUserForm(PasswordResetForm):\n    def __init__(self, tournament, *args, **kwargs):\n        self.tournament = tournament\n        super().__init__(*args, **kwargs)\n        self.fields['role'] = forms.ModelChoiceField(queryset=tournament.group_set.all())\n    def get_users(self, email):\n        user, created = get_user_model().objects.get_or_create(\n            email=email,\n            defaults={\n                'username': email.split(\"@\")[0],",
        "detail": "tabbycat.users.forms",
        "documentation": {}
    },
    {
        "label": "AcceptInvitationForm",
        "kind": 6,
        "importPath": "tabbycat.users.forms",
        "description": "tabbycat.users.forms",
        "peekOfCode": "class AcceptInvitationForm(SetPasswordForm):\n    username = UsernameField(label=_(\"Username\"), help_text=get_user_model()._meta.get_field('username').help_text)\n    field_order = ('username', 'new_password1', 'new_password2')\n    def save(self, commit=True):\n        self.user.username = self.cleaned_data['username']\n        return super().save(commit=commit)",
        "detail": "tabbycat.users.forms",
        "documentation": {}
    },
    {
        "label": "BaseGroup",
        "kind": 6,
        "importPath": "tabbycat.users.groups",
        "description": "tabbycat.users.groups",
        "peekOfCode": "class BaseGroup:\n    name: Optional[str] = None\n    permissions: List[Permission] = []\nclass Equity(BaseGroup):\n    # Permissions to manage conflicts/constraints, view participant info\n    name = _(\"Equity\")\n    permissions = [\n        Permission.EDIT_ROOMCATEGORIES,\n        Permission.EDIT_ROOMCONSTRAINTS,\n        Permission.EDIT_ADJ_ADJ_CONFLICTS,",
        "detail": "tabbycat.users.groups",
        "documentation": {}
    },
    {
        "label": "Equity",
        "kind": 6,
        "importPath": "tabbycat.users.groups",
        "description": "tabbycat.users.groups",
        "peekOfCode": "class Equity(BaseGroup):\n    # Permissions to manage conflicts/constraints, view participant info\n    name = _(\"Equity\")\n    permissions = [\n        Permission.EDIT_ROOMCATEGORIES,\n        Permission.EDIT_ROOMCONSTRAINTS,\n        Permission.EDIT_ADJ_ADJ_CONFLICTS,\n        Permission.EDIT_ADJ_INST_CONFLICTS,\n        Permission.EDIT_ADJ_INST_CONFLICTS,\n        Permission.EDIT_TEAM_INST_CONFLICTS,",
        "detail": "tabbycat.users.groups",
        "documentation": {}
    },
    {
        "label": "AdjudicationCore",
        "kind": 6,
        "importPath": "tabbycat.users.groups",
        "description": "tabbycat.users.groups",
        "peekOfCode": "class AdjudicationCore(BaseGroup):\n    # Permissions to make [preformed] allocations, view feedback, and create motions\n    name = _(\"Adjudication Core\")\n    permissions = [\n        Permission.EDIT_BASEJUDGESCORES_IND,\n        Permission.EDIT_DEBATEADJUDICATORS,\n        Permission.EDIT_FEEDBACK_CONFIRM,\n        Permission.EDIT_FEEDBACK_IGNORE,\n        Permission.EDIT_JUDGESCORES_BULK,\n        Permission.EDIT_BASEJUDGESCORES_IND,",
        "detail": "tabbycat.users.groups",
        "documentation": {}
    },
    {
        "label": "TabDirector",
        "kind": 6,
        "importPath": "tabbycat.users.groups",
        "description": "tabbycat.users.groups",
        "peekOfCode": "class TabDirector(BaseGroup):\n    # All permissions\n    name = _(\"Tabulation Director\")\n    permissions = [p for p in Permission]\nclass TabAssistant(BaseGroup):\n    # Permissions to match the Assistant interface\n    name = _(\"Tabulation Assistant\")\n    permissions = [\n        Permission.ADD_BALLOTSUBMISSIONS,\n        Permission.MARK_OTHERS_BALLOTSUBMISSIONS,",
        "detail": "tabbycat.users.groups",
        "documentation": {}
    },
    {
        "label": "TabAssistant",
        "kind": 6,
        "importPath": "tabbycat.users.groups",
        "description": "tabbycat.users.groups",
        "peekOfCode": "class TabAssistant(BaseGroup):\n    # Permissions to match the Assistant interface\n    name = _(\"Tabulation Assistant\")\n    permissions = [\n        Permission.ADD_BALLOTSUBMISSIONS,\n        Permission.MARK_OTHERS_BALLOTSUBMISSIONS,\n        Permission.VIEW_BALLOTSUBMISSION_GRAPH,\n        Permission.ADD_FEEDBACK,\n        Permission.VIEW_INSTITUTIONS,\n        Permission.VIEW_PARTICIPANTS,",
        "detail": "tabbycat.users.groups",
        "documentation": {}
    },
    {
        "label": "Language",
        "kind": 6,
        "importPath": "tabbycat.users.groups",
        "description": "tabbycat.users.groups",
        "peekOfCode": "class Language(BaseGroup):\n    name = _(\"Language\")\n    permissions = [\n        Permission.EDIT_BREAK_ELIGIBILITY,\n        Permission.EDIT_SPEAKER_CATEGORIES,\n        Permission.VIEW_PARTICIPANTS,\n        Permission.VIEW_TEAMS,\n    ]",
        "detail": "tabbycat.users.groups",
        "documentation": {}
    },
    {
        "label": "all_groups",
        "kind": 2,
        "importPath": "tabbycat.users.groups",
        "description": "tabbycat.users.groups",
        "peekOfCode": "def all_groups():\n    yield from _all_subclasses(BaseGroup)\nclass BaseGroup:\n    name: Optional[str] = None\n    permissions: List[Permission] = []\nclass Equity(BaseGroup):\n    # Permissions to manage conflicts/constraints, view participant info\n    name = _(\"Equity\")\n    permissions = [\n        Permission.EDIT_ROOMCATEGORIES,",
        "detail": "tabbycat.users.groups",
        "documentation": {}
    },
    {
        "label": "UserPermission",
        "kind": 6,
        "importPath": "tabbycat.users.models",
        "description": "tabbycat.users.models",
        "peekOfCode": "class UserPermission(models.Model):\n    user = models.ForeignKey(settings.AUTH_USER_MODEL, models.CASCADE, verbose_name=_(\"user\"))\n    permission = models.CharField(max_length=50, choices=Permission.choices, verbose_name=_(\"permission\"))\n    tournament = models.ForeignKey('tournaments.Tournament', models.CASCADE, verbose_name=_(\"tournament\"))\n    class Meta:\n        constraints = [UniqueConstraint(fields=['user', 'permission', 'tournament'])]\n        verbose_name = _(\"user permission\")\n        verbose_name_plural = _(\"user permissions\")\n    def __str__(self):\n        return \"%s: %s (%s)\" % (self.user.username, self.permission, self.tournament.slug)",
        "detail": "tabbycat.users.models",
        "documentation": {}
    },
    {
        "label": "Group",
        "kind": 6,
        "importPath": "tabbycat.users.models",
        "description": "tabbycat.users.models",
        "peekOfCode": "class Group(models.Model):\n    name = models.CharField(max_length=100, verbose_name=_(\"name\"))\n    tournament = models.ForeignKey('tournaments.Tournament', models.CASCADE, verbose_name=_(\"tournament\"))\n    permissions = ChoiceArrayField(blank=True, default=list,\n        base_field=models.CharField(max_length=50, choices=Permission.choices), verbose_name=_(\"permissions\"))\n    users = models.ManyToManyField(settings.AUTH_USER_MODEL, through='Membership', related_name='group_set')\n    class Meta:\n        constraints = [UniqueConstraint(fields=['name', 'tournament'])]\n        verbose_name = _(\"group\")\n        verbose_name_plural = _(\"groups\")",
        "detail": "tabbycat.users.models",
        "documentation": {}
    },
    {
        "label": "Membership",
        "kind": 6,
        "importPath": "tabbycat.users.models",
        "description": "tabbycat.users.models",
        "peekOfCode": "class Membership(models.Model):\n    user = models.ForeignKey(settings.AUTH_USER_MODEL, models.CASCADE, verbose_name=_(\"user\"))\n    group = models.ForeignKey(Group, models.CASCADE, verbose_name=_(\"group\"))\n    class Meta:\n        constraints = [UniqueConstraint(fields=['user', 'group'])]\n        verbose_name = _(\"group membership\")\n        verbose_name_plural = _(\"group memberships\")\n    def save(self, *args, **kwargs):\n        super().save(*args, **kwargs)\n        cache.set_many({PERM_CACHE_KEY % (self.user_id, self.group.tournament.slug, str(perm)): True for perm in self.group.permissions})",
        "detail": "tabbycat.users.models",
        "documentation": {}
    },
    {
        "label": "Permission",
        "kind": 6,
        "importPath": "tabbycat.users.permissions",
        "description": "tabbycat.users.permissions",
        "peekOfCode": "class Permission(TextChoices):\n    VIEW_ADJ_TEAM_CONFLICTS = 'view.adjudicatorteamconflict', _(\"view adjudicator-team conflicts\")\n    EDIT_ADJ_TEAM_CONFLICTS = 'edit.adjudicatorteamconflict', _(\"edit adjudicator-team conflicts\")\n    VIEW_ADJ_ADJ_CONFLICTS = 'view.adjudicatoradjudicatorconflict', _(\"view adjudicator-adjudicator conflicts\")\n    EDIT_ADJ_ADJ_CONFLICTS = 'edit.adjudicatoradjudicatorconflict', _(\"edit adjudicator-adjudicator conflicts\")\n    VIEW_ADJ_INST_CONFLICTS = 'view.adjudicatorinstitutionconflict', _(\"view adjudicator-institution conflicts\")\n    EDIT_ADJ_INST_CONFLICTS = 'edit.adjudicatorinstitutionconflict', _(\"edit adjudicator-institution conflicts\")\n    VIEW_TEAM_INST_CONFLICTS = 'view.teaminstitutionconflict', _(\"view team-institution conflicts\")\n    EDIT_TEAM_INST_CONFLICTS = 'edit.teaminstitutionconflict', _(\"edit team-institution conflicts\")\n    VIEW_ACTIONLOGENTRIES = 'view.actionlogentry', _(\"view action log entries\")",
        "detail": "tabbycat.users.permissions",
        "documentation": {}
    },
    {
        "label": "has_permission",
        "kind": 2,
        "importPath": "tabbycat.users.permissions",
        "description": "tabbycat.users.permissions",
        "peekOfCode": "def has_permission(user: 'settings.AUTH_USER_MODEL', permission: permission_type, tournament: 'Tournament') -> bool:\n    if user.is_anonymous:\n        return False\n    if user.is_superuser:\n        return True\n    if isinstance(permission, bool):\n        return permission\n    if not hasattr(user, '_permissions'):\n        user._permissions = {}\n    if tournament.slug in user._permissions:",
        "detail": "tabbycat.users.permissions",
        "documentation": {}
    },
    {
        "label": "get_permissions",
        "kind": 2,
        "importPath": "tabbycat.users.permissions",
        "description": "tabbycat.users.permissions",
        "peekOfCode": "def get_permissions(user: 'settings.AUTH_USER_MODEL') -> List['Tournament']:\n    user_perms = {}\n    for t, groups in groupby(user.membership_set.select_related('group', 'group__tournament').order_by('group__tournament').all(), key=lambda m: m.group.tournament):\n        tournament = user_perms.setdefault(t.id, t)\n        tournament.permissions = set()\n        tournament.groups = [m.group for m in groups]\n        for g in tournament.groups:\n            tournament.permissions |= set(g.permissions)\n    for t, perms in groupby(user.userpermission_set.select_related('tournament').order_by('tournament').all(), key=lambda p: p.tournament):\n        tournament = user_perms.setdefault(t.id, t)",
        "detail": "tabbycat.users.permissions",
        "documentation": {}
    },
    {
        "label": "PERM_CACHE_KEY",
        "kind": 5,
        "importPath": "tabbycat.users.permissions",
        "description": "tabbycat.users.permissions",
        "peekOfCode": "PERM_CACHE_KEY = \"user_%d_%s_%s_permission\"\nclass Permission(TextChoices):\n    VIEW_ADJ_TEAM_CONFLICTS = 'view.adjudicatorteamconflict', _(\"view adjudicator-team conflicts\")\n    EDIT_ADJ_TEAM_CONFLICTS = 'edit.adjudicatorteamconflict', _(\"edit adjudicator-team conflicts\")\n    VIEW_ADJ_ADJ_CONFLICTS = 'view.adjudicatoradjudicatorconflict', _(\"view adjudicator-adjudicator conflicts\")\n    EDIT_ADJ_ADJ_CONFLICTS = 'edit.adjudicatoradjudicatorconflict', _(\"edit adjudicator-adjudicator conflicts\")\n    VIEW_ADJ_INST_CONFLICTS = 'view.adjudicatorinstitutionconflict', _(\"view adjudicator-institution conflicts\")\n    EDIT_ADJ_INST_CONFLICTS = 'edit.adjudicatorinstitutionconflict', _(\"edit adjudicator-institution conflicts\")\n    VIEW_TEAM_INST_CONFLICTS = 'view.teaminstitutionconflict', _(\"view team-institution conflicts\")\n    EDIT_TEAM_INST_CONFLICTS = 'edit.teaminstitutionconflict', _(\"edit team-institution conflicts\")",
        "detail": "tabbycat.users.permissions",
        "documentation": {}
    },
    {
        "label": "permission_type",
        "kind": 5,
        "importPath": "tabbycat.users.permissions",
        "description": "tabbycat.users.permissions",
        "peekOfCode": "permission_type = Union[Permission, bool]\ndef has_permission(user: 'settings.AUTH_USER_MODEL', permission: permission_type, tournament: 'Tournament') -> bool:\n    if user.is_anonymous:\n        return False\n    if user.is_superuser:\n        return True\n    if isinstance(permission, bool):\n        return permission\n    if not hasattr(user, '_permissions'):\n        user._permissions = {}",
        "detail": "tabbycat.users.permissions",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "tabbycat.users.urls",
        "description": "tabbycat.users.urls",
        "peekOfCode": "urlpatterns = [\n    path('', include('django.contrib.auth.urls')),\n]",
        "detail": "tabbycat.users.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "tabbycat.users.urls_admin",
        "description": "tabbycat.users.urls_admin",
        "peekOfCode": "urlpatterns = [\n    path('invite/', views.InviteUserView.as_view(), name='invite-user'),\n    path('accept/<uidb64>/<token>/', views.AcceptInvitationView.as_view(), name='accept-invitation'),\n]",
        "detail": "tabbycat.users.urls_admin",
        "documentation": {}
    },
    {
        "label": "BlankSiteStartView",
        "kind": 6,
        "importPath": "tabbycat.users.views",
        "description": "tabbycat.users.views",
        "peekOfCode": "class BlankSiteStartView(FormView):\n    \"\"\"This view is presented to the user when there are no tournaments and no\n    user accounts. It prompts the user to create a first superuser. It rejects\n    all requests, GET or POST, if there exists any user account in the\n    system.\"\"\"\n    form_class = SuperuserCreationForm\n    template_name = \"blank_site_start.html\"\n    lock = Lock()\n    success_url = reverse_lazy('tabbycat-index')\n    def get(self, request):",
        "detail": "tabbycat.users.views",
        "documentation": {}
    },
    {
        "label": "InviteUserView",
        "kind": 6,
        "importPath": "tabbycat.users.views",
        "description": "tabbycat.users.views",
        "peekOfCode": "class InviteUserView(LogActionMixin, AdministratorMixin, TournamentMixin, PasswordResetView):\n    \"\"\"This view is used by an administrator to invite an email address to\n    either create an account or to give them access to a particular tournament,\n    for when permissions will be created.\"\"\"\n    form_class = InviteUserForm\n    template_name = \"invite_user.html\"\n    action_log_type = ActionLogEntry.ActionType.USER_INVITE\n    page_title = _(\"Invite User\")\n    page_emoji = '👤'\n    subject_template_name = 'account_invitation_subject.txt'",
        "detail": "tabbycat.users.views",
        "documentation": {}
    },
    {
        "label": "AcceptInvitationView",
        "kind": 6,
        "importPath": "tabbycat.users.views",
        "description": "tabbycat.users.views",
        "peekOfCode": "class AcceptInvitationView(TournamentMixin, PasswordResetConfirmView):\n    form_class = AcceptInvitationForm\n    success_url = reverse_lazy('tabbycat-index')\n    template_name = 'signup.html'\n    page_title = _('Accept Invitation')\n    def get_context_data(self, **kwargs):\n        if not self.validlink:\n            raise Http404\n        return super().get_context_data(**kwargs)",
        "detail": "tabbycat.users.views",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "tabbycat.users.views",
        "description": "tabbycat.users.views",
        "peekOfCode": "User = get_user_model()\nlogger = logging.getLogger(__name__)\nclass BlankSiteStartView(FormView):\n    \"\"\"This view is presented to the user when there are no tournaments and no\n    user accounts. It prompts the user to create a first superuser. It rejects\n    all requests, GET or POST, if there exists any user account in the\n    system.\"\"\"\n    form_class = SuperuserCreationForm\n    template_name = \"blank_site_start.html\"\n    lock = Lock()",
        "detail": "tabbycat.users.views",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "tabbycat.users.views",
        "description": "tabbycat.users.views",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass BlankSiteStartView(FormView):\n    \"\"\"This view is presented to the user when there are no tournaments and no\n    user accounts. It prompts the user to create a first superuser. It rejects\n    all requests, GET or POST, if there exists any user account in the\n    system.\"\"\"\n    form_class = SuperuserCreationForm\n    template_name = \"blank_site_start.html\"\n    lock = Lock()\n    success_url = reverse_lazy('tabbycat-index')",
        "detail": "tabbycat.users.views",
        "documentation": {}
    },
    {
        "label": "BADGE_DATETIME_FORMAT",
        "kind": 5,
        "importPath": "tabbycat.utils.formats.ar.formats",
        "description": "tabbycat.utils.formats.ar.formats",
        "peekOfCode": "BADGE_DATETIME_FORMAT = 'd/m H:i'  # '08/02 16:33'",
        "detail": "tabbycat.utils.formats.ar.formats",
        "documentation": {}
    },
    {
        "label": "BADGE_DATETIME_FORMAT",
        "kind": 5,
        "importPath": "tabbycat.utils.formats.ast.formats",
        "description": "tabbycat.utils.formats.ast.formats",
        "peekOfCode": "BADGE_DATETIME_FORMAT = 'j b H:i'  # '8 feb 16:33'",
        "detail": "tabbycat.utils.formats.ast.formats",
        "documentation": {}
    },
    {
        "label": "BADGE_DATETIME_FORMAT",
        "kind": 5,
        "importPath": "tabbycat.utils.formats.bn.formats",
        "description": "tabbycat.utils.formats.bn.formats",
        "peekOfCode": "BADGE_DATETIME_FORMAT = 'd/m H:i'  # '08/02 16:33'",
        "detail": "tabbycat.utils.formats.bn.formats",
        "documentation": {}
    },
    {
        "label": "SHORT_DATE_FORMAT",
        "kind": 5,
        "importPath": "tabbycat.utils.formats.en.formats",
        "description": "tabbycat.utils.formats.en.formats",
        "peekOfCode": "SHORT_DATE_FORMAT = 'j M Y'        # '8 Feb 2018'\nSHORT_DATETIME_FORMAT = 'j M Y P'  # '8 Feb 2018 4:33 p.m.'\nBADGE_DATETIME_FORMAT = 'j M H:i'  # '8 Feb 16:33'",
        "detail": "tabbycat.utils.formats.en.formats",
        "documentation": {}
    },
    {
        "label": "SHORT_DATETIME_FORMAT",
        "kind": 5,
        "importPath": "tabbycat.utils.formats.en.formats",
        "description": "tabbycat.utils.formats.en.formats",
        "peekOfCode": "SHORT_DATETIME_FORMAT = 'j M Y P'  # '8 Feb 2018 4:33 p.m.'\nBADGE_DATETIME_FORMAT = 'j M H:i'  # '8 Feb 16:33'",
        "detail": "tabbycat.utils.formats.en.formats",
        "documentation": {}
    },
    {
        "label": "BADGE_DATETIME_FORMAT",
        "kind": 5,
        "importPath": "tabbycat.utils.formats.en.formats",
        "description": "tabbycat.utils.formats.en.formats",
        "peekOfCode": "BADGE_DATETIME_FORMAT = 'j M H:i'  # '8 Feb 16:33'",
        "detail": "tabbycat.utils.formats.en.formats",
        "documentation": {}
    },
    {
        "label": "BADGE_DATETIME_FORMAT",
        "kind": 5,
        "importPath": "tabbycat.utils.formats.es.formats",
        "description": "tabbycat.utils.formats.es.formats",
        "peekOfCode": "BADGE_DATETIME_FORMAT = 'j b H:i'  # '8 feb 16:33'",
        "detail": "tabbycat.utils.formats.es.formats",
        "documentation": {}
    },
    {
        "label": "BADGE_DATETIME_FORMAT",
        "kind": 5,
        "importPath": "tabbycat.utils.formats.fr.formats",
        "description": "tabbycat.utils.formats.fr.formats",
        "peekOfCode": "BADGE_DATETIME_FORMAT = 'j N H:i'  # '8 fév. 16:33'",
        "detail": "tabbycat.utils.formats.fr.formats",
        "documentation": {}
    },
    {
        "label": "BADGE_DATETIME_FORMAT",
        "kind": 5,
        "importPath": "tabbycat.utils.formats.id.formats",
        "description": "tabbycat.utils.formats.id.formats",
        "peekOfCode": "BADGE_DATETIME_FORMAT = 'j M H:i'  # '8 Feb 16:33'",
        "detail": "tabbycat.utils.formats.id.formats",
        "documentation": {}
    },
    {
        "label": "BADGE_DATETIME_FORMAT",
        "kind": 5,
        "importPath": "tabbycat.utils.formats.ja.formats",
        "description": "tabbycat.utils.formats.ja.formats",
        "peekOfCode": "BADGE_DATETIME_FORMAT = 'n月j日G:i'  # '2月8日16:33'",
        "detail": "tabbycat.utils.formats.ja.formats",
        "documentation": {}
    },
    {
        "label": "BADGE_DATETIME_FORMAT",
        "kind": 5,
        "importPath": "tabbycat.utils.formats.ms.formats",
        "description": "tabbycat.utils.formats.ms.formats",
        "peekOfCode": "BADGE_DATETIME_FORMAT = 'g:i A d/m'  # '4:33 PM 08/02'\n# Provide Django format definitions as Malay is not included yet\nDATE_FORMAT = 'd/m/Y'  # '08/02/2020'\nTIME_FORMAT = 'g:i A'  # '4:33 PM'\nDATETIME_FORMAT = 'g:i A d/m/Y'  # '4:33 PM 08/02/2020'\nSHORT_DATE_FORMAT = 'd/m/Y'  # '08/02/2020'\nSHORT_DATETIME_FORMAT = 'g:i A d/m/Y'  # '4:33 PM 08/02/2020'",
        "detail": "tabbycat.utils.formats.ms.formats",
        "documentation": {}
    },
    {
        "label": "DATE_FORMAT",
        "kind": 5,
        "importPath": "tabbycat.utils.formats.ms.formats",
        "description": "tabbycat.utils.formats.ms.formats",
        "peekOfCode": "DATE_FORMAT = 'd/m/Y'  # '08/02/2020'\nTIME_FORMAT = 'g:i A'  # '4:33 PM'\nDATETIME_FORMAT = 'g:i A d/m/Y'  # '4:33 PM 08/02/2020'\nSHORT_DATE_FORMAT = 'd/m/Y'  # '08/02/2020'\nSHORT_DATETIME_FORMAT = 'g:i A d/m/Y'  # '4:33 PM 08/02/2020'",
        "detail": "tabbycat.utils.formats.ms.formats",
        "documentation": {}
    },
    {
        "label": "TIME_FORMAT",
        "kind": 5,
        "importPath": "tabbycat.utils.formats.ms.formats",
        "description": "tabbycat.utils.formats.ms.formats",
        "peekOfCode": "TIME_FORMAT = 'g:i A'  # '4:33 PM'\nDATETIME_FORMAT = 'g:i A d/m/Y'  # '4:33 PM 08/02/2020'\nSHORT_DATE_FORMAT = 'd/m/Y'  # '08/02/2020'\nSHORT_DATETIME_FORMAT = 'g:i A d/m/Y'  # '4:33 PM 08/02/2020'",
        "detail": "tabbycat.utils.formats.ms.formats",
        "documentation": {}
    },
    {
        "label": "DATETIME_FORMAT",
        "kind": 5,
        "importPath": "tabbycat.utils.formats.ms.formats",
        "description": "tabbycat.utils.formats.ms.formats",
        "peekOfCode": "DATETIME_FORMAT = 'g:i A d/m/Y'  # '4:33 PM 08/02/2020'\nSHORT_DATE_FORMAT = 'd/m/Y'  # '08/02/2020'\nSHORT_DATETIME_FORMAT = 'g:i A d/m/Y'  # '4:33 PM 08/02/2020'",
        "detail": "tabbycat.utils.formats.ms.formats",
        "documentation": {}
    },
    {
        "label": "SHORT_DATE_FORMAT",
        "kind": 5,
        "importPath": "tabbycat.utils.formats.ms.formats",
        "description": "tabbycat.utils.formats.ms.formats",
        "peekOfCode": "SHORT_DATE_FORMAT = 'd/m/Y'  # '08/02/2020'\nSHORT_DATETIME_FORMAT = 'g:i A d/m/Y'  # '4:33 PM 08/02/2020'",
        "detail": "tabbycat.utils.formats.ms.formats",
        "documentation": {}
    },
    {
        "label": "SHORT_DATETIME_FORMAT",
        "kind": 5,
        "importPath": "tabbycat.utils.formats.ms.formats",
        "description": "tabbycat.utils.formats.ms.formats",
        "peekOfCode": "SHORT_DATETIME_FORMAT = 'g:i A d/m/Y'  # '4:33 PM 08/02/2020'",
        "detail": "tabbycat.utils.formats.ms.formats",
        "documentation": {}
    },
    {
        "label": "BADGE_DATETIME_FORMAT",
        "kind": 5,
        "importPath": "tabbycat.utils.formats.pt.formats",
        "description": "tabbycat.utils.formats.pt.formats",
        "peekOfCode": "BADGE_DATETIME_FORMAT = 'j b H:i'  # '8 fev 16:33'",
        "detail": "tabbycat.utils.formats.pt.formats",
        "documentation": {}
    },
    {
        "label": "BADGE_DATETIME_FORMAT",
        "kind": 5,
        "importPath": "tabbycat.utils.formats.ru.formats",
        "description": "tabbycat.utils.formats.ru.formats",
        "peekOfCode": "BADGE_DATETIME_FORMAT = 'H:i d.m'  # '16:33 08.02'",
        "detail": "tabbycat.utils.formats.ru.formats",
        "documentation": {}
    },
    {
        "label": "BADGE_DATETIME_FORMAT",
        "kind": 5,
        "importPath": "tabbycat.utils.formats.zh_Hans.formats",
        "description": "tabbycat.utils.formats.zh_Hans.formats",
        "peekOfCode": "BADGE_DATETIME_FORMAT = 'n月j日 H:i'  # '2月8日 16:33'",
        "detail": "tabbycat.utils.formats.zh_Hans.formats",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "tabbycat.utils.management.commands.clearcache",
        "description": "tabbycat.utils.management.commands.clearcache",
        "peekOfCode": "class Command(BaseCommand):\n    help = \"Clears django's cache\"\n    def handle(self, *args, **options):\n        cache.clear()\n        self.stdout.write(\"Cache has been cleared\")",
        "detail": "tabbycat.utils.management.commands.clearcache",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "tabbycat.utils.management.commands.simulaterounds",
        "description": "tabbycat.utils.management.commands.simulaterounds",
        "peekOfCode": "class Command(GenerateResultsCommandMixin, RoundCommand):\n    help = \"Adds draws and results to the database\"\n    confirm_round_destruction = \"delete ALL DEBATES\"\n    def handle_round(self, round, **options):\n        self.stdout.write(\"Deleting all debates in round '{}'...\".format(round.name))\n        Debate.objects.filter(round=round).delete()\n        round.draw_status = Round.Status.NONE\n        round.save()\n        self.stdout.write(\"Checking in all teams, adjudicators and rooms for round '{}'...\".format(round.name))\n        activate_all(round)",
        "detail": "tabbycat.utils.management.commands.simulaterounds",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "tabbycat.utils.management.commands.simulaterounds",
        "description": "tabbycat.utils.management.commands.simulaterounds",
        "peekOfCode": "User = get_user_model()\nclass Command(GenerateResultsCommandMixin, RoundCommand):\n    help = \"Adds draws and results to the database\"\n    confirm_round_destruction = \"delete ALL DEBATES\"\n    def handle_round(self, round, **options):\n        self.stdout.write(\"Deleting all debates in round '{}'...\".format(round.name))\n        Debate.objects.filter(round=round).delete()\n        round.draw_status = Round.Status.NONE\n        round.save()\n        self.stdout.write(\"Checking in all teams, adjudicators and rooms for round '{}'...\".format(round.name))",
        "detail": "tabbycat.utils.management.commands.simulaterounds",
        "documentation": {}
    },
    {
        "label": "TournamentCommand",
        "kind": 6,
        "importPath": "tabbycat.utils.management.base",
        "description": "tabbycat.utils.management.base",
        "peekOfCode": "class TournamentCommand(BaseCommand):\n    \"\"\"Implements common functionality for commands specific to a tournament.\n    Subclasses should override ``handle_tournament()`` rather than ``handle()``.\n    Subclasses that override ``add_arguments()`` must call\n        ``TournamentCommand``'s ``add_arguments()``, using\n        ``super(Command, self).add_arguments(parser)``.\n    If a subclass uses subparsers, the above line should be called once for\n        every subparser, passing it in as ``parser``.\n    \"\"\"\n    def add_arguments(self, parser):",
        "detail": "tabbycat.utils.management.base",
        "documentation": {}
    },
    {
        "label": "RoundCommand",
        "kind": 6,
        "importPath": "tabbycat.utils.management.base",
        "description": "tabbycat.utils.management.base",
        "peekOfCode": "class RoundCommand(TournamentCommand):\n    \"\"\"Implements common functionality for commands that relate to rounds.\n    If multiple tournaments are specified in command-line options, the rounds\n    specified in command-line options must all exist in every such tournament.\n    If any one round does not exist, the command will not run.\n    Subclasses should override ``handle_round()`` rather than ``handle()``\n    or ``handle_tournament()``.\n    Subclasses that override ``add_arguments()`` must call\n        ``RoundCommand``'s ``add_arguments()``, using\n        ``super(Command, self).add_arguments(parser)``.",
        "detail": "tabbycat.utils.management.base",
        "documentation": {}
    },
    {
        "label": "addcss",
        "kind": 2,
        "importPath": "tabbycat.utils.templatetags.add_field_css",
        "description": "tabbycat.utils.templatetags.add_field_css",
        "peekOfCode": "def addcss(field, css):\n    return field.as_widget(attrs={\"class\": css})\n@register.filter(name='addboundwidgetcss')\ndef addboundwidgetcss(widget, css):\n    widget.data.setdefault('attrs', {}).setdefault('class', '')\n    widget.data['attrs']['class'] += \" \" + css\n    return widget",
        "detail": "tabbycat.utils.templatetags.add_field_css",
        "documentation": {}
    },
    {
        "label": "addboundwidgetcss",
        "kind": 2,
        "importPath": "tabbycat.utils.templatetags.add_field_css",
        "description": "tabbycat.utils.templatetags.add_field_css",
        "peekOfCode": "def addboundwidgetcss(widget, css):\n    widget.data.setdefault('attrs', {}).setdefault('class', '')\n    widget.data['attrs']['class'] += \" \" + css\n    return widget",
        "detail": "tabbycat.utils.templatetags.add_field_css",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 5,
        "importPath": "tabbycat.utils.templatetags.add_field_css",
        "description": "tabbycat.utils.templatetags.add_field_css",
        "peekOfCode": "register = template.Library()\n@register.filter(name='addcss')\ndef addcss(field, css):\n    return field.as_widget(attrs={\"class\": css})\n@register.filter(name='addboundwidgetcss')\ndef addboundwidgetcss(widget, css):\n    widget.data.setdefault('attrs', {}).setdefault('class', '')\n    widget.data['attrs']['class'] += \" \" + css\n    return widget",
        "detail": "tabbycat.utils.templatetags.add_field_css",
        "documentation": {}
    },
    {
        "label": "TournamentURLNode",
        "kind": 6,
        "importPath": "tabbycat.utils.templatetags.debate_tags",
        "description": "tabbycat.utils.templatetags.debate_tags",
        "peekOfCode": "class TournamentURLNode(URLNode):\n    def __init__(self, view_name, args, kwargs, asvar):\n        self._args = args      # static copy, as we modify self.args in render()\n        self._kwargs = kwargs\n        super().__init__(view_name, args, kwargs, asvar)\n    def render(self, context):\n        \"\"\"Add the tournament in the context to the arguments, then render as\n        usual.\"\"\"\n        # In order to take advantage of the superclass's method, the easiest\n        # thing to do is to grab the string we want to insert, and turn it into",
        "detail": "tabbycat.utils.templatetags.debate_tags",
        "documentation": {}
    },
    {
        "label": "TournamentAbsoluteURLNode",
        "kind": 6,
        "importPath": "tabbycat.utils.templatetags.debate_tags",
        "description": "tabbycat.utils.templatetags.debate_tags",
        "peekOfCode": "class TournamentAbsoluteURLNode(TournamentURLNode):\n    def render(self, context):\n        path = super(TournamentAbsoluteURLNode, self).render(context)\n        if self.asvar:\n            context[self.asvar] = context['request'].build_absolute_uri(context[self.asvar])\n            return path\n        else:\n            return context['request'].build_absolute_uri(path)\nclass RoundURLNode(URLNode):\n    def __init__(self, view_name, args, kwargs, asvar):",
        "detail": "tabbycat.utils.templatetags.debate_tags",
        "documentation": {}
    },
    {
        "label": "RoundURLNode",
        "kind": 6,
        "importPath": "tabbycat.utils.templatetags.debate_tags",
        "description": "tabbycat.utils.templatetags.debate_tags",
        "peekOfCode": "class RoundURLNode(URLNode):\n    def __init__(self, view_name, args, kwargs, asvar):\n        # Pull round out of the arguments, then let URLNode do the rest.\n        if \"round\" in kwargs:\n            self.round = kwargs.pop(\"round\")\n        elif len(args) > 0:\n            self.round = args.pop(0)\n        else:\n            self.round = None  # None means take from context\n        self._args = args      # static copy, as we modify self.args in render()",
        "detail": "tabbycat.utils.templatetags.debate_tags",
        "documentation": {}
    },
    {
        "label": "version",
        "kind": 2,
        "importPath": "tabbycat.utils.templatetags.debate_tags",
        "description": "tabbycat.utils.templatetags.debate_tags",
        "peekOfCode": "def version(path_string, base_url=settings.MEDIA_URL):\n    if not hasattr(\n            settings,\n            'ENABLE_MEDIA_VERSIONING') or not settings.ENABLE_MEDIA_VERSIONING:\n        return base_url + path_string\n    try:\n        if path_string in version_cache:\n            mtime = version_cache[path_string]\n        else:\n            mtime = os.path.getmtime(os.path.join(settings.MEDIA_ROOT,",
        "detail": "tabbycat.utils.templatetags.debate_tags",
        "documentation": {}
    },
    {
        "label": "tournament_side_names",
        "kind": 2,
        "importPath": "tabbycat.utils.templatetags.debate_tags",
        "description": "tabbycat.utils.templatetags.debate_tags",
        "peekOfCode": "def tournament_side_names(context, name_type):\n    side_names = [get_side_name(context['tournament'], DebateSide.AFF, name_type),\n                  get_side_name(context['tournament'], DebateSide.NEG, name_type)]\n    return side_names\n@register.simple_tag(takes_context=True)\ndef debate_team_side_name(context, debate_team):\n    # If returned directly from the object it will have to lookup tournament\n    return debate_team.get_side_name(context['tournament'])\nclass TournamentURLNode(URLNode):\n    def __init__(self, view_name, args, kwargs, asvar):",
        "detail": "tabbycat.utils.templatetags.debate_tags",
        "documentation": {}
    },
    {
        "label": "debate_team_side_name",
        "kind": 2,
        "importPath": "tabbycat.utils.templatetags.debate_tags",
        "description": "tabbycat.utils.templatetags.debate_tags",
        "peekOfCode": "def debate_team_side_name(context, debate_team):\n    # If returned directly from the object it will have to lookup tournament\n    return debate_team.get_side_name(context['tournament'])\nclass TournamentURLNode(URLNode):\n    def __init__(self, view_name, args, kwargs, asvar):\n        self._args = args      # static copy, as we modify self.args in render()\n        self._kwargs = kwargs\n        super().__init__(view_name, args, kwargs, asvar)\n    def render(self, context):\n        \"\"\"Add the tournament in the context to the arguments, then render as",
        "detail": "tabbycat.utils.templatetags.debate_tags",
        "documentation": {}
    },
    {
        "label": "get_url_args",
        "kind": 2,
        "importPath": "tabbycat.utils.templatetags.debate_tags",
        "description": "tabbycat.utils.templatetags.debate_tags",
        "peekOfCode": "def get_url_args(parser, token):\n    \"\"\"Helper function, returns the arguments necessary to construct a URL node.\n    This code is copied directly from `url` in django/template/defaulttags.py,\n    except that instead of constructing a URL node with the identified\n    parameters, it simply returns the parameters in a tuple.\n    \"\"\"\n    bits = token.split_contents()\n    if len(bits) < 2:\n        raise TemplateSyntaxError(\"'%s' takes at least one argument, the name of a url().\" % bits[0])\n    viewname = parser.compile_filter(bits[1])",
        "detail": "tabbycat.utils.templatetags.debate_tags",
        "documentation": {}
    },
    {
        "label": "tournamenturl",
        "kind": 2,
        "importPath": "tabbycat.utils.templatetags.debate_tags",
        "description": "tabbycat.utils.templatetags.debate_tags",
        "peekOfCode": "def tournamenturl(parser, token):\n    \"\"\"Returns an absolute URL given the matching view for the given tournament,\n    or the tournament in the context if no tournament is given.\"\"\"\n    args = get_url_args(parser, token)\n    return TournamentURLNode(*args)\n@register.tag\ndef tournament_absurl(parser, token):\n    args = get_url_args(parser, token)\n    return TournamentAbsoluteURLNode(*args)\n@register.tag",
        "detail": "tabbycat.utils.templatetags.debate_tags",
        "documentation": {}
    },
    {
        "label": "tournament_absurl",
        "kind": 2,
        "importPath": "tabbycat.utils.templatetags.debate_tags",
        "description": "tabbycat.utils.templatetags.debate_tags",
        "peekOfCode": "def tournament_absurl(parser, token):\n    args = get_url_args(parser, token)\n    return TournamentAbsoluteURLNode(*args)\n@register.tag\ndef roundurl(parser, token):\n    \"\"\"Returns an absolute URL given the matching view for the given tournament\n    and round, or the tournament and round in the context if no tournament is\n    given.\"\"\"\n    args = get_url_args(parser, token)\n    return RoundURLNode(*args)",
        "detail": "tabbycat.utils.templatetags.debate_tags",
        "documentation": {}
    },
    {
        "label": "roundurl",
        "kind": 2,
        "importPath": "tabbycat.utils.templatetags.debate_tags",
        "description": "tabbycat.utils.templatetags.debate_tags",
        "peekOfCode": "def roundurl(parser, token):\n    \"\"\"Returns an absolute URL given the matching view for the given tournament\n    and round, or the tournament and round in the context if no tournament is\n    given.\"\"\"\n    args = get_url_args(parser, token)\n    return RoundURLNode(*args)\n@register.simple_tag(takes_context=True)\ndef person_display_name(context, person):\n    # If returned directly from the object it will have to lookup tournament\n    return person.get_public_name(context['tournament'])",
        "detail": "tabbycat.utils.templatetags.debate_tags",
        "documentation": {}
    },
    {
        "label": "person_display_name",
        "kind": 2,
        "importPath": "tabbycat.utils.templatetags.debate_tags",
        "description": "tabbycat.utils.templatetags.debate_tags",
        "peekOfCode": "def person_display_name(context, person):\n    # If returned directly from the object it will have to lookup tournament\n    return person.get_public_name(context['tournament'])\n@register.filter\ndef next_value(value, arg):\n    try:\n        return value[int(arg) + 1]\n    except Exception:\n        return None\n@register.filter",
        "detail": "tabbycat.utils.templatetags.debate_tags",
        "documentation": {}
    },
    {
        "label": "next_value",
        "kind": 2,
        "importPath": "tabbycat.utils.templatetags.debate_tags",
        "description": "tabbycat.utils.templatetags.debate_tags",
        "peekOfCode": "def next_value(value, arg):\n    try:\n        return value[int(arg) + 1]\n    except Exception:\n        return None\n@register.filter\ndef prev_value(value, arg):\n    try:\n        return value[int(arg) - 1]\n    except Exception:",
        "detail": "tabbycat.utils.templatetags.debate_tags",
        "documentation": {}
    },
    {
        "label": "prev_value",
        "kind": 2,
        "importPath": "tabbycat.utils.templatetags.debate_tags",
        "description": "tabbycat.utils.templatetags.debate_tags",
        "peekOfCode": "def prev_value(value, arg):\n    try:\n        return value[int(arg) - 1]\n    except Exception:\n        return None\n@register.filter(name='times')\ndef times(number):\n    return list(range(number))\n@register.simple_tag\ndef divide_to_int(number_a, number_b):",
        "detail": "tabbycat.utils.templatetags.debate_tags",
        "documentation": {}
    },
    {
        "label": "times",
        "kind": 2,
        "importPath": "tabbycat.utils.templatetags.debate_tags",
        "description": "tabbycat.utils.templatetags.debate_tags",
        "peekOfCode": "def times(number):\n    return list(range(number))\n@register.simple_tag\ndef divide_to_int(number_a, number_b):\n    try:\n        return int(int(number_a) / int(number_b))\n    except (ValueError, ZeroDivisionError):\n        return None\n@register.simple_tag\ndef get_unit(type):",
        "detail": "tabbycat.utils.templatetags.debate_tags",
        "documentation": {}
    },
    {
        "label": "divide_to_int",
        "kind": 2,
        "importPath": "tabbycat.utils.templatetags.debate_tags",
        "description": "tabbycat.utils.templatetags.debate_tags",
        "peekOfCode": "def divide_to_int(number_a, number_b):\n    try:\n        return int(int(number_a) / int(number_b))\n    except (ValueError, ZeroDivisionError):\n        return None\n@register.simple_tag\ndef get_unit(type):\n    return \"promotions/\" + type + \"-unit-\" + str(randint(0, 1)) + \".jpg\"\n@register.simple_tag\ndef percentage(number_a, number_b):",
        "detail": "tabbycat.utils.templatetags.debate_tags",
        "documentation": {}
    },
    {
        "label": "get_unit",
        "kind": 2,
        "importPath": "tabbycat.utils.templatetags.debate_tags",
        "description": "tabbycat.utils.templatetags.debate_tags",
        "peekOfCode": "def get_unit(type):\n    return \"promotions/\" + type + \"-unit-\" + str(randint(0, 1)) + \".jpg\"\n@register.simple_tag\ndef percentage(number_a, number_b):\n    if number_b > 0:\n        return number_a / number_b * 100 # Used for progress bars\n    else:\n        return 0\n@register.filter\ndef subtract(value, arg):",
        "detail": "tabbycat.utils.templatetags.debate_tags",
        "documentation": {}
    },
    {
        "label": "percentage",
        "kind": 2,
        "importPath": "tabbycat.utils.templatetags.debate_tags",
        "description": "tabbycat.utils.templatetags.debate_tags",
        "peekOfCode": "def percentage(number_a, number_b):\n    if number_b > 0:\n        return number_a / number_b * 100 # Used for progress bars\n    else:\n        return 0\n@register.filter\ndef subtract(value, arg):\n    return value - arg # Used in BP Motion Stats\n@register.filter(name='abbreviatename')\ndef abbreviatename(name):",
        "detail": "tabbycat.utils.templatetags.debate_tags",
        "documentation": {}
    },
    {
        "label": "subtract",
        "kind": 2,
        "importPath": "tabbycat.utils.templatetags.debate_tags",
        "description": "tabbycat.utils.templatetags.debate_tags",
        "peekOfCode": "def subtract(value, arg):\n    return value - arg # Used in BP Motion Stats\n@register.filter(name='abbreviatename')\ndef abbreviatename(name):\n    \"\"\"Takes a two-part name and returns an abbreviation like 'E.Lučić'.\"\"\"\n    parts = name.split(\" \")\n    return \"%s.%s\" % (parts[0][:5], parts[-1][:5]) # Used for barcodes\n@register.simple_tag\ndef prep_time():\n    return (datetime.now() + timedelta(minutes=15)).strftime('%Y-%m-%dT%H:%M')",
        "detail": "tabbycat.utils.templatetags.debate_tags",
        "documentation": {}
    },
    {
        "label": "abbreviatename",
        "kind": 2,
        "importPath": "tabbycat.utils.templatetags.debate_tags",
        "description": "tabbycat.utils.templatetags.debate_tags",
        "peekOfCode": "def abbreviatename(name):\n    \"\"\"Takes a two-part name and returns an abbreviation like 'E.Lučić'.\"\"\"\n    parts = name.split(\" \")\n    return \"%s.%s\" % (parts[0][:5], parts[-1][:5]) # Used for barcodes\n@register.simple_tag\ndef prep_time():\n    return (datetime.now() + timedelta(minutes=15)).strftime('%Y-%m-%dT%H:%M')\n@register.simple_tag(takes_context=True)\ndef haspermission(context, permission):\n    # If returned directly from the object it will have to lookup tournament",
        "detail": "tabbycat.utils.templatetags.debate_tags",
        "documentation": {}
    },
    {
        "label": "prep_time",
        "kind": 2,
        "importPath": "tabbycat.utils.templatetags.debate_tags",
        "description": "tabbycat.utils.templatetags.debate_tags",
        "peekOfCode": "def prep_time():\n    return (datetime.now() + timedelta(minutes=15)).strftime('%Y-%m-%dT%H:%M')\n@register.simple_tag(takes_context=True)\ndef haspermission(context, permission):\n    # If returned directly from the object it will have to lookup tournament\n    return has_permission(context['user'], permission, context['tournament'])",
        "detail": "tabbycat.utils.templatetags.debate_tags",
        "documentation": {}
    },
    {
        "label": "haspermission",
        "kind": 2,
        "importPath": "tabbycat.utils.templatetags.debate_tags",
        "description": "tabbycat.utils.templatetags.debate_tags",
        "peekOfCode": "def haspermission(context, permission):\n    # If returned directly from the object it will have to lookup tournament\n    return has_permission(context['user'], permission, context['tournament'])",
        "detail": "tabbycat.utils.templatetags.debate_tags",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 5,
        "importPath": "tabbycat.utils.templatetags.debate_tags",
        "description": "tabbycat.utils.templatetags.debate_tags",
        "peekOfCode": "register = template.Library()\nSTATIC_PATH = settings.MEDIA_ROOT\nversion_cache = {}\nrx = re.compile(r'^(.*)\\.(.*?)$')\n@register.simple_tag\ndef version(path_string, base_url=settings.MEDIA_URL):\n    if not hasattr(\n            settings,\n            'ENABLE_MEDIA_VERSIONING') or not settings.ENABLE_MEDIA_VERSIONING:\n        return base_url + path_string",
        "detail": "tabbycat.utils.templatetags.debate_tags",
        "documentation": {}
    },
    {
        "label": "STATIC_PATH",
        "kind": 5,
        "importPath": "tabbycat.utils.templatetags.debate_tags",
        "description": "tabbycat.utils.templatetags.debate_tags",
        "peekOfCode": "STATIC_PATH = settings.MEDIA_ROOT\nversion_cache = {}\nrx = re.compile(r'^(.*)\\.(.*?)$')\n@register.simple_tag\ndef version(path_string, base_url=settings.MEDIA_URL):\n    if not hasattr(\n            settings,\n            'ENABLE_MEDIA_VERSIONING') or not settings.ENABLE_MEDIA_VERSIONING:\n        return base_url + path_string\n    try:",
        "detail": "tabbycat.utils.templatetags.debate_tags",
        "documentation": {}
    },
    {
        "label": "version_cache",
        "kind": 5,
        "importPath": "tabbycat.utils.templatetags.debate_tags",
        "description": "tabbycat.utils.templatetags.debate_tags",
        "peekOfCode": "version_cache = {}\nrx = re.compile(r'^(.*)\\.(.*?)$')\n@register.simple_tag\ndef version(path_string, base_url=settings.MEDIA_URL):\n    if not hasattr(\n            settings,\n            'ENABLE_MEDIA_VERSIONING') or not settings.ENABLE_MEDIA_VERSIONING:\n        return base_url + path_string\n    try:\n        if path_string in version_cache:",
        "detail": "tabbycat.utils.templatetags.debate_tags",
        "documentation": {}
    },
    {
        "label": "rx",
        "kind": 5,
        "importPath": "tabbycat.utils.templatetags.debate_tags",
        "description": "tabbycat.utils.templatetags.debate_tags",
        "peekOfCode": "rx = re.compile(r'^(.*)\\.(.*?)$')\n@register.simple_tag\ndef version(path_string, base_url=settings.MEDIA_URL):\n    if not hasattr(\n            settings,\n            'ENABLE_MEDIA_VERSIONING') or not settings.ENABLE_MEDIA_VERSIONING:\n        return base_url + path_string\n    try:\n        if path_string in version_cache:\n            mtime = version_cache[path_string]",
        "detail": "tabbycat.utils.templatetags.debate_tags",
        "documentation": {}
    },
    {
        "label": "ModelAdmin",
        "kind": 6,
        "importPath": "tabbycat.utils.admin",
        "description": "tabbycat.utils.admin",
        "peekOfCode": "class ModelAdmin(admin.ModelAdmin):\n    def add_ip_to_message(self, request, message):\n        ip_address = get_ip_address(request)\n        if type(message) is list:  # JSON\n            message.append({'identity': {'ip': ip_address}})\n        else:\n            message += \"\\nIP: %s\" % (ip_address,)\n        return message\n    def log_addition(self, request, object, message):\n        return super().log_addition(request, object, self.add_ip_to_message(request, message))",
        "detail": "tabbycat.utils.admin",
        "documentation": {}
    },
    {
        "label": "TabbycatModelAdminFieldsMixin",
        "kind": 6,
        "importPath": "tabbycat.utils.admin",
        "description": "tabbycat.utils.admin",
        "peekOfCode": "class TabbycatModelAdminFieldsMixin:\n    @admin.display(description=_(\"Round\"))\n    def get_round(self, obj):\n        if hasattr(obj, 'debate'):\n            return obj.debate.round.name\n        else:\n            return obj.debate_team.debate.round.name\n    @admin.display(description=_(\"Team\"))\n    def get_team(self, obj):\n        return obj.debate_team.team",
        "detail": "tabbycat.utils.admin",
        "documentation": {}
    },
    {
        "label": "custom_titled_filter",
        "kind": 2,
        "importPath": "tabbycat.utils.admin",
        "description": "tabbycat.utils.admin",
        "peekOfCode": "def custom_titled_filter(title):\n    class Wrapper(admin.RelatedFieldListFilter):\n        def __new__(cls, *args, **kwargs):\n            instance = admin.FieldListFilter.create(*args, **kwargs)\n            instance.title = title\n            return instance\n    return Wrapper",
        "detail": "tabbycat.utils.admin",
        "documentation": {}
    },
    {
        "label": "debate_context",
        "kind": 2,
        "importPath": "tabbycat.utils.context_processors",
        "description": "tabbycat.utils.context_processors",
        "peekOfCode": "def debate_context(request):\n    context = {\n        'tabbycat_version': settings.TABBYCAT_VERSION or \"\",\n        'tabbycat_codename': settings.TABBYCAT_CODENAME or \"no codename\",\n        'all_tournaments': Tournament.objects.filter(active=True),\n        'disable_sentry': getattr(settings, 'DISABLE_SENTRY', False),\n        'on_local': getattr(settings, 'ON_LOCAL', False),\n        'hmr': getattr(settings, 'USE_WEBPACK_SERVER', False),\n    }\n    if hasattr(request, 'tournament'):",
        "detail": "tabbycat.utils.context_processors",
        "documentation": {}
    },
    {
        "label": "ChoiceArrayField",
        "kind": 6,
        "importPath": "tabbycat.utils.fields",
        "description": "tabbycat.utils.fields",
        "peekOfCode": "class ChoiceArrayField(ArrayField):\n    \"\"\"\n    Reference: https://gist.github.com/danni/f55c4ce19598b2b345ef\n    See also: https://code.djangoproject.com/ticket/27704\n    \"\"\"\n    def formfield(self, **kwargs):\n        defaults = {\n            'form_class': forms.TypedMultipleChoiceField,\n            'choices': self.base_field.choices,\n        }",
        "detail": "tabbycat.utils.fields",
        "documentation": {}
    },
    {
        "label": "LabelByNameModelChoiceField",
        "kind": 6,
        "importPath": "tabbycat.utils.fields",
        "description": "tabbycat.utils.fields",
        "peekOfCode": "class LabelByNameModelChoiceField(forms.ModelChoiceField):\n    \"\"\"ModelChoiceField that uses `obj.name` rather than `str(obj)` for labels.\"\"\"\n    def label_from_instance(self, obj):\n        return obj.name\nclass LabelByNameForeignKey(ForeignKey):\n    \"\"\"ForeignKey that uses `obj.name` rather than `str(obj)` for labels.\"\"\"\n    def formfield(self, **kwargs):\n        defaults = {'form_class': LabelByNameModelChoiceField}\n        defaults.update(kwargs)\n        return super().formfield(**defaults)",
        "detail": "tabbycat.utils.fields",
        "documentation": {}
    },
    {
        "label": "LabelByNameForeignKey",
        "kind": 6,
        "importPath": "tabbycat.utils.fields",
        "description": "tabbycat.utils.fields",
        "peekOfCode": "class LabelByNameForeignKey(ForeignKey):\n    \"\"\"ForeignKey that uses `obj.name` rather than `str(obj)` for labels.\"\"\"\n    def formfield(self, **kwargs):\n        defaults = {'form_class': LabelByNameModelChoiceField}\n        defaults.update(kwargs)\n        return super().formfield(**defaults)",
        "detail": "tabbycat.utils.fields",
        "documentation": {}
    },
    {
        "label": "OptionalChoiceField",
        "kind": 6,
        "importPath": "tabbycat.utils.forms",
        "description": "tabbycat.utils.forms",
        "peekOfCode": "class OptionalChoiceField(forms.ChoiceField):\n    def __init__(self, *args, **kwargs):\n        super(OptionalChoiceField, self).__init__(*args, **kwargs)\n        self.choices = [(None, '---------')] + list(self.choices)\nclass SelectPrepopulated(forms.TextInput):\n    template_name = 'select_prepopulated_widget.html'\n    def __init__(self, data_list, *args, **kwargs):\n        super(SelectPrepopulated, self).__init__(*args, **kwargs)\n        self.attrs.update({'data_list': data_list})",
        "detail": "tabbycat.utils.forms",
        "documentation": {}
    },
    {
        "label": "SelectPrepopulated",
        "kind": 6,
        "importPath": "tabbycat.utils.forms",
        "description": "tabbycat.utils.forms",
        "peekOfCode": "class SelectPrepopulated(forms.TextInput):\n    template_name = 'select_prepopulated_widget.html'\n    def __init__(self, data_list, *args, **kwargs):\n        super(SelectPrepopulated, self).__init__(*args, **kwargs)\n        self.attrs.update({'data_list': data_list})",
        "detail": "tabbycat.utils.forms",
        "documentation": {}
    },
    {
        "label": "ExceptFilter",
        "kind": 6,
        "importPath": "tabbycat.utils.logging",
        "description": "tabbycat.utils.logging",
        "peekOfCode": "class ExceptFilter(logging.Filter):\n    \"\"\"The negative of the base Python filter: Only allows records *not* below\n    a certain point in the logger hierarchy.\n    See: https://docs.python.org/3/library/logging.html#filter-objects\n    \"\"\"\n    def filter(self, record):\n        return not super().filter(record)",
        "detail": "tabbycat.utils.logging",
        "documentation": {}
    },
    {
        "label": "LookupByNameFieldsMixin",
        "kind": 6,
        "importPath": "tabbycat.utils.managers",
        "description": "tabbycat.utils.managers",
        "peekOfCode": "class LookupByNameFieldsMixin:\n    \"\"\"Adds the ability to look up by searching a number of name fields for an\n    exact match. For example, a model might have short names, long names and\n    abbreviations; this mixin would allow lookups that will match any of the\n    three.\n    This mixin should be added to managers (not models).\"\"\"\n    name_fields = []\n    def lookup(self, name, **kwargs):\n        if len(self.name_fields) < 1:\n            raise ImproperlyConfigured(\"There must be at least one name field in name_fields \"",
        "detail": "tabbycat.utils.managers",
        "documentation": {}
    },
    {
        "label": "DebateMiddleware",
        "kind": 6,
        "importPath": "tabbycat.utils.middleware",
        "description": "tabbycat.utils.middleware",
        "peekOfCode": "class DebateMiddleware(object):\n    def __init__(self, get_response):\n        self.get_response = get_response\n    def __call__(self, request):\n        response = self.get_response(request)\n        return response\n    def process_view(self, request, view_func, view_args, view_kwargs):\n        if 'tournament_slug' in view_kwargs and request.path.split('/')[1] != 'api':\n            cached_key = \"%s_%s\" % (view_kwargs['tournament_slug'], 'object')\n            cached_tournament_object = cache.get(cached_key)",
        "detail": "tabbycat.utils.middleware",
        "documentation": {}
    },
    {
        "label": "get_ip_address",
        "kind": 2,
        "importPath": "tabbycat.utils.misc",
        "description": "tabbycat.utils.misc",
        "peekOfCode": "def get_ip_address(request):\n    client_ip, is_routable = get_client_ip(request)\n    if client_ip is None:\n        return \"0.0.0.0\"\n    return client_ip\ndef redirect_tournament(to, tournament, *args, **kwargs):\n    return redirect(to, tournament_slug=tournament.slug, *args, **kwargs)\ndef reverse_tournament(to, tournament, *args, **kwargs):\n    kwargs.setdefault('kwargs', {})\n    kwargs['kwargs']['tournament_slug'] = tournament.slug",
        "detail": "tabbycat.utils.misc",
        "documentation": {}
    },
    {
        "label": "redirect_tournament",
        "kind": 2,
        "importPath": "tabbycat.utils.misc",
        "description": "tabbycat.utils.misc",
        "peekOfCode": "def redirect_tournament(to, tournament, *args, **kwargs):\n    return redirect(to, tournament_slug=tournament.slug, *args, **kwargs)\ndef reverse_tournament(to, tournament, *args, **kwargs):\n    kwargs.setdefault('kwargs', {})\n    kwargs['kwargs']['tournament_slug'] = tournament.slug\n    return reverse(to, *args, **kwargs)\ndef redirect_round(to, round, *args, **kwargs):\n    return redirect(to, tournament_slug=round.tournament.slug,\n                    round_seq=round.seq, *args, **kwargs)\ndef reverse_round(to, round, *args, **kwargs):",
        "detail": "tabbycat.utils.misc",
        "documentation": {}
    },
    {
        "label": "reverse_tournament",
        "kind": 2,
        "importPath": "tabbycat.utils.misc",
        "description": "tabbycat.utils.misc",
        "peekOfCode": "def reverse_tournament(to, tournament, *args, **kwargs):\n    kwargs.setdefault('kwargs', {})\n    kwargs['kwargs']['tournament_slug'] = tournament.slug\n    return reverse(to, *args, **kwargs)\ndef redirect_round(to, round, *args, **kwargs):\n    return redirect(to, tournament_slug=round.tournament.slug,\n                    round_seq=round.seq, *args, **kwargs)\ndef reverse_round(to, round, *args, **kwargs):\n    kwargs.setdefault('kwargs', {})\n    kwargs['kwargs']['tournament_slug'] = round.tournament.slug",
        "detail": "tabbycat.utils.misc",
        "documentation": {}
    },
    {
        "label": "redirect_round",
        "kind": 2,
        "importPath": "tabbycat.utils.misc",
        "description": "tabbycat.utils.misc",
        "peekOfCode": "def redirect_round(to, round, *args, **kwargs):\n    return redirect(to, tournament_slug=round.tournament.slug,\n                    round_seq=round.seq, *args, **kwargs)\ndef reverse_round(to, round, *args, **kwargs):\n    kwargs.setdefault('kwargs', {})\n    kwargs['kwargs']['tournament_slug'] = round.tournament.slug\n    kwargs['kwargs']['round_seq'] = round.seq\n    return reverse(to, *args, **kwargs)\ndef badge_datetime_format(timestamp):\n    lang = translation.get_language()",
        "detail": "tabbycat.utils.misc",
        "documentation": {}
    },
    {
        "label": "reverse_round",
        "kind": 2,
        "importPath": "tabbycat.utils.misc",
        "description": "tabbycat.utils.misc",
        "peekOfCode": "def reverse_round(to, round, *args, **kwargs):\n    kwargs.setdefault('kwargs', {})\n    kwargs['kwargs']['tournament_slug'] = round.tournament.slug\n    kwargs['kwargs']['round_seq'] = round.seq\n    return reverse(to, *args, **kwargs)\ndef badge_datetime_format(timestamp):\n    lang = translation.get_language()\n    for module in formats.get_format_modules(lang):\n        fmt = getattr(module, \"BADGE_DATETIME_FORMAT\", None)\n        if fmt is not None:",
        "detail": "tabbycat.utils.misc",
        "documentation": {}
    },
    {
        "label": "badge_datetime_format",
        "kind": 2,
        "importPath": "tabbycat.utils.misc",
        "description": "tabbycat.utils.misc",
        "peekOfCode": "def badge_datetime_format(timestamp):\n    lang = translation.get_language()\n    for module in formats.get_format_modules(lang):\n        fmt = getattr(module, \"BADGE_DATETIME_FORMAT\", None)\n        if fmt is not None:\n            break\n    else:\n        logger.error(\"No BADGE_DATETIME_FORMAT found for language: %s\", lang)\n        fmt = \"d/m H:i\"   # 18/02 16:33, as fallback in case nothing is defined\n    localized_time = timezone.localtime(timestamp)",
        "detail": "tabbycat.utils.misc",
        "documentation": {}
    },
    {
        "label": "ranks_dictionary",
        "kind": 2,
        "importPath": "tabbycat.utils.misc",
        "description": "tabbycat.utils.misc",
        "peekOfCode": "def ranks_dictionary(tournament, score_min, score_max):\n    \"\"\" Used for both adjudicator ranks and venue priorities \"\"\"\n    score_range = score_max - score_min\n    return [\n        {'pk': 'a+', 'fields': {'name': 'A+', 'cutoff': (score_range * 0.9) + score_min}},\n        {'pk': 'a',  'fields': {'name': 'A', 'cutoff': (score_range * 0.8) + score_min}},\n        {'pk': 'a-', 'fields': {'name': 'A-', 'cutoff': (score_range * 0.7) + score_min}},\n        {'pk': 'b+', 'fields': {'name': 'B+', 'cutoff': (score_range * 0.6) + score_min}},\n        {'pk': 'b',  'fields': {'name': 'B', 'cutoff': (score_range * 0.5) + score_min}},\n        {'pk': 'b-', 'fields': {'name': 'B-', 'cutoff': (score_range * 0.4) + score_min}},",
        "detail": "tabbycat.utils.misc",
        "documentation": {}
    },
    {
        "label": "generate_identifier_string",
        "kind": 2,
        "importPath": "tabbycat.utils.misc",
        "description": "tabbycat.utils.misc",
        "peekOfCode": "def generate_identifier_string(charset, length):\n    \"\"\"Used in privateurl/checkin identifier generation\"\"\"\n    return ''.join(SystemRandom().choice(charset) for _ in range(length))\ndef add_query_string_parameter(url, key, value):\n    scheme, netloc, path, params, query, fragment = urlparse(url)\n    query_parts = parse_qs(query)\n    query_parts[key] = value\n    query = urlencode(query_parts, safe='/')\n    return urlunparse((scheme, netloc, path, params, query, fragment))",
        "detail": "tabbycat.utils.misc",
        "documentation": {}
    },
    {
        "label": "add_query_string_parameter",
        "kind": 2,
        "importPath": "tabbycat.utils.misc",
        "description": "tabbycat.utils.misc",
        "peekOfCode": "def add_query_string_parameter(url, key, value):\n    scheme, netloc, path, params, query, fragment = urlparse(url)\n    query_parts = parse_qs(query)\n    query_parts[key] = value\n    query = urlencode(query_parts, safe='/')\n    return urlunparse((scheme, netloc, path, params, query, fragment))",
        "detail": "tabbycat.utils.misc",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "tabbycat.utils.misc",
        "description": "tabbycat.utils.misc",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef get_ip_address(request):\n    client_ip, is_routable = get_client_ip(request)\n    if client_ip is None:\n        return \"0.0.0.0\"\n    return client_ip\ndef redirect_tournament(to, tournament, *args, **kwargs):\n    return redirect(to, tournament_slug=tournament.slug, *args, **kwargs)\ndef reverse_tournament(to, tournament, *args, **kwargs):\n    kwargs.setdefault('kwargs', {})",
        "detail": "tabbycat.utils.misc",
        "documentation": {}
    },
    {
        "label": "TabbycatPageTitlesMixin",
        "kind": 6,
        "importPath": "tabbycat.utils.mixins",
        "description": "tabbycat.utils.mixins",
        "peekOfCode": "class TabbycatPageTitlesMixin(ContextMixin):\n    \"\"\"Allows all views to set header information in their subclassess obviating\n    the need for page template boilerplate and/or page specific templates\"\"\"\n    page_title = ''\n    page_subtitle = ''\n    page_emoji = ''\n    def get_page_title(self):\n        return self.page_title\n    def get_page_emoji(self):\n        return self.page_emoji",
        "detail": "tabbycat.utils.mixins",
        "documentation": {}
    },
    {
        "label": "AdministratorMixin",
        "kind": 6,
        "importPath": "tabbycat.utils.mixins",
        "description": "tabbycat.utils.mixins",
        "peekOfCode": "class AdministratorMixin(UserPassesTestMixin, ContextMixin):\n    \"\"\"Mixin for views that are for administrators.\"\"\"\n    view_role = \"admin\"\n    for_admin = True\n    view_permission: Optional['permission_type'] = None\n    edit_permission: Optional['permission_type'] = None\n    def get_context_data(self, **kwargs):\n        kwargs[\"user_role\"] = self.view_role\n        kwargs['can_edit'] = has_permission(self.request.user, self.get_edit_permission(), self.tournament) if hasattr(self, 'tournament') else None\n        return super().get_context_data(**kwargs)",
        "detail": "tabbycat.utils.mixins",
        "documentation": {}
    },
    {
        "label": "AssistantMixin",
        "kind": 6,
        "importPath": "tabbycat.utils.mixins",
        "description": "tabbycat.utils.mixins",
        "peekOfCode": "class AssistantMixin(LoginRequiredMixin, ContextMixin):\n    \"\"\"Mixin for views that are for assistants.\"\"\"\n    view_role = \"assistant\"\n    def get_context_data(self, **kwargs):\n        kwargs[\"user_role\"] = self.view_role\n        return super().get_context_data(**kwargs)\nclass AccessWebsocketMixin:\n    \"\"\"Checks the user's permissions before allowing a connection.\n    Classes using this mixin must inherit from WebsocketConsumer.\"\"\"\n    def connect(self):",
        "detail": "tabbycat.utils.mixins",
        "documentation": {}
    },
    {
        "label": "AccessWebsocketMixin",
        "kind": 6,
        "importPath": "tabbycat.utils.mixins",
        "description": "tabbycat.utils.mixins",
        "peekOfCode": "class AccessWebsocketMixin:\n    \"\"\"Checks the user's permissions before allowing a connection.\n    Classes using this mixin must inherit from WebsocketConsumer.\"\"\"\n    def connect(self):\n        if self.access_permitted():\n            return super().connect()\n        else:\n            return self.close()\nclass LoginRequiredWebsocketMixin(AccessWebsocketMixin):\n    def access_permitted(self):",
        "detail": "tabbycat.utils.mixins",
        "documentation": {}
    },
    {
        "label": "LoginRequiredWebsocketMixin",
        "kind": 6,
        "importPath": "tabbycat.utils.mixins",
        "description": "tabbycat.utils.mixins",
        "peekOfCode": "class LoginRequiredWebsocketMixin(AccessWebsocketMixin):\n    def access_permitted(self):\n        return self.scope[\"user\"].is_authenticated\nclass SuperuserRequiredWebsocketMixin(AccessWebsocketMixin):\n    access_permission = False\n    def access_permitted(self):\n        return has_permission(self.scope[\"user\"], self.access_permission, self.tournament)\n# ==============================================================================\n# Miscellaneous mixins\n# ==============================================================================",
        "detail": "tabbycat.utils.mixins",
        "documentation": {}
    },
    {
        "label": "SuperuserRequiredWebsocketMixin",
        "kind": 6,
        "importPath": "tabbycat.utils.mixins",
        "description": "tabbycat.utils.mixins",
        "peekOfCode": "class SuperuserRequiredWebsocketMixin(AccessWebsocketMixin):\n    access_permission = False\n    def access_permitted(self):\n        return has_permission(self.scope[\"user\"], self.access_permission, self.tournament)\n# ==============================================================================\n# Miscellaneous mixins\n# ==============================================================================\nclass WarnAboutDatabaseUseMixin(ContextMixin):\n    \"\"\"Mixin for views that should stop people exceeding database counts.\n    If a user has hit 8000 rows they have received Heroku's shut down",
        "detail": "tabbycat.utils.mixins",
        "documentation": {}
    },
    {
        "label": "WarnAboutDatabaseUseMixin",
        "kind": 6,
        "importPath": "tabbycat.utils.mixins",
        "description": "tabbycat.utils.mixins",
        "peekOfCode": "class WarnAboutDatabaseUseMixin(ContextMixin):\n    \"\"\"Mixin for views that should stop people exceeding database counts.\n    If a user has hit 8000 rows they have received Heroku's shut down\n    notification. They are probably fine to finish current tournament even if it\n    exceeds these limits because of the one-week grace period. However, they\n    should not create new tournaments as this typically happens after the grace\n    period and is thus subject to major disruptions.\"\"\"\n    def get_database_row_count(self):\n        cursor = connection.cursor()\n        cursor.execute(\"SELECT SUM(n_live_tup) FROM pg_stat_user_tables;\")",
        "detail": "tabbycat.utils.mixins",
        "documentation": {}
    },
    {
        "label": "WarnAboutLegacySendgridConfigVarsMixin",
        "kind": 6,
        "importPath": "tabbycat.utils.mixins",
        "description": "tabbycat.utils.mixins",
        "peekOfCode": "class WarnAboutLegacySendgridConfigVarsMixin(ContextMixin):\n    \"\"\"Mixin for views that should warn about legacy SendGrid settings that were\n    removed in version 2.6.0 (Ocicat).\n    When removing, also remove the relevant block in settings/heroku.py, and\n    templates/errors/legacy_sendgrid_warning.html (and references thereto).\n    \"\"\"\n    def get_context_data(self, **kwargs):\n        if self.request.user.is_authenticated and getattr(settings, 'USING_LEGACY_SENDGRID_CONFIG_VARS', False):\n            kwargs['using_legacy_sendgrid_config_vars'] = True\n        return super().get_context_data(**kwargs)",
        "detail": "tabbycat.utils.mixins",
        "documentation": {}
    },
    {
        "label": "CacheMixin",
        "kind": 6,
        "importPath": "tabbycat.utils.mixins",
        "description": "tabbycat.utils.mixins",
        "peekOfCode": "class CacheMixin:\n    \"\"\"Mixin for views that cache the page and need to update quickly.\"\"\"\n    cache_timeout = settings.PUBLIC_FAST_CACHE_TIMEOUT\n    @method_decorator(cache_page(cache_timeout))\n    def dispatch(self, *args, **kwargs):\n        return super().dispatch(*args, **kwargs)",
        "detail": "tabbycat.utils.mixins",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "tabbycat.utils.mixins",
        "description": "tabbycat.utils.mixins",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass TabbycatPageTitlesMixin(ContextMixin):\n    \"\"\"Allows all views to set header information in their subclassess obviating\n    the need for page template boilerplate and/or page specific templates\"\"\"\n    page_title = ''\n    page_subtitle = ''\n    page_emoji = ''\n    def get_page_title(self):\n        return self.page_title\n    def get_page_emoji(self):",
        "detail": "tabbycat.utils.mixins",
        "documentation": {}
    },
    {
        "label": "UniqueConstraint",
        "kind": 6,
        "importPath": "tabbycat.utils.models",
        "description": "tabbycat.utils.models",
        "peekOfCode": "class UniqueConstraint(models.UniqueConstraint):\n    def __init__(self, *expressions, fields=(), name=None, **kwargs):\n        if name is None:\n            name = '%(app_label).7s_%(class)s_' + \"__\".join(fields) + '_uniq'\n        return super().__init__(*expressions, fields=fields, name=name, **kwargs)",
        "detail": "tabbycat.utils.models",
        "documentation": {}
    },
    {
        "label": "VueDraggableItemMixin",
        "kind": 6,
        "importPath": "tabbycat.utils.serializers",
        "description": "tabbycat.utils.serializers",
        "peekOfCode": "class VueDraggableItemMixin(serializers.Serializer):\n    \"\"\" Provides properties that the front end sets for draggable items \"\"\"\n    vue_is_locked = serializers.BooleanField(default=False)\n    vue_last_modified = serializers.SerializerMethodField(read_only=True)\n    available = serializers.SerializerMethodField(read_only=True)\n    def get_available(self, debate_or_panel_adj):\n        \"\"\" Requires the queryset to be annotated with availabilities \"\"\"\n        return debate_or_panel_adj.available\n    def get_vue_last_modified(self, object):\n        \"\"\" Serialise modified as unix time to get around TZ issues in JS \"\"\"",
        "detail": "tabbycat.utils.serializers",
        "documentation": {}
    },
    {
        "label": "VenueCategorySerializer",
        "kind": 6,
        "importPath": "tabbycat.utils.serializers",
        "description": "tabbycat.utils.serializers",
        "peekOfCode": "class VenueCategorySerializer(serializers.ModelSerializer):\n    class Meta:\n        model = VenueCategory\n        fields = ('id', 'name', 'description')\nclass VenueSerializer(serializers.ModelSerializer):\n    \"\"\" Like the below class this cant live in venue/serializers as they depend\n    on the DebateSerializerMixin \"\"\"\n    categories = VenueCategorySerializer(many=True, source='venuecategory_set')\n    class Meta:\n        model = Venue",
        "detail": "tabbycat.utils.serializers",
        "documentation": {}
    },
    {
        "label": "VenueSerializer",
        "kind": 6,
        "importPath": "tabbycat.utils.serializers",
        "description": "tabbycat.utils.serializers",
        "peekOfCode": "class VenueSerializer(serializers.ModelSerializer):\n    \"\"\" Like the below class this cant live in venue/serializers as they depend\n    on the DebateSerializerMixin \"\"\"\n    categories = VenueCategorySerializer(many=True, source='venuecategory_set')\n    class Meta:\n        model = Venue\n        fields = ('id', 'name', 'display_name', 'priority', 'categories')\nclass DebateSerializerMixin(serializers.ModelSerializer):\n    \"\"\" Returns a basic debate object; overriden for each drag/drop view\"\"\"\n    \"\"\" This can't be defined in draw otherwise it creates circular imports \"\"\"",
        "detail": "tabbycat.utils.serializers",
        "documentation": {}
    },
    {
        "label": "DebateSerializerMixin",
        "kind": 6,
        "importPath": "tabbycat.utils.serializers",
        "description": "tabbycat.utils.serializers",
        "peekOfCode": "class DebateSerializerMixin(serializers.ModelSerializer):\n    \"\"\" Returns a basic debate object; overriden for each drag/drop view\"\"\"\n    \"\"\" This can't be defined in draw otherwise it creates circular imports \"\"\"\n    venue = VenueSerializer(read_only=True)\n    adjudicators = serializers.SerializerMethodField(read_only=True)\n    teams = serializers.SerializerMethodField(read_only=True)\n    sort_index = serializers.SerializerMethodField(read_only=True)\n    def adjudicator_representation(self, debate_or_panel_adj):\n        return AdjudicatorSerializer(debate_or_panel_adj.adjudicator).data\n    def debate_or_panel_adjudicators(self, obj):",
        "detail": "tabbycat.utils.serializers",
        "documentation": {}
    },
    {
        "label": "django_rest_json_render",
        "kind": 2,
        "importPath": "tabbycat.utils.serializers",
        "description": "tabbycat.utils.serializers",
        "peekOfCode": "def django_rest_json_render(data):\n    \"\"\" For some reason JSONRenderer produces byte strings which cant be parsed\n    into templates or sent over a websocket; so need to intermediate \"\"\"\n    return bytes.decode(JSONRenderer().render(data))\nclass VueDraggableItemMixin(serializers.Serializer):\n    \"\"\" Provides properties that the front end sets for draggable items \"\"\"\n    vue_is_locked = serializers.BooleanField(default=False)\n    vue_last_modified = serializers.SerializerMethodField(read_only=True)\n    available = serializers.SerializerMethodField(read_only=True)\n    def get_available(self, debate_or_panel_adj):",
        "detail": "tabbycat.utils.serializers",
        "documentation": {}
    },
    {
        "label": "BaseTableBuilder",
        "kind": 6,
        "importPath": "tabbycat.utils.tables",
        "description": "tabbycat.utils.tables",
        "peekOfCode": "class BaseTableBuilder:\n    \"\"\"Class for building tables that can be easily inserted into Vue tables,\n    Designed to be used with VueTableTemplateView.\n    In the docstrings for this class:\n    - A *header dict* is a dict that contains a value under `\"key\"` that is a\n      string, and may optionally contain entries under `\"tooltip\"`, `\"icon\"`,\n      `\"visible-sm\"`, `\"visible-md\"` and `\"visible-lg\"`.\n    - A *cell dict* is a dict that contains a value under `\"text\"` that is a\n      string, and may optionally contain entries under `\"sort\"`, `\"icon\"`,\n      `\"emoji\"`, `\"popover\"` and `\"link\"`.",
        "detail": "tabbycat.utils.tables",
        "documentation": {}
    },
    {
        "label": "FakeRequest",
        "kind": 6,
        "importPath": "tabbycat.utils.tables",
        "description": "tabbycat.utils.tables",
        "peekOfCode": "class FakeRequest(object):\n    user = AnonymousUser()\nclass TabbycatTableBuilder(BaseTableBuilder):\n    \"\"\"Extends TableBuilder to add convenience functions specific to\n    Tabbycat.\"\"\"\n    ADJ_SYMBOLS = {\n        AdjudicatorAllocation.POSITION_CHAIR: _(\"Ⓒ\"),\n        AdjudicatorAllocation.POSITION_ONLY: _(\"Ⓒ\"),\n        AdjudicatorAllocation.POSITION_TRAINEE: _(\"Ⓣ\"),\n    }",
        "detail": "tabbycat.utils.tables",
        "documentation": {}
    },
    {
        "label": "TabbycatTableBuilder",
        "kind": 6,
        "importPath": "tabbycat.utils.tables",
        "description": "tabbycat.utils.tables",
        "peekOfCode": "class TabbycatTableBuilder(BaseTableBuilder):\n    \"\"\"Extends TableBuilder to add convenience functions specific to\n    Tabbycat.\"\"\"\n    ADJ_SYMBOLS = {\n        AdjudicatorAllocation.POSITION_CHAIR: _(\"Ⓒ\"),\n        AdjudicatorAllocation.POSITION_ONLY: _(\"Ⓒ\"),\n        AdjudicatorAllocation.POSITION_TRAINEE: _(\"Ⓣ\"),\n    }\n    ADJ_POSITION_NAMES = {\n        AdjudicatorAllocation.POSITION_CHAIR: _(\"chair\"),",
        "detail": "tabbycat.utils.tables",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "tabbycat.utils.tables",
        "description": "tabbycat.utils.tables",
        "peekOfCode": "logger = logging.getLogger(__name__)\n_draw_flags_dict = dict(DRAW_FLAG_DESCRIPTIONS)\nclass BaseTableBuilder:\n    \"\"\"Class for building tables that can be easily inserted into Vue tables,\n    Designed to be used with VueTableTemplateView.\n    In the docstrings for this class:\n    - A *header dict* is a dict that contains a value under `\"key\"` that is a\n      string, and may optionally contain entries under `\"tooltip\"`, `\"icon\"`,\n      `\"visible-sm\"`, `\"visible-md\"` and `\"visible-lg\"`.\n    - A *cell dict* is a dict that contains a value under `\"text\"` that is a",
        "detail": "tabbycat.utils.tables",
        "documentation": {}
    },
    {
        "label": "_draw_flags_dict",
        "kind": 5,
        "importPath": "tabbycat.utils.tables",
        "description": "tabbycat.utils.tables",
        "peekOfCode": "_draw_flags_dict = dict(DRAW_FLAG_DESCRIPTIONS)\nclass BaseTableBuilder:\n    \"\"\"Class for building tables that can be easily inserted into Vue tables,\n    Designed to be used with VueTableTemplateView.\n    In the docstrings for this class:\n    - A *header dict* is a dict that contains a value under `\"key\"` that is a\n      string, and may optionally contain entries under `\"tooltip\"`, `\"icon\"`,\n      `\"visible-sm\"`, `\"visible-md\"` and `\"visible-lg\"`.\n    - A *cell dict* is a dict that contains a value under `\"text\"` that is a\n      string, and may optionally contain entries under `\"sort\"`, `\"icon\"`,",
        "detail": "tabbycat.utils.tables",
        "documentation": {}
    },
    {
        "label": "CompletedTournamentTestMixin",
        "kind": 6,
        "importPath": "tabbycat.utils.tests",
        "description": "tabbycat.utils.tests",
        "peekOfCode": "class CompletedTournamentTestMixin:\n    \"\"\"Mixin providing a few convenience functions for tests:\n      - Loads a completed demonstration tournament\n      - Assumes URLs are from said tournament and, optionally, a particular round\n    \"\"\"\n    fixtures = ['after_round_4.json']\n    round_seq = None\n    use_post = False\n    def get_tournament(self):\n        return Tournament.objects.first()",
        "detail": "tabbycat.utils.tests",
        "documentation": {}
    },
    {
        "label": "SingleViewTestMixin",
        "kind": 6,
        "importPath": "tabbycat.utils.tests",
        "description": "tabbycat.utils.tests",
        "peekOfCode": "class SingleViewTestMixin(CompletedTournamentTestMixin):\n    \"\"\"Mixin for TestCases relating to a single view.\"\"\"\n    view_name = None\n    view_reverse_kwargs = {}\n    def get_view_reverse_kwargs(self):\n        return self.view_reverse_kwargs.copy()\n    def get_response(self):\n        kwargs = self.get_view_reverse_kwargs()\n        response = super().get_response(self.view_name, **kwargs)\n        return response",
        "detail": "tabbycat.utils.tests",
        "documentation": {}
    },
    {
        "label": "TournamentViewSimpleLoadTestMixin",
        "kind": 6,
        "importPath": "tabbycat.utils.tests",
        "description": "tabbycat.utils.tests",
        "peekOfCode": "class TournamentViewSimpleLoadTestMixin(SingleViewTestMixin):\n    def test_response(self):\n        response = self.get_response()\n        self.assertResponseOK(response)\nclass AuthenticatedTournamentViewSimpleLoadTextMixin(SingleViewTestMixin):\n    def authenticate(self):\n        raise NotImplementedError\n    @expectedFailure\n    def test_authenticated_response(self):\n        self.authenticate()",
        "detail": "tabbycat.utils.tests",
        "documentation": {}
    },
    {
        "label": "AuthenticatedTournamentViewSimpleLoadTextMixin",
        "kind": 6,
        "importPath": "tabbycat.utils.tests",
        "description": "tabbycat.utils.tests",
        "peekOfCode": "class AuthenticatedTournamentViewSimpleLoadTextMixin(SingleViewTestMixin):\n    def authenticate(self):\n        raise NotImplementedError\n    @expectedFailure\n    def test_authenticated_response(self):\n        self.authenticate()\n        response = self.get_response()\n        self.assertResponseOK(response)\n    def test_unauthenticated_response(self):\n        self.client.logout()",
        "detail": "tabbycat.utils.tests",
        "documentation": {}
    },
    {
        "label": "AssistantTournamentViewSimpleLoadTestMixin",
        "kind": 6,
        "importPath": "tabbycat.utils.tests",
        "description": "tabbycat.utils.tests",
        "peekOfCode": "class AssistantTournamentViewSimpleLoadTestMixin(AuthenticatedTournamentViewSimpleLoadTextMixin):\n    \"\"\"Mixin for testing that assistant pages resolve when user is logged in,\n    and don't when user is logged out.\"\"\"\n    def authenticate(self):\n        user, _ = get_user_model().objects.get_or_create(username='test_assistant')\n        self.client.force_login(user)\n        # Double-check authentication, raise error if it looks wrong\n        if not get_user(self.client).is_authenticated:\n            raise RuntimeError(\"User authentication failed\")\nclass AdminTournamentViewSimpleLoadTestMixin(AuthenticatedTournamentViewSimpleLoadTextMixin):",
        "detail": "tabbycat.utils.tests",
        "documentation": {}
    },
    {
        "label": "AdminTournamentViewSimpleLoadTestMixin",
        "kind": 6,
        "importPath": "tabbycat.utils.tests",
        "description": "tabbycat.utils.tests",
        "peekOfCode": "class AdminTournamentViewSimpleLoadTestMixin(AuthenticatedTournamentViewSimpleLoadTextMixin):\n    \"\"\"Mixin for testing that admin pages resolve when user is logged in, and\n    don't when user is logged out.\"\"\"\n    def authenticate(self):\n        user, _ = get_user_model().objects.get_or_create(username='test_admin', is_superuser=True)\n        self.client.force_login(user)\n        # Double-check authentication, raise error if it looks wrong\n        user = get_user(self.client)\n        if not user.is_authenticated:\n            raise RuntimeError(\"User authentication failed\")",
        "detail": "tabbycat.utils.tests",
        "documentation": {}
    },
    {
        "label": "ConditionalTournamentTestsMixin",
        "kind": 6,
        "importPath": "tabbycat.utils.tests",
        "description": "tabbycat.utils.tests",
        "peekOfCode": "class ConditionalTournamentTestsMixin(SingleViewTestMixin):\n    \"\"\"Mixin that provides tests for testing a view class that is conditionally\n    shown depending on whether a user preference is set.\n    Subclasses must inherit from TestCase separately. This can't be a TestCase\n    subclass, because it provides tests which would be run on the base class.\"\"\"\n    view_toggle_preference = None\n    view_toggle_on_value = True\n    view_toggle_off_value = False\n    def validate_response(self, response):\n        raise NotImplementedError",
        "detail": "tabbycat.utils.tests",
        "documentation": {}
    },
    {
        "label": "ConditionalTournamentViewSimpleLoadTestMixin",
        "kind": 6,
        "importPath": "tabbycat.utils.tests",
        "description": "tabbycat.utils.tests",
        "peekOfCode": "class ConditionalTournamentViewSimpleLoadTestMixin(ConditionalTournamentTestsMixin):\n    \"\"\"Simply checks the view and only fails if an error is thrown\"\"\"\n    def validate_response(self, response):\n        pass\nclass TournamentTestCase(SingleViewTestMixin, TestCase):\n    \"\"\"Extension of django.test.TestCase that provides methods for testing a\n    populated view on a tournament, with a prepopulated database.\n    Selenium tests can't inherit from this otherwise fixtures won't be loaded;\n    as per https://stackoverflow.com/questions/12041315/how-to-have-django-test-case-and-selenium-server-use-same-database\"\"\"\n    pass",
        "detail": "tabbycat.utils.tests",
        "documentation": {}
    },
    {
        "label": "TournamentTestCase",
        "kind": 6,
        "importPath": "tabbycat.utils.tests",
        "description": "tabbycat.utils.tests",
        "peekOfCode": "class TournamentTestCase(SingleViewTestMixin, TestCase):\n    \"\"\"Extension of django.test.TestCase that provides methods for testing a\n    populated view on a tournament, with a prepopulated database.\n    Selenium tests can't inherit from this otherwise fixtures won't be loaded;\n    as per https://stackoverflow.com/questions/12041315/how-to-have-django-test-case-and-selenium-server-use-same-database\"\"\"\n    pass\nclass TableViewTestsMixin:\n    \"\"\"Mixin providing utility functions for table views.\"\"\"\n    def get_table_data(self, response):\n        self.assertIn('tables_data', response.context)",
        "detail": "tabbycat.utils.tests",
        "documentation": {}
    },
    {
        "label": "TableViewTestsMixin",
        "kind": 6,
        "importPath": "tabbycat.utils.tests",
        "description": "tabbycat.utils.tests",
        "peekOfCode": "class TableViewTestsMixin:\n    \"\"\"Mixin providing utility functions for table views.\"\"\"\n    def get_table_data(self, response):\n        self.assertIn('tables_data', response.context)\n        return json.loads(response.context['tables_data'])\n    def assertNoTables(self, response):  # noqa: N802\n        data = self.get_table_data(response)\n        self.assertEqual(len(data), 0)\n    def assertResponseTableRowCountsEqual(self, response, counts, allow_vacuous=False):  # noqa: N802\n        data = self.get_table_data(response)",
        "detail": "tabbycat.utils.tests",
        "documentation": {}
    },
    {
        "label": "ConditionalTableViewTestsMixin",
        "kind": 6,
        "importPath": "tabbycat.utils.tests",
        "description": "tabbycat.utils.tests",
        "peekOfCode": "class ConditionalTableViewTestsMixin(TableViewTestsMixin, ConditionalTournamentTestsMixin):\n    \"\"\"Combination of TableViewTestsMixin and ConditionalTournamentTestsMixin,\n    for convenience.\"\"\"\n    def validate_response(self, response):\n        counts = self.expected_row_counts()\n        self.assertResponseTableRowCountsEqual(response, counts)\n    def expected_row_counts(self):\n        raise NotImplementedError\nclass BaseMinimalTournamentTestCase(TestCase):\n    \"\"\"Currently used in availability and participants tests as a pseudo fixture",
        "detail": "tabbycat.utils.tests",
        "documentation": {}
    },
    {
        "label": "BaseMinimalTournamentTestCase",
        "kind": 6,
        "importPath": "tabbycat.utils.tests",
        "description": "tabbycat.utils.tests",
        "peekOfCode": "class BaseMinimalTournamentTestCase(TestCase):\n    \"\"\"Currently used in availability and participants tests as a pseudo fixture\n    to create the basic data to simulate simple tournament functions\"\"\"\n    def setUp(self):\n        super().setUp()\n        # add test models\n        self.tournament = Tournament.objects.create(slug=\"tournament\")\n        for i in range(4):\n            ins = Institution.objects.create(code=\"INS%s\" % i, name=\"Institution %s\" % i)\n            for j in range(3):",
        "detail": "tabbycat.utils.tests",
        "documentation": {}
    },
    {
        "label": "SeleniumTestCase",
        "kind": 6,
        "importPath": "tabbycat.utils.tests",
        "description": "tabbycat.utils.tests",
        "peekOfCode": "class SeleniumTestCase(StaticLiveServerTestCase):\n    \"\"\"Used to verify rendered html and javascript functionality on the site as\n    rendered. Opens a Chrome window and checks for JS/DOM state on the fixture\n    debate.\"\"\"\n    @classmethod\n    def setUpClass(cls):\n        super().setUpClass()\n        # Capabilities provide access to JS console\n        capabilities = DesiredCapabilities.CHROME\n        capabilities['loggingPrefs'] = {'browser': 'ALL'}",
        "detail": "tabbycat.utils.tests",
        "documentation": {}
    },
    {
        "label": "SeleniumTournamentTestCase",
        "kind": 6,
        "importPath": "tabbycat.utils.tests",
        "description": "tabbycat.utils.tests",
        "peekOfCode": "class SeleniumTournamentTestCase(SingleViewTestMixin, SeleniumTestCase):\n    \"\"\" Basically reimplementing BaseTournamentTest; but use cls not self \"\"\"\n    set_preferences = None\n    unset_preferences = None\n    def setUp(self):\n        super().setUp()\n        if self.set_preferences:\n            for pref in self.set_preferences:\n                self.tournament.preferences[pref] = True\n        if self.unset_preferences:",
        "detail": "tabbycat.utils.tests",
        "documentation": {}
    },
    {
        "label": "suppress_logs",
        "kind": 2,
        "importPath": "tabbycat.utils.tests",
        "description": "tabbycat.utils.tests",
        "peekOfCode": "def suppress_logs(name, level, returnto=logging.NOTSET):\n    \"\"\"Suppresses logging at or below `level` from the logger named `name` while\n    in the context manager. The name of the logger must be provided, and as a\n    matter of practice should be as specific as possible, to avoid overly\n    suppressing logs.\n    Usage:\n        import logging\n        from utils.tests import suppress_logs\n        with suppress_logs('results.result', logging.WARNING): # or other level\n            # test code",
        "detail": "tabbycat.utils.tests",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "tabbycat.utils.tests",
        "description": "tabbycat.utils.tests",
        "peekOfCode": "logger = logging.getLogger(__name__)\n@contextmanager\ndef suppress_logs(name, level, returnto=logging.NOTSET):\n    \"\"\"Suppresses logging at or below `level` from the logger named `name` while\n    in the context manager. The name of the logger must be provided, and as a\n    matter of practice should be as specific as possible, to avoid overly\n    suppressing logs.\n    Usage:\n        import logging\n        from utils.tests import suppress_logs",
        "detail": "tabbycat.utils.tests",
        "documentation": {}
    },
    {
        "label": "PostOnlyRedirectView",
        "kind": 6,
        "importPath": "tabbycat.utils.views",
        "description": "tabbycat.utils.views",
        "peekOfCode": "class PostOnlyRedirectView(View):\n    \"\"\"Base class for views that only accept POST requests.\n    Current implementation redirects to a specified page (by default the home\n    page) if a client tries to use a GET request, and shows and logs an error\n    message. We might change this in the future just to return HTTP status code\n    405 (HTTP method not allowed).\n    Views using this class probably want to override both `post()` and\n    `get_redirect_url()`. It is assumed that the same redirect will be desired\n    the same whether GET or POST is used; it's just that a GET request won't\n    do database edits.",
        "detail": "tabbycat.utils.views",
        "documentation": {}
    },
    {
        "label": "VueTableTemplateView",
        "kind": 6,
        "importPath": "tabbycat.utils.views",
        "description": "tabbycat.utils.views",
        "peekOfCode": "class VueTableTemplateView(TemplateView):\n    \"\"\"Mixin that provides shortcuts for adding data when building arrays that\n    will end up as rows within a Vue table. Each cell can be represented\n    either as a string value or a dictionary to enable richer inline content\n    (emoji, links, etc). Functions below return blocks of content (ie not just\n     a team name row, but also institution/category status as needed).\"\"\"\n    template_name = 'tables/base_vue_table.html'\n    tables_orientation = 'columns' # Layout option: tables as rows or as columns\n    def get_context_data(self, **kwargs):\n        tables = self.get_tables()",
        "detail": "tabbycat.utils.views",
        "documentation": {}
    },
    {
        "label": "FormSetMixin",
        "kind": 6,
        "importPath": "tabbycat.utils.views",
        "description": "tabbycat.utils.views",
        "peekOfCode": "class FormSetMixin(ContextMixin):\n    \"\"\"Provides some functionality for formsets, analogously to FormMixin.\n    Only what is actually used in Tabbycat is implemented.\"\"\"\n    success_url = None\n    def get_context_data(self, **kwargs):\n        if 'formset' not in kwargs:\n            kwargs['formset'] = self.get_formset()\n        return super().get_context_data(**kwargs)\n    def formset_valid(self, formset):\n        return HttpResponseRedirect(self.get_success_url())",
        "detail": "tabbycat.utils.views",
        "documentation": {}
    },
    {
        "label": "ModelFormSetMixin",
        "kind": 6,
        "importPath": "tabbycat.utils.views",
        "description": "tabbycat.utils.views",
        "peekOfCode": "class ModelFormSetMixin(FormSetMixin):\n    \"\"\"Provides some functionality for model formsets, analogously to\n    ModelFormMixin. Only what is actually used in Tabbycat is implemented.\"\"\"\n    formset_factory_kwargs = {}\n    formset_model = None  # not 'model' to avoid conflicts with SingleObjectMixin\n    def get_formset_factory_kwargs(self):\n        return self.formset_factory_kwargs.copy()\n    def get_formset_class(self):\n        return modelformset_factory(self.formset_model, **self.get_formset_factory_kwargs())\n    def get_formset_kwargs(self):",
        "detail": "tabbycat.utils.views",
        "documentation": {}
    },
    {
        "label": "ProcessFormSetView",
        "kind": 6,
        "importPath": "tabbycat.utils.views",
        "description": "tabbycat.utils.views",
        "peekOfCode": "class ProcessFormSetView(View):\n    \"\"\"Provides some functionality for model formsets, analogously to\n    ProcessFormView.\"\"\"\n    def get(self, request, *args, **kwargs):\n        return self.render_to_response(self.get_context_data())\n    def post(self, request, *args, **kwargs):\n        formset = self.get_formset()\n        if formset.is_valid():\n            return self.formset_valid(formset)\n        else:",
        "detail": "tabbycat.utils.views",
        "documentation": {}
    },
    {
        "label": "ModelFormSetView",
        "kind": 6,
        "importPath": "tabbycat.utils.views",
        "description": "tabbycat.utils.views",
        "peekOfCode": "class ModelFormSetView(ModelFormSetMixin, TemplateResponseMixin, ProcessFormSetView):\n    pass",
        "detail": "tabbycat.utils.views",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "tabbycat.utils.views",
        "description": "tabbycat.utils.views",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass PostOnlyRedirectView(View):\n    \"\"\"Base class for views that only accept POST requests.\n    Current implementation redirects to a specified page (by default the home\n    page) if a client tries to use a GET request, and shows and logs an error\n    message. We might change this in the future just to return HTTP status code\n    405 (HTTP method not allowed).\n    Views using this class probably want to override both `post()` and\n    `get_redirect_url()`. It is assumed that the same redirect will be desired\n    the same whether GET or POST is used; it's just that a GET request won't",
        "detail": "tabbycat.utils.views",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "tabbycat.venues.management.commands.allocatevenues",
        "description": "tabbycat.venues.management.commands.allocatevenues",
        "peekOfCode": "class Command(RoundCommand):\n    help = \"Assigns rooms for all debates in a round (or rounds).\"\n    def handle_round(self, round, **options):\n        self.stdout.write(\"Assigning rooms for all debates in round '{}'...\".format(round.name))\n        allocate_venues(round)",
        "detail": "tabbycat.venues.management.commands.allocatevenues",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.venues.migrations.0001_initial",
        "description": "tabbycat.venues.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('tournaments', '0001_initial'),\n        ('contenttypes', '0002_remove_content_type_name'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Venue',\n            fields=[",
        "detail": "tabbycat.venues.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.venues.migrations.0002_auto_20180218_1311",
        "description": "tabbycat.venues.migrations.0002_auto_20180218_1311",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('venues', '0001_initial'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='venueconstraint',\n            name='subject_content_type',\n            field=models.ForeignKey(limit_choices_to=django.db.models.query_utils.Q(django.db.models.query_utils.Q(('app_label', 'participants'), ('model', 'team'), _connector='AND'), django.db.models.query_utils.Q(('app_label', 'participants'), ('model', 'adjudicator'), _connector='AND'), django.db.models.query_utils.Q(('app_label', 'participants'), ('model', 'institution'), _connector='AND'), django.db.models.query_utils.Q(('app_label', 'divisions'), ('model', 'division'), _connector='AND'), _connector='OR'), on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType', verbose_name='subject content type'),\n        ),",
        "detail": "tabbycat.venues.migrations.0002_auto_20180218_1311",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.venues.migrations.0003_auto_20180305_1544",
        "description": "tabbycat.venues.migrations.0003_auto_20180305_1544",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('venues', '0002_auto_20180218_1311'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='venueconstraint',\n            name='subject_content_type',\n            field=models.ForeignKey(limit_choices_to=django.db.models.query_utils.Q(django.db.models.query_utils.Q(('model', 'team'), ('app_label', 'participants'), _connector='AND'), django.db.models.query_utils.Q(('model', 'adjudicator'), ('app_label', 'participants'), _connector='AND'), django.db.models.query_utils.Q(('model', 'institution'), ('app_label', 'participants'), _connector='AND'), django.db.models.query_utils.Q(('model', 'division'), ('app_label', 'divisions'), _connector='AND'), _connector='OR'), on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType', verbose_name='subject content type'),\n        ),",
        "detail": "tabbycat.venues.migrations.0003_auto_20180305_1544",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.venues.migrations.0004_auto_20180307_2217",
        "description": "tabbycat.venues.migrations.0004_auto_20180307_2217",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('venues', '0003_auto_20180305_1544'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='venueconstraint',\n            name='subject_content_type',\n            field=models.ForeignKey(limit_choices_to=django.db.models.query_utils.Q(django.db.models.query_utils.Q(('app_label', 'participants'), ('model', 'team'), _connector='AND'), django.db.models.query_utils.Q(('app_label', 'participants'), ('model', 'adjudicator'), _connector='AND'), django.db.models.query_utils.Q(('app_label', 'participants'), ('model', 'institution'), _connector='AND'), django.db.models.query_utils.Q(('app_label', 'divisions'), ('model', 'division'), _connector='AND'), _connector='OR'), on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType', verbose_name='subject content type'),\n        ),",
        "detail": "tabbycat.venues.migrations.0004_auto_20180307_2217",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.venues.migrations.0005_remove_league_fields",
        "description": "tabbycat.venues.migrations.0005_remove_league_fields",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('venues', '0004_auto_20180307_2217'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='venueconstraint',\n            name='subject_content_type',\n            field=models.ForeignKey(limit_choices_to=models.Q(models.Q(('app_label', 'participants'), ('model', 'team')), models.Q(('app_label', 'participants'), ('model', 'adjudicator')), models.Q(('app_label', 'participants'), ('model', 'institution')), _connector='OR'), on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType', verbose_name='subject content type'),\n        ),",
        "detail": "tabbycat.venues.migrations.0005_remove_league_fields",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.venues.migrations.0006_auto_20191217_1024",
        "description": "tabbycat.venues.migrations.0006_auto_20191217_1024",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('tournaments', '0006_auto_20191109_1240'),\n        ('venues', '0005_remove_league_fields'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='venuecategory',\n            name='tournament',\n            field=models.ForeignKey(blank=False, null=True, on_delete=django.db.models.deletion.CASCADE, to='tournaments.Tournament', verbose_name='tournament'),",
        "detail": "tabbycat.venues.migrations.0006_auto_20191217_1024",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.venues.migrations.0007_auto_20200608_1134",
        "description": "tabbycat.venues.migrations.0007_auto_20200608_1134",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('venues', '0006_auto_20191217_1024'),\n    ]\n    operations = [\n        migrations.AlterModelOptions(\n            name='venue',\n            options={'ordering': ['name'], 'verbose_name': 'room', 'verbose_name_plural': 'rooms'},\n        ),\n        migrations.AlterModelOptions(",
        "detail": "tabbycat.venues.migrations.0007_auto_20200608_1134",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.venues.migrations.0008_auto_20200705_1525",
        "description": "tabbycat.venues.migrations.0008_auto_20200705_1525",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('venues', '0007_auto_20200608_1134'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='venue',\n            name='url',\n            field=models.URLField(blank=True, help_text='A URL that contains extra information about this room, e.g. a map or a meeting link (for online tournaments)', verbose_name='URL'),\n        ),",
        "detail": "tabbycat.venues.migrations.0008_auto_20200705_1525",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.venues.migrations.0009_auto_20210307_1810",
        "description": "tabbycat.venues.migrations.0009_auto_20210307_1810",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('contenttypes', '0002_remove_content_type_name'),\n        ('venues', '0008_auto_20200705_1525'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='venueconstraint',\n            name='subject_content_type',\n            field=utils.fields.LabelByNameForeignKey(limit_choices_to=models.Q(models.Q(('app_label', 'participants'), ('model', 'team')), models.Q(('app_label', 'participants'), ('model', 'adjudicator')), models.Q(('app_label', 'participants'), ('model', 'institution')), _connector='OR'), on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype', verbose_name='subject content type'),",
        "detail": "tabbycat.venues.migrations.0009_auto_20210307_1810",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.venues.migrations.0010_populate_tournaments",
        "description": "tabbycat.venues.migrations.0010_populate_tournaments",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('venues', '0009_auto_20210307_1810'),\n    ]\n    operations = [\n        migrations.RunPython(find_venue_tournament, migrations.RunPython.noop),\n        migrations.RunPython(find_venuecat_tournament, migrations.RunPython.noop),\n        migrations.RunPython(find_venue_tournament_via_category, migrations.RunPython.noop),\n    ]",
        "detail": "tabbycat.venues.migrations.0010_populate_tournaments",
        "documentation": {}
    },
    {
        "label": "find_venue_tournament",
        "kind": 2,
        "importPath": "tabbycat.venues.migrations.0010_populate_tournaments",
        "description": "tabbycat.venues.migrations.0010_populate_tournaments",
        "peekOfCode": "def find_venue_tournament(apps, schema_editor):\n    Venue = apps.get_model('venues', 'Venue')\n    Debate = apps.get_model('draw', 'Debate')\n    venues = []\n    venue_qs = Venue.objects.prefetch_related(\n        models.Prefetch('debate_set__round', queryset=Debate.objects.order_by('round').all()),\n        'venuecategory_set',\n    ).filter(tournament__isnull=True)\n    for v in venue_qs:\n        cats = [c for c in v.venuecategory_set.all()]",
        "detail": "tabbycat.venues.migrations.0010_populate_tournaments",
        "documentation": {}
    },
    {
        "label": "find_venuecat_tournament",
        "kind": 2,
        "importPath": "tabbycat.venues.migrations.0010_populate_tournaments",
        "description": "tabbycat.venues.migrations.0010_populate_tournaments",
        "peekOfCode": "def find_venuecat_tournament(apps, schema_editor):\n    VenueCategory = apps.get_model('venues', 'VenueCategory')\n    venuecategories = []\n    for vc in VenueCategory.objects.prefetch_related('venues').filter(tournament__isnull=True):\n        venue_sets = dict(groupby(vc.venues.all(), key=lambda x: x.tournament_id))\n        tournaments = set(venue_sets.keys())\n        if len(tournaments) == 1:\n            vc.tournament_id = next(iter(tournaments))\n            venuecategories.append(vc)\n        elif len(tournaments) > 1:",
        "detail": "tabbycat.venues.migrations.0010_populate_tournaments",
        "documentation": {}
    },
    {
        "label": "find_venue_tournament_via_category",
        "kind": 2,
        "importPath": "tabbycat.venues.migrations.0010_populate_tournaments",
        "description": "tabbycat.venues.migrations.0010_populate_tournaments",
        "peekOfCode": "def find_venue_tournament_via_category(apps, schema_editor):\n    Venue = apps.get_model('venues', 'Venue')\n    VenueCategory = apps.get_model('venues', 'VenueCategory')\n    venues = []\n    venue_qs = Venue.objects.prefetch_related(\n        models.Prefetch('venuecategory_set', queryset=VenueCategory.objects.filter(tournament__isnull=False)),\n    ).filter(tournament__isnull=True)\n    for v in venue_qs:\n        category_sets = dict(groupby(v.venuecategory_set.all(), key=lambda x: x.tournament_id))\n        if len(category_sets) == 1:",
        "detail": "tabbycat.venues.migrations.0010_populate_tournaments",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "tabbycat.venues.migrations.0011_alter_venue_options_alter_venue_index_together_and_more",
        "description": "tabbycat.venues.migrations.0011_alter_venue_options_alter_venue_index_together_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('tournaments', '0012_alter_round_unique_together_and_more'),\n        ('venues', '0010_populate_tournaments'),\n    ]\n    operations = [\n        migrations.AlterModelOptions(\n            name='venue',\n            options={'ordering': ['tournament', 'name'], 'verbose_name': 'room', 'verbose_name_plural': 'rooms'},\n        ),",
        "detail": "tabbycat.venues.migrations.0011_alter_venue_options_alter_venue_index_together_and_more",
        "documentation": {}
    },
    {
        "label": "EditDebateVenuesViewTest",
        "kind": 6,
        "importPath": "tabbycat.venues.tests.test_views",
        "description": "tabbycat.venues.tests.test_views",
        "peekOfCode": "class EditDebateVenuesViewTest(AdminTournamentViewSimpleLoadTestMixin, TestCase):\n    view_name = 'edit-debate-venues'\n    round_seq = 4",
        "detail": "tabbycat.venues.tests.test_views",
        "documentation": {}
    },
    {
        "label": "VenueAdmin",
        "kind": 6,
        "importPath": "tabbycat.venues.admin",
        "description": "tabbycat.venues.admin",
        "peekOfCode": "class VenueAdmin(ModelAdmin):\n    list_display = ('display_name', 'priority', 'tournament', 'categories_list')\n    list_filter = ('venuecategory', 'priority', 'tournament')\n    search_fields = ('name',)\n    inlines = (RoundAvailabilityInline,)\n    def categories_list(self, obj):\n        return \", \".join([c.name for c in obj.venuecategory_set.all()])\n    def get_queryset(self, request):\n        return super().get_queryset(request).select_related(\n                'tournament').prefetch_related('venuecategory_set')",
        "detail": "tabbycat.venues.admin",
        "documentation": {}
    },
    {
        "label": "VenueCategoryAdmin",
        "kind": 6,
        "importPath": "tabbycat.venues.admin",
        "description": "tabbycat.venues.admin",
        "peekOfCode": "class VenueCategoryAdmin(ModelAdmin):\n    list_display = ('name', 'description', 'display_in_venue_name',\n            'display_in_public_tooltip', 'venues_list')\n    ordering = ('name',)\n    def venues_list(self, obj):\n        return \", \".join([v.name for v in obj.venues.all()])\n    def get_queryset(self, request):\n        return super().get_queryset(request).prefetch_related('venues')\nclass VenueConstraintModelForm(forms.ModelForm):\n    class Meta(object):",
        "detail": "tabbycat.venues.admin",
        "documentation": {}
    },
    {
        "label": "VenueConstraintModelForm",
        "kind": 6,
        "importPath": "tabbycat.venues.admin",
        "description": "tabbycat.venues.admin",
        "peekOfCode": "class VenueConstraintModelForm(forms.ModelForm):\n    class Meta(object):\n        model = VenueConstraint\n        fields = '__all__'\n        widgets = {\n            'subject_id': GfkLookupWidget(\n                content_type_field_name='subject_content_type',\n                parent_field=VenueConstraint._meta.get_field('subject_content_type'),\n            ),\n        }",
        "detail": "tabbycat.venues.admin",
        "documentation": {}
    },
    {
        "label": "VenueConstraintAdmin",
        "kind": 6,
        "importPath": "tabbycat.venues.admin",
        "description": "tabbycat.venues.admin",
        "peekOfCode": "class VenueConstraintAdmin(ModelAdmin):\n    form = VenueConstraintModelForm\n    list_display = ('subject', 'category', 'priority')\n    search_fields = ('adjudicator__name', 'adjudicator__institution__code',\n            'adjudicator__institution__name', 'team__short_name', 'team__long_name',\n            'institution__name', 'institution__code',\n            'category__name', 'priority')\n    list_filter = ('subject_content_type', 'category', 'priority')\n    ordering = ('subject_content_type', 'category')\n    def get_queryset(self, request):",
        "detail": "tabbycat.venues.admin",
        "documentation": {}
    },
    {
        "label": "VenueConstraintInline",
        "kind": 6,
        "importPath": "tabbycat.venues.admin",
        "description": "tabbycat.venues.admin",
        "peekOfCode": "class VenueConstraintInline(GenericTabularInline):\n    model = VenueConstraint\n    ct_field = 'subject_content_type'\n    ct_fk_field = 'subject_id'\n    extra = 6",
        "detail": "tabbycat.venues.admin",
        "documentation": {}
    },
    {
        "label": "VenueAllocator",
        "kind": 6,
        "importPath": "tabbycat.venues.allocator",
        "description": "tabbycat.venues.allocator",
        "peekOfCode": "class VenueAllocator:\n    \"\"\"Allocates venues in a draw to satisfy, as best it can, applicable venue\n    constraints.\n    The algorithm naïvely allocates from the debate with the highest-priority\n    constraint to the debate with the lowest-priority constraint, choosing at\n    random if more than one is available. This isn't guaranteed to be optimal,\n    since a flexible high-priority debate might randomly choose a room demanded\n    by a picky low-priority room.\n    \"\"\"\n    def allocate(self, round, debates=None):",
        "detail": "tabbycat.venues.allocator",
        "documentation": {}
    },
    {
        "label": "allocate_venues",
        "kind": 2,
        "importPath": "tabbycat.venues.allocator",
        "description": "tabbycat.venues.allocator",
        "peekOfCode": "def allocate_venues(round, debates=None):\n    allocator = VenueAllocator()\n    allocator.allocate(round, debates)\nclass VenueAllocator:\n    \"\"\"Allocates venues in a draw to satisfy, as best it can, applicable venue\n    constraints.\n    The algorithm naïvely allocates from the debate with the highest-priority\n    constraint to the debate with the lowest-priority constraint, choosing at\n    random if more than one is available. This isn't guaranteed to be optimal,\n    since a flexible high-priority debate might randomly choose a room demanded",
        "detail": "tabbycat.venues.allocator",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "tabbycat.venues.allocator",
        "description": "tabbycat.venues.allocator",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef allocate_venues(round, debates=None):\n    allocator = VenueAllocator()\n    allocator.allocate(round, debates)\nclass VenueAllocator:\n    \"\"\"Allocates venues in a draw to satisfy, as best it can, applicable venue\n    constraints.\n    The algorithm naïvely allocates from the debate with the highest-priority\n    constraint to the debate with the lowest-priority constraint, choosing at\n    random if more than one is available. This isn't guaranteed to be optimal,",
        "detail": "tabbycat.venues.allocator",
        "documentation": {}
    },
    {
        "label": "VenuesConfig",
        "kind": 6,
        "importPath": "tabbycat.venues.apps",
        "description": "tabbycat.venues.apps",
        "peekOfCode": "class VenuesConfig(AppConfig):\n    name = 'venues'\n    verbose_name = _(\"Rooms\")",
        "detail": "tabbycat.venues.apps",
        "documentation": {}
    },
    {
        "label": "VenuesWorkerConsumer",
        "kind": 6,
        "importPath": "tabbycat.venues.consumers",
        "description": "tabbycat.venues.consumers",
        "peekOfCode": "class VenuesWorkerConsumer(EditDebateOrPanelWorkerMixin):\n    def allocate_debate_venues(self, event):\n        round = Round.objects.get(pk=event['extra']['round_id'])\n        group = event['extra']['group_name']\n        if round.draw_status == Round.Status.RELEASED:\n            self.return_error(group, _(\"Draw is already released, unrelease draw to assign rooms.\"))\n            return\n        if round.draw_status != Round.Status.CONFIRMED:\n            self.return_error(group, _(\"Draw is not confirmed, confirm draw to assign rooms.\"))\n            return",
        "detail": "tabbycat.venues.consumers",
        "documentation": {}
    },
    {
        "label": "venuecategoryform_factory",
        "kind": 2,
        "importPath": "tabbycat.venues.forms",
        "description": "tabbycat.venues.forms",
        "peekOfCode": "def venuecategoryform_factory(venues_queryset):\n    venue_choices = sorted(\n        [(venue.id, venue.display_name) for venue in venues_queryset],\n        key=lambda k: k[1],  # Sort by display name\n    )\n    class VenueCategoryForm(ModelForm):\n        venues = ModelMultipleChoiceField(queryset=venues_queryset,\n            widget=SelectMultiple(attrs={'size': 10}), required=False)\n        venues.choices = venue_choices  # can't be passed as keyword argument\n        class Meta:",
        "detail": "tabbycat.venues.forms",
        "documentation": {}
    },
    {
        "label": "Venue",
        "kind": 6,
        "importPath": "tabbycat.venues.models",
        "description": "tabbycat.venues.models",
        "peekOfCode": "class Venue(models.Model):\n    name = models.CharField(max_length=40,\n        verbose_name=_(\"name\"))\n    priority = models.IntegerField(\n        verbose_name=_(\"priority\"),\n        help_text=_(\"Rooms with a higher priority number will be preferred when allocating rooms to debates\"))\n    tournament = models.ForeignKey('tournaments.Tournament', models.CASCADE,\n        null=True, db_index=True,\n        verbose_name=_(\"tournament\"))\n    url = models.URLField(verbose_name=_(\"URL\"), blank=True,",
        "detail": "tabbycat.venues.models",
        "documentation": {}
    },
    {
        "label": "VenueCategory",
        "kind": 6,
        "importPath": "tabbycat.venues.models",
        "description": "tabbycat.venues.models",
        "peekOfCode": "class VenueCategory(models.Model):\n    \"\"\"Represents a category of venues, typically used for (physical real-world)\n    navigation aid and/or venue constraints.\"\"\"\n    DISPLAY_NONE = '-'\n    DISPLAY_PREFIX = 'P'\n    DISPLAY_SUFFIX = 'S'\n    DISPLAY_IN_VENUE_NAME_CHOICES = ((DISPLAY_NONE, _(\"Don't display in room name\")),\n                                     (DISPLAY_PREFIX, _(\"Display as prefix\")),\n                                     (DISPLAY_SUFFIX, _(\"Display as suffix\")))\n    name = models.CharField(max_length=80,",
        "detail": "tabbycat.venues.models",
        "documentation": {}
    },
    {
        "label": "VenueConstraintManager",
        "kind": 6,
        "importPath": "tabbycat.venues.models",
        "description": "tabbycat.venues.models",
        "peekOfCode": "class VenueConstraintManager(models.Manager):\n    def filter_for_debates(self, debates):\n        \"\"\"Convenience function. Filters for all constraints relevant to the\n        given iterable of debates.\"\"\"\n        return VenueConstraint.objects.filter(\n            models.Q(team__debateteam__debate__in=debates) |\n            models.Q(institution__team__debateteam__debate__in=debates) |\n            models.Q(adjudicator__debateadjudicator__debate__in=debates),\n        ).distinct()\nclass VenueConstraint(models.Model):",
        "detail": "tabbycat.venues.models",
        "documentation": {}
    },
    {
        "label": "VenueConstraint",
        "kind": 6,
        "importPath": "tabbycat.venues.models",
        "description": "tabbycat.venues.models",
        "peekOfCode": "class VenueConstraint(models.Model):\n    SUBJECT_CONTENT_TYPE_CHOICES = models.Q(app_label='participants', model='team') | \\\n                                   models.Q(app_label='participants', model='adjudicator') | \\\n                                   models.Q(app_label='participants', model='institution')\n    category = models.ForeignKey(VenueCategory, models.CASCADE,\n        verbose_name=_(\"category\"))\n    priority = models.IntegerField(verbose_name=_(\"priority\"))\n    subject_content_type = LabelByNameForeignKey(ContentType, models.CASCADE,\n        verbose_name=_(\"subject content type\"),\n        limit_choices_to=SUBJECT_CONTENT_TYPE_CHOICES)",
        "detail": "tabbycat.venues.models",
        "documentation": {}
    },
    {
        "label": "EditDebateVenuesDebateSerializer",
        "kind": 6,
        "importPath": "tabbycat.venues.serializers",
        "description": "tabbycat.venues.serializers",
        "peekOfCode": "class EditDebateVenuesDebateSerializer(DebateSerializerMixin):\n    \"\"\" Returns debates for the Edit Debate Teams view\"\"\"\n    # Only need the PK of the venues as they are fetched separately\n    venue = serializers.PrimaryKeyRelatedField(read_only=True)\nclass SimpleDebateVenueSerializer(DebateSerializerMixin):\n    venue = serializers.PrimaryKeyRelatedField(read_only=True)\n    class Meta:\n        model = DebateSerializerMixin.Meta.model\n        fields = ('id', 'venue')\nclass EditDebateVenuesVenueSerializer(VenueSerializer, VueDraggableItemMixin):",
        "detail": "tabbycat.venues.serializers",
        "documentation": {}
    },
    {
        "label": "SimpleDebateVenueSerializer",
        "kind": 6,
        "importPath": "tabbycat.venues.serializers",
        "description": "tabbycat.venues.serializers",
        "peekOfCode": "class SimpleDebateVenueSerializer(DebateSerializerMixin):\n    venue = serializers.PrimaryKeyRelatedField(read_only=True)\n    class Meta:\n        model = DebateSerializerMixin.Meta.model\n        fields = ('id', 'venue')\nclass EditDebateVenuesVenueSerializer(VenueSerializer, VueDraggableItemMixin):\n    \"\"\" Returns venues for use in the allocate Debate Venues view \"\"\"\n    class Meta:\n        model = VenueSerializer.Meta.model\n        fields = (*VenueSerializer.Meta.fields,",
        "detail": "tabbycat.venues.serializers",
        "documentation": {}
    },
    {
        "label": "EditDebateVenuesVenueSerializer",
        "kind": 6,
        "importPath": "tabbycat.venues.serializers",
        "description": "tabbycat.venues.serializers",
        "peekOfCode": "class EditDebateVenuesVenueSerializer(VenueSerializer, VueDraggableItemMixin):\n    \"\"\" Returns venues for use in the allocate Debate Venues view \"\"\"\n    class Meta:\n        model = VenueSerializer.Meta.model\n        fields = (*VenueSerializer.Meta.fields,\n                  *VueDraggableItemMixin.Meta.fields,\n                  'priority')",
        "detail": "tabbycat.venues.serializers",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "tabbycat.venues.urls_admin",
        "description": "tabbycat.venues.urls_admin",
        "peekOfCode": "urlpatterns = [\n    path('round/<int:round_seq>/edit/',\n        views.EditDebateVenuesView.as_view(),\n        name='edit-debate-venues'),\n    path('categories/',\n        views.VenueCategoriesView.as_view(),\n        name='venues-categories'),\n    path('constraints/',\n        views.VenueConstraintsView.as_view(),\n        name='venues-constraints'),",
        "detail": "tabbycat.venues.urls_admin",
        "documentation": {}
    },
    {
        "label": "venue_conflicts_display",
        "kind": 2,
        "importPath": "tabbycat.venues.utils",
        "description": "tabbycat.venues.utils",
        "peekOfCode": "def venue_conflicts_display(debates):\n    \"\"\"Returns a dict mapping elements (debates) in `debates` to a list of\n    strings of explaining unfulfilled venue constraints for participants that\n    debate. A venue constraint (or more precisely, a set of venue constraints\n    relating to a single participant) is \"unfulfilled\" if the relevant\n    participant had constraints and *none* of their constraints were met.\"\"\"\n    constraints = {}\n    for vc in VenueConstraint.objects.filter_for_debates(debates).select_related('category'):\n        constraints.setdefault((vc.subject_content_type_id, vc.subject_id), []).append(vc)\n    def _add_constraint_message(debate, instance, venue, success_message, failure_message, message_args):",
        "detail": "tabbycat.venues.utils",
        "documentation": {}
    },
    {
        "label": "EditDebateVenuesView",
        "kind": 6,
        "importPath": "tabbycat.venues.views",
        "description": "tabbycat.venues.views",
        "peekOfCode": "class EditDebateVenuesView(DebateDragAndDropMixin, AdministratorMixin, TemplateView):\n    view_permission = Permission.VIEW_ROOMALLOCATIONS\n    template_name = \"edit_debate_venues.html\"\n    page_title = gettext_lazy(\"Edit Rooms\")\n    prefetch_venues = False # Fetched in full as get_serialised\n    def debates_or_panels_factory(self, debates):\n        return EditDebateVenuesDebateSerializer(\n            debates, many=True, context={'sides': self.tournament.sides})\n    def get_serialised_allocatable_items(self):\n        venues = Venue.objects.filter(tournament=self.tournament).prefetch_related('venuecategory_set')",
        "detail": "tabbycat.venues.views",
        "documentation": {}
    },
    {
        "label": "VenueCategoriesView",
        "kind": 6,
        "importPath": "tabbycat.venues.views",
        "description": "tabbycat.venues.views",
        "peekOfCode": "class VenueCategoriesView(LogActionMixin, AdministratorMixin, TournamentMixin, ModelFormSetView):\n    view_permission = Permission.VIEW_ROOMCATEGORIES\n    edit_permission = Permission.EDIT_ROOMCATEGORIES\n    template_name = 'venue_categories_edit.html'\n    formset_model = VenueCategory\n    action_log_type = ActionLogEntry.ActionType.VENUE_CATEGORIES_EDIT\n    def get_formset_factory_kwargs(self):\n        queryset = self.tournament.relevant_venues.prefetch_related('venuecategory_set')\n        formset_factory_kwargs = {\n            'form': venuecategoryform_factory(venues_queryset=queryset),",
        "detail": "tabbycat.venues.views",
        "documentation": {}
    },
    {
        "label": "VenueConstraintsView",
        "kind": 6,
        "importPath": "tabbycat.venues.views",
        "description": "tabbycat.venues.views",
        "peekOfCode": "class VenueConstraintsView(AdministratorMixin, LogActionMixin, TournamentMixin, ModelFormSetView):\n    view_permission = Permission.VIEW_ROOMCONSTRAINTS\n    edit_permission = Permission.EDIT_ROOMCONSTRAINTS\n    template_name = 'venue_constraints_edit.html'\n    formset_model = VenueConstraint\n    action_log_type = ActionLogEntry.ActionType.VENUE_CONSTRAINTS_EDIT\n    def get_formset_factory_kwargs(self):\n        # Need to build a dynamic choices list for the widget; so override the\n        # standard method of getting args\n        formset_factory_kwargs = {",
        "detail": "tabbycat.venues.views",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "tabbycat.venues.views",
        "description": "tabbycat.venues.views",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass EditDebateVenuesView(DebateDragAndDropMixin, AdministratorMixin, TemplateView):\n    view_permission = Permission.VIEW_ROOMALLOCATIONS\n    template_name = \"edit_debate_venues.html\"\n    page_title = gettext_lazy(\"Edit Rooms\")\n    prefetch_venues = False # Fetched in full as get_serialised\n    def debates_or_panels_factory(self, debates):\n        return EditDebateVenuesDebateSerializer(\n            debates, many=True, context={'sides': self.tournament.sides})\n    def get_serialised_allocatable_items(self):",
        "detail": "tabbycat.venues.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "tabbycat.asgi",
        "description": "tabbycat.asgi",
        "peekOfCode": "application = ProtocolTypeRouter({\n    # Django's ASGI application to handle traditional HTTP requests\n    \"http\": get_asgi_application(),\n    # WebSocket handlers\n    \"websocket\": AuthMiddlewareStack(\n        URLRouter([\n            # TournamentOverviewContainer\n            re_path(r'^ws/(?P<tournament_slug>[-\\w_]+)/action_logs/$', ActionLogEntryConsumer.as_asgi()),\n            re_path(r'^ws/(?P<tournament_slug>[-\\w_]+)/ballot_results/$', BallotResultConsumer.as_asgi()),\n            re_path(r'^ws/(?P<tournament_slug>[-\\w_]+)/ballot_statuses/$', BallotStatusConsumer.as_asgi()),",
        "detail": "tabbycat.asgi",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 5,
        "importPath": "tabbycat.run-asgi",
        "description": "tabbycat.run-asgi",
        "peekOfCode": "root = logging.getLogger()\nroot.setLevel(logging.DEBUG)\nch = logging.StreamHandler(sys.stdout)\nch.setLevel(logging.DEBUG)\nformatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\nch.setFormatter(formatter)\nroot.addHandler(ch)\n# ==============================================================================\n# Uvicorn Setup\n# ==============================================================================",
        "detail": "tabbycat.run-asgi",
        "documentation": {}
    },
    {
        "label": "ch",
        "kind": 5,
        "importPath": "tabbycat.run-asgi",
        "description": "tabbycat.run-asgi",
        "peekOfCode": "ch = logging.StreamHandler(sys.stdout)\nch.setLevel(logging.DEBUG)\nformatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\nch.setFormatter(formatter)\nroot.addHandler(ch)\n# ==============================================================================\n# Uvicorn Setup\n# ==============================================================================\n# import uvicorn # noqa: E402\n# Start Uvicorn. Render deploys must bind to 0.0 not localhost or 127.0",
        "detail": "tabbycat.run-asgi",
        "documentation": {}
    },
    {
        "label": "formatter",
        "kind": 5,
        "importPath": "tabbycat.run-asgi",
        "description": "tabbycat.run-asgi",
        "peekOfCode": "formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\nch.setFormatter(formatter)\nroot.addHandler(ch)\n# ==============================================================================\n# Uvicorn Setup\n# ==============================================================================\n# import uvicorn # noqa: E402\n# Start Uvicorn. Render deploys must bind to 0.0 not localhost or 127.0\n# root.info('TC_DEPLOY: Initialising uvicorn')\n# uvicorn.run(\"asgi:application\", log_level=\"info\", host=\"0.0.0.0\", proxy_headers=True)",
        "detail": "tabbycat.run-asgi",
        "documentation": {}
    },
    {
        "label": "on_user_logged_in",
        "kind": 2,
        "importPath": "tabbycat.urls",
        "description": "tabbycat.urls",
        "peekOfCode": "def on_user_logged_in(sender, request, **kwargs):\n    if not urlparse(request.META.get('HTTP_REFERER')).path == '/accounts/login/':\n        # The message is extraneous when their account was just created\n        return\n    if kwargs.get('user'):\n        messages.info(request,\n            _(\"Hi, %(user)s — you just logged in!\")  % {'user': kwargs['user'].username},\n            fail_silently=True)\n    else: # should never happen, but just in case\n        messages.info(request, _(\"Welcome! You just logged in!\"), fail_silently=True)",
        "detail": "tabbycat.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "tabbycat.urls",
        "description": "tabbycat.urls",
        "peekOfCode": "urlpatterns = [\n    # Indices\n    path('',\n        tournaments.views.PublicSiteIndexView.as_view(),\n        name='tabbycat-index'),\n    path('start/',\n        BlankSiteStartView.as_view(),\n        name='blank-site-start'),\n    path('create/',\n        tournaments.views.CreateTournamentView.as_view(),",
        "detail": "tabbycat.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "tabbycat.wsgi",
        "description": "tabbycat.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "tabbycat.wsgi",
        "documentation": {}
    },
    {
        "label": "print_command",
        "kind": 2,
        "importPath": "deploy_heroku",
        "description": "deploy_heroku",
        "peekOfCode": "def print_command(command):\n    message = \"$ \" + \" \".join(command)\n    if use_color:\n        message = \"\\033[1;36m\" + message + \"\\033[0m\"\n    print(message)\ndef run_command(command):\n    print_command(command)\n    if not args.dry_run:\n        subprocess.check_call(command, **subprocess_kwargs)\ndef make_heroku_command(command):",
        "detail": "deploy_heroku",
        "documentation": {}
    },
    {
        "label": "run_command",
        "kind": 2,
        "importPath": "deploy_heroku",
        "description": "deploy_heroku",
        "peekOfCode": "def run_command(command):\n    print_command(command)\n    if not args.dry_run:\n        subprocess.check_call(command, **subprocess_kwargs)\ndef make_heroku_command(command):\n    return [\"heroku\"] + command + [\"--app\", urlname]\ndef run_heroku_command(command):\n    command = make_heroku_command(command)\n    run_command(command)\ndef get_output_from_command(command):",
        "detail": "deploy_heroku",
        "documentation": {}
    },
    {
        "label": "make_heroku_command",
        "kind": 2,
        "importPath": "deploy_heroku",
        "description": "deploy_heroku",
        "peekOfCode": "def make_heroku_command(command):\n    return [\"heroku\"] + command + [\"--app\", urlname]\ndef run_heroku_command(command):\n    command = make_heroku_command(command)\n    run_command(command)\ndef get_output_from_command(command):\n    print_command(command)\n    output = subprocess.check_output(command, **subprocess_kwargs)\n    output = output.decode()\n    sys.stdout.write(output)",
        "detail": "deploy_heroku",
        "documentation": {}
    },
    {
        "label": "run_heroku_command",
        "kind": 2,
        "importPath": "deploy_heroku",
        "description": "deploy_heroku",
        "peekOfCode": "def run_heroku_command(command):\n    command = make_heroku_command(command)\n    run_command(command)\ndef get_output_from_command(command):\n    print_command(command)\n    output = subprocess.check_output(command, **subprocess_kwargs)\n    output = output.decode()\n    sys.stdout.write(output)\n    sys.stdout.flush()\n    return output",
        "detail": "deploy_heroku",
        "documentation": {}
    },
    {
        "label": "get_output_from_command",
        "kind": 2,
        "importPath": "deploy_heroku",
        "description": "deploy_heroku",
        "peekOfCode": "def get_output_from_command(command):\n    print_command(command)\n    output = subprocess.check_output(command, **subprocess_kwargs)\n    output = output.decode()\n    sys.stdout.write(output)\n    sys.stdout.flush()\n    return output\ndef print_yellow(message):\n    if use_color:\n        message = \"\\033[1;33m\" + message + \"\\033[0m\"",
        "detail": "deploy_heroku",
        "documentation": {}
    },
    {
        "label": "print_yellow",
        "kind": 2,
        "importPath": "deploy_heroku",
        "description": "deploy_heroku",
        "peekOfCode": "def print_yellow(message):\n    if use_color:\n        message = \"\\033[1;33m\" + message + \"\\033[0m\"\n    print(message)\ndef get_git_push_spec():\n    if args.git_branch:\n        return \"master\" if args.git_branch == \"master\" else args.git_branch + \":master\"\n    try:\n        branch = get_output_from_command([\"git\", \"symbolic-ref\", \"--short\", \"--quiet\", \"HEAD\"]).strip()\n    except subprocess.CalledProcessError:",
        "detail": "deploy_heroku",
        "documentation": {}
    },
    {
        "label": "get_git_push_spec",
        "kind": 2,
        "importPath": "deploy_heroku",
        "description": "deploy_heroku",
        "peekOfCode": "def get_git_push_spec():\n    if args.git_branch:\n        return \"master\" if args.git_branch == \"master\" else args.git_branch + \":master\"\n    try:\n        branch = get_output_from_command([\"git\", \"symbolic-ref\", \"--short\", \"--quiet\", \"HEAD\"]).strip()\n    except subprocess.CalledProcessError:\n        print_yellow(\"Attempt to find git branch name failed, trying for commit instead...\")\n    else:\n        return \"master\" if branch == \"master\" else branch + \":master\"\n    try:",
        "detail": "deploy_heroku",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "deploy_heroku",
        "description": "deploy_heroku",
        "peekOfCode": "parser = argparse.ArgumentParser(description=\"Deploy Tabbycat to a new Heroku app.\")\nparser.add_argument(\n    \"urlname\", type=str,\n    help=\"Name of the Heroku app. The app will be at urlname.herokuapp.com. Use '-' to use a Heroku-generated default.\")\nparser.add_argument(\n    \"--no-open\", action=\"store_false\", default=True, dest=\"open\",\n    help=\"Don't open the Heroku website in your browser at the end\")\nparser.add_argument(\n    \"--git-remote\", type=str, default=None,\n    help=\"Name of Git remote to use. Use '-' to use the urlname. If omitted, reverts to default Heroku behaviour.\")",
        "detail": "deploy_heroku",
        "documentation": {}
    },
    {
        "label": "config_group",
        "kind": 5,
        "importPath": "deploy_heroku",
        "description": "deploy_heroku",
        "peekOfCode": "config_group = parser.add_argument_group(\"heroku configuration settings\")\nconfig_group.add_argument(\"--fast-cache-timeout\", type=int, default=None, metavar=\"TIMEOUT\",\n                          help=\"Set the faster public page cache timeout to TIMEOUT\")\nconfig_group.add_argument(\"--slow-cache-timeout\", type=int, default=None, metavar=\"TIMEOUT\",\n                          help=\"Set the slower public page cache timeout to TIMEOUT\")\nconfig_group.add_argument(\"--tab-cache-timeout\", type=int, default=None, metavar=\"TIMEOUT\",\n                          help=\"Set the tab page cache timeout to TIMEOUT\")\nconfig_group.add_argument(\"--enable-debug\", action=\"store_true\", default=False,\n                          help=\"Enable Django debug pages\")\nconfig_group.add_argument(\"--time-zone\", type=str, default=\"Australia/Melbourne\",",
        "detail": "deploy_heroku",
        "documentation": {}
    },
    {
        "label": "import_tournament_group",
        "kind": 5,
        "importPath": "deploy_heroku",
        "description": "deploy_heroku",
        "peekOfCode": "import_tournament_group = parser.add_argument_group(\n    \"import tournament options\",\n    \"Passed to the importtournament command. Ignored unless \" +\n    \"--import-tournament is used. Provided for convenience; to use other \" +\n    \"importtournament options, run the importtournament command separately instead.\")\nimport_tournament_group.add_argument(\n    '-s', '--slug', type=str, action='store', default=None, dest=\"tournament_slug\",\n    help='Override tournament slug. (Default: use name of directory.)')\nimport_tournament_group.add_argument(\n    '--name', type=str, action='store', default=None, dest=\"tournament_name\",",
        "detail": "deploy_heroku",
        "documentation": {}
    },
    {
        "label": "args",
        "kind": 5,
        "importPath": "deploy_heroku",
        "description": "deploy_heroku",
        "peekOfCode": "args = parser.parse_args()\nif platform.system() == \"Windows\":\n    subprocess_kwargs = dict(shell=True)\n    use_color = False\nelse:\n    subprocess_kwargs = dict()\n    use_color = True\n# Helper functions\ndef print_command(command):\n    message = \"$ \" + \" \".join(command)",
        "detail": "deploy_heroku",
        "documentation": {}
    },
    {
        "label": "addons",
        "kind": 5,
        "importPath": "deploy_heroku",
        "description": "deploy_heroku",
        "peekOfCode": "addons = [\"papertrail\", \"heroku-postgresql:%s\" % args.pg_plan, \"rediscloud:30\", \"heroku-redis:mini\"]\ncommand = [\"heroku\", \"apps:create\", \"--stack\", \"heroku-22\"]\nif addons:\n    command.extend([\"--addons\", \",\".join(addons)])\nif args.urlname != \"-\":\n    command.append(args.urlname)\noutput = get_output_from_command(command)\nmatch = re.search(r\"https://([\\w_-]+?)(?:-\\w{12})?\\.herokuapp\\.com/\\s+\\|\\s+(https://git.heroku.com/[\\w_-]+.git)\", output)\nurlname = match.group(1)\nheroku_url = match.group(2)",
        "detail": "deploy_heroku",
        "documentation": {}
    },
    {
        "label": "command",
        "kind": 5,
        "importPath": "deploy_heroku",
        "description": "deploy_heroku",
        "peekOfCode": "command = [\"heroku\", \"apps:create\", \"--stack\", \"heroku-22\"]\nif addons:\n    command.extend([\"--addons\", \",\".join(addons)])\nif args.urlname != \"-\":\n    command.append(args.urlname)\noutput = get_output_from_command(command)\nmatch = re.search(r\"https://([\\w_-]+?)(?:-\\w{12})?\\.herokuapp\\.com/\\s+\\|\\s+(https://git.heroku.com/[\\w_-]+.git)\", output)\nurlname = match.group(1)\nheroku_url = match.group(2)\n# Set build packs",
        "detail": "deploy_heroku",
        "documentation": {}
    },
    {
        "label": "output",
        "kind": 5,
        "importPath": "deploy_heroku",
        "description": "deploy_heroku",
        "peekOfCode": "output = get_output_from_command(command)\nmatch = re.search(r\"https://([\\w_-]+?)(?:-\\w{12})?\\.herokuapp\\.com/\\s+\\|\\s+(https://git.heroku.com/[\\w_-]+.git)\", output)\nurlname = match.group(1)\nheroku_url = match.group(2)\n# Set build packs\nrun_heroku_command([\"buildpacks:set\", \"https://github.com/heroku/heroku-buildpack-nginx.git\"])\nrun_heroku_command([\"buildpacks:add\", \"heroku/nodejs\"])\nrun_heroku_command([\"buildpacks:add\", \"heroku/python\"])\n# Set config variables\ncommand = [\"config:set\", \"DISABLE_COLLECTSTATIC=1\", \"ON_HEROKU=1\", \"USING_NGINX=1\"]",
        "detail": "deploy_heroku",
        "documentation": {}
    },
    {
        "label": "match",
        "kind": 5,
        "importPath": "deploy_heroku",
        "description": "deploy_heroku",
        "peekOfCode": "match = re.search(r\"https://([\\w_-]+?)(?:-\\w{12})?\\.herokuapp\\.com/\\s+\\|\\s+(https://git.heroku.com/[\\w_-]+.git)\", output)\nurlname = match.group(1)\nheroku_url = match.group(2)\n# Set build packs\nrun_heroku_command([\"buildpacks:set\", \"https://github.com/heroku/heroku-buildpack-nginx.git\"])\nrun_heroku_command([\"buildpacks:add\", \"heroku/nodejs\"])\nrun_heroku_command([\"buildpacks:add\", \"heroku/python\"])\n# Set config variables\ncommand = [\"config:set\", \"DISABLE_COLLECTSTATIC=1\", \"ON_HEROKU=1\", \"USING_NGINX=1\"]\nsecret_key = get_random_secret_key()",
        "detail": "deploy_heroku",
        "documentation": {}
    },
    {
        "label": "urlname",
        "kind": 5,
        "importPath": "deploy_heroku",
        "description": "deploy_heroku",
        "peekOfCode": "urlname = match.group(1)\nheroku_url = match.group(2)\n# Set build packs\nrun_heroku_command([\"buildpacks:set\", \"https://github.com/heroku/heroku-buildpack-nginx.git\"])\nrun_heroku_command([\"buildpacks:add\", \"heroku/nodejs\"])\nrun_heroku_command([\"buildpacks:add\", \"heroku/python\"])\n# Set config variables\ncommand = [\"config:set\", \"DISABLE_COLLECTSTATIC=1\", \"ON_HEROKU=1\", \"USING_NGINX=1\"]\nsecret_key = get_random_secret_key()\nif platform.system() == \"Windows\": # Windows shell needs escaping",
        "detail": "deploy_heroku",
        "documentation": {}
    },
    {
        "label": "heroku_url",
        "kind": 5,
        "importPath": "deploy_heroku",
        "description": "deploy_heroku",
        "peekOfCode": "heroku_url = match.group(2)\n# Set build packs\nrun_heroku_command([\"buildpacks:set\", \"https://github.com/heroku/heroku-buildpack-nginx.git\"])\nrun_heroku_command([\"buildpacks:add\", \"heroku/nodejs\"])\nrun_heroku_command([\"buildpacks:add\", \"heroku/python\"])\n# Set config variables\ncommand = [\"config:set\", \"DISABLE_COLLECTSTATIC=1\", \"ON_HEROKU=1\", \"USING_NGINX=1\"]\nsecret_key = get_random_secret_key()\nif platform.system() == \"Windows\": # Windows shell needs escaping\n    command.append(\"DJANGO_SECRET_KEY=\\\"%s\\\"\" % secret_key)",
        "detail": "deploy_heroku",
        "documentation": {}
    },
    {
        "label": "command",
        "kind": 5,
        "importPath": "deploy_heroku",
        "description": "deploy_heroku",
        "peekOfCode": "command = [\"config:set\", \"DISABLE_COLLECTSTATIC=1\", \"ON_HEROKU=1\", \"USING_NGINX=1\"]\nsecret_key = get_random_secret_key()\nif platform.system() == \"Windows\": # Windows shell needs escaping\n    command.append(\"DJANGO_SECRET_KEY=\\\"%s\\\"\" % secret_key)\nelse:\n    command.append(\"DJANGO_SECRET_KEY=%s\" % secret_key)\ncommand.append(\"DEBUG=1\" if args.enable_debug else \"DEBUG=0\")\nif args.fast_cache_timeout:\n    command.append(\"PUBLIC_FAST_CACHE_TIMEOUT=%d\" % args.fast_cache_timeout)\nif args.slow_cache_timeout:",
        "detail": "deploy_heroku",
        "documentation": {}
    },
    {
        "label": "secret_key",
        "kind": 5,
        "importPath": "deploy_heroku",
        "description": "deploy_heroku",
        "peekOfCode": "secret_key = get_random_secret_key()\nif platform.system() == \"Windows\": # Windows shell needs escaping\n    command.append(\"DJANGO_SECRET_KEY=\\\"%s\\\"\" % secret_key)\nelse:\n    command.append(\"DJANGO_SECRET_KEY=%s\" % secret_key)\ncommand.append(\"DEBUG=1\" if args.enable_debug else \"DEBUG=0\")\nif args.fast_cache_timeout:\n    command.append(\"PUBLIC_FAST_CACHE_TIMEOUT=%d\" % args.fast_cache_timeout)\nif args.slow_cache_timeout:\n    command.append(\"PUBLIC_SLOW_CACHE_TIMEOUT=%d\" % args.slow_cache_timeout)",
        "detail": "deploy_heroku",
        "documentation": {}
    },
    {
        "label": "redis_provisioned",
        "kind": 5,
        "importPath": "deploy_heroku",
        "description": "deploy_heroku",
        "peekOfCode": "redis_provisioned = False\nredis_status_command = make_heroku_command([\"redis:info\"])\nprint_yellow(\"Waiting for Heroku Redis to provision (may take up to 5 minutes)...\")\nwhile not redis_provisioned:\n    time.sleep(30)\n    redis_output = subprocess.check_output(redis_status_command).decode().split(\"\\n\")\n    redis_provisioned = \"available\" in redis_output[2]\nprint(\"Heroku Redis is available, starting deployment\")\n# Push source code to Heroku\npush_spec = get_git_push_spec()",
        "detail": "deploy_heroku",
        "documentation": {}
    },
    {
        "label": "redis_status_command",
        "kind": 5,
        "importPath": "deploy_heroku",
        "description": "deploy_heroku",
        "peekOfCode": "redis_status_command = make_heroku_command([\"redis:info\"])\nprint_yellow(\"Waiting for Heroku Redis to provision (may take up to 5 minutes)...\")\nwhile not redis_provisioned:\n    time.sleep(30)\n    redis_output = subprocess.check_output(redis_status_command).decode().split(\"\\n\")\n    redis_provisioned = \"available\" in redis_output[2]\nprint(\"Heroku Redis is available, starting deployment\")\n# Push source code to Heroku\npush_spec = get_git_push_spec()\nrun_command([\"git\", \"push\", remote_name, push_spec])",
        "detail": "deploy_heroku",
        "documentation": {}
    },
    {
        "label": "push_spec",
        "kind": 5,
        "importPath": "deploy_heroku",
        "description": "deploy_heroku",
        "peekOfCode": "push_spec = get_git_push_spec()\nrun_command([\"git\", \"push\", remote_name, push_spec])\n# Scale dynos (by default it only adds 1 web dyno)\nrun_heroku_command([\"ps:scale\", \"worker=1\", \"web=%s\" % args.web_dynos])\n# Import tournament, if provided\nif args.import_tournament:\n    command = [\"run\", \"python\", \"tabbycat/manage.py\", \"importtournament\", args.import_tournament]\n    if args.tournament_slug:\n        command += [\"--slug\", args.tournament_slug]\n    if args.tournament_name:",
        "detail": "deploy_heroku",
        "documentation": {}
    }
]